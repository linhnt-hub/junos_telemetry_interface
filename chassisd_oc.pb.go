// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: chassisd_oc.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Components struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Component     []*ComponentsComponentList `protobuf:"bytes,151,rep,name=component" json:"component,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Components) Reset() {
	*x = Components{}
	mi := &file_chassisd_oc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Components) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components) ProtoMessage() {}

func (x *Components) ProtoReflect() protoreflect.Message {
	mi := &file_chassisd_oc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components.ProtoReflect.Descriptor instead.
func (*Components) Descriptor() ([]byte, []int) {
	return file_chassisd_oc_proto_rawDescGZIP(), []int{0}
}

func (x *Components) GetComponent() []*ComponentsComponentList {
	if x != nil {
		return x.Component
	}
	return nil
}

type ComponentsComponentList struct {
	state         protoimpl.MessageState                    `protogen:"open.v1"`
	Name          *string                                   `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	State         *ComponentsComponentListStateType         `protobuf:"bytes,152,opt,name=state" json:"state,omitempty"`
	Properties    *ComponentsComponentListPropertiesType    `protobuf:"bytes,156,opt,name=properties" json:"properties,omitempty"`
	Subcomponents *ComponentsComponentListSubcomponentsType `protobuf:"bytes,153,opt,name=subcomponents" json:"subcomponents,omitempty"`
	Transceiver   *ComponentsComponentListTransceiverType   `protobuf:"bytes,161,opt,name=transceiver" json:"transceiver,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentsComponentList) Reset() {
	*x = ComponentsComponentList{}
	mi := &file_chassisd_oc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentsComponentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentsComponentList) ProtoMessage() {}

func (x *ComponentsComponentList) ProtoReflect() protoreflect.Message {
	mi := &file_chassisd_oc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentsComponentList.ProtoReflect.Descriptor instead.
func (*ComponentsComponentList) Descriptor() ([]byte, []int) {
	return file_chassisd_oc_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ComponentsComponentList) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ComponentsComponentList) GetState() *ComponentsComponentListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ComponentsComponentList) GetProperties() *ComponentsComponentListPropertiesType {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *ComponentsComponentList) GetSubcomponents() *ComponentsComponentListSubcomponentsType {
	if x != nil {
		return x.Subcomponents
	}
	return nil
}

func (x *ComponentsComponentList) GetTransceiver() *ComponentsComponentListTransceiverType {
	if x != nil {
		return x.Transceiver
	}
	return nil
}

type ComponentsComponentListStateType struct {
	state           protoimpl.MessageState                           `protogen:"open.v1"`
	Name            *string                                          `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	Type            *string                                          `protobuf:"bytes,52,opt,name=type" json:"type,omitempty"`
	Id              *string                                          `protobuf:"bytes,53,opt,name=id" json:"id,omitempty"`
	Location        *string                                          `protobuf:"bytes,54,opt,name=location" json:"location,omitempty"`
	Description     *string                                          `protobuf:"bytes,55,opt,name=description" json:"description,omitempty"`
	MfgName         *string                                          `protobuf:"bytes,56,opt,name=mfg_name,json=mfgName" json:"mfg_name,omitempty"`
	MfgDate         *string                                          `protobuf:"bytes,57,opt,name=mfg_date,json=mfgDate" json:"mfg_date,omitempty"`
	HardwareVersion *string                                          `protobuf:"bytes,58,opt,name=hardware_version,json=hardwareVersion" json:"hardware_version,omitempty"`
	FirmwareVersion *string                                          `protobuf:"bytes,59,opt,name=firmware_version,json=firmwareVersion" json:"firmware_version,omitempty"`
	SoftwareVersion *string                                          `protobuf:"bytes,60,opt,name=software_version,json=softwareVersion" json:"software_version,omitempty"`
	SerialNo        *string                                          `protobuf:"bytes,61,opt,name=serial_no,json=serialNo" json:"serial_no,omitempty"`
	PartNo          *string                                          `protobuf:"bytes,62,opt,name=part_no,json=partNo" json:"part_no,omitempty"`
	Removable       *bool                                            `protobuf:"varint,63,opt,name=removable" json:"removable,omitempty"`
	OperStatus      *string                                          `protobuf:"bytes,64,opt,name=oper_status,json=operStatus" json:"oper_status,omitempty"`
	Empty           *bool                                            `protobuf:"varint,65,opt,name=empty" json:"empty,omitempty"`
	Parent          *string                                          `protobuf:"bytes,66,opt,name=parent" json:"parent,omitempty"`
	Temperature     *ComponentsComponentListStateTypeTemperatureType `protobuf:"bytes,160,opt,name=temperature" json:"temperature,omitempty"`
	Memory          *ComponentsComponentListStateTypeMemoryType      `protobuf:"bytes,170,opt,name=memory" json:"memory,omitempty"`
	AllocatedPower  *uint32                                          `protobuf:"varint,67,opt,name=allocated_power,json=allocatedPower" json:"allocated_power,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ComponentsComponentListStateType) Reset() {
	*x = ComponentsComponentListStateType{}
	mi := &file_chassisd_oc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentsComponentListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentsComponentListStateType) ProtoMessage() {}

func (x *ComponentsComponentListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_chassisd_oc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentsComponentListStateType.ProtoReflect.Descriptor instead.
func (*ComponentsComponentListStateType) Descriptor() ([]byte, []int) {
	return file_chassisd_oc_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *ComponentsComponentListStateType) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ComponentsComponentListStateType) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *ComponentsComponentListStateType) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ComponentsComponentListStateType) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *ComponentsComponentListStateType) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ComponentsComponentListStateType) GetMfgName() string {
	if x != nil && x.MfgName != nil {
		return *x.MfgName
	}
	return ""
}

func (x *ComponentsComponentListStateType) GetMfgDate() string {
	if x != nil && x.MfgDate != nil {
		return *x.MfgDate
	}
	return ""
}

func (x *ComponentsComponentListStateType) GetHardwareVersion() string {
	if x != nil && x.HardwareVersion != nil {
		return *x.HardwareVersion
	}
	return ""
}

func (x *ComponentsComponentListStateType) GetFirmwareVersion() string {
	if x != nil && x.FirmwareVersion != nil {
		return *x.FirmwareVersion
	}
	return ""
}

func (x *ComponentsComponentListStateType) GetSoftwareVersion() string {
	if x != nil && x.SoftwareVersion != nil {
		return *x.SoftwareVersion
	}
	return ""
}

func (x *ComponentsComponentListStateType) GetSerialNo() string {
	if x != nil && x.SerialNo != nil {
		return *x.SerialNo
	}
	return ""
}

func (x *ComponentsComponentListStateType) GetPartNo() string {
	if x != nil && x.PartNo != nil {
		return *x.PartNo
	}
	return ""
}

func (x *ComponentsComponentListStateType) GetRemovable() bool {
	if x != nil && x.Removable != nil {
		return *x.Removable
	}
	return false
}

func (x *ComponentsComponentListStateType) GetOperStatus() string {
	if x != nil && x.OperStatus != nil {
		return *x.OperStatus
	}
	return ""
}

func (x *ComponentsComponentListStateType) GetEmpty() bool {
	if x != nil && x.Empty != nil {
		return *x.Empty
	}
	return false
}

func (x *ComponentsComponentListStateType) GetParent() string {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return ""
}

func (x *ComponentsComponentListStateType) GetTemperature() *ComponentsComponentListStateTypeTemperatureType {
	if x != nil {
		return x.Temperature
	}
	return nil
}

func (x *ComponentsComponentListStateType) GetMemory() *ComponentsComponentListStateTypeMemoryType {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *ComponentsComponentListStateType) GetAllocatedPower() uint32 {
	if x != nil && x.AllocatedPower != nil {
		return *x.AllocatedPower
	}
	return 0
}

type ComponentsComponentListPropertiesType struct {
	state         protoimpl.MessageState                               `protogen:"open.v1"`
	Property      []*ComponentsComponentListPropertiesTypePropertyList `protobuf:"bytes,151,rep,name=property" json:"property,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentsComponentListPropertiesType) Reset() {
	*x = ComponentsComponentListPropertiesType{}
	mi := &file_chassisd_oc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentsComponentListPropertiesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentsComponentListPropertiesType) ProtoMessage() {}

func (x *ComponentsComponentListPropertiesType) ProtoReflect() protoreflect.Message {
	mi := &file_chassisd_oc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentsComponentListPropertiesType.ProtoReflect.Descriptor instead.
func (*ComponentsComponentListPropertiesType) Descriptor() ([]byte, []int) {
	return file_chassisd_oc_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *ComponentsComponentListPropertiesType) GetProperty() []*ComponentsComponentListPropertiesTypePropertyList {
	if x != nil {
		return x.Property
	}
	return nil
}

type ComponentsComponentListSubcomponentsType struct {
	state         protoimpl.MessageState                                      `protogen:"open.v1"`
	Subcomponent  []*ComponentsComponentListSubcomponentsTypeSubcomponentList `protobuf:"bytes,151,rep,name=subcomponent" json:"subcomponent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentsComponentListSubcomponentsType) Reset() {
	*x = ComponentsComponentListSubcomponentsType{}
	mi := &file_chassisd_oc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentsComponentListSubcomponentsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentsComponentListSubcomponentsType) ProtoMessage() {}

func (x *ComponentsComponentListSubcomponentsType) ProtoReflect() protoreflect.Message {
	mi := &file_chassisd_oc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentsComponentListSubcomponentsType.ProtoReflect.Descriptor instead.
func (*ComponentsComponentListSubcomponentsType) Descriptor() ([]byte, []int) {
	return file_chassisd_oc_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *ComponentsComponentListSubcomponentsType) GetSubcomponent() []*ComponentsComponentListSubcomponentsTypeSubcomponentList {
	if x != nil {
		return x.Subcomponent
	}
	return nil
}

type ComponentsComponentListTransceiverType struct {
	state            protoimpl.MessageState                                      `protogen:"open.v1"`
	State            *ComponentsComponentListTransceiverTypeStateType            `protobuf:"bytes,162,opt,name=state" json:"state,omitempty"`
	PhysicalChannels *ComponentsComponentListTransceiverTypePhysicalChannelsType `protobuf:"bytes,191,opt,name=physical_channels,json=physicalChannels" json:"physical_channels,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ComponentsComponentListTransceiverType) Reset() {
	*x = ComponentsComponentListTransceiverType{}
	mi := &file_chassisd_oc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentsComponentListTransceiverType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentsComponentListTransceiverType) ProtoMessage() {}

func (x *ComponentsComponentListTransceiverType) ProtoReflect() protoreflect.Message {
	mi := &file_chassisd_oc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentsComponentListTransceiverType.ProtoReflect.Descriptor instead.
func (*ComponentsComponentListTransceiverType) Descriptor() ([]byte, []int) {
	return file_chassisd_oc_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (x *ComponentsComponentListTransceiverType) GetState() *ComponentsComponentListTransceiverTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ComponentsComponentListTransceiverType) GetPhysicalChannels() *ComponentsComponentListTransceiverTypePhysicalChannelsType {
	if x != nil {
		return x.PhysicalChannels
	}
	return nil
}

type ComponentsComponentListStateTypeTemperatureType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Instant       *float64               `protobuf:"fixed64,81,opt,name=instant" json:"instant,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentsComponentListStateTypeTemperatureType) Reset() {
	*x = ComponentsComponentListStateTypeTemperatureType{}
	mi := &file_chassisd_oc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentsComponentListStateTypeTemperatureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentsComponentListStateTypeTemperatureType) ProtoMessage() {}

func (x *ComponentsComponentListStateTypeTemperatureType) ProtoReflect() protoreflect.Message {
	mi := &file_chassisd_oc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentsComponentListStateTypeTemperatureType.ProtoReflect.Descriptor instead.
func (*ComponentsComponentListStateTypeTemperatureType) Descriptor() ([]byte, []int) {
	return file_chassisd_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *ComponentsComponentListStateTypeTemperatureType) GetInstant() float64 {
	if x != nil && x.Instant != nil {
		return *x.Instant
	}
	return 0
}

type ComponentsComponentListStateTypeMemoryType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Available     *uint64                `protobuf:"varint,91,opt,name=available" json:"available,omitempty"`
	Utilized      *uint64                `protobuf:"varint,92,opt,name=utilized" json:"utilized,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentsComponentListStateTypeMemoryType) Reset() {
	*x = ComponentsComponentListStateTypeMemoryType{}
	mi := &file_chassisd_oc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentsComponentListStateTypeMemoryType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentsComponentListStateTypeMemoryType) ProtoMessage() {}

func (x *ComponentsComponentListStateTypeMemoryType) ProtoReflect() protoreflect.Message {
	mi := &file_chassisd_oc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentsComponentListStateTypeMemoryType.ProtoReflect.Descriptor instead.
func (*ComponentsComponentListStateTypeMemoryType) Descriptor() ([]byte, []int) {
	return file_chassisd_oc_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *ComponentsComponentListStateTypeMemoryType) GetAvailable() uint64 {
	if x != nil && x.Available != nil {
		return *x.Available
	}
	return 0
}

func (x *ComponentsComponentListStateTypeMemoryType) GetUtilized() uint64 {
	if x != nil && x.Utilized != nil {
		return *x.Utilized
	}
	return 0
}

type ComponentsComponentListPropertiesTypePropertyList struct {
	state         protoimpl.MessageState                                      `protogen:"open.v1"`
	Name          *string                                                     `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	State         *ComponentsComponentListPropertiesTypePropertyListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentsComponentListPropertiesTypePropertyList) Reset() {
	*x = ComponentsComponentListPropertiesTypePropertyList{}
	mi := &file_chassisd_oc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentsComponentListPropertiesTypePropertyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentsComponentListPropertiesTypePropertyList) ProtoMessage() {}

func (x *ComponentsComponentListPropertiesTypePropertyList) ProtoReflect() protoreflect.Message {
	mi := &file_chassisd_oc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentsComponentListPropertiesTypePropertyList.ProtoReflect.Descriptor instead.
func (*ComponentsComponentListPropertiesTypePropertyList) Descriptor() ([]byte, []int) {
	return file_chassisd_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

func (x *ComponentsComponentListPropertiesTypePropertyList) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ComponentsComponentListPropertiesTypePropertyList) GetState() *ComponentsComponentListPropertiesTypePropertyListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type ComponentsComponentListPropertiesTypePropertyListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         *string                `protobuf:"bytes,51,opt,name=value" json:"value,omitempty"`
	Configurable  *bool                  `protobuf:"varint,52,opt,name=configurable" json:"configurable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentsComponentListPropertiesTypePropertyListStateType) Reset() {
	*x = ComponentsComponentListPropertiesTypePropertyListStateType{}
	mi := &file_chassisd_oc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentsComponentListPropertiesTypePropertyListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentsComponentListPropertiesTypePropertyListStateType) ProtoMessage() {}

func (x *ComponentsComponentListPropertiesTypePropertyListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_chassisd_oc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentsComponentListPropertiesTypePropertyListStateType.ProtoReflect.Descriptor instead.
func (*ComponentsComponentListPropertiesTypePropertyListStateType) Descriptor() ([]byte, []int) {
	return file_chassisd_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0}
}

func (x *ComponentsComponentListPropertiesTypePropertyListStateType) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *ComponentsComponentListPropertiesTypePropertyListStateType) GetConfigurable() bool {
	if x != nil && x.Configurable != nil {
		return *x.Configurable
	}
	return false
}

type ComponentsComponentListSubcomponentsTypeSubcomponentList struct {
	state         protoimpl.MessageState                                             `protogen:"open.v1"`
	Name          *string                                                            `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	State         *ComponentsComponentListSubcomponentsTypeSubcomponentListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentsComponentListSubcomponentsTypeSubcomponentList) Reset() {
	*x = ComponentsComponentListSubcomponentsTypeSubcomponentList{}
	mi := &file_chassisd_oc_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentsComponentListSubcomponentsTypeSubcomponentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentsComponentListSubcomponentsTypeSubcomponentList) ProtoMessage() {}

func (x *ComponentsComponentListSubcomponentsTypeSubcomponentList) ProtoReflect() protoreflect.Message {
	mi := &file_chassisd_oc_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentsComponentListSubcomponentsTypeSubcomponentList.ProtoReflect.Descriptor instead.
func (*ComponentsComponentListSubcomponentsTypeSubcomponentList) Descriptor() ([]byte, []int) {
	return file_chassisd_oc_proto_rawDescGZIP(), []int{0, 0, 2, 0}
}

func (x *ComponentsComponentListSubcomponentsTypeSubcomponentList) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ComponentsComponentListSubcomponentsTypeSubcomponentList) GetState() *ComponentsComponentListSubcomponentsTypeSubcomponentListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type ComponentsComponentListSubcomponentsTypeSubcomponentListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentsComponentListSubcomponentsTypeSubcomponentListStateType) Reset() {
	*x = ComponentsComponentListSubcomponentsTypeSubcomponentListStateType{}
	mi := &file_chassisd_oc_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentsComponentListSubcomponentsTypeSubcomponentListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentsComponentListSubcomponentsTypeSubcomponentListStateType) ProtoMessage() {}

func (x *ComponentsComponentListSubcomponentsTypeSubcomponentListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_chassisd_oc_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentsComponentListSubcomponentsTypeSubcomponentListStateType.ProtoReflect.Descriptor instead.
func (*ComponentsComponentListSubcomponentsTypeSubcomponentListStateType) Descriptor() ([]byte, []int) {
	return file_chassisd_oc_proto_rawDescGZIP(), []int{0, 0, 2, 0, 0}
}

func (x *ComponentsComponentListSubcomponentsTypeSubcomponentListStateType) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type ComponentsComponentListTransceiverTypeStateType struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	FormFactorPreconf      *string                `protobuf:"bytes,255,opt,name=form_factor_preconf,json=formFactorPreconf" json:"form_factor_preconf,omitempty"`
	EthernetPmdPreconf     *string                `protobuf:"bytes,256,opt,name=ethernet_pmd_preconf,json=ethernetPmdPreconf" json:"ethernet_pmd_preconf,omitempty"`
	Present                *string                `protobuf:"bytes,266,opt,name=present" json:"present,omitempty"`
	FormFactor             *string                `protobuf:"bytes,257,opt,name=form_factor,json=formFactor" json:"form_factor,omitempty"`
	ConnectorType          *string                `protobuf:"bytes,258,opt,name=connector_type,json=connectorType" json:"connector_type,omitempty"`
	Vendor                 *string                `protobuf:"bytes,259,opt,name=vendor" json:"vendor,omitempty"`
	VendorPart             *string                `protobuf:"bytes,260,opt,name=vendor_part,json=vendorPart" json:"vendor_part,omitempty"`
	VendorRev              *string                `protobuf:"bytes,261,opt,name=vendor_rev,json=vendorRev" json:"vendor_rev,omitempty"`
	EthernetPmd            *string                `protobuf:"bytes,262,opt,name=ethernet_pmd,json=ethernetPmd" json:"ethernet_pmd,omitempty"`
	SonetSdhComplianceCode *string                `protobuf:"bytes,263,opt,name=sonet_sdh_compliance_code,json=sonetSdhComplianceCode" json:"sonet_sdh_compliance_code,omitempty"`
	OtnComplianceCode      *string                `protobuf:"bytes,264,opt,name=otn_compliance_code,json=otnComplianceCode" json:"otn_compliance_code,omitempty"`
	SerialNo               *string                `protobuf:"bytes,265,opt,name=serial_no,json=serialNo" json:"serial_no,omitempty"`
	DateCode               *string                `protobuf:"bytes,286,opt,name=date_code,json=dateCode" json:"date_code,omitempty"`
	Enabled                *bool                  `protobuf:"varint,51,opt,name=enabled" json:"enabled,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ComponentsComponentListTransceiverTypeStateType) Reset() {
	*x = ComponentsComponentListTransceiverTypeStateType{}
	mi := &file_chassisd_oc_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentsComponentListTransceiverTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentsComponentListTransceiverTypeStateType) ProtoMessage() {}

func (x *ComponentsComponentListTransceiverTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_chassisd_oc_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentsComponentListTransceiverTypeStateType.ProtoReflect.Descriptor instead.
func (*ComponentsComponentListTransceiverTypeStateType) Descriptor() ([]byte, []int) {
	return file_chassisd_oc_proto_rawDescGZIP(), []int{0, 0, 3, 0}
}

func (x *ComponentsComponentListTransceiverTypeStateType) GetFormFactorPreconf() string {
	if x != nil && x.FormFactorPreconf != nil {
		return *x.FormFactorPreconf
	}
	return ""
}

func (x *ComponentsComponentListTransceiverTypeStateType) GetEthernetPmdPreconf() string {
	if x != nil && x.EthernetPmdPreconf != nil {
		return *x.EthernetPmdPreconf
	}
	return ""
}

func (x *ComponentsComponentListTransceiverTypeStateType) GetPresent() string {
	if x != nil && x.Present != nil {
		return *x.Present
	}
	return ""
}

func (x *ComponentsComponentListTransceiverTypeStateType) GetFormFactor() string {
	if x != nil && x.FormFactor != nil {
		return *x.FormFactor
	}
	return ""
}

func (x *ComponentsComponentListTransceiverTypeStateType) GetConnectorType() string {
	if x != nil && x.ConnectorType != nil {
		return *x.ConnectorType
	}
	return ""
}

func (x *ComponentsComponentListTransceiverTypeStateType) GetVendor() string {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return ""
}

func (x *ComponentsComponentListTransceiverTypeStateType) GetVendorPart() string {
	if x != nil && x.VendorPart != nil {
		return *x.VendorPart
	}
	return ""
}

func (x *ComponentsComponentListTransceiverTypeStateType) GetVendorRev() string {
	if x != nil && x.VendorRev != nil {
		return *x.VendorRev
	}
	return ""
}

func (x *ComponentsComponentListTransceiverTypeStateType) GetEthernetPmd() string {
	if x != nil && x.EthernetPmd != nil {
		return *x.EthernetPmd
	}
	return ""
}

func (x *ComponentsComponentListTransceiverTypeStateType) GetSonetSdhComplianceCode() string {
	if x != nil && x.SonetSdhComplianceCode != nil {
		return *x.SonetSdhComplianceCode
	}
	return ""
}

func (x *ComponentsComponentListTransceiverTypeStateType) GetOtnComplianceCode() string {
	if x != nil && x.OtnComplianceCode != nil {
		return *x.OtnComplianceCode
	}
	return ""
}

func (x *ComponentsComponentListTransceiverTypeStateType) GetSerialNo() string {
	if x != nil && x.SerialNo != nil {
		return *x.SerialNo
	}
	return ""
}

func (x *ComponentsComponentListTransceiverTypeStateType) GetDateCode() string {
	if x != nil && x.DateCode != nil {
		return *x.DateCode
	}
	return ""
}

func (x *ComponentsComponentListTransceiverTypeStateType) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type ComponentsComponentListTransceiverTypePhysicalChannelsType struct {
	state         protoimpl.MessageState                                                   `protogen:"open.v1"`
	Channel       []*ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList `protobuf:"bytes,91,rep,name=channel" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentsComponentListTransceiverTypePhysicalChannelsType) Reset() {
	*x = ComponentsComponentListTransceiverTypePhysicalChannelsType{}
	mi := &file_chassisd_oc_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentsComponentListTransceiverTypePhysicalChannelsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentsComponentListTransceiverTypePhysicalChannelsType) ProtoMessage() {}

func (x *ComponentsComponentListTransceiverTypePhysicalChannelsType) ProtoReflect() protoreflect.Message {
	mi := &file_chassisd_oc_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentsComponentListTransceiverTypePhysicalChannelsType.ProtoReflect.Descriptor instead.
func (*ComponentsComponentListTransceiverTypePhysicalChannelsType) Descriptor() ([]byte, []int) {
	return file_chassisd_oc_proto_rawDescGZIP(), []int{0, 0, 3, 1}
}

func (x *ComponentsComponentListTransceiverTypePhysicalChannelsType) GetChannel() []*ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList {
	if x != nil {
		return x.Channel
	}
	return nil
}

type ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList struct {
	state         protoimpl.MessageState                                                          `protogen:"open.v1"`
	Index         *uint32                                                                         `protobuf:"varint,191,opt,name=index" json:"index,omitempty"`
	State         *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType `protobuf:"bytes,849,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList) Reset() {
	*x = ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList{}
	mi := &file_chassisd_oc_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList) ProtoMessage() {}

func (x *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList) ProtoReflect() protoreflect.Message {
	mi := &file_chassisd_oc_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList.ProtoReflect.Descriptor instead.
func (*ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList) Descriptor() ([]byte, []int) {
	return file_chassisd_oc_proto_rawDescGZIP(), []int{0, 0, 3, 1, 0}
}

func (x *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList) GetState() *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Index             *uint32                `protobuf:"varint,39,opt,name=index" json:"index,omitempty"`
	Description       *string                `protobuf:"bytes,41,opt,name=description" json:"description,omitempty"`
	TxLaser           *bool                  `protobuf:"varint,42,opt,name=tx_laser,json=txLaser" json:"tx_laser,omitempty"`
	TargetOutputPower *float64               `protobuf:"fixed64,43,opt,name=target_output_power,json=targetOutputPower" json:"target_output_power,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType) Reset() {
	*x = ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType{}
	mi := &file_chassisd_oc_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType) ProtoMessage() {
}

func (x *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_chassisd_oc_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType.ProtoReflect.Descriptor instead.
func (*ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType) Descriptor() ([]byte, []int) {
	return file_chassisd_oc_proto_rawDescGZIP(), []int{0, 0, 3, 1, 0, 0}
}

func (x *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType) GetTxLaser() bool {
	if x != nil && x.TxLaser != nil {
		return *x.TxLaser
	}
	return false
}

func (x *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType) GetTargetOutputPower() float64 {
	if x != nil && x.TargetOutputPower != nil {
		return *x.TargetOutputPower
	}
	return 0
}

var file_chassisd_oc_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*Components)(nil),
		Field:         40,
		Name:          "jnpr_components_ext",
		Tag:           "bytes,40,opt,name=jnpr_components_ext",
		Filename:      "chassisd_oc.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional components jnpr_components_ext = 40;
	E_JnprComponentsExt = &file_chassisd_oc_proto_extTypes[0]
)

var File_chassisd_oc_proto protoreflect.FileDescriptor

var file_chassisd_oc_proto_rawDesc = string([]byte{
	0x0a, 0x11, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x64, 0x5f, 0x6f, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74,
	0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe5, 0x17, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x1a, 0x9b, 0x17, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4b,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x9c, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x0d, 0x73,
	0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x99, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x73, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x4e, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x18, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x1a, 0xa3, 0x06, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x66, 0x67, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x66, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x66, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x39, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x66, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x3b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61,
	0x72, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x74, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x3f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x41, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x59, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x1a, 0x2c, 0x0a, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18,
	0x51, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x1a, 0x47,
	0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x75,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x1a, 0xb9, 0x02, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x55, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x1a, 0xce, 0x01, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x5a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x43, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x46, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x62, 0x6c, 0x65, 0x1a, 0xb0, 0x02, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x64, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75,
	0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x1a, 0xb3, 0x01, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x61, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4a, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75,
	0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x20, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xa7, 0x09, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x70, 0x0a, 0x11, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18,
	0xbf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x10, 0x70, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x1a, 0x97, 0x04, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x6f,
	0x6e, 0x66, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x6d, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x12, 0x31, 0x0a, 0x14,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x70, 0x6d, 0x64, 0x5f, 0x70, 0x72, 0x65,
	0x63, 0x6f, 0x6e, 0x66, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x50, 0x6d, 0x64, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x12,
	0x19, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x8a, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x81, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x82,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x83,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x84, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x76, 0x18, 0x85, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52, 0x65, 0x76, 0x12,
	0x22, 0x0a, 0x0c, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x70, 0x6d, 0x64, 0x18,
	0x86, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x50, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x73, 0x6f, 0x6e, 0x65, 0x74, 0x5f, 0x73, 0x64, 0x68,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x87, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x6f, 0x6e, 0x65, 0x74, 0x53, 0x64,
	0x68, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x2f, 0x0a, 0x13, 0x6f, 0x74, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x88, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f,
	0x74, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x18, 0x89, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x9e, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xb7, 0x03, 0x0a, 0x16, 0x70, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x69, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x5b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0xb1, 0x02, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82,
	0x40, 0x02, 0x08, 0x01, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x71, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0xd1, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8f,
	0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x6c, 0x61, 0x73, 0x65,
	0x72, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x78, 0x4c, 0x61, 0x73, 0x65, 0x72,
	0x12, 0x2e, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x3a, 0x54, 0x0a, 0x13, 0x6a, 0x6e, 0x70, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x12, 0x17, 0x2e, 0x4a, 0x75, 0x6e, 0x69, 0x70, 0x65,
	0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x11, 0x6a, 0x6e, 0x70, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x45, 0x78, 0x74, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x6a, 0x75, 0x6e, 0x6f,
	0x73, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65,
})

var (
	file_chassisd_oc_proto_rawDescOnce sync.Once
	file_chassisd_oc_proto_rawDescData []byte
)

func file_chassisd_oc_proto_rawDescGZIP() []byte {
	file_chassisd_oc_proto_rawDescOnce.Do(func() {
		file_chassisd_oc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chassisd_oc_proto_rawDesc), len(file_chassisd_oc_proto_rawDesc)))
	})
	return file_chassisd_oc_proto_rawDescData
}

var file_chassisd_oc_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_chassisd_oc_proto_goTypes = []any{
	(*Components)(nil),                                                                     // 0: components
	(*ComponentsComponentList)(nil),                                                        // 1: components.component_list
	(*ComponentsComponentListStateType)(nil),                                               // 2: components.component_list.state_type
	(*ComponentsComponentListPropertiesType)(nil),                                          // 3: components.component_list.properties_type
	(*ComponentsComponentListSubcomponentsType)(nil),                                       // 4: components.component_list.subcomponents_type
	(*ComponentsComponentListTransceiverType)(nil),                                         // 5: components.component_list.transceiver_type
	(*ComponentsComponentListStateTypeTemperatureType)(nil),                                // 6: components.component_list.state_type.temperature_type
	(*ComponentsComponentListStateTypeMemoryType)(nil),                                     // 7: components.component_list.state_type.memory_type
	(*ComponentsComponentListPropertiesTypePropertyList)(nil),                              // 8: components.component_list.properties_type.property_list
	(*ComponentsComponentListPropertiesTypePropertyListStateType)(nil),                     // 9: components.component_list.properties_type.property_list.state_type
	(*ComponentsComponentListSubcomponentsTypeSubcomponentList)(nil),                       // 10: components.component_list.subcomponents_type.subcomponent_list
	(*ComponentsComponentListSubcomponentsTypeSubcomponentListStateType)(nil),              // 11: components.component_list.subcomponents_type.subcomponent_list.state_type
	(*ComponentsComponentListTransceiverTypeStateType)(nil),                                // 12: components.component_list.transceiver_type.state_type
	(*ComponentsComponentListTransceiverTypePhysicalChannelsType)(nil),                     // 13: components.component_list.transceiver_type.physical_channels_type
	(*ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList)(nil),          // 14: components.component_list.transceiver_type.physical_channels_type.channel_list
	(*ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType)(nil), // 15: components.component_list.transceiver_type.physical_channels_type.channel_list.state_type
	(*JuniperNetworksSensors)(nil),                                                         // 16: JuniperNetworksSensors
}
var file_chassisd_oc_proto_depIdxs = []int32{
	1,  // 0: components.component:type_name -> components.component_list
	2,  // 1: components.component_list.state:type_name -> components.component_list.state_type
	3,  // 2: components.component_list.properties:type_name -> components.component_list.properties_type
	4,  // 3: components.component_list.subcomponents:type_name -> components.component_list.subcomponents_type
	5,  // 4: components.component_list.transceiver:type_name -> components.component_list.transceiver_type
	6,  // 5: components.component_list.state_type.temperature:type_name -> components.component_list.state_type.temperature_type
	7,  // 6: components.component_list.state_type.memory:type_name -> components.component_list.state_type.memory_type
	8,  // 7: components.component_list.properties_type.property:type_name -> components.component_list.properties_type.property_list
	10, // 8: components.component_list.subcomponents_type.subcomponent:type_name -> components.component_list.subcomponents_type.subcomponent_list
	12, // 9: components.component_list.transceiver_type.state:type_name -> components.component_list.transceiver_type.state_type
	13, // 10: components.component_list.transceiver_type.physical_channels:type_name -> components.component_list.transceiver_type.physical_channels_type
	9,  // 11: components.component_list.properties_type.property_list.state:type_name -> components.component_list.properties_type.property_list.state_type
	11, // 12: components.component_list.subcomponents_type.subcomponent_list.state:type_name -> components.component_list.subcomponents_type.subcomponent_list.state_type
	14, // 13: components.component_list.transceiver_type.physical_channels_type.channel:type_name -> components.component_list.transceiver_type.physical_channels_type.channel_list
	15, // 14: components.component_list.transceiver_type.physical_channels_type.channel_list.state:type_name -> components.component_list.transceiver_type.physical_channels_type.channel_list.state_type
	16, // 15: jnpr_components_ext:extendee -> JuniperNetworksSensors
	0,  // 16: jnpr_components_ext:type_name -> components
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	16, // [16:17] is the sub-list for extension type_name
	15, // [15:16] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_chassisd_oc_proto_init() }
func file_chassisd_oc_proto_init() {
	if File_chassisd_oc_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chassisd_oc_proto_rawDesc), len(file_chassisd_oc_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_chassisd_oc_proto_goTypes,
		DependencyIndexes: file_chassisd_oc_proto_depIdxs,
		MessageInfos:      file_chassisd_oc_proto_msgTypes,
		ExtensionInfos:    file_chassisd_oc_proto_extTypes,
	}.Build()
	File_chassisd_oc_proto = out.File
	file_chassisd_oc_proto_goTypes = nil
	file_chassisd_oc_proto_depIdxs = nil
}
