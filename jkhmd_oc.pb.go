// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: jkhmd_oc.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JunosKernelHealth struct {
	state          protoimpl.MessageState               `protogen:"open.v1"`
	Chassis        *JunosKernelHealthChassisType        `protobuf:"bytes,191,opt,name=chassis" json:"chassis,omitempty"`
	RoutingOptions *JunosKernelHealthRoutingOptionsType `protobuf:"bytes,509,opt,name=routing_options,json=routingOptions" json:"routing_options,omitempty"`
	Security       *JunosKernelHealthSecurityType       `protobuf:"bytes,183,opt,name=security" json:"security,omitempty"`
	Kernel         *JunosKernelHealthKernelType         `protobuf:"bytes,192,opt,name=kernel" json:"kernel,omitempty"`
	KernelIfstate  *JunosKernelHealthKernelIfstateType  `protobuf:"bytes,186,opt,name=kernel_ifstate,json=kernelIfstate" json:"kernel_ifstate,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *JunosKernelHealth) Reset() {
	*x = JunosKernelHealth{}
	mi := &file_jkhmd_oc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKernelHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKernelHealth) ProtoMessage() {}

func (x *JunosKernelHealth) ProtoReflect() protoreflect.Message {
	mi := &file_jkhmd_oc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKernelHealth.ProtoReflect.Descriptor instead.
func (*JunosKernelHealth) Descriptor() ([]byte, []int) {
	return file_jkhmd_oc_proto_rawDescGZIP(), []int{0}
}

func (x *JunosKernelHealth) GetChassis() *JunosKernelHealthChassisType {
	if x != nil {
		return x.Chassis
	}
	return nil
}

func (x *JunosKernelHealth) GetRoutingOptions() *JunosKernelHealthRoutingOptionsType {
	if x != nil {
		return x.RoutingOptions
	}
	return nil
}

func (x *JunosKernelHealth) GetSecurity() *JunosKernelHealthSecurityType {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *JunosKernelHealth) GetKernel() *JunosKernelHealthKernelType {
	if x != nil {
		return x.Kernel
	}
	return nil
}

func (x *JunosKernelHealth) GetKernelIfstate() *JunosKernelHealthKernelIfstateType {
	if x != nil {
		return x.KernelIfstate
	}
	return nil
}

type JunosKernelHealthChassisType struct {
	state             protoimpl.MessageState                             `protogen:"open.v1"`
	Gres              *JunosKernelHealthChassisTypeGresType              `protobuf:"bytes,181,opt,name=gres" json:"gres,omitempty"`
	Issu              *JunosKernelHealthChassisTypeIssuType              `protobuf:"bytes,182,opt,name=issu" json:"issu,omitempty"`
	AggregatedDevices *JunosKernelHealthChassisTypeAggregatedDevicesType `protobuf:"bytes,351,opt,name=aggregated_devices,json=aggregatedDevices" json:"aggregated_devices,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *JunosKernelHealthChassisType) Reset() {
	*x = JunosKernelHealthChassisType{}
	mi := &file_jkhmd_oc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKernelHealthChassisType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKernelHealthChassisType) ProtoMessage() {}

func (x *JunosKernelHealthChassisType) ProtoReflect() protoreflect.Message {
	mi := &file_jkhmd_oc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKernelHealthChassisType.ProtoReflect.Descriptor instead.
func (*JunosKernelHealthChassisType) Descriptor() ([]byte, []int) {
	return file_jkhmd_oc_proto_rawDescGZIP(), []int{0, 0}
}

func (x *JunosKernelHealthChassisType) GetGres() *JunosKernelHealthChassisTypeGresType {
	if x != nil {
		return x.Gres
	}
	return nil
}

func (x *JunosKernelHealthChassisType) GetIssu() *JunosKernelHealthChassisTypeIssuType {
	if x != nil {
		return x.Issu
	}
	return nil
}

func (x *JunosKernelHealthChassisType) GetAggregatedDevices() *JunosKernelHealthChassisTypeAggregatedDevicesType {
	if x != nil {
		return x.AggregatedDevices
	}
	return nil
}

type JunosKernelHealthRoutingOptionsType struct {
	state          protoimpl.MessageState                                 `protogen:"open.v1"`
	NonstopRouting *JunosKernelHealthRoutingOptionsTypeNonstopRoutingType `protobuf:"bytes,510,opt,name=nonstop_routing,json=nonstopRouting" json:"nonstop_routing,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *JunosKernelHealthRoutingOptionsType) Reset() {
	*x = JunosKernelHealthRoutingOptionsType{}
	mi := &file_jkhmd_oc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKernelHealthRoutingOptionsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKernelHealthRoutingOptionsType) ProtoMessage() {}

func (x *JunosKernelHealthRoutingOptionsType) ProtoReflect() protoreflect.Message {
	mi := &file_jkhmd_oc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKernelHealthRoutingOptionsType.ProtoReflect.Descriptor instead.
func (*JunosKernelHealthRoutingOptionsType) Descriptor() ([]byte, []int) {
	return file_jkhmd_oc_proto_rawDescGZIP(), []int{0, 1}
}

func (x *JunosKernelHealthRoutingOptionsType) GetNonstopRouting() *JunosKernelHealthRoutingOptionsTypeNonstopRoutingType {
	if x != nil {
		return x.NonstopRouting
	}
	return nil
}

type JunosKernelHealthSecurityType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VeriexecState *string                `protobuf:"bytes,51,opt,name=veriexec_state,json=veriexecState" json:"veriexec_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosKernelHealthSecurityType) Reset() {
	*x = JunosKernelHealthSecurityType{}
	mi := &file_jkhmd_oc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKernelHealthSecurityType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKernelHealthSecurityType) ProtoMessage() {}

func (x *JunosKernelHealthSecurityType) ProtoReflect() protoreflect.Message {
	mi := &file_jkhmd_oc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKernelHealthSecurityType.ProtoReflect.Descriptor instead.
func (*JunosKernelHealthSecurityType) Descriptor() ([]byte, []int) {
	return file_jkhmd_oc_proto_rawDescGZIP(), []int{0, 2}
}

func (x *JunosKernelHealthSecurityType) GetVeriexecState() string {
	if x != nil && x.VeriexecState != nil {
		return *x.VeriexecState
	}
	return ""
}

type JunosKernelHealthKernelType struct {
	state          protoimpl.MessageState                         `protogen:"open.v1"`
	PeerInfra      *JunosKernelHealthKernelTypePeerInfraType      `protobuf:"bytes,184,opt,name=peer_infra,json=peerInfra" json:"peer_infra,omitempty"`
	Vpls           *JunosKernelHealthKernelTypeVplsType           `protobuf:"bytes,201,opt,name=vpls" json:"vpls,omitempty"`
	Tunnel         *JunosKernelHealthKernelTypeTunnelType         `protobuf:"bytes,202,opt,name=tunnel" json:"tunnel,omitempty"`
	Multicast      *JunosKernelHealthKernelTypeMulticastType      `protobuf:"bytes,203,opt,name=multicast" json:"multicast,omitempty"`
	Tnp            *JunosKernelHealthKernelTypeTnpType            `protobuf:"bytes,225,opt,name=tnp" json:"tnp,omitempty"`
	RecordMetaData *JunosKernelHealthKernelTypeRecordMetaDataType `protobuf:"bytes,185,opt,name=record_meta_data,json=recordMetaData" json:"record_meta_data,omitempty"`
	Rtsock         *JunosKernelHealthKernelTypeRtsockType         `protobuf:"bytes,153,opt,name=rtsock" json:"rtsock,omitempty"`
	Tcpip          *JunosKernelHealthKernelTypeTcpipType          `protobuf:"bytes,598,opt,name=tcpip" json:"tcpip,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *JunosKernelHealthKernelType) Reset() {
	*x = JunosKernelHealthKernelType{}
	mi := &file_jkhmd_oc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKernelHealthKernelType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKernelHealthKernelType) ProtoMessage() {}

func (x *JunosKernelHealthKernelType) ProtoReflect() protoreflect.Message {
	mi := &file_jkhmd_oc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKernelHealthKernelType.ProtoReflect.Descriptor instead.
func (*JunosKernelHealthKernelType) Descriptor() ([]byte, []int) {
	return file_jkhmd_oc_proto_rawDescGZIP(), []int{0, 3}
}

func (x *JunosKernelHealthKernelType) GetPeerInfra() *JunosKernelHealthKernelTypePeerInfraType {
	if x != nil {
		return x.PeerInfra
	}
	return nil
}

func (x *JunosKernelHealthKernelType) GetVpls() *JunosKernelHealthKernelTypeVplsType {
	if x != nil {
		return x.Vpls
	}
	return nil
}

func (x *JunosKernelHealthKernelType) GetTunnel() *JunosKernelHealthKernelTypeTunnelType {
	if x != nil {
		return x.Tunnel
	}
	return nil
}

func (x *JunosKernelHealthKernelType) GetMulticast() *JunosKernelHealthKernelTypeMulticastType {
	if x != nil {
		return x.Multicast
	}
	return nil
}

func (x *JunosKernelHealthKernelType) GetTnp() *JunosKernelHealthKernelTypeTnpType {
	if x != nil {
		return x.Tnp
	}
	return nil
}

func (x *JunosKernelHealthKernelType) GetRecordMetaData() *JunosKernelHealthKernelTypeRecordMetaDataType {
	if x != nil {
		return x.RecordMetaData
	}
	return nil
}

func (x *JunosKernelHealthKernelType) GetRtsock() *JunosKernelHealthKernelTypeRtsockType {
	if x != nil {
		return x.Rtsock
	}
	return nil
}

func (x *JunosKernelHealthKernelType) GetTcpip() *JunosKernelHealthKernelTypeTcpipType {
	if x != nil {
		return x.Tcpip
	}
	return nil
}

type JunosKernelHealthKernelIfstateType struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	DeadIfstatesCnt    *uint32                `protobuf:"varint,51,opt,name=dead_ifstates_cnt,json=deadIfstatesCnt" json:"dead_ifstates_cnt,omitempty"`
	AliveIfstatesCnt   *uint32                `protobuf:"varint,52,opt,name=alive_ifstates_cnt,json=aliveIfstatesCnt" json:"alive_ifstates_cnt,omitempty"`
	DelayedUnrefsCnt   *uint32                `protobuf:"varint,53,opt,name=delayed_unrefs_cnt,json=delayedUnrefsCnt" json:"delayed_unrefs_cnt,omitempty"`
	DelayedUnrefsMax   *uint32                `protobuf:"varint,54,opt,name=delayed_unrefs_max,json=delayedUnrefsMax" json:"delayed_unrefs_max,omitempty"`
	StuckClientsCnt    *uint32                `protobuf:"varint,55,opt,name=stuck_clients_cnt,json=stuckClientsCnt" json:"stuck_clients_cnt,omitempty"`
	DeadClientsCnt     *uint32                `protobuf:"varint,56,opt,name=dead_clients_cnt,json=deadClientsCnt" json:"dead_clients_cnt,omitempty"`
	AliveClientsCnt    *uint32                `protobuf:"varint,57,opt,name=alive_clients_cnt,json=aliveClientsCnt" json:"alive_clients_cnt,omitempty"`
	ClientLimitReached *uint32                `protobuf:"varint,58,opt,name=client_limit_reached,json=clientLimitReached" json:"client_limit_reached,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *JunosKernelHealthKernelIfstateType) Reset() {
	*x = JunosKernelHealthKernelIfstateType{}
	mi := &file_jkhmd_oc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKernelHealthKernelIfstateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKernelHealthKernelIfstateType) ProtoMessage() {}

func (x *JunosKernelHealthKernelIfstateType) ProtoReflect() protoreflect.Message {
	mi := &file_jkhmd_oc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKernelHealthKernelIfstateType.ProtoReflect.Descriptor instead.
func (*JunosKernelHealthKernelIfstateType) Descriptor() ([]byte, []int) {
	return file_jkhmd_oc_proto_rawDescGZIP(), []int{0, 4}
}

func (x *JunosKernelHealthKernelIfstateType) GetDeadIfstatesCnt() uint32 {
	if x != nil && x.DeadIfstatesCnt != nil {
		return *x.DeadIfstatesCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelIfstateType) GetAliveIfstatesCnt() uint32 {
	if x != nil && x.AliveIfstatesCnt != nil {
		return *x.AliveIfstatesCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelIfstateType) GetDelayedUnrefsCnt() uint32 {
	if x != nil && x.DelayedUnrefsCnt != nil {
		return *x.DelayedUnrefsCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelIfstateType) GetDelayedUnrefsMax() uint32 {
	if x != nil && x.DelayedUnrefsMax != nil {
		return *x.DelayedUnrefsMax
	}
	return 0
}

func (x *JunosKernelHealthKernelIfstateType) GetStuckClientsCnt() uint32 {
	if x != nil && x.StuckClientsCnt != nil {
		return *x.StuckClientsCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelIfstateType) GetDeadClientsCnt() uint32 {
	if x != nil && x.DeadClientsCnt != nil {
		return *x.DeadClientsCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelIfstateType) GetAliveClientsCnt() uint32 {
	if x != nil && x.AliveClientsCnt != nil {
		return *x.AliveClientsCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelIfstateType) GetClientLimitReached() uint32 {
	if x != nil && x.ClientLimitReached != nil {
		return *x.ClientLimitReached
	}
	return 0
}

type JunosKernelHealthChassisTypeGresType struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	GresTime          *uint64                `protobuf:"varint,51,opt,name=gres_time,json=gresTime" json:"gres_time,omitempty"`
	SlaveConnectTime  *uint64                `protobuf:"varint,52,opt,name=slave_connect_time,json=slaveConnectTime" json:"slave_connect_time,omitempty"`
	ConfiguredState   *string                `protobuf:"bytes,53,opt,name=configured_state,json=configuredState" json:"configured_state,omitempty"`
	MasterKernelReady *string                `protobuf:"bytes,54,opt,name=master_kernel_ready,json=masterKernelReady" json:"master_kernel_ready,omitempty"`
	SlaveKernelReady  *string                `protobuf:"bytes,55,opt,name=slave_kernel_ready,json=slaveKernelReady" json:"slave_kernel_ready,omitempty"`
	ErrorState        *string                `protobuf:"bytes,56,opt,name=error_state,json=errorState" json:"error_state,omitempty"`
	OtherRePresent    *string                `protobuf:"bytes,151,opt,name=other_re_present,json=otherRePresent" json:"other_re_present,omitempty"`
	OtherReAlive      *string                `protobuf:"bytes,152,opt,name=other_re_alive,json=otherReAlive" json:"other_re_alive,omitempty"`
	IsProtocolMaster  *string                `protobuf:"bytes,165,opt,name=is_protocol_master,json=isProtocolMaster" json:"is_protocol_master,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *JunosKernelHealthChassisTypeGresType) Reset() {
	*x = JunosKernelHealthChassisTypeGresType{}
	mi := &file_jkhmd_oc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKernelHealthChassisTypeGresType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKernelHealthChassisTypeGresType) ProtoMessage() {}

func (x *JunosKernelHealthChassisTypeGresType) ProtoReflect() protoreflect.Message {
	mi := &file_jkhmd_oc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKernelHealthChassisTypeGresType.ProtoReflect.Descriptor instead.
func (*JunosKernelHealthChassisTypeGresType) Descriptor() ([]byte, []int) {
	return file_jkhmd_oc_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *JunosKernelHealthChassisTypeGresType) GetGresTime() uint64 {
	if x != nil && x.GresTime != nil {
		return *x.GresTime
	}
	return 0
}

func (x *JunosKernelHealthChassisTypeGresType) GetSlaveConnectTime() uint64 {
	if x != nil && x.SlaveConnectTime != nil {
		return *x.SlaveConnectTime
	}
	return 0
}

func (x *JunosKernelHealthChassisTypeGresType) GetConfiguredState() string {
	if x != nil && x.ConfiguredState != nil {
		return *x.ConfiguredState
	}
	return ""
}

func (x *JunosKernelHealthChassisTypeGresType) GetMasterKernelReady() string {
	if x != nil && x.MasterKernelReady != nil {
		return *x.MasterKernelReady
	}
	return ""
}

func (x *JunosKernelHealthChassisTypeGresType) GetSlaveKernelReady() string {
	if x != nil && x.SlaveKernelReady != nil {
		return *x.SlaveKernelReady
	}
	return ""
}

func (x *JunosKernelHealthChassisTypeGresType) GetErrorState() string {
	if x != nil && x.ErrorState != nil {
		return *x.ErrorState
	}
	return ""
}

func (x *JunosKernelHealthChassisTypeGresType) GetOtherRePresent() string {
	if x != nil && x.OtherRePresent != nil {
		return *x.OtherRePresent
	}
	return ""
}

func (x *JunosKernelHealthChassisTypeGresType) GetOtherReAlive() string {
	if x != nil && x.OtherReAlive != nil {
		return *x.OtherReAlive
	}
	return ""
}

func (x *JunosKernelHealthChassisTypeGresType) GetIsProtocolMaster() string {
	if x != nil && x.IsProtocolMaster != nil {
		return *x.IsProtocolMaster
	}
	return ""
}

type JunosKernelHealthChassisTypeIssuType struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	FailureStage     *string                `protobuf:"bytes,51,opt,name=failure_stage,json=failureStage" json:"failure_stage,omitempty"`
	CurrentIssuStage *string                `protobuf:"bytes,52,opt,name=current_issu_stage,json=currentIssuStage" json:"current_issu_stage,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *JunosKernelHealthChassisTypeIssuType) Reset() {
	*x = JunosKernelHealthChassisTypeIssuType{}
	mi := &file_jkhmd_oc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKernelHealthChassisTypeIssuType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKernelHealthChassisTypeIssuType) ProtoMessage() {}

func (x *JunosKernelHealthChassisTypeIssuType) ProtoReflect() protoreflect.Message {
	mi := &file_jkhmd_oc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKernelHealthChassisTypeIssuType.ProtoReflect.Descriptor instead.
func (*JunosKernelHealthChassisTypeIssuType) Descriptor() ([]byte, []int) {
	return file_jkhmd_oc_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *JunosKernelHealthChassisTypeIssuType) GetFailureStage() string {
	if x != nil && x.FailureStage != nil {
		return *x.FailureStage
	}
	return ""
}

func (x *JunosKernelHealthChassisTypeIssuType) GetCurrentIssuStage() string {
	if x != nil && x.CurrentIssuStage != nil {
		return *x.CurrentIssuStage
	}
	return ""
}

type JunosKernelHealthChassisTypeAggregatedDevicesType struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	PsLtUnstackCnt   *uint32                `protobuf:"varint,311,opt,name=ps_lt_unstack_cnt,json=psLtUnstackCnt" json:"ps_lt_unstack_cnt,omitempty"`
	PsIflCccDownCnt  *uint32                `protobuf:"varint,312,opt,name=ps_ifl_ccc_down_cnt,json=psIflCccDownCnt" json:"ps_ifl_ccc_down_cnt,omitempty"`
	RltLpLinkDownCnt *uint32                `protobuf:"varint,313,opt,name=rlt_lp_link_down_cnt,json=rltLpLinkDownCnt" json:"rlt_lp_link_down_cnt,omitempty"`
	AeUnstackCnt     *uint32                `protobuf:"varint,314,opt,name=ae_unstack_cnt,json=aeUnstackCnt" json:"ae_unstack_cnt,omitempty"`
	AeLpLinkDownCnt  *uint32                `protobuf:"varint,315,opt,name=ae_lp_link_down_cnt,json=aeLpLinkDownCnt" json:"ae_lp_link_down_cnt,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *JunosKernelHealthChassisTypeAggregatedDevicesType) Reset() {
	*x = JunosKernelHealthChassisTypeAggregatedDevicesType{}
	mi := &file_jkhmd_oc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKernelHealthChassisTypeAggregatedDevicesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKernelHealthChassisTypeAggregatedDevicesType) ProtoMessage() {}

func (x *JunosKernelHealthChassisTypeAggregatedDevicesType) ProtoReflect() protoreflect.Message {
	mi := &file_jkhmd_oc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKernelHealthChassisTypeAggregatedDevicesType.ProtoReflect.Descriptor instead.
func (*JunosKernelHealthChassisTypeAggregatedDevicesType) Descriptor() ([]byte, []int) {
	return file_jkhmd_oc_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *JunosKernelHealthChassisTypeAggregatedDevicesType) GetPsLtUnstackCnt() uint32 {
	if x != nil && x.PsLtUnstackCnt != nil {
		return *x.PsLtUnstackCnt
	}
	return 0
}

func (x *JunosKernelHealthChassisTypeAggregatedDevicesType) GetPsIflCccDownCnt() uint32 {
	if x != nil && x.PsIflCccDownCnt != nil {
		return *x.PsIflCccDownCnt
	}
	return 0
}

func (x *JunosKernelHealthChassisTypeAggregatedDevicesType) GetRltLpLinkDownCnt() uint32 {
	if x != nil && x.RltLpLinkDownCnt != nil {
		return *x.RltLpLinkDownCnt
	}
	return 0
}

func (x *JunosKernelHealthChassisTypeAggregatedDevicesType) GetAeUnstackCnt() uint32 {
	if x != nil && x.AeUnstackCnt != nil {
		return *x.AeUnstackCnt
	}
	return 0
}

func (x *JunosKernelHealthChassisTypeAggregatedDevicesType) GetAeLpLinkDownCnt() uint32 {
	if x != nil && x.AeLpLinkDownCnt != nil {
		return *x.AeLpLinkDownCnt
	}
	return 0
}

type JunosKernelHealthRoutingOptionsTypeNonstopRoutingType struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	JsrSplitFailureCnt *uint32                `protobuf:"varint,506,opt,name=jsr_split_failure_cnt,json=jsrSplitFailureCnt" json:"jsr_split_failure_cnt,omitempty"`
	JsrMergeFailureCnt *uint32                `protobuf:"varint,507,opt,name=jsr_merge_failure_cnt,json=jsrMergeFailureCnt" json:"jsr_merge_failure_cnt,omitempty"`
	JsrPrlQueueFullCnt *uint32                `protobuf:"varint,508,opt,name=jsr_prl_queue_full_cnt,json=jsrPrlQueueFullCnt" json:"jsr_prl_queue_full_cnt,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *JunosKernelHealthRoutingOptionsTypeNonstopRoutingType) Reset() {
	*x = JunosKernelHealthRoutingOptionsTypeNonstopRoutingType{}
	mi := &file_jkhmd_oc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKernelHealthRoutingOptionsTypeNonstopRoutingType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKernelHealthRoutingOptionsTypeNonstopRoutingType) ProtoMessage() {}

func (x *JunosKernelHealthRoutingOptionsTypeNonstopRoutingType) ProtoReflect() protoreflect.Message {
	mi := &file_jkhmd_oc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKernelHealthRoutingOptionsTypeNonstopRoutingType.ProtoReflect.Descriptor instead.
func (*JunosKernelHealthRoutingOptionsTypeNonstopRoutingType) Descriptor() ([]byte, []int) {
	return file_jkhmd_oc_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *JunosKernelHealthRoutingOptionsTypeNonstopRoutingType) GetJsrSplitFailureCnt() uint32 {
	if x != nil && x.JsrSplitFailureCnt != nil {
		return *x.JsrSplitFailureCnt
	}
	return 0
}

func (x *JunosKernelHealthRoutingOptionsTypeNonstopRoutingType) GetJsrMergeFailureCnt() uint32 {
	if x != nil && x.JsrMergeFailureCnt != nil {
		return *x.JsrMergeFailureCnt
	}
	return 0
}

func (x *JunosKernelHealthRoutingOptionsTypeNonstopRoutingType) GetJsrPrlQueueFullCnt() uint32 {
	if x != nil && x.JsrPrlQueueFullCnt != nil {
		return *x.JsrPrlQueueFullCnt
	}
	return 0
}

type JunosKernelHealthKernelTypePeerInfraType struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	PeerPfemanConnDrops *uint32                `protobuf:"varint,51,opt,name=peer_pfeman_conn_drops,json=peerPfemanConnDrops" json:"peer_pfeman_conn_drops,omitempty"`
	SpuriousPptWkups    *uint32                `protobuf:"varint,52,opt,name=spurious_ppt_wkups,json=spuriousPptWkups" json:"spurious_ppt_wkups,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *JunosKernelHealthKernelTypePeerInfraType) Reset() {
	*x = JunosKernelHealthKernelTypePeerInfraType{}
	mi := &file_jkhmd_oc_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKernelHealthKernelTypePeerInfraType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKernelHealthKernelTypePeerInfraType) ProtoMessage() {}

func (x *JunosKernelHealthKernelTypePeerInfraType) ProtoReflect() protoreflect.Message {
	mi := &file_jkhmd_oc_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKernelHealthKernelTypePeerInfraType.ProtoReflect.Descriptor instead.
func (*JunosKernelHealthKernelTypePeerInfraType) Descriptor() ([]byte, []int) {
	return file_jkhmd_oc_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *JunosKernelHealthKernelTypePeerInfraType) GetPeerPfemanConnDrops() uint32 {
	if x != nil && x.PeerPfemanConnDrops != nil {
		return *x.PeerPfemanConnDrops
	}
	return 0
}

func (x *JunosKernelHealthKernelTypePeerInfraType) GetSpuriousPptWkups() uint32 {
	if x != nil && x.SpuriousPptWkups != nil {
		return *x.SpuriousPptWkups
	}
	return 0
}

type JunosKernelHealthKernelTypeVplsType struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	UnicastTokenCnt *uint32                `protobuf:"varint,213,opt,name=unicast_token_cnt,json=unicastTokenCnt" json:"unicast_token_cnt,omitempty"`
	UnicastTokenMax *uint32                `protobuf:"varint,214,opt,name=unicast_token_max,json=unicastTokenMax" json:"unicast_token_max,omitempty"`
	FloodTokenCnt   *uint32                `protobuf:"varint,215,opt,name=flood_token_cnt,json=floodTokenCnt" json:"flood_token_cnt,omitempty"`
	FloodTokenMax   *uint32                `protobuf:"varint,216,opt,name=flood_token_max,json=floodTokenMax" json:"flood_token_max,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *JunosKernelHealthKernelTypeVplsType) Reset() {
	*x = JunosKernelHealthKernelTypeVplsType{}
	mi := &file_jkhmd_oc_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKernelHealthKernelTypeVplsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKernelHealthKernelTypeVplsType) ProtoMessage() {}

func (x *JunosKernelHealthKernelTypeVplsType) ProtoReflect() protoreflect.Message {
	mi := &file_jkhmd_oc_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKernelHealthKernelTypeVplsType.ProtoReflect.Descriptor instead.
func (*JunosKernelHealthKernelTypeVplsType) Descriptor() ([]byte, []int) {
	return file_jkhmd_oc_proto_rawDescGZIP(), []int{0, 3, 1}
}

func (x *JunosKernelHealthKernelTypeVplsType) GetUnicastTokenCnt() uint32 {
	if x != nil && x.UnicastTokenCnt != nil {
		return *x.UnicastTokenCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeVplsType) GetUnicastTokenMax() uint32 {
	if x != nil && x.UnicastTokenMax != nil {
		return *x.UnicastTokenMax
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeVplsType) GetFloodTokenCnt() uint32 {
	if x != nil && x.FloodTokenCnt != nil {
		return *x.FloodTokenCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeVplsType) GetFloodTokenMax() uint32 {
	if x != nil && x.FloodTokenMax != nil {
		return *x.FloodTokenMax
	}
	return 0
}

type JunosKernelHealthKernelTypeTunnelType struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	RpfTunnelidCnt    *uint32                `protobuf:"varint,217,opt,name=rpf_tunnelid_cnt,json=rpfTunnelidCnt" json:"rpf_tunnelid_cnt,omitempty"`
	RpfTunnelidMax    *uint32                `protobuf:"varint,218,opt,name=rpf_tunnelid_max,json=rpfTunnelidMax" json:"rpf_tunnelid_max,omitempty"`
	NonrpfTunnelidCnt *uint32                `protobuf:"varint,219,opt,name=nonrpf_tunnelid_cnt,json=nonrpfTunnelidCnt" json:"nonrpf_tunnelid_cnt,omitempty"`
	NonrpfTunnelidMax *uint32                `protobuf:"varint,220,opt,name=nonrpf_tunnelid_max,json=nonrpfTunnelidMax" json:"nonrpf_tunnelid_max,omitempty"`
	LoopedCnt         *uint32                `protobuf:"varint,221,opt,name=looped_cnt,json=loopedCnt" json:"looped_cnt,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *JunosKernelHealthKernelTypeTunnelType) Reset() {
	*x = JunosKernelHealthKernelTypeTunnelType{}
	mi := &file_jkhmd_oc_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKernelHealthKernelTypeTunnelType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKernelHealthKernelTypeTunnelType) ProtoMessage() {}

func (x *JunosKernelHealthKernelTypeTunnelType) ProtoReflect() protoreflect.Message {
	mi := &file_jkhmd_oc_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKernelHealthKernelTypeTunnelType.ProtoReflect.Descriptor instead.
func (*JunosKernelHealthKernelTypeTunnelType) Descriptor() ([]byte, []int) {
	return file_jkhmd_oc_proto_rawDescGZIP(), []int{0, 3, 2}
}

func (x *JunosKernelHealthKernelTypeTunnelType) GetRpfTunnelidCnt() uint32 {
	if x != nil && x.RpfTunnelidCnt != nil {
		return *x.RpfTunnelidCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTunnelType) GetRpfTunnelidMax() uint32 {
	if x != nil && x.RpfTunnelidMax != nil {
		return *x.RpfTunnelidMax
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTunnelType) GetNonrpfTunnelidCnt() uint32 {
	if x != nil && x.NonrpfTunnelidCnt != nil {
		return *x.NonrpfTunnelidCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTunnelType) GetNonrpfTunnelidMax() uint32 {
	if x != nil && x.NonrpfTunnelidMax != nil {
		return *x.NonrpfTunnelidMax
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTunnelType) GetLoopedCnt() uint32 {
	if x != nil && x.LoopedCnt != nil {
		return *x.LoopedCnt
	}
	return 0
}

type JunosKernelHealthKernelTypeMulticastType struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	IifmismatchErrCnt *uint64                `protobuf:"varint,222,opt,name=iifmismatch_err_cnt,json=iifmismatchErrCnt" json:"iifmismatch_err_cnt,omitempty"`
	RslvReqErrCnt     *uint64                `protobuf:"varint,223,opt,name=rslv_req_err_cnt,json=rslvReqErrCnt" json:"rslv_req_err_cnt,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *JunosKernelHealthKernelTypeMulticastType) Reset() {
	*x = JunosKernelHealthKernelTypeMulticastType{}
	mi := &file_jkhmd_oc_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKernelHealthKernelTypeMulticastType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKernelHealthKernelTypeMulticastType) ProtoMessage() {}

func (x *JunosKernelHealthKernelTypeMulticastType) ProtoReflect() protoreflect.Message {
	mi := &file_jkhmd_oc_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKernelHealthKernelTypeMulticastType.ProtoReflect.Descriptor instead.
func (*JunosKernelHealthKernelTypeMulticastType) Descriptor() ([]byte, []int) {
	return file_jkhmd_oc_proto_rawDescGZIP(), []int{0, 3, 3}
}

func (x *JunosKernelHealthKernelTypeMulticastType) GetIifmismatchErrCnt() uint64 {
	if x != nil && x.IifmismatchErrCnt != nil {
		return *x.IifmismatchErrCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeMulticastType) GetRslvReqErrCnt() uint64 {
	if x != nil && x.RslvReqErrCnt != nil {
		return *x.RslvReqErrCnt
	}
	return 0
}

type JunosKernelHealthKernelTypeTnpType struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TnpHelloDropCnt *uint64                `protobuf:"varint,211,opt,name=tnp_hello_drop_cnt,json=tnpHelloDropCnt" json:"tnp_hello_drop_cnt,omitempty"`
	TnpFragDropCnt  *uint64                `protobuf:"varint,212,opt,name=tnp_frag_drop_cnt,json=tnpFragDropCnt" json:"tnp_frag_drop_cnt,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *JunosKernelHealthKernelTypeTnpType) Reset() {
	*x = JunosKernelHealthKernelTypeTnpType{}
	mi := &file_jkhmd_oc_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKernelHealthKernelTypeTnpType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKernelHealthKernelTypeTnpType) ProtoMessage() {}

func (x *JunosKernelHealthKernelTypeTnpType) ProtoReflect() protoreflect.Message {
	mi := &file_jkhmd_oc_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKernelHealthKernelTypeTnpType.ProtoReflect.Descriptor instead.
func (*JunosKernelHealthKernelTypeTnpType) Descriptor() ([]byte, []int) {
	return file_jkhmd_oc_proto_rawDescGZIP(), []int{0, 3, 4}
}

func (x *JunosKernelHealthKernelTypeTnpType) GetTnpHelloDropCnt() uint64 {
	if x != nil && x.TnpHelloDropCnt != nil {
		return *x.TnpHelloDropCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTnpType) GetTnpFragDropCnt() uint64 {
	if x != nil && x.TnpFragDropCnt != nil {
		return *x.TnpFragDropCnt
	}
	return 0
}

type JunosKernelHealthKernelTypeRecordMetaDataType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecordTime    *uint64                `protobuf:"varint,51,opt,name=record_time,json=recordTime" json:"record_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosKernelHealthKernelTypeRecordMetaDataType) Reset() {
	*x = JunosKernelHealthKernelTypeRecordMetaDataType{}
	mi := &file_jkhmd_oc_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKernelHealthKernelTypeRecordMetaDataType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKernelHealthKernelTypeRecordMetaDataType) ProtoMessage() {}

func (x *JunosKernelHealthKernelTypeRecordMetaDataType) ProtoReflect() protoreflect.Message {
	mi := &file_jkhmd_oc_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKernelHealthKernelTypeRecordMetaDataType.ProtoReflect.Descriptor instead.
func (*JunosKernelHealthKernelTypeRecordMetaDataType) Descriptor() ([]byte, []int) {
	return file_jkhmd_oc_proto_rawDescGZIP(), []int{0, 3, 5}
}

func (x *JunosKernelHealthKernelTypeRecordMetaDataType) GetRecordTime() uint64 {
	if x != nil && x.RecordTime != nil {
		return *x.RecordTime
	}
	return 0
}

type JunosKernelHealthKernelTypeRtsockType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalVetoCnt  *uint64                `protobuf:"varint,148,opt,name=total_veto_cnt,json=totalVetoCnt" json:"total_veto_cnt,omitempty"`
	TotalErrorCnt *uint64                `protobuf:"varint,149,opt,name=total_error_cnt,json=totalErrorCnt" json:"total_error_cnt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosKernelHealthKernelTypeRtsockType) Reset() {
	*x = JunosKernelHealthKernelTypeRtsockType{}
	mi := &file_jkhmd_oc_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKernelHealthKernelTypeRtsockType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKernelHealthKernelTypeRtsockType) ProtoMessage() {}

func (x *JunosKernelHealthKernelTypeRtsockType) ProtoReflect() protoreflect.Message {
	mi := &file_jkhmd_oc_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKernelHealthKernelTypeRtsockType.ProtoReflect.Descriptor instead.
func (*JunosKernelHealthKernelTypeRtsockType) Descriptor() ([]byte, []int) {
	return file_jkhmd_oc_proto_rawDescGZIP(), []int{0, 3, 6}
}

func (x *JunosKernelHealthKernelTypeRtsockType) GetTotalVetoCnt() uint64 {
	if x != nil && x.TotalVetoCnt != nil {
		return *x.TotalVetoCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeRtsockType) GetTotalErrorCnt() uint64 {
	if x != nil && x.TotalErrorCnt != nil {
		return *x.TotalErrorCnt
	}
	return 0
}

type JunosKernelHealthKernelTypeTcpipType struct {
	state         protoimpl.MessageState                          `protogen:"open.v1"`
	Tcp           *JunosKernelHealthKernelTypeTcpipTypeTcpType    `protobuf:"bytes,511,opt,name=tcp" json:"tcp,omitempty"`
	Nhidx         *JunosKernelHealthKernelTypeTcpipTypeNhidxType  `protobuf:"bytes,593,opt,name=nhidx" json:"nhidx,omitempty"`
	Rtb           *JunosKernelHealthKernelTypeTcpipTypeRtbType    `protobuf:"bytes,594,opt,name=rtb" json:"rtb,omitempty"`
	Arp           *JunosKernelHealthKernelTypeTcpipTypeArpType    `protobuf:"bytes,595,opt,name=arp" json:"arp,omitempty"`
	Ndp           *JunosKernelHealthKernelTypeTcpipTypeNdpType    `protobuf:"bytes,596,opt,name=ndp" json:"ndp,omitempty"`
	Netisr        *JunosKernelHealthKernelTypeTcpipTypeNetisrType `protobuf:"bytes,597,opt,name=netisr" json:"netisr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosKernelHealthKernelTypeTcpipType) Reset() {
	*x = JunosKernelHealthKernelTypeTcpipType{}
	mi := &file_jkhmd_oc_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKernelHealthKernelTypeTcpipType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKernelHealthKernelTypeTcpipType) ProtoMessage() {}

func (x *JunosKernelHealthKernelTypeTcpipType) ProtoReflect() protoreflect.Message {
	mi := &file_jkhmd_oc_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKernelHealthKernelTypeTcpipType.ProtoReflect.Descriptor instead.
func (*JunosKernelHealthKernelTypeTcpipType) Descriptor() ([]byte, []int) {
	return file_jkhmd_oc_proto_rawDescGZIP(), []int{0, 3, 7}
}

func (x *JunosKernelHealthKernelTypeTcpipType) GetTcp() *JunosKernelHealthKernelTypeTcpipTypeTcpType {
	if x != nil {
		return x.Tcp
	}
	return nil
}

func (x *JunosKernelHealthKernelTypeTcpipType) GetNhidx() *JunosKernelHealthKernelTypeTcpipTypeNhidxType {
	if x != nil {
		return x.Nhidx
	}
	return nil
}

func (x *JunosKernelHealthKernelTypeTcpipType) GetRtb() *JunosKernelHealthKernelTypeTcpipTypeRtbType {
	if x != nil {
		return x.Rtb
	}
	return nil
}

func (x *JunosKernelHealthKernelTypeTcpipType) GetArp() *JunosKernelHealthKernelTypeTcpipTypeArpType {
	if x != nil {
		return x.Arp
	}
	return nil
}

func (x *JunosKernelHealthKernelTypeTcpipType) GetNdp() *JunosKernelHealthKernelTypeTcpipTypeNdpType {
	if x != nil {
		return x.Ndp
	}
	return nil
}

func (x *JunosKernelHealthKernelTypeTcpipType) GetNetisr() *JunosKernelHealthKernelTypeTcpipTypeNetisrType {
	if x != nil {
		return x.Netisr
	}
	return nil
}

type JunosKernelHealthKernelTypeTcpipTypeTcpType struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TcpDdosAttackCnt *uint32                `protobuf:"varint,502,opt,name=tcp_ddos_attack_cnt,json=tcpDdosAttackCnt" json:"tcp_ddos_attack_cnt,omitempty"`
	TcpConndropsCnt  *uint32                `protobuf:"varint,503,opt,name=tcp_conndrops_cnt,json=tcpConndropsCnt" json:"tcp_conndrops_cnt,omitempty"`
	TcpTimeWaitConn  *uint64                `protobuf:"varint,504,opt,name=tcp_time_wait_conn,json=tcpTimeWaitConn" json:"tcp_time_wait_conn,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *JunosKernelHealthKernelTypeTcpipTypeTcpType) Reset() {
	*x = JunosKernelHealthKernelTypeTcpipTypeTcpType{}
	mi := &file_jkhmd_oc_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKernelHealthKernelTypeTcpipTypeTcpType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKernelHealthKernelTypeTcpipTypeTcpType) ProtoMessage() {}

func (x *JunosKernelHealthKernelTypeTcpipTypeTcpType) ProtoReflect() protoreflect.Message {
	mi := &file_jkhmd_oc_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKernelHealthKernelTypeTcpipTypeTcpType.ProtoReflect.Descriptor instead.
func (*JunosKernelHealthKernelTypeTcpipTypeTcpType) Descriptor() ([]byte, []int) {
	return file_jkhmd_oc_proto_rawDescGZIP(), []int{0, 3, 7, 0}
}

func (x *JunosKernelHealthKernelTypeTcpipTypeTcpType) GetTcpDdosAttackCnt() uint32 {
	if x != nil && x.TcpDdosAttackCnt != nil {
		return *x.TcpDdosAttackCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeTcpType) GetTcpConndropsCnt() uint32 {
	if x != nil && x.TcpConndropsCnt != nil {
		return *x.TcpConndropsCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeTcpType) GetTcpTimeWaitConn() uint64 {
	if x != nil && x.TcpTimeWaitConn != nil {
		return *x.TcpTimeWaitConn
	}
	return 0
}

type JunosKernelHealthKernelTypeTcpipTypeNhidxType struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	NexthopPubMax  *uint32                `protobuf:"varint,401,opt,name=nexthop_pub_max,json=nexthopPubMax" json:"nexthop_pub_max,omitempty"`
	NexthopPrivMax *uint32                `protobuf:"varint,402,opt,name=nexthop_priv_max,json=nexthopPrivMax" json:"nexthop_priv_max,omitempty"`
	NexthopPubCnt  *uint32                `protobuf:"varint,403,opt,name=nexthop_pub_cnt,json=nexthopPubCnt" json:"nexthop_pub_cnt,omitempty"`
	NexthopPrivCnt *uint32                `protobuf:"varint,404,opt,name=nexthop_priv_cnt,json=nexthopPrivCnt" json:"nexthop_priv_cnt,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNhidxType) Reset() {
	*x = JunosKernelHealthKernelTypeTcpipTypeNhidxType{}
	mi := &file_jkhmd_oc_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNhidxType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKernelHealthKernelTypeTcpipTypeNhidxType) ProtoMessage() {}

func (x *JunosKernelHealthKernelTypeTcpipTypeNhidxType) ProtoReflect() protoreflect.Message {
	mi := &file_jkhmd_oc_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKernelHealthKernelTypeTcpipTypeNhidxType.ProtoReflect.Descriptor instead.
func (*JunosKernelHealthKernelTypeTcpipTypeNhidxType) Descriptor() ([]byte, []int) {
	return file_jkhmd_oc_proto_rawDescGZIP(), []int{0, 3, 7, 1}
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNhidxType) GetNexthopPubMax() uint32 {
	if x != nil && x.NexthopPubMax != nil {
		return *x.NexthopPubMax
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNhidxType) GetNexthopPrivMax() uint32 {
	if x != nil && x.NexthopPrivMax != nil {
		return *x.NexthopPrivMax
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNhidxType) GetNexthopPubCnt() uint32 {
	if x != nil && x.NexthopPubCnt != nil {
		return *x.NexthopPubCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNhidxType) GetNexthopPrivCnt() uint32 {
	if x != nil && x.NexthopPrivCnt != nil {
		return *x.NexthopPrivCnt
	}
	return 0
}

type JunosKernelHealthKernelTypeTcpipTypeRtbType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RouteCloneMax *uint32                `protobuf:"varint,405,opt,name=route_clone_max,json=routeCloneMax" json:"route_clone_max,omitempty"`
	RouteCloneCnt *uint32                `protobuf:"varint,406,opt,name=route_clone_cnt,json=routeCloneCnt" json:"route_clone_cnt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosKernelHealthKernelTypeTcpipTypeRtbType) Reset() {
	*x = JunosKernelHealthKernelTypeTcpipTypeRtbType{}
	mi := &file_jkhmd_oc_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKernelHealthKernelTypeTcpipTypeRtbType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKernelHealthKernelTypeTcpipTypeRtbType) ProtoMessage() {}

func (x *JunosKernelHealthKernelTypeTcpipTypeRtbType) ProtoReflect() protoreflect.Message {
	mi := &file_jkhmd_oc_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKernelHealthKernelTypeTcpipTypeRtbType.ProtoReflect.Descriptor instead.
func (*JunosKernelHealthKernelTypeTcpipTypeRtbType) Descriptor() ([]byte, []int) {
	return file_jkhmd_oc_proto_rawDescGZIP(), []int{0, 3, 7, 2}
}

func (x *JunosKernelHealthKernelTypeTcpipTypeRtbType) GetRouteCloneMax() uint32 {
	if x != nil && x.RouteCloneMax != nil {
		return *x.RouteCloneMax
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeRtbType) GetRouteCloneCnt() uint32 {
	if x != nil && x.RouteCloneCnt != nil {
		return *x.RouteCloneCnt
	}
	return 0
}

type JunosKernelHealthKernelTypeTcpipTypeArpType struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	NbrcacheIriMax        *uint32                `protobuf:"varint,407,opt,name=nbrcache_iri_max,json=nbrcacheIriMax" json:"nbrcache_iri_max,omitempty"`
	NbrcacheMgmtMax       *uint32                `protobuf:"varint,408,opt,name=nbrcache_mgmt_max,json=nbrcacheMgmtMax" json:"nbrcache_mgmt_max,omitempty"`
	NbrcachePublicMax     *uint32                `protobuf:"varint,409,opt,name=nbrcache_public_max,json=nbrcachePublicMax" json:"nbrcache_public_max,omitempty"`
	NbrcacheIriCnt        *uint32                `protobuf:"varint,410,opt,name=nbrcache_iri_cnt,json=nbrcacheIriCnt" json:"nbrcache_iri_cnt,omitempty"`
	NbrcacheMgmtCnt       *uint32                `protobuf:"varint,411,opt,name=nbrcache_mgmt_cnt,json=nbrcacheMgmtCnt" json:"nbrcache_mgmt_cnt,omitempty"`
	NbrcachePublicCnt     *uint32                `protobuf:"varint,412,opt,name=nbrcache_public_cnt,json=nbrcachePublicCnt" json:"nbrcache_public_cnt,omitempty"`
	NbrcacheIriDropCnt    *uint32                `protobuf:"varint,413,opt,name=nbrcache_iri_drop_cnt,json=nbrcacheIriDropCnt" json:"nbrcache_iri_drop_cnt,omitempty"`
	NbrcacheMgmtDropCnt   *uint32                `protobuf:"varint,414,opt,name=nbrcache_mgmt_drop_cnt,json=nbrcacheMgmtDropCnt" json:"nbrcache_mgmt_drop_cnt,omitempty"`
	NbrcachePublicDropCnt *uint32                `protobuf:"varint,415,opt,name=nbrcache_public_drop_cnt,json=nbrcachePublicDropCnt" json:"nbrcache_public_drop_cnt,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *JunosKernelHealthKernelTypeTcpipTypeArpType) Reset() {
	*x = JunosKernelHealthKernelTypeTcpipTypeArpType{}
	mi := &file_jkhmd_oc_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKernelHealthKernelTypeTcpipTypeArpType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKernelHealthKernelTypeTcpipTypeArpType) ProtoMessage() {}

func (x *JunosKernelHealthKernelTypeTcpipTypeArpType) ProtoReflect() protoreflect.Message {
	mi := &file_jkhmd_oc_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKernelHealthKernelTypeTcpipTypeArpType.ProtoReflect.Descriptor instead.
func (*JunosKernelHealthKernelTypeTcpipTypeArpType) Descriptor() ([]byte, []int) {
	return file_jkhmd_oc_proto_rawDescGZIP(), []int{0, 3, 7, 3}
}

func (x *JunosKernelHealthKernelTypeTcpipTypeArpType) GetNbrcacheIriMax() uint32 {
	if x != nil && x.NbrcacheIriMax != nil {
		return *x.NbrcacheIriMax
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeArpType) GetNbrcacheMgmtMax() uint32 {
	if x != nil && x.NbrcacheMgmtMax != nil {
		return *x.NbrcacheMgmtMax
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeArpType) GetNbrcachePublicMax() uint32 {
	if x != nil && x.NbrcachePublicMax != nil {
		return *x.NbrcachePublicMax
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeArpType) GetNbrcacheIriCnt() uint32 {
	if x != nil && x.NbrcacheIriCnt != nil {
		return *x.NbrcacheIriCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeArpType) GetNbrcacheMgmtCnt() uint32 {
	if x != nil && x.NbrcacheMgmtCnt != nil {
		return *x.NbrcacheMgmtCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeArpType) GetNbrcachePublicCnt() uint32 {
	if x != nil && x.NbrcachePublicCnt != nil {
		return *x.NbrcachePublicCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeArpType) GetNbrcacheIriDropCnt() uint32 {
	if x != nil && x.NbrcacheIriDropCnt != nil {
		return *x.NbrcacheIriDropCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeArpType) GetNbrcacheMgmtDropCnt() uint32 {
	if x != nil && x.NbrcacheMgmtDropCnt != nil {
		return *x.NbrcacheMgmtDropCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeArpType) GetNbrcachePublicDropCnt() uint32 {
	if x != nil && x.NbrcachePublicDropCnt != nil {
		return *x.NbrcachePublicDropCnt
	}
	return 0
}

type JunosKernelHealthKernelTypeTcpipTypeNdpType struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	NbrcacheIriMax        *uint32                `protobuf:"varint,416,opt,name=nbrcache_iri_max,json=nbrcacheIriMax" json:"nbrcache_iri_max,omitempty"`
	NbrcacheMgmtMax       *uint32                `protobuf:"varint,417,opt,name=nbrcache_mgmt_max,json=nbrcacheMgmtMax" json:"nbrcache_mgmt_max,omitempty"`
	NbrcachePublicMax     *uint32                `protobuf:"varint,418,opt,name=nbrcache_public_max,json=nbrcachePublicMax" json:"nbrcache_public_max,omitempty"`
	NbrcacheIriCnt        *uint32                `protobuf:"varint,419,opt,name=nbrcache_iri_cnt,json=nbrcacheIriCnt" json:"nbrcache_iri_cnt,omitempty"`
	NbrcacheMgmtCnt       *uint32                `protobuf:"varint,420,opt,name=nbrcache_mgmt_cnt,json=nbrcacheMgmtCnt" json:"nbrcache_mgmt_cnt,omitempty"`
	NbrcachePublicCnt     *uint32                `protobuf:"varint,421,opt,name=nbrcache_public_cnt,json=nbrcachePublicCnt" json:"nbrcache_public_cnt,omitempty"`
	NbrcacheIriDropCnt    *uint32                `protobuf:"varint,422,opt,name=nbrcache_iri_drop_cnt,json=nbrcacheIriDropCnt" json:"nbrcache_iri_drop_cnt,omitempty"`
	NbrcacheMgmtDropCnt   *uint32                `protobuf:"varint,423,opt,name=nbrcache_mgmt_drop_cnt,json=nbrcacheMgmtDropCnt" json:"nbrcache_mgmt_drop_cnt,omitempty"`
	NbrcachePublicDropCnt *uint32                `protobuf:"varint,424,opt,name=nbrcache_public_drop_cnt,json=nbrcachePublicDropCnt" json:"nbrcache_public_drop_cnt,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNdpType) Reset() {
	*x = JunosKernelHealthKernelTypeTcpipTypeNdpType{}
	mi := &file_jkhmd_oc_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNdpType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKernelHealthKernelTypeTcpipTypeNdpType) ProtoMessage() {}

func (x *JunosKernelHealthKernelTypeTcpipTypeNdpType) ProtoReflect() protoreflect.Message {
	mi := &file_jkhmd_oc_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKernelHealthKernelTypeTcpipTypeNdpType.ProtoReflect.Descriptor instead.
func (*JunosKernelHealthKernelTypeTcpipTypeNdpType) Descriptor() ([]byte, []int) {
	return file_jkhmd_oc_proto_rawDescGZIP(), []int{0, 3, 7, 4}
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNdpType) GetNbrcacheIriMax() uint32 {
	if x != nil && x.NbrcacheIriMax != nil {
		return *x.NbrcacheIriMax
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNdpType) GetNbrcacheMgmtMax() uint32 {
	if x != nil && x.NbrcacheMgmtMax != nil {
		return *x.NbrcacheMgmtMax
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNdpType) GetNbrcachePublicMax() uint32 {
	if x != nil && x.NbrcachePublicMax != nil {
		return *x.NbrcachePublicMax
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNdpType) GetNbrcacheIriCnt() uint32 {
	if x != nil && x.NbrcacheIriCnt != nil {
		return *x.NbrcacheIriCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNdpType) GetNbrcacheMgmtCnt() uint32 {
	if x != nil && x.NbrcacheMgmtCnt != nil {
		return *x.NbrcacheMgmtCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNdpType) GetNbrcachePublicCnt() uint32 {
	if x != nil && x.NbrcachePublicCnt != nil {
		return *x.NbrcachePublicCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNdpType) GetNbrcacheIriDropCnt() uint32 {
	if x != nil && x.NbrcacheIriDropCnt != nil {
		return *x.NbrcacheIriDropCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNdpType) GetNbrcacheMgmtDropCnt() uint32 {
	if x != nil && x.NbrcacheMgmtDropCnt != nil {
		return *x.NbrcacheMgmtDropCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNdpType) GetNbrcachePublicDropCnt() uint32 {
	if x != nil && x.NbrcachePublicDropCnt != nil {
		return *x.NbrcachePublicDropCnt
	}
	return 0
}

type JunosKernelHealthKernelTypeTcpipTypeNetisrType struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	EtherWmCnt      *uint32                `protobuf:"varint,425,opt,name=ether_wm_cnt,json=etherWmCnt" json:"ether_wm_cnt,omitempty"`
	EtherDropCnt    *uint32                `protobuf:"varint,426,opt,name=ether_drop_cnt,json=etherDropCnt" json:"ether_drop_cnt,omitempty"`
	EtherPktHandled *uint64                `protobuf:"varint,427,opt,name=ether_pkt_handled,json=etherPktHandled" json:"ether_pkt_handled,omitempty"`
	EtherPktQueued  *uint64                `protobuf:"varint,428,opt,name=ether_pkt_queued,json=etherPktQueued" json:"ether_pkt_queued,omitempty"`
	IpWmCnt         *uint32                `protobuf:"varint,429,opt,name=ip_wm_cnt,json=ipWmCnt" json:"ip_wm_cnt,omitempty"`
	IpDropCnt       *uint32                `protobuf:"varint,430,opt,name=ip_drop_cnt,json=ipDropCnt" json:"ip_drop_cnt,omitempty"`
	IpPktHandled    *uint64                `protobuf:"varint,431,opt,name=ip_pkt_handled,json=ipPktHandled" json:"ip_pkt_handled,omitempty"`
	IpPktQueued     *uint64                `protobuf:"varint,432,opt,name=ip_pkt_queued,json=ipPktQueued" json:"ip_pkt_queued,omitempty"`
	Ip6WmCnt        *uint32                `protobuf:"varint,433,opt,name=ip6_wm_cnt,json=ip6WmCnt" json:"ip6_wm_cnt,omitempty"`
	Ip6DropCnt      *uint32                `protobuf:"varint,434,opt,name=ip6_drop_cnt,json=ip6DropCnt" json:"ip6_drop_cnt,omitempty"`
	Ip6PktHandled   *uint64                `protobuf:"varint,435,opt,name=ip6_pkt_handled,json=ip6PktHandled" json:"ip6_pkt_handled,omitempty"`
	Ip6PktQueued    *uint64                `protobuf:"varint,436,opt,name=ip6_pkt_queued,json=ip6PktQueued" json:"ip6_pkt_queued,omitempty"`
	ArpWmCnt        *uint32                `protobuf:"varint,437,opt,name=arp_wm_cnt,json=arpWmCnt" json:"arp_wm_cnt,omitempty"`
	ArpDropCnt      *uint32                `protobuf:"varint,438,opt,name=arp_drop_cnt,json=arpDropCnt" json:"arp_drop_cnt,omitempty"`
	ArpPktHandled   *uint64                `protobuf:"varint,439,opt,name=arp_pkt_handled,json=arpPktHandled" json:"arp_pkt_handled,omitempty"`
	ArpPktQueued    *uint64                `protobuf:"varint,440,opt,name=arp_pkt_queued,json=arpPktQueued" json:"arp_pkt_queued,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNetisrType) Reset() {
	*x = JunosKernelHealthKernelTypeTcpipTypeNetisrType{}
	mi := &file_jkhmd_oc_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNetisrType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKernelHealthKernelTypeTcpipTypeNetisrType) ProtoMessage() {}

func (x *JunosKernelHealthKernelTypeTcpipTypeNetisrType) ProtoReflect() protoreflect.Message {
	mi := &file_jkhmd_oc_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKernelHealthKernelTypeTcpipTypeNetisrType.ProtoReflect.Descriptor instead.
func (*JunosKernelHealthKernelTypeTcpipTypeNetisrType) Descriptor() ([]byte, []int) {
	return file_jkhmd_oc_proto_rawDescGZIP(), []int{0, 3, 7, 5}
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNetisrType) GetEtherWmCnt() uint32 {
	if x != nil && x.EtherWmCnt != nil {
		return *x.EtherWmCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNetisrType) GetEtherDropCnt() uint32 {
	if x != nil && x.EtherDropCnt != nil {
		return *x.EtherDropCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNetisrType) GetEtherPktHandled() uint64 {
	if x != nil && x.EtherPktHandled != nil {
		return *x.EtherPktHandled
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNetisrType) GetEtherPktQueued() uint64 {
	if x != nil && x.EtherPktQueued != nil {
		return *x.EtherPktQueued
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNetisrType) GetIpWmCnt() uint32 {
	if x != nil && x.IpWmCnt != nil {
		return *x.IpWmCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNetisrType) GetIpDropCnt() uint32 {
	if x != nil && x.IpDropCnt != nil {
		return *x.IpDropCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNetisrType) GetIpPktHandled() uint64 {
	if x != nil && x.IpPktHandled != nil {
		return *x.IpPktHandled
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNetisrType) GetIpPktQueued() uint64 {
	if x != nil && x.IpPktQueued != nil {
		return *x.IpPktQueued
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNetisrType) GetIp6WmCnt() uint32 {
	if x != nil && x.Ip6WmCnt != nil {
		return *x.Ip6WmCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNetisrType) GetIp6DropCnt() uint32 {
	if x != nil && x.Ip6DropCnt != nil {
		return *x.Ip6DropCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNetisrType) GetIp6PktHandled() uint64 {
	if x != nil && x.Ip6PktHandled != nil {
		return *x.Ip6PktHandled
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNetisrType) GetIp6PktQueued() uint64 {
	if x != nil && x.Ip6PktQueued != nil {
		return *x.Ip6PktQueued
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNetisrType) GetArpWmCnt() uint32 {
	if x != nil && x.ArpWmCnt != nil {
		return *x.ArpWmCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNetisrType) GetArpDropCnt() uint32 {
	if x != nil && x.ArpDropCnt != nil {
		return *x.ArpDropCnt
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNetisrType) GetArpPktHandled() uint64 {
	if x != nil && x.ArpPktHandled != nil {
		return *x.ArpPktHandled
	}
	return 0
}

func (x *JunosKernelHealthKernelTypeTcpipTypeNetisrType) GetArpPktQueued() uint64 {
	if x != nil && x.ArpPktQueued != nil {
		return *x.ArpPktQueued
	}
	return 0
}

var file_jkhmd_oc_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*JunosKernelHealth)(nil),
		Field:         85,
		Name:          "jnpr_junos_kernel_health_ext",
		Tag:           "bytes,85,opt,name=jnpr_junos_kernel_health_ext",
		Filename:      "jkhmd_oc.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional junos_kernel_health jnpr_junos_kernel_health_ext = 85;
	E_JnprJunosKernelHealthExt = &file_jkhmd_oc_proto_extTypes[0]
)

var File_jkhmd_oc_proto protoreflect.FileDescriptor

var file_jkhmd_oc_proto_rawDesc = string([]byte{
	0x0a, 0x0e, 0x6a, 0x6b, 0x68, 0x6d, 0x64, 0x5f, 0x6f, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x13, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x2f, 0x0a, 0x13, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f,
	0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x3c, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x18, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x12, 0x53, 0x0a, 0x0f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xfd,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x3f, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0xb7, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x39, 0x0a, 0x06, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x18, 0xc0, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x12, 0x50, 0x0a, 0x0e,
	0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x66, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xba,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x66, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x66, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xdf,
	0x07, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x40, 0x0a, 0x04, 0x67, 0x72, 0x65, 0x73, 0x18, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x67, 0x72, 0x65,
	0x73, 0x12, 0x40, 0x0a, 0x04, 0x69, 0x73, 0x73, 0x75, 0x18, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x69,
	0x73, 0x73, 0x75, 0x12, 0x69, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0xdf, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x11, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x81,
	0x03, 0x0a, 0x09, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x67, 0x72, 0x65, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x67, 0x72, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6c, 0x61,
	0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x6c, 0x61, 0x76, 0x65, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x5f, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x52, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x98,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x41, 0x6c,
	0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x1a, 0x5e, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x73, 0x73, 0x75, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x73, 0x73, 0x75, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x1a, 0xfb, 0x01, 0x0a, 0x17, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x70, 0x73, 0x5f, 0x6c, 0x74, 0x5f, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f,
	0x63, 0x6e, 0x74, 0x18, 0xb7, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x73, 0x4c, 0x74,
	0x55, 0x6e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x70, 0x73,
	0x5f, 0x69, 0x66, 0x6c, 0x5f, 0x63, 0x63, 0x63, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x63, 0x6e,
	0x74, 0x18, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x73, 0x49, 0x66, 0x6c, 0x43,
	0x63, 0x63, 0x44, 0x6f, 0x77, 0x6e, 0x43, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x72, 0x6c, 0x74,
	0x5f, 0x6c, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x63, 0x6e,
	0x74, 0x18, 0xb9, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x6c, 0x74, 0x4c, 0x70, 0x4c,
	0x69, 0x6e, 0x6b, 0x44, 0x6f, 0x77, 0x6e, 0x43, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x65,
	0x5f, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xba, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x65, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6e,
	0x74, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x65, 0x5f, 0x6c, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xbb, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x61, 0x65, 0x4c, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x6f, 0x77, 0x6e, 0x43, 0x6e, 0x74,
	0x1a, 0xb6, 0x02, 0x0a, 0x14, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x68, 0x0a, 0x0f, 0x6e, 0x6f, 0x6e,
	0x73, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0xfe, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e,
	0x6f, 0x6e, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x0e, 0x6e, 0x6f, 0x6e, 0x73, 0x74, 0x6f, 0x70, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x1a, 0xb3, 0x01, 0x0a, 0x14, 0x6e, 0x6f, 0x6e, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x6a, 0x73, 0x72, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xfa, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6a, 0x73,
	0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x6e, 0x74,
	0x12, 0x32, 0x0a, 0x15, 0x6a, 0x73, 0x72, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xfb, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x6a, 0x73, 0x72, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x43, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x6a, 0x73, 0x72, 0x5f, 0x70, 0x72, 0x6c, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xfc,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6a, 0x73, 0x72, 0x50, 0x72, 0x6c, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x6e, 0x74, 0x1a, 0x36, 0x0a, 0x0d, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x65,
	0x72, 0x69, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x65, 0x78, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0xce, 0x1e, 0x0a, 0x0b, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x50, 0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x18,
	0xb8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6b,
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x6b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x65, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x72, 0x61, 0x12, 0x3f, 0x0a, 0x04, 0x76, 0x70, 0x6c, 0x73, 0x18, 0xc9, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x76, 0x70, 0x6c, 0x73, 0x12, 0x45, 0x0a, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0xca,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x4e, 0x0a, 0x09, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x03, 0x74,
	0x6e, 0x70, 0x18, 0xe1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6a, 0x75, 0x6e, 0x6f,
	0x73, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6e, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x03, 0x74, 0x6e, 0x70, 0x12, 0x61, 0x0a, 0x10, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xb9, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x06,
	0x72, 0x74, 0x73, 0x6f, 0x63, 0x6b, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x72, 0x74, 0x73, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x06, 0x72, 0x74, 0x73,
	0x6f, 0x63, 0x6b, 0x12, 0x42, 0x0a, 0x05, 0x74, 0x63, 0x70, 0x69, 0x70, 0x18, 0xd6, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x63, 0x70, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x74, 0x63, 0x70, 0x69, 0x70, 0x1a, 0x74, 0x0a, 0x0f, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x70, 0x66, 0x65, 0x6d, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x64,
	0x72, 0x6f, 0x70, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x70, 0x65, 0x65, 0x72,
	0x50, 0x66, 0x65, 0x6d, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x70, 0x75, 0x72, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x70, 0x70, 0x74, 0x5f,
	0x77, 0x6b, 0x75, 0x70, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x70, 0x75,
	0x72, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x70, 0x74, 0x57, 0x6b, 0x75, 0x70, 0x73, 0x1a, 0xb7, 0x01,
	0x0a, 0x09, 0x76, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6e, 0x74,
	0x18, 0xd5, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0xd6, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x4d, 0x61, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xd7, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6e, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0xd8, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x78, 0x1a, 0xe5, 0x01, 0x0a, 0x0b, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x70, 0x66, 0x5f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xd9, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x72, 0x70, 0x66, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x64, 0x43,
	0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x70, 0x66, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x69, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0xda, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72,
	0x70, 0x66, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x2f, 0x0a,
	0x13, 0x6e, 0x6f, 0x6e, 0x72, 0x70, 0x66, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x64,
	0x5f, 0x63, 0x6e, 0x74, 0x18, 0xdb, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e, 0x6f, 0x6e,
	0x72, 0x70, 0x66, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x64, 0x43, 0x6e, 0x74, 0x12, 0x2f,
	0x0a, 0x13, 0x6e, 0x6f, 0x6e, 0x72, 0x70, 0x66, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x69,
	0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e, 0x6f,
	0x6e, 0x72, 0x70, 0x66, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x78, 0x12,
	0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x6f, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xdd, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x6f, 0x6f, 0x70, 0x65, 0x64, 0x43, 0x6e, 0x74, 0x1a,
	0x6b, 0x0a, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x69, 0x66, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x65, 0x72, 0x72, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xde, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x69, 0x69, 0x66, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x72, 0x72, 0x43,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x73, 0x6c, 0x76, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x65,
	0x72, 0x72, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xdf, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72,
	0x73, 0x6c, 0x76, 0x52, 0x65, 0x71, 0x45, 0x72, 0x72, 0x43, 0x6e, 0x74, 0x1a, 0x64, 0x0a, 0x08,
	0x74, 0x6e, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6e, 0x70, 0x5f,
	0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xd3,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x6e, 0x70, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x44,
	0x72, 0x6f, 0x70, 0x43, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6e, 0x70, 0x5f, 0x66, 0x72,
	0x61, 0x67, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xd4, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x74, 0x6e, 0x70, 0x46, 0x72, 0x61, 0x67, 0x44, 0x72, 0x6f, 0x70, 0x43,
	0x6e, 0x74, 0x1a, 0x38, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x5d, 0x0a, 0x0b,
	0x72, 0x74, 0x73, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x65, 0x74, 0x6f, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x94, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x65, 0x74, 0x6f, 0x43,
	0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x95, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6e, 0x74, 0x1a, 0xe4, 0x12, 0x0a, 0x0a,
	0x74, 0x63, 0x70, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x03, 0x74, 0x63,
	0x70, 0x18, 0xff, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73,
	0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x6b,
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x63, 0x70, 0x69, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x63, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x03,
	0x74, 0x63, 0x70, 0x12, 0x4d, 0x0a, 0x05, 0x6e, 0x68, 0x69, 0x64, 0x78, 0x18, 0xd1, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x63, 0x70, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6e, 0x68, 0x69, 0x64, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x6e, 0x68, 0x69,
	0x64, 0x78, 0x12, 0x47, 0x0a, 0x03, 0x72, 0x74, 0x62, 0x18, 0xd2, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x74, 0x63, 0x70, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x74,
	0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x03, 0x72, 0x74, 0x62, 0x12, 0x47, 0x0a, 0x03, 0x61,
	0x72, 0x70, 0x18, 0xd3, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6a, 0x75, 0x6e, 0x6f,
	0x73, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x63, 0x70, 0x69,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x72, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x03, 0x61, 0x72, 0x70, 0x12, 0x47, 0x0a, 0x03, 0x6e, 0x64, 0x70, 0x18, 0xd4, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x63, 0x70, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6e, 0x64, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x03, 0x6e, 0x64, 0x70, 0x12, 0x50, 0x0a,
	0x06, 0x6e, 0x65, 0x74, 0x69, 0x73, 0x72, 0x18, 0xd5, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x74, 0x63, 0x70, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x69,
	0x73, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6e, 0x65, 0x74, 0x69, 0x73, 0x72, 0x1a,
	0x95, 0x01, 0x0a, 0x08, 0x74, 0x63, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x74, 0x63, 0x70, 0x5f, 0x64, 0x64, 0x6f, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f,
	0x63, 0x6e, 0x74, 0x18, 0xf6, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x63, 0x70, 0x44,
	0x64, 0x6f, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11,
	0x74, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x5f, 0x63, 0x6e,
	0x74, 0x18, 0xf7, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x63, 0x70, 0x43, 0x6f, 0x6e,
	0x6e, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x43, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x63, 0x70,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18,
	0xf8, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x63, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x57,
	0x61, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x1a, 0xb4, 0x01, 0x0a, 0x0a, 0x6e, 0x68, 0x69, 0x64,
	0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f,
	0x70, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x91, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x50, 0x75, 0x62, 0x4d, 0x61, 0x78, 0x12,
	0x29, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x5f,
	0x6d, 0x61, 0x78, 0x18, 0x92, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x76, 0x4d, 0x61, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x93, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x50, 0x75, 0x62,
	0x43, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x70,
	0x72, 0x69, 0x76, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x94, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x76, 0x43, 0x6e, 0x74, 0x1a, 0x5c,
	0x0a, 0x08, 0x72, 0x74, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x95, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65,
	0x4d, 0x61, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x6f,
	0x6e, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x96, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x43, 0x6e, 0x74, 0x1a, 0xc0, 0x03, 0x0a,
	0x08, 0x61, 0x72, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x62, 0x72,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x69, 0x72, 0x69, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x97, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x62, 0x72, 0x63, 0x61, 0x63, 0x68, 0x65, 0x49, 0x72,
	0x69, 0x4d, 0x61, 0x78, 0x12, 0x2b, 0x0a, 0x11, 0x6e, 0x62, 0x72, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x98, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x6e, 0x62, 0x72, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x67, 0x6d, 0x74, 0x4d, 0x61,
	0x78, 0x12, 0x2f, 0x0a, 0x13, 0x6e, 0x62, 0x72, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x99, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x6e, 0x62, 0x72, 0x63, 0x61, 0x63, 0x68, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4d,
	0x61, 0x78, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x62, 0x72, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x69,
	0x72, 0x69, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x9a, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e,
	0x62, 0x72, 0x63, 0x61, 0x63, 0x68, 0x65, 0x49, 0x72, 0x69, 0x43, 0x6e, 0x74, 0x12, 0x2b, 0x0a,
	0x11, 0x6e, 0x62, 0x72, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x63,
	0x6e, 0x74, 0x18, 0x9b, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x62, 0x72, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x4d, 0x67, 0x6d, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x6e, 0x62,
	0x72, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x63, 0x6e,
	0x74, 0x18, 0x9c, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e, 0x62, 0x72, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6e,
	0x62, 0x72, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x69, 0x72, 0x69, 0x5f, 0x64, 0x72, 0x6f, 0x70,
	0x5f, 0x63, 0x6e, 0x74, 0x18, 0x9d, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6e, 0x62, 0x72,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x49, 0x72, 0x69, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6e, 0x74, 0x12,
	0x34, 0x0a, 0x16, 0x6e, 0x62, 0x72, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6d, 0x67, 0x6d, 0x74,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x9e, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x6e, 0x62, 0x72, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x67, 0x6d, 0x74, 0x44, 0x72,
	0x6f, 0x70, 0x43, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x6e, 0x62, 0x72, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6e,
	0x74, 0x18, 0x9f, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6e, 0x62, 0x72, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6e, 0x74, 0x1a,
	0xc0, 0x03, 0x0a, 0x08, 0x6e, 0x64, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x6e, 0x62, 0x72, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x69, 0x72, 0x69, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0xa0, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x62, 0x72, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x49, 0x72, 0x69, 0x4d, 0x61, 0x78, 0x12, 0x2b, 0x0a, 0x11, 0x6e, 0x62, 0x72, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0xa1, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x62, 0x72, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x67, 0x6d,
	0x74, 0x4d, 0x61, 0x78, 0x12, 0x2f, 0x0a, 0x13, 0x6e, 0x62, 0x72, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0xa2, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x6e, 0x62, 0x72, 0x63, 0x61, 0x63, 0x68, 0x65, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4d, 0x61, 0x78, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x62, 0x72, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x69, 0x72, 0x69, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xa3, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x6e, 0x62, 0x72, 0x63, 0x61, 0x63, 0x68, 0x65, 0x49, 0x72, 0x69, 0x43, 0x6e, 0x74,
	0x12, 0x2b, 0x0a, 0x11, 0x6e, 0x62, 0x72, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6d, 0x67, 0x6d,
	0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xa4, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x62,
	0x72, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x67, 0x6d, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x2f, 0x0a,
	0x13, 0x6e, 0x62, 0x72, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x63, 0x6e, 0x74, 0x18, 0xa5, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e, 0x62, 0x72,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x6e, 0x74, 0x12, 0x32,
	0x0a, 0x15, 0x6e, 0x62, 0x72, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x69, 0x72, 0x69, 0x5f, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xa6, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x6e, 0x62, 0x72, 0x63, 0x61, 0x63, 0x68, 0x65, 0x49, 0x72, 0x69, 0x44, 0x72, 0x6f, 0x70, 0x43,
	0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x62, 0x72, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6d,
	0x67, 0x6d, 0x74, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xa7, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x6e, 0x62, 0x72, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x67, 0x6d,
	0x74, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x6e, 0x62, 0x72, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x64, 0x72, 0x6f, 0x70,
	0x5f, 0x63, 0x6e, 0x74, 0x18, 0xa8, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6e, 0x62, 0x72,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x72, 0x6f, 0x70, 0x43,
	0x6e, 0x74, 0x1a, 0xdd, 0x04, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x69, 0x73, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x77, 0x6d, 0x5f, 0x63,
	0x6e, 0x74, 0x18, 0xa9, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x57, 0x6d, 0x43, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xaa, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x64, 0x18, 0xab, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x50,
	0x6b, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x18, 0xac, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x50, 0x6b, 0x74, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x70, 0x5f, 0x77, 0x6d, 0x5f, 0x63, 0x6e,
	0x74, 0x18, 0xad, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x70, 0x57, 0x6d, 0x43, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x70, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6e, 0x74,
	0x18, 0xae, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x70, 0x44, 0x72, 0x6f, 0x70, 0x43,
	0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x70, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x64, 0x18, 0xaf, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x69, 0x70, 0x50,
	0x6b, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x70, 0x5f,
	0x70, 0x6b, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x18, 0xb0, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x69, 0x70, 0x50, 0x6b, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x70, 0x36, 0x5f, 0x77, 0x6d, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xb1, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x70, 0x36, 0x57, 0x6d, 0x43, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x70, 0x36, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xb2, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x70, 0x36, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x69, 0x70, 0x36, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x64, 0x18, 0xb3, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x69, 0x70, 0x36, 0x50,
	0x6b, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x70, 0x36,
	0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x18, 0xb4, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x69, 0x70, 0x36, 0x50, 0x6b, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x70, 0x5f, 0x77, 0x6d, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xb5,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x72, 0x70, 0x57, 0x6d, 0x43, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x72, 0x70, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6e, 0x74, 0x18,
	0xb6, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x72, 0x70, 0x44, 0x72, 0x6f, 0x70, 0x43,
	0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x72, 0x70, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x64, 0x18, 0xb7, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x61, 0x72,
	0x70, 0x50, 0x6b, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61,
	0x72, 0x70, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x18, 0xb8, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x72, 0x70, 0x50, 0x6b, 0x74, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x64, 0x1a, 0xff, 0x02, 0x0a, 0x13, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x66,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65,
	0x61, 0x64, 0x5f, 0x69, 0x66, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x65, 0x61, 0x64, 0x49, 0x66, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x43, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x69, 0x66, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x66, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x43, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f,
	0x75, 0x6e, 0x72, 0x65, 0x66, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x55, 0x6e, 0x72, 0x65, 0x66, 0x73, 0x43,
	0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x75, 0x6e,
	0x72, 0x65, 0x66, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x55, 0x6e, 0x72, 0x65, 0x66, 0x73, 0x4d, 0x61, 0x78,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x75, 0x63, 0x6b, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x74, 0x75,
	0x63, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x64, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6e, 0x74,
	0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x43, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x43,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x3a, 0x6d, 0x0a, 0x1c, 0x6a, 0x6e, 0x70, 0x72, 0x5f, 0x6a, 0x75, 0x6e,
	0x6f, 0x73, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x5f, 0x65, 0x78, 0x74, 0x12, 0x17, 0x2e, 0x4a, 0x75, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x55, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x18, 0x6a, 0x6e, 0x70, 0x72, 0x4a,
	0x75, 0x6e, 0x6f, 0x73, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x45, 0x78, 0x74, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65,
})

var (
	file_jkhmd_oc_proto_rawDescOnce sync.Once
	file_jkhmd_oc_proto_rawDescData []byte
)

func file_jkhmd_oc_proto_rawDescGZIP() []byte {
	file_jkhmd_oc_proto_rawDescOnce.Do(func() {
		file_jkhmd_oc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_jkhmd_oc_proto_rawDesc), len(file_jkhmd_oc_proto_rawDesc)))
	})
	return file_jkhmd_oc_proto_rawDescData
}

var file_jkhmd_oc_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_jkhmd_oc_proto_goTypes = []any{
	(*JunosKernelHealth)(nil),                                     // 0: junos_kernel_health
	(*JunosKernelHealthChassisType)(nil),                          // 1: junos_kernel_health.chassis_type
	(*JunosKernelHealthRoutingOptionsType)(nil),                   // 2: junos_kernel_health.routing_options_type
	(*JunosKernelHealthSecurityType)(nil),                         // 3: junos_kernel_health.security_type
	(*JunosKernelHealthKernelType)(nil),                           // 4: junos_kernel_health.kernel_type
	(*JunosKernelHealthKernelIfstateType)(nil),                    // 5: junos_kernel_health.kernel_ifstate_type
	(*JunosKernelHealthChassisTypeGresType)(nil),                  // 6: junos_kernel_health.chassis_type.gres_type
	(*JunosKernelHealthChassisTypeIssuType)(nil),                  // 7: junos_kernel_health.chassis_type.issu_type
	(*JunosKernelHealthChassisTypeAggregatedDevicesType)(nil),     // 8: junos_kernel_health.chassis_type.aggregated_devices_type
	(*JunosKernelHealthRoutingOptionsTypeNonstopRoutingType)(nil), // 9: junos_kernel_health.routing_options_type.nonstop_routing_type
	(*JunosKernelHealthKernelTypePeerInfraType)(nil),              // 10: junos_kernel_health.kernel_type.peer_infra_type
	(*JunosKernelHealthKernelTypeVplsType)(nil),                   // 11: junos_kernel_health.kernel_type.vpls_type
	(*JunosKernelHealthKernelTypeTunnelType)(nil),                 // 12: junos_kernel_health.kernel_type.tunnel_type
	(*JunosKernelHealthKernelTypeMulticastType)(nil),              // 13: junos_kernel_health.kernel_type.multicast_type
	(*JunosKernelHealthKernelTypeTnpType)(nil),                    // 14: junos_kernel_health.kernel_type.tnp_type
	(*JunosKernelHealthKernelTypeRecordMetaDataType)(nil),         // 15: junos_kernel_health.kernel_type.record_meta_data_type
	(*JunosKernelHealthKernelTypeRtsockType)(nil),                 // 16: junos_kernel_health.kernel_type.rtsock_type
	(*JunosKernelHealthKernelTypeTcpipType)(nil),                  // 17: junos_kernel_health.kernel_type.tcpip_type
	(*JunosKernelHealthKernelTypeTcpipTypeTcpType)(nil),           // 18: junos_kernel_health.kernel_type.tcpip_type.tcp_type
	(*JunosKernelHealthKernelTypeTcpipTypeNhidxType)(nil),         // 19: junos_kernel_health.kernel_type.tcpip_type.nhidx_type
	(*JunosKernelHealthKernelTypeTcpipTypeRtbType)(nil),           // 20: junos_kernel_health.kernel_type.tcpip_type.rtb_type
	(*JunosKernelHealthKernelTypeTcpipTypeArpType)(nil),           // 21: junos_kernel_health.kernel_type.tcpip_type.arp_type
	(*JunosKernelHealthKernelTypeTcpipTypeNdpType)(nil),           // 22: junos_kernel_health.kernel_type.tcpip_type.ndp_type
	(*JunosKernelHealthKernelTypeTcpipTypeNetisrType)(nil),        // 23: junos_kernel_health.kernel_type.tcpip_type.netisr_type
	(*JuniperNetworksSensors)(nil),                                // 24: JuniperNetworksSensors
}
var file_jkhmd_oc_proto_depIdxs = []int32{
	1,  // 0: junos_kernel_health.chassis:type_name -> junos_kernel_health.chassis_type
	2,  // 1: junos_kernel_health.routing_options:type_name -> junos_kernel_health.routing_options_type
	3,  // 2: junos_kernel_health.security:type_name -> junos_kernel_health.security_type
	4,  // 3: junos_kernel_health.kernel:type_name -> junos_kernel_health.kernel_type
	5,  // 4: junos_kernel_health.kernel_ifstate:type_name -> junos_kernel_health.kernel_ifstate_type
	6,  // 5: junos_kernel_health.chassis_type.gres:type_name -> junos_kernel_health.chassis_type.gres_type
	7,  // 6: junos_kernel_health.chassis_type.issu:type_name -> junos_kernel_health.chassis_type.issu_type
	8,  // 7: junos_kernel_health.chassis_type.aggregated_devices:type_name -> junos_kernel_health.chassis_type.aggregated_devices_type
	9,  // 8: junos_kernel_health.routing_options_type.nonstop_routing:type_name -> junos_kernel_health.routing_options_type.nonstop_routing_type
	10, // 9: junos_kernel_health.kernel_type.peer_infra:type_name -> junos_kernel_health.kernel_type.peer_infra_type
	11, // 10: junos_kernel_health.kernel_type.vpls:type_name -> junos_kernel_health.kernel_type.vpls_type
	12, // 11: junos_kernel_health.kernel_type.tunnel:type_name -> junos_kernel_health.kernel_type.tunnel_type
	13, // 12: junos_kernel_health.kernel_type.multicast:type_name -> junos_kernel_health.kernel_type.multicast_type
	14, // 13: junos_kernel_health.kernel_type.tnp:type_name -> junos_kernel_health.kernel_type.tnp_type
	15, // 14: junos_kernel_health.kernel_type.record_meta_data:type_name -> junos_kernel_health.kernel_type.record_meta_data_type
	16, // 15: junos_kernel_health.kernel_type.rtsock:type_name -> junos_kernel_health.kernel_type.rtsock_type
	17, // 16: junos_kernel_health.kernel_type.tcpip:type_name -> junos_kernel_health.kernel_type.tcpip_type
	18, // 17: junos_kernel_health.kernel_type.tcpip_type.tcp:type_name -> junos_kernel_health.kernel_type.tcpip_type.tcp_type
	19, // 18: junos_kernel_health.kernel_type.tcpip_type.nhidx:type_name -> junos_kernel_health.kernel_type.tcpip_type.nhidx_type
	20, // 19: junos_kernel_health.kernel_type.tcpip_type.rtb:type_name -> junos_kernel_health.kernel_type.tcpip_type.rtb_type
	21, // 20: junos_kernel_health.kernel_type.tcpip_type.arp:type_name -> junos_kernel_health.kernel_type.tcpip_type.arp_type
	22, // 21: junos_kernel_health.kernel_type.tcpip_type.ndp:type_name -> junos_kernel_health.kernel_type.tcpip_type.ndp_type
	23, // 22: junos_kernel_health.kernel_type.tcpip_type.netisr:type_name -> junos_kernel_health.kernel_type.tcpip_type.netisr_type
	24, // 23: jnpr_junos_kernel_health_ext:extendee -> JuniperNetworksSensors
	0,  // 24: jnpr_junos_kernel_health_ext:type_name -> junos_kernel_health
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	24, // [24:25] is the sub-list for extension type_name
	23, // [23:24] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_jkhmd_oc_proto_init() }
func file_jkhmd_oc_proto_init() {
	if File_jkhmd_oc_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_jkhmd_oc_proto_rawDesc), len(file_jkhmd_oc_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_jkhmd_oc_proto_goTypes,
		DependencyIndexes: file_jkhmd_oc_proto_depIdxs,
		MessageInfos:      file_jkhmd_oc_proto_msgTypes,
		ExtensionInfos:    file_jkhmd_oc_proto_extTypes,
	}.Build()
	File_jkhmd_oc_proto = out.File
	file_jkhmd_oc_proto_goTypes = nil
	file_jkhmd_oc_proto_depIdxs = nil
}
