// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: bbe-smgd_smd_queue_stats_oc.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DebugQueueStats struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	System        *DebugQueueStatsSystemType `protobuf:"bytes,151,opt,name=system" json:"system,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DebugQueueStats) Reset() {
	*x = DebugQueueStats{}
	mi := &file_bbe_smgd_smd_queue_stats_oc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebugQueueStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugQueueStats) ProtoMessage() {}

func (x *DebugQueueStats) ProtoReflect() protoreflect.Message {
	mi := &file_bbe_smgd_smd_queue_stats_oc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugQueueStats.ProtoReflect.Descriptor instead.
func (*DebugQueueStats) Descriptor() ([]byte, []int) {
	return file_bbe_smgd_smd_queue_stats_oc_proto_rawDescGZIP(), []int{0}
}

func (x *DebugQueueStats) GetSystem() *DebugQueueStatsSystemType {
	if x != nil {
		return x.System
	}
	return nil
}

type DebugQueueStatsSystemType struct {
	state                protoimpl.MessageState                             `protogen:"open.v1"`
	SubscriberManagement *DebugQueueStatsSystemTypeSubscriberManagementType `protobuf:"bytes,151,opt,name=subscriber_management,json=subscriberManagement" json:"subscriber_management,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *DebugQueueStatsSystemType) Reset() {
	*x = DebugQueueStatsSystemType{}
	mi := &file_bbe_smgd_smd_queue_stats_oc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebugQueueStatsSystemType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugQueueStatsSystemType) ProtoMessage() {}

func (x *DebugQueueStatsSystemType) ProtoReflect() protoreflect.Message {
	mi := &file_bbe_smgd_smd_queue_stats_oc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugQueueStatsSystemType.ProtoReflect.Descriptor instead.
func (*DebugQueueStatsSystemType) Descriptor() ([]byte, []int) {
	return file_bbe_smgd_smd_queue_stats_oc_proto_rawDescGZIP(), []int{0, 0}
}

func (x *DebugQueueStatsSystemType) GetSubscriberManagement() *DebugQueueStatsSystemTypeSubscriberManagementType {
	if x != nil {
		return x.SubscriberManagement
	}
	return nil
}

type DebugQueueStatsSystemTypeSubscriberManagementType struct {
	state         protoimpl.MessageState                                        `protogen:"open.v1"`
	Uplanes       *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesType `protobuf:"bytes,151,opt,name=uplanes" json:"uplanes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementType) Reset() {
	*x = DebugQueueStatsSystemTypeSubscriberManagementType{}
	mi := &file_bbe_smgd_smd_queue_stats_oc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugQueueStatsSystemTypeSubscriberManagementType) ProtoMessage() {}

func (x *DebugQueueStatsSystemTypeSubscriberManagementType) ProtoReflect() protoreflect.Message {
	mi := &file_bbe_smgd_smd_queue_stats_oc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugQueueStatsSystemTypeSubscriberManagementType.ProtoReflect.Descriptor instead.
func (*DebugQueueStatsSystemTypeSubscriberManagementType) Descriptor() ([]byte, []int) {
	return file_bbe_smgd_smd_queue_stats_oc_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementType) GetUplanes() *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesType {
	if x != nil {
		return x.Uplanes
	}
	return nil
}

type DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesType struct {
	state         protoimpl.MessageState                                                    `protogen:"open.v1"`
	Uplane        []*DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneList `protobuf:"bytes,151,rep,name=uplane" json:"uplane,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesType) Reset() {
	*x = DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesType{}
	mi := &file_bbe_smgd_smd_queue_stats_oc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesType) ProtoMessage() {}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesType) ProtoReflect() protoreflect.Message {
	mi := &file_bbe_smgd_smd_queue_stats_oc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesType.ProtoReflect.Descriptor instead.
func (*DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesType) Descriptor() ([]byte, []int) {
	return file_bbe_smgd_smd_queue_stats_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesType) GetUplane() []*DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneList {
	if x != nil {
		return x.Uplane
	}
	return nil
}

type DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneList struct {
	state         protoimpl.MessageState                                                           `protogen:"open.v1"`
	UplaneId      *uint32                                                                          `protobuf:"varint,51,opt,name=uplane_id,json=uplaneId" json:"uplane_id,omitempty"`
	Infra         *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraType `protobuf:"bytes,151,opt,name=infra" json:"infra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneList) Reset() {
	*x = DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneList{}
	mi := &file_bbe_smgd_smd_queue_stats_oc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneList) ProtoMessage() {}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneList) ProtoReflect() protoreflect.Message {
	mi := &file_bbe_smgd_smd_queue_stats_oc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneList.ProtoReflect.Descriptor instead.
func (*DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneList) Descriptor() ([]byte, []int) {
	return file_bbe_smgd_smd_queue_stats_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneList) GetUplaneId() uint32 {
	if x != nil && x.UplaneId != nil {
		return *x.UplaneId
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneList) GetInfra() *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraType {
	if x != nil {
		return x.Infra
	}
	return nil
}

type DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraType struct {
	state         protoimpl.MessageState                                                                  `protogen:"open.v1"`
	Era           *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType `protobuf:"bytes,151,opt,name=era" json:"era,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraType) Reset() {
	*x = DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraType{}
	mi := &file_bbe_smgd_smd_queue_stats_oc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraType) ProtoMessage() {
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraType) ProtoReflect() protoreflect.Message {
	mi := &file_bbe_smgd_smd_queue_stats_oc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraType.ProtoReflect.Descriptor instead.
func (*DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraType) Descriptor() ([]byte, []int) {
	return file_bbe_smgd_smd_queue_stats_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0}
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraType) GetEra() *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType {
	if x != nil {
		return x.Era
	}
	return nil
}

type DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType struct {
	state                             protoimpl.MessageState `protogen:"open.v1"`
	IoToSmdDvlanQCount                *uint32                `protobuf:"varint,51,opt,name=io_to_smd_dvlan_q_count,json=ioToSmdDvlanQCount" json:"io_to_smd_dvlan_q_count,omitempty"`
	IoToSmdDvlanMaxQCount             *uint32                `protobuf:"varint,52,opt,name=io_to_smd_dvlan_max_q_count,json=ioToSmdDvlanMaxQCount" json:"io_to_smd_dvlan_max_q_count,omitempty"`
	IoToSmdPadiQCnt                   *uint32                `protobuf:"varint,53,opt,name=io_to_smd_padi_q_cnt,json=ioToSmdPadiQCnt" json:"io_to_smd_padi_q_cnt,omitempty"`
	IoToSmdPadiQCntPeak               *uint32                `protobuf:"varint,54,opt,name=io_to_smd_padi_q_cnt_peak,json=ioToSmdPadiQCntPeak" json:"io_to_smd_padi_q_cnt_peak,omitempty"`
	IoToSmdDiscoverQCnt               *uint32                `protobuf:"varint,55,opt,name=io_to_smd_discover_q_cnt,json=ioToSmdDiscoverQCnt" json:"io_to_smd_discover_q_cnt,omitempty"`
	IoToSmdDiscoverQCntPeak           *uint32                `protobuf:"varint,56,opt,name=io_to_smd_discover_q_cnt_peak,json=ioToSmdDiscoverQCntPeak" json:"io_to_smd_discover_q_cnt_peak,omitempty"`
	IoToSmdSolicitQCnt                *uint32                `protobuf:"varint,57,opt,name=io_to_smd_solicit_q_cnt,json=ioToSmdSolicitQCnt" json:"io_to_smd_solicit_q_cnt,omitempty"`
	IoToSmdSolicitQCntPeak            *uint32                `protobuf:"varint,58,opt,name=io_to_smd_solicit_q_cnt_peak,json=ioToSmdSolicitQCntPeak" json:"io_to_smd_solicit_q_cnt_peak,omitempty"`
	IoToSmdDhcpQCnt                   *uint32                `protobuf:"varint,59,opt,name=io_to_smd_dhcp_q_cnt,json=ioToSmdDhcpQCnt" json:"io_to_smd_dhcp_q_cnt,omitempty"`
	IoToSmdDhcpQCntPeak               *uint32                `protobuf:"varint,60,opt,name=io_to_smd_dhcp_q_cnt_peak,json=ioToSmdDhcpQCntPeak" json:"io_to_smd_dhcp_q_cnt_peak,omitempty"`
	IoToSmdHagQCnt                    *uint32                `protobuf:"varint,61,opt,name=io_to_smd_hag_q_cnt,json=ioToSmdHagQCnt" json:"io_to_smd_hag_q_cnt,omitempty"`
	IoToSmdHagQCntPeak                *uint32                `protobuf:"varint,62,opt,name=io_to_smd_hag_q_cnt_peak,json=ioToSmdHagQCntPeak" json:"io_to_smd_hag_q_cnt_peak,omitempty"`
	IoToSmdTotalQCnt                  *uint32                `protobuf:"varint,63,opt,name=io_to_smd_total_q_cnt,json=ioToSmdTotalQCnt" json:"io_to_smd_total_q_cnt,omitempty"`
	IoToSmdTotalQCntPeak              *uint32                `protobuf:"varint,64,opt,name=io_to_smd_total_q_cnt_peak,json=ioToSmdTotalQCntPeak" json:"io_to_smd_total_q_cnt_peak,omitempty"`
	SmdDvlanQCount                    *uint32                `protobuf:"varint,65,opt,name=smd_dvlan_q_count,json=smdDvlanQCount" json:"smd_dvlan_q_count,omitempty"`
	SmdDvlanMaxQCount                 *uint32                `protobuf:"varint,66,opt,name=smd_dvlan_max_q_count,json=smdDvlanMaxQCount" json:"smd_dvlan_max_q_count,omitempty"`
	SmdPadiQCnt                       *uint32                `protobuf:"varint,67,opt,name=smd_padi_q_cnt,json=smdPadiQCnt" json:"smd_padi_q_cnt,omitempty"`
	SmdPadiQCntPeak                   *uint32                `protobuf:"varint,68,opt,name=smd_padi_q_cnt_peak,json=smdPadiQCntPeak" json:"smd_padi_q_cnt_peak,omitempty"`
	SmdDiscoverQCnt                   *uint32                `protobuf:"varint,69,opt,name=smd_discover_q_cnt,json=smdDiscoverQCnt" json:"smd_discover_q_cnt,omitempty"`
	SmdDiscoverQCntPeak               *uint32                `protobuf:"varint,70,opt,name=smd_discover_q_cnt_peak,json=smdDiscoverQCntPeak" json:"smd_discover_q_cnt_peak,omitempty"`
	SmdSolicitQCnt                    *uint32                `protobuf:"varint,71,opt,name=smd_solicit_q_cnt,json=smdSolicitQCnt" json:"smd_solicit_q_cnt,omitempty"`
	SmdSolicitQCntPeak                *uint32                `protobuf:"varint,72,opt,name=smd_solicit_q_cnt_peak,json=smdSolicitQCntPeak" json:"smd_solicit_q_cnt_peak,omitempty"`
	SmdDhcpQCnt                       *uint32                `protobuf:"varint,73,opt,name=smd_dhcp_q_cnt,json=smdDhcpQCnt" json:"smd_dhcp_q_cnt,omitempty"`
	SmdDhcpQCntPeak                   *uint32                `protobuf:"varint,74,opt,name=smd_dhcp_q_cnt_peak,json=smdDhcpQCntPeak" json:"smd_dhcp_q_cnt_peak,omitempty"`
	SmdHagQCnt                        *uint32                `protobuf:"varint,75,opt,name=smd_hag_q_cnt,json=smdHagQCnt" json:"smd_hag_q_cnt,omitempty"`
	SmdHagQCntPeak                    *uint32                `protobuf:"varint,76,opt,name=smd_hag_q_cnt_peak,json=smdHagQCntPeak" json:"smd_hag_q_cnt_peak,omitempty"`
	SmdTotalQCnt                      *uint32                `protobuf:"varint,77,opt,name=smd_total_q_cnt,json=smdTotalQCnt" json:"smd_total_q_cnt,omitempty"`
	SmdTotalQCntPeak                  *uint32                `protobuf:"varint,78,opt,name=smd_total_q_cnt_peak,json=smdTotalQCntPeak" json:"smd_total_q_cnt_peak,omitempty"`
	SmdNotificationQueueCnt           *uint32                `protobuf:"varint,79,opt,name=smd_notification_queue_cnt,json=smdNotificationQueueCnt" json:"smd_notification_queue_cnt,omitempty"`
	SmdNotificationQueueCntPeak       *uint32                `protobuf:"varint,80,opt,name=smd_notification_queue_cnt_peak,json=smdNotificationQueueCntPeak" json:"smd_notification_queue_cnt_peak,omitempty"`
	SmdMessageQueueCnt                *uint32                `protobuf:"varint,81,opt,name=smd_message_queue_cnt,json=smdMessageQueueCnt" json:"smd_message_queue_cnt,omitempty"`
	SmdMessageQueueCntPeak            *uint32                `protobuf:"varint,82,opt,name=smd_message_queue_cnt_peak,json=smdMessageQueueCntPeak" json:"smd_message_queue_cnt_peak,omitempty"`
	SmdPacketQueueCnt                 *uint32                `protobuf:"varint,83,opt,name=smd_packet_queue_cnt,json=smdPacketQueueCnt" json:"smd_packet_queue_cnt,omitempty"`
	SmdPacketQueueCntPeak             *uint32                `protobuf:"varint,84,opt,name=smd_packet_queue_cnt_peak,json=smdPacketQueueCntPeak" json:"smd_packet_queue_cnt_peak,omitempty"`
	SmdPacketLowQueueCnt              *uint32                `protobuf:"varint,85,opt,name=smd_packet_low_queue_cnt,json=smdPacketLowQueueCnt" json:"smd_packet_low_queue_cnt,omitempty"`
	SmdPacketLowQueueCntPeak          *uint32                `protobuf:"varint,86,opt,name=smd_packet_low_queue_cnt_peak,json=smdPacketLowQueueCntPeak" json:"smd_packet_low_queue_cnt_peak,omitempty"`
	IoPktCountLow                     *uint64                `protobuf:"varint,87,opt,name=io_pkt_count_low,json=ioPktCountLow" json:"io_pkt_count_low,omitempty"`
	IoPktCountMlow                    *uint64                `protobuf:"varint,88,opt,name=io_pkt_count_mlow,json=ioPktCountMlow" json:"io_pkt_count_mlow,omitempty"`
	IoPktCountMed                     *uint64                `protobuf:"varint,89,opt,name=io_pkt_count_med,json=ioPktCountMed" json:"io_pkt_count_med,omitempty"`
	IoPktCountHigh                    *uint64                `protobuf:"varint,90,opt,name=io_pkt_count_high,json=ioPktCountHigh" json:"io_pkt_count_high,omitempty"`
	IoPacketsDroppedLow               *uint64                `protobuf:"varint,91,opt,name=io_packets_dropped_low,json=ioPacketsDroppedLow" json:"io_packets_dropped_low,omitempty"`
	IoPacketsDroppedMlow              *uint64                `protobuf:"varint,92,opt,name=io_packets_dropped_mlow,json=ioPacketsDroppedMlow" json:"io_packets_dropped_mlow,omitempty"`
	IoPacketsDroppedMed               *uint64                `protobuf:"varint,93,opt,name=io_packets_dropped_med,json=ioPacketsDroppedMed" json:"io_packets_dropped_med,omitempty"`
	IoPacketsDroppedHigh              *uint64                `protobuf:"varint,94,opt,name=io_packets_dropped_high,json=ioPacketsDroppedHigh" json:"io_packets_dropped_high,omitempty"`
	IoPacketsDroppedPadiQlen          *uint64                `protobuf:"varint,95,opt,name=io_packets_dropped_padi_qlen,json=ioPacketsDroppedPadiQlen" json:"io_packets_dropped_padi_qlen,omitempty"`
	IoPacketsDroppedPadiImbalance     *uint64                `protobuf:"varint,96,opt,name=io_packets_dropped_padi_imbalance,json=ioPacketsDroppedPadiImbalance" json:"io_packets_dropped_padi_imbalance,omitempty"`
	IoPacketsDroppedDiscoverQlen      *uint64                `protobuf:"varint,97,opt,name=io_packets_dropped_discover_qlen,json=ioPacketsDroppedDiscoverQlen" json:"io_packets_dropped_discover_qlen,omitempty"`
	IoPacketsDroppedDiscoverImbalance *uint64                `protobuf:"varint,98,opt,name=io_packets_dropped_discover_imbalance,json=ioPacketsDroppedDiscoverImbalance" json:"io_packets_dropped_discover_imbalance,omitempty"`
	IoPacketsDroppedSolicitQlen       *uint64                `protobuf:"varint,99,opt,name=io_packets_dropped_solicit_qlen,json=ioPacketsDroppedSolicitQlen" json:"io_packets_dropped_solicit_qlen,omitempty"`
	IoPacketsDroppedSolicitImbalance  *uint64                `protobuf:"varint,100,opt,name=io_packets_dropped_solicit_imbalance,json=ioPacketsDroppedSolicitImbalance" json:"io_packets_dropped_solicit_imbalance,omitempty"`
	IoPacketsDroppedDvlanQlen         *uint64                `protobuf:"varint,101,opt,name=io_packets_dropped_dvlan_qlen,json=ioPacketsDroppedDvlanQlen" json:"io_packets_dropped_dvlan_qlen,omitempty"`
	IoPacketsDroppedDvlanImbalance    *uint64                `protobuf:"varint,102,opt,name=io_packets_dropped_dvlan_imbalance,json=ioPacketsDroppedDvlanImbalance" json:"io_packets_dropped_dvlan_imbalance,omitempty"`
	IoPacketsDroppedHagQlen           *uint64                `protobuf:"varint,103,opt,name=io_packets_dropped_hag_qlen,json=ioPacketsDroppedHagQlen" json:"io_packets_dropped_hag_qlen,omitempty"`
	IoPacketsDroppedHagImbalance      *uint64                `protobuf:"varint,104,opt,name=io_packets_dropped_hag_imbalance,json=ioPacketsDroppedHagImbalance" json:"io_packets_dropped_hag_imbalance,omitempty"`
	MaxAllowedInFlightCurrent         *uint32                `protobuf:"varint,105,opt,name=max_allowed_in_flight_current,json=maxAllowedInFlightCurrent" json:"max_allowed_in_flight_current,omitempty"`
	MaxAllowedInFlightActual          *uint32                `protobuf:"varint,106,opt,name=max_allowed_in_flight_actual,json=maxAllowedInFlightActual" json:"max_allowed_in_flight_actual,omitempty"`
	MaxAllowedInFlightCurrentAbsolute *uint32                `protobuf:"varint,107,opt,name=max_allowed_in_flight_current_absolute,json=maxAllowedInFlightCurrentAbsolute" json:"max_allowed_in_flight_current_absolute,omitempty"`
	MaxAllowedInFlightMaxEverAbsolute *uint32                `protobuf:"varint,108,opt,name=max_allowed_in_flight_max_ever_absolute,json=maxAllowedInFlightMaxEverAbsolute" json:"max_allowed_in_flight_max_ever_absolute,omitempty"`
	MinAllowedInFlight                *uint32                `protobuf:"varint,109,opt,name=min_allowed_in_flight,json=minAllowedInFlight" json:"min_allowed_in_flight,omitempty"`
	MaxLowPriPktToEnqueue             *uint32                `protobuf:"varint,110,opt,name=max_low_pri_pkt_to_enqueue,json=maxLowPriPktToEnqueue" json:"max_low_pri_pkt_to_enqueue,omitempty"`
	InFlightDvlan                     *uint32                `protobuf:"varint,111,opt,name=in_flight_dvlan,json=inFlightDvlan" json:"in_flight_dvlan,omitempty"`
	InFlightDvlanPeak                 *uint32                `protobuf:"varint,112,opt,name=in_flight_dvlan_peak,json=inFlightDvlanPeak" json:"in_flight_dvlan_peak,omitempty"`
	InFlightDhcp                      *uint32                `protobuf:"varint,113,opt,name=in_flight_dhcp,json=inFlightDhcp" json:"in_flight_dhcp,omitempty"`
	InFlightDhcpPeak                  *uint32                `protobuf:"varint,114,opt,name=in_flight_dhcp_peak,json=inFlightDhcpPeak" json:"in_flight_dhcp_peak,omitempty"`
	InFlightPpp                       *uint32                `protobuf:"varint,115,opt,name=in_flight_ppp,json=inFlightPpp" json:"in_flight_ppp,omitempty"`
	InFlightPppPeak                   *uint32                `protobuf:"varint,116,opt,name=in_flight_ppp_peak,json=inFlightPppPeak" json:"in_flight_ppp_peak,omitempty"`
	InFlightHag                       *uint32                `protobuf:"varint,117,opt,name=in_flight_hag,json=inFlightHag" json:"in_flight_hag,omitempty"`
	InFlightHagPeak                   *uint32                `protobuf:"varint,118,opt,name=in_flight_hag_peak,json=inFlightHagPeak" json:"in_flight_hag_peak,omitempty"`
	InFlightTotal                     *uint32                `protobuf:"varint,119,opt,name=in_flight_total,json=inFlightTotal" json:"in_flight_total,omitempty"`
	InFlightTotalPeak                 *uint32                `protobuf:"varint,120,opt,name=in_flight_total_peak,json=inFlightTotalPeak" json:"in_flight_total_peak,omitempty"`
	InNegoDvlan                       *uint32                `protobuf:"varint,121,opt,name=in_nego_dvlan,json=inNegoDvlan" json:"in_nego_dvlan,omitempty"`
	InNegoDvlanPeak                   *uint32                `protobuf:"varint,122,opt,name=in_nego_dvlan_peak,json=inNegoDvlanPeak" json:"in_nego_dvlan_peak,omitempty"`
	InNegoDhcp                        *uint32                `protobuf:"varint,123,opt,name=in_nego_dhcp,json=inNegoDhcp" json:"in_nego_dhcp,omitempty"`
	InNegoDhcpPeak                    *uint32                `protobuf:"varint,124,opt,name=in_nego_dhcp_peak,json=inNegoDhcpPeak" json:"in_nego_dhcp_peak,omitempty"`
	InNegoPpp                         *uint32                `protobuf:"varint,125,opt,name=in_nego_ppp,json=inNegoPpp" json:"in_nego_ppp,omitempty"`
	InNegoPppPeak                     *uint32                `protobuf:"varint,126,opt,name=in_nego_ppp_peak,json=inNegoPppPeak" json:"in_nego_ppp_peak,omitempty"`
	InNegoHag                         *uint32                `protobuf:"varint,127,opt,name=in_nego_hag,json=inNegoHag" json:"in_nego_hag,omitempty"`
	InNegoHagPeak                     *uint32                `protobuf:"varint,128,opt,name=in_nego_hag_peak,json=inNegoHagPeak" json:"in_nego_hag_peak,omitempty"`
	InNegoTotal                       *uint32                `protobuf:"varint,129,opt,name=in_nego_total,json=inNegoTotal" json:"in_nego_total,omitempty"`
	InNegoTotalPeak                   *uint32                `protobuf:"varint,130,opt,name=in_nego_total_peak,json=inNegoTotalPeak" json:"in_nego_total_peak,omitempty"`
	InNegoOverrides                   *uint32                `protobuf:"varint,131,opt,name=in_nego_overrides,json=inNegoOverrides" json:"in_nego_overrides,omitempty"`
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) Reset() {
	*x = DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType{}
	mi := &file_bbe_smgd_smd_queue_stats_oc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) ProtoMessage() {
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) ProtoReflect() protoreflect.Message {
	mi := &file_bbe_smgd_smd_queue_stats_oc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType.ProtoReflect.Descriptor instead.
func (*DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) Descriptor() ([]byte, []int) {
	return file_bbe_smgd_smd_queue_stats_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0}
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetIoToSmdDvlanQCount() uint32 {
	if x != nil && x.IoToSmdDvlanQCount != nil {
		return *x.IoToSmdDvlanQCount
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetIoToSmdDvlanMaxQCount() uint32 {
	if x != nil && x.IoToSmdDvlanMaxQCount != nil {
		return *x.IoToSmdDvlanMaxQCount
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetIoToSmdPadiQCnt() uint32 {
	if x != nil && x.IoToSmdPadiQCnt != nil {
		return *x.IoToSmdPadiQCnt
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetIoToSmdPadiQCntPeak() uint32 {
	if x != nil && x.IoToSmdPadiQCntPeak != nil {
		return *x.IoToSmdPadiQCntPeak
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetIoToSmdDiscoverQCnt() uint32 {
	if x != nil && x.IoToSmdDiscoverQCnt != nil {
		return *x.IoToSmdDiscoverQCnt
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetIoToSmdDiscoverQCntPeak() uint32 {
	if x != nil && x.IoToSmdDiscoverQCntPeak != nil {
		return *x.IoToSmdDiscoverQCntPeak
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetIoToSmdSolicitQCnt() uint32 {
	if x != nil && x.IoToSmdSolicitQCnt != nil {
		return *x.IoToSmdSolicitQCnt
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetIoToSmdSolicitQCntPeak() uint32 {
	if x != nil && x.IoToSmdSolicitQCntPeak != nil {
		return *x.IoToSmdSolicitQCntPeak
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetIoToSmdDhcpQCnt() uint32 {
	if x != nil && x.IoToSmdDhcpQCnt != nil {
		return *x.IoToSmdDhcpQCnt
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetIoToSmdDhcpQCntPeak() uint32 {
	if x != nil && x.IoToSmdDhcpQCntPeak != nil {
		return *x.IoToSmdDhcpQCntPeak
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetIoToSmdHagQCnt() uint32 {
	if x != nil && x.IoToSmdHagQCnt != nil {
		return *x.IoToSmdHagQCnt
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetIoToSmdHagQCntPeak() uint32 {
	if x != nil && x.IoToSmdHagQCntPeak != nil {
		return *x.IoToSmdHagQCntPeak
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetIoToSmdTotalQCnt() uint32 {
	if x != nil && x.IoToSmdTotalQCnt != nil {
		return *x.IoToSmdTotalQCnt
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetIoToSmdTotalQCntPeak() uint32 {
	if x != nil && x.IoToSmdTotalQCntPeak != nil {
		return *x.IoToSmdTotalQCntPeak
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetSmdDvlanQCount() uint32 {
	if x != nil && x.SmdDvlanQCount != nil {
		return *x.SmdDvlanQCount
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetSmdDvlanMaxQCount() uint32 {
	if x != nil && x.SmdDvlanMaxQCount != nil {
		return *x.SmdDvlanMaxQCount
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetSmdPadiQCnt() uint32 {
	if x != nil && x.SmdPadiQCnt != nil {
		return *x.SmdPadiQCnt
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetSmdPadiQCntPeak() uint32 {
	if x != nil && x.SmdPadiQCntPeak != nil {
		return *x.SmdPadiQCntPeak
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetSmdDiscoverQCnt() uint32 {
	if x != nil && x.SmdDiscoverQCnt != nil {
		return *x.SmdDiscoverQCnt
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetSmdDiscoverQCntPeak() uint32 {
	if x != nil && x.SmdDiscoverQCntPeak != nil {
		return *x.SmdDiscoverQCntPeak
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetSmdSolicitQCnt() uint32 {
	if x != nil && x.SmdSolicitQCnt != nil {
		return *x.SmdSolicitQCnt
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetSmdSolicitQCntPeak() uint32 {
	if x != nil && x.SmdSolicitQCntPeak != nil {
		return *x.SmdSolicitQCntPeak
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetSmdDhcpQCnt() uint32 {
	if x != nil && x.SmdDhcpQCnt != nil {
		return *x.SmdDhcpQCnt
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetSmdDhcpQCntPeak() uint32 {
	if x != nil && x.SmdDhcpQCntPeak != nil {
		return *x.SmdDhcpQCntPeak
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetSmdHagQCnt() uint32 {
	if x != nil && x.SmdHagQCnt != nil {
		return *x.SmdHagQCnt
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetSmdHagQCntPeak() uint32 {
	if x != nil && x.SmdHagQCntPeak != nil {
		return *x.SmdHagQCntPeak
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetSmdTotalQCnt() uint32 {
	if x != nil && x.SmdTotalQCnt != nil {
		return *x.SmdTotalQCnt
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetSmdTotalQCntPeak() uint32 {
	if x != nil && x.SmdTotalQCntPeak != nil {
		return *x.SmdTotalQCntPeak
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetSmdNotificationQueueCnt() uint32 {
	if x != nil && x.SmdNotificationQueueCnt != nil {
		return *x.SmdNotificationQueueCnt
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetSmdNotificationQueueCntPeak() uint32 {
	if x != nil && x.SmdNotificationQueueCntPeak != nil {
		return *x.SmdNotificationQueueCntPeak
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetSmdMessageQueueCnt() uint32 {
	if x != nil && x.SmdMessageQueueCnt != nil {
		return *x.SmdMessageQueueCnt
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetSmdMessageQueueCntPeak() uint32 {
	if x != nil && x.SmdMessageQueueCntPeak != nil {
		return *x.SmdMessageQueueCntPeak
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetSmdPacketQueueCnt() uint32 {
	if x != nil && x.SmdPacketQueueCnt != nil {
		return *x.SmdPacketQueueCnt
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetSmdPacketQueueCntPeak() uint32 {
	if x != nil && x.SmdPacketQueueCntPeak != nil {
		return *x.SmdPacketQueueCntPeak
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetSmdPacketLowQueueCnt() uint32 {
	if x != nil && x.SmdPacketLowQueueCnt != nil {
		return *x.SmdPacketLowQueueCnt
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetSmdPacketLowQueueCntPeak() uint32 {
	if x != nil && x.SmdPacketLowQueueCntPeak != nil {
		return *x.SmdPacketLowQueueCntPeak
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetIoPktCountLow() uint64 {
	if x != nil && x.IoPktCountLow != nil {
		return *x.IoPktCountLow
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetIoPktCountMlow() uint64 {
	if x != nil && x.IoPktCountMlow != nil {
		return *x.IoPktCountMlow
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetIoPktCountMed() uint64 {
	if x != nil && x.IoPktCountMed != nil {
		return *x.IoPktCountMed
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetIoPktCountHigh() uint64 {
	if x != nil && x.IoPktCountHigh != nil {
		return *x.IoPktCountHigh
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetIoPacketsDroppedLow() uint64 {
	if x != nil && x.IoPacketsDroppedLow != nil {
		return *x.IoPacketsDroppedLow
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetIoPacketsDroppedMlow() uint64 {
	if x != nil && x.IoPacketsDroppedMlow != nil {
		return *x.IoPacketsDroppedMlow
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetIoPacketsDroppedMed() uint64 {
	if x != nil && x.IoPacketsDroppedMed != nil {
		return *x.IoPacketsDroppedMed
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetIoPacketsDroppedHigh() uint64 {
	if x != nil && x.IoPacketsDroppedHigh != nil {
		return *x.IoPacketsDroppedHigh
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetIoPacketsDroppedPadiQlen() uint64 {
	if x != nil && x.IoPacketsDroppedPadiQlen != nil {
		return *x.IoPacketsDroppedPadiQlen
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetIoPacketsDroppedPadiImbalance() uint64 {
	if x != nil && x.IoPacketsDroppedPadiImbalance != nil {
		return *x.IoPacketsDroppedPadiImbalance
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetIoPacketsDroppedDiscoverQlen() uint64 {
	if x != nil && x.IoPacketsDroppedDiscoverQlen != nil {
		return *x.IoPacketsDroppedDiscoverQlen
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetIoPacketsDroppedDiscoverImbalance() uint64 {
	if x != nil && x.IoPacketsDroppedDiscoverImbalance != nil {
		return *x.IoPacketsDroppedDiscoverImbalance
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetIoPacketsDroppedSolicitQlen() uint64 {
	if x != nil && x.IoPacketsDroppedSolicitQlen != nil {
		return *x.IoPacketsDroppedSolicitQlen
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetIoPacketsDroppedSolicitImbalance() uint64 {
	if x != nil && x.IoPacketsDroppedSolicitImbalance != nil {
		return *x.IoPacketsDroppedSolicitImbalance
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetIoPacketsDroppedDvlanQlen() uint64 {
	if x != nil && x.IoPacketsDroppedDvlanQlen != nil {
		return *x.IoPacketsDroppedDvlanQlen
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetIoPacketsDroppedDvlanImbalance() uint64 {
	if x != nil && x.IoPacketsDroppedDvlanImbalance != nil {
		return *x.IoPacketsDroppedDvlanImbalance
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetIoPacketsDroppedHagQlen() uint64 {
	if x != nil && x.IoPacketsDroppedHagQlen != nil {
		return *x.IoPacketsDroppedHagQlen
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetIoPacketsDroppedHagImbalance() uint64 {
	if x != nil && x.IoPacketsDroppedHagImbalance != nil {
		return *x.IoPacketsDroppedHagImbalance
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetMaxAllowedInFlightCurrent() uint32 {
	if x != nil && x.MaxAllowedInFlightCurrent != nil {
		return *x.MaxAllowedInFlightCurrent
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetMaxAllowedInFlightActual() uint32 {
	if x != nil && x.MaxAllowedInFlightActual != nil {
		return *x.MaxAllowedInFlightActual
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetMaxAllowedInFlightCurrentAbsolute() uint32 {
	if x != nil && x.MaxAllowedInFlightCurrentAbsolute != nil {
		return *x.MaxAllowedInFlightCurrentAbsolute
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetMaxAllowedInFlightMaxEverAbsolute() uint32 {
	if x != nil && x.MaxAllowedInFlightMaxEverAbsolute != nil {
		return *x.MaxAllowedInFlightMaxEverAbsolute
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetMinAllowedInFlight() uint32 {
	if x != nil && x.MinAllowedInFlight != nil {
		return *x.MinAllowedInFlight
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetMaxLowPriPktToEnqueue() uint32 {
	if x != nil && x.MaxLowPriPktToEnqueue != nil {
		return *x.MaxLowPriPktToEnqueue
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetInFlightDvlan() uint32 {
	if x != nil && x.InFlightDvlan != nil {
		return *x.InFlightDvlan
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetInFlightDvlanPeak() uint32 {
	if x != nil && x.InFlightDvlanPeak != nil {
		return *x.InFlightDvlanPeak
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetInFlightDhcp() uint32 {
	if x != nil && x.InFlightDhcp != nil {
		return *x.InFlightDhcp
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetInFlightDhcpPeak() uint32 {
	if x != nil && x.InFlightDhcpPeak != nil {
		return *x.InFlightDhcpPeak
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetInFlightPpp() uint32 {
	if x != nil && x.InFlightPpp != nil {
		return *x.InFlightPpp
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetInFlightPppPeak() uint32 {
	if x != nil && x.InFlightPppPeak != nil {
		return *x.InFlightPppPeak
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetInFlightHag() uint32 {
	if x != nil && x.InFlightHag != nil {
		return *x.InFlightHag
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetInFlightHagPeak() uint32 {
	if x != nil && x.InFlightHagPeak != nil {
		return *x.InFlightHagPeak
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetInFlightTotal() uint32 {
	if x != nil && x.InFlightTotal != nil {
		return *x.InFlightTotal
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetInFlightTotalPeak() uint32 {
	if x != nil && x.InFlightTotalPeak != nil {
		return *x.InFlightTotalPeak
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetInNegoDvlan() uint32 {
	if x != nil && x.InNegoDvlan != nil {
		return *x.InNegoDvlan
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetInNegoDvlanPeak() uint32 {
	if x != nil && x.InNegoDvlanPeak != nil {
		return *x.InNegoDvlanPeak
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetInNegoDhcp() uint32 {
	if x != nil && x.InNegoDhcp != nil {
		return *x.InNegoDhcp
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetInNegoDhcpPeak() uint32 {
	if x != nil && x.InNegoDhcpPeak != nil {
		return *x.InNegoDhcpPeak
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetInNegoPpp() uint32 {
	if x != nil && x.InNegoPpp != nil {
		return *x.InNegoPpp
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetInNegoPppPeak() uint32 {
	if x != nil && x.InNegoPppPeak != nil {
		return *x.InNegoPppPeak
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetInNegoHag() uint32 {
	if x != nil && x.InNegoHag != nil {
		return *x.InNegoHag
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetInNegoHagPeak() uint32 {
	if x != nil && x.InNegoHagPeak != nil {
		return *x.InNegoHagPeak
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetInNegoTotal() uint32 {
	if x != nil && x.InNegoTotal != nil {
		return *x.InNegoTotal
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetInNegoTotalPeak() uint32 {
	if x != nil && x.InNegoTotalPeak != nil {
		return *x.InNegoTotalPeak
	}
	return 0
}

func (x *DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType) GetInNegoOverrides() uint32 {
	if x != nil && x.InNegoOverrides != nil {
		return *x.InNegoOverrides
	}
	return 0
}

var file_bbe_smgd_smd_queue_stats_oc_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*DebugQueueStats)(nil),
		Field:         38,
		Name:          "jnpr_debug_queue_stats_ext",
		Tag:           "bytes,38,opt,name=jnpr_debug_queue_stats_ext",
		Filename:      "bbe-smgd_smd_queue_stats_oc.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional debug_queue_stats jnpr_debug_queue_stats_ext = 38;
	E_JnprDebugQueueStatsExt = &file_bbe_smgd_smd_queue_stats_oc_proto_extTypes[0]
)

var File_bbe_smgd_smd_queue_stats_oc_proto protoreflect.FileDescriptor

var file_bbe_smgd_smd_queue_stats_oc_proto_rawDesc = string([]byte{
	0x0a, 0x21, 0x62, 0x62, 0x65, 0x2d, 0x73, 0x6d, 0x67, 0x64, 0x5f, 0x73, 0x6d, 0x64, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6f, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74,
	0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85, 0x27, 0x0a, 0x11, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x37,
	0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x1a, 0xb6, 0x26, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x6f, 0x0a, 0x15, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x14, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xb5, 0x25, 0x0a, 0x1a, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x61, 0x0a, 0x07, 0x75, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x75, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x1a, 0xb3, 0x24, 0x0a, 0x0c, 0x75,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x6b, 0x0a, 0x06, 0x75,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x52, 0x06, 0x75, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x1a, 0xb5, 0x23, 0x0a, 0x0b, 0x75, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x09, 0x75, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02,
	0x08, 0x01, 0x52, 0x08, 0x75, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x74, 0x0a, 0x05,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x1a, 0x8b, 0x22, 0x0a, 0x0a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x79, 0x0a, 0x03, 0x65, 0x72, 0x61, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x66, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x65,
	0x72, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x03, 0x65, 0x72, 0x61, 0x1a, 0x81, 0x21, 0x0a,
	0x08, 0x65, 0x72, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x17, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x5f, 0x73, 0x6d, 0x64, 0x5f, 0x64, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x71, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x69, 0x6f, 0x54, 0x6f,
	0x53, 0x6d, 0x64, 0x44, 0x76, 0x6c, 0x61, 0x6e, 0x51, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a,
	0x0a, 0x1b, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x6d, 0x64, 0x5f, 0x64, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x69, 0x6f, 0x54, 0x6f, 0x53, 0x6d, 0x64, 0x44, 0x76, 0x6c, 0x61,
	0x6e, 0x4d, 0x61, 0x78, 0x51, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x14, 0x69, 0x6f,
	0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x6d, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x69, 0x5f, 0x71, 0x5f, 0x63,
	0x6e, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6f, 0x54, 0x6f, 0x53, 0x6d,
	0x64, 0x50, 0x61, 0x64, 0x69, 0x51, 0x43, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x19, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x5f, 0x73, 0x6d, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x69, 0x5f, 0x71, 0x5f, 0x63, 0x6e,
	0x74, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x69, 0x6f,
	0x54, 0x6f, 0x53, 0x6d, 0x64, 0x50, 0x61, 0x64, 0x69, 0x51, 0x43, 0x6e, 0x74, 0x50, 0x65, 0x61,
	0x6b, 0x12, 0x35, 0x0a, 0x18, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x6d, 0x64, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x71, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x69, 0x6f, 0x54, 0x6f, 0x53, 0x6d, 0x64, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x51, 0x43, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1d, 0x69, 0x6f, 0x5f, 0x74,
	0x6f, 0x5f, 0x73, 0x6d, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x71,
	0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x17, 0x69, 0x6f, 0x54, 0x6f, 0x53, 0x6d, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x51, 0x43, 0x6e, 0x74, 0x50, 0x65, 0x61, 0x6b, 0x12, 0x33, 0x0a, 0x17, 0x69, 0x6f, 0x5f, 0x74,
	0x6f, 0x5f, 0x73, 0x6d, 0x64, 0x5f, 0x73, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x71, 0x5f,
	0x63, 0x6e, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x69, 0x6f, 0x54, 0x6f, 0x53,
	0x6d, 0x64, 0x53, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x51, 0x43, 0x6e, 0x74, 0x12, 0x3c, 0x0a,
	0x1c, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x6d, 0x64, 0x5f, 0x73, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x5f, 0x71, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x3a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x6f, 0x54, 0x6f, 0x53, 0x6d, 0x64, 0x53, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x51, 0x43, 0x6e, 0x74, 0x50, 0x65, 0x61, 0x6b, 0x12, 0x2d, 0x0a, 0x14, 0x69,
	0x6f, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x6d, 0x64, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x71, 0x5f,
	0x63, 0x6e, 0x74, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6f, 0x54, 0x6f, 0x53,
	0x6d, 0x64, 0x44, 0x68, 0x63, 0x70, 0x51, 0x43, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x19, 0x69, 0x6f,
	0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x6d, 0x64, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x71, 0x5f, 0x63,
	0x6e, 0x74, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x69,
	0x6f, 0x54, 0x6f, 0x53, 0x6d, 0x64, 0x44, 0x68, 0x63, 0x70, 0x51, 0x43, 0x6e, 0x74, 0x50, 0x65,
	0x61, 0x6b, 0x12, 0x2b, 0x0a, 0x13, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x6d, 0x64, 0x5f,
	0x68, 0x61, 0x67, 0x5f, 0x71, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x69, 0x6f, 0x54, 0x6f, 0x53, 0x6d, 0x64, 0x48, 0x61, 0x67, 0x51, 0x43, 0x6e, 0x74, 0x12,
	0x34, 0x0a, 0x18, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x6d, 0x64, 0x5f, 0x68, 0x61, 0x67,
	0x5f, 0x71, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x3e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x69, 0x6f, 0x54, 0x6f, 0x53, 0x6d, 0x64, 0x48, 0x61, 0x67, 0x51, 0x43, 0x6e,
	0x74, 0x50, 0x65, 0x61, 0x6b, 0x12, 0x2f, 0x0a, 0x15, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x5f, 0x73,
	0x6d, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x71, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x3f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x69, 0x6f, 0x54, 0x6f, 0x53, 0x6d, 0x64, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x51, 0x43, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x1a, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x5f,
	0x73, 0x6d, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x71, 0x5f, 0x63, 0x6e, 0x74, 0x5f,
	0x70, 0x65, 0x61, 0x6b, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x69, 0x6f, 0x54, 0x6f,
	0x53, 0x6d, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x43, 0x6e, 0x74, 0x50, 0x65, 0x61, 0x6b,
	0x12, 0x29, 0x0a, 0x11, 0x73, 0x6d, 0x64, 0x5f, 0x64, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x71, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x6d, 0x64,
	0x44, 0x76, 0x6c, 0x61, 0x6e, 0x51, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x15, 0x73,
	0x6d, 0x64, 0x5f, 0x64, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x6d, 0x64, 0x44,
	0x76, 0x6c, 0x61, 0x6e, 0x4d, 0x61, 0x78, 0x51, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0e, 0x73, 0x6d, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x69, 0x5f, 0x71, 0x5f, 0x63, 0x6e, 0x74, 0x18,
	0x43, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x6d, 0x64, 0x50, 0x61, 0x64, 0x69, 0x51, 0x43,
	0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x13, 0x73, 0x6d, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x69, 0x5f, 0x71,
	0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x73, 0x6d, 0x64, 0x50, 0x61, 0x64, 0x69, 0x51, 0x43, 0x6e, 0x74, 0x50, 0x65, 0x61, 0x6b,
	0x12, 0x2b, 0x0a, 0x12, 0x73, 0x6d, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x71, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x6d,
	0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x51, 0x43, 0x6e, 0x74, 0x12, 0x34, 0x0a,
	0x17, 0x73, 0x6d, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x71, 0x5f,
	0x63, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x73, 0x6d, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x51, 0x43, 0x6e, 0x74, 0x50,
	0x65, 0x61, 0x6b, 0x12, 0x29, 0x0a, 0x11, 0x73, 0x6d, 0x64, 0x5f, 0x73, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x5f, 0x71, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x73, 0x6d, 0x64, 0x53, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x51, 0x43, 0x6e, 0x74, 0x12, 0x32,
	0x0a, 0x16, 0x73, 0x6d, 0x64, 0x5f, 0x73, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x71, 0x5f,
	0x63, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x73, 0x6d, 0x64, 0x53, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x51, 0x43, 0x6e, 0x74, 0x50, 0x65,
	0x61, 0x6b, 0x12, 0x23, 0x0a, 0x0e, 0x73, 0x6d, 0x64, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x71,
	0x5f, 0x63, 0x6e, 0x74, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x6d, 0x64, 0x44,
	0x68, 0x63, 0x70, 0x51, 0x43, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x13, 0x73, 0x6d, 0x64, 0x5f, 0x64,
	0x68, 0x63, 0x70, 0x5f, 0x71, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x4a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x6d, 0x64, 0x44, 0x68, 0x63, 0x70, 0x51, 0x43, 0x6e,
	0x74, 0x50, 0x65, 0x61, 0x6b, 0x12, 0x21, 0x0a, 0x0d, 0x73, 0x6d, 0x64, 0x5f, 0x68, 0x61, 0x67,
	0x5f, 0x71, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6d,
	0x64, 0x48, 0x61, 0x67, 0x51, 0x43, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x12, 0x73, 0x6d, 0x64, 0x5f,
	0x68, 0x61, 0x67, 0x5f, 0x71, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x4c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x6d, 0x64, 0x48, 0x61, 0x67, 0x51, 0x43, 0x6e, 0x74,
	0x50, 0x65, 0x61, 0x6b, 0x12, 0x25, 0x0a, 0x0f, 0x73, 0x6d, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x71, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73,
	0x6d, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x43, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x14, 0x73,
	0x6d, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x71, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x70,
	0x65, 0x61, 0x6b, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x6d, 0x64, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x51, 0x43, 0x6e, 0x74, 0x50, 0x65, 0x61, 0x6b, 0x12, 0x3b, 0x0a, 0x1a, 0x73,
	0x6d, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x17, 0x73, 0x6d, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x1f, 0x73, 0x6d, 0x64, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x50, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1b, 0x73, 0x6d, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6e, 0x74, 0x50, 0x65, 0x61, 0x6b, 0x12, 0x31,
	0x0a, 0x15, 0x73, 0x6d, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73,
	0x6d, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6e,
	0x74, 0x12, 0x3a, 0x0a, 0x1a, 0x73, 0x6d, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x18,
	0x52, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73, 0x6d, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6e, 0x74, 0x50, 0x65, 0x61, 0x6b, 0x12, 0x2f, 0x0a,
	0x14, 0x73, 0x6d, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x6d, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6e, 0x74, 0x12, 0x38,
	0x0a, 0x19, 0x73, 0x6d, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x54, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x15, 0x73, 0x6d, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x43, 0x6e, 0x74, 0x50, 0x65, 0x61, 0x6b, 0x12, 0x36, 0x0a, 0x18, 0x73, 0x6d, 0x64, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x63, 0x6e, 0x74, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x6d, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6e, 0x74,
	0x12, 0x3f, 0x0a, 0x1d, 0x73, 0x6d, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c,
	0x6f, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x61,
	0x6b, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x73, 0x6d, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x4c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6e, 0x74, 0x50, 0x65, 0x61,
	0x6b, 0x12, 0x27, 0x0a, 0x10, 0x69, 0x6f, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x57, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x69, 0x6f, 0x50,
	0x6b, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x77, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x6f,
	0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x6c, 0x6f, 0x77, 0x18,
	0x58, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x69, 0x6f, 0x50, 0x6b, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x4d, 0x6c, 0x6f, 0x77, 0x12, 0x27, 0x0a, 0x10, 0x69, 0x6f, 0x5f, 0x70, 0x6b, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x64, 0x18, 0x59, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x69, 0x6f, 0x50, 0x6b, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x64, 0x12, 0x29,
	0x0a, 0x11, 0x69, 0x6f, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x68,
	0x69, 0x67, 0x68, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x69, 0x6f, 0x50, 0x6b, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x6f, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f,
	0x6c, 0x6f, 0x77, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x69, 0x6f, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x4c, 0x6f, 0x77, 0x12, 0x35,
	0x0a, 0x17, 0x69, 0x6f, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x5f, 0x6d, 0x6c, 0x6f, 0x77, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x14, 0x69, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x4d, 0x6c, 0x6f, 0x77, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x6f, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x18,
	0x5d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x69, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x6f,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x69, 0x6f, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x48, 0x69, 0x67,
	0x68, 0x12, 0x3e, 0x0a, 0x1c, 0x69, 0x6f, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f,
	0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x69, 0x5f, 0x71, 0x6c, 0x65,
	0x6e, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x69, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x50, 0x61, 0x64, 0x69, 0x51, 0x6c, 0x65,
	0x6e, 0x12, 0x48, 0x0a, 0x21, 0x69, 0x6f, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f,
	0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x69, 0x5f, 0x69, 0x6d, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x60, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1d, 0x69, 0x6f,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x50, 0x61,
	0x64, 0x69, 0x49, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x20, 0x69,
	0x6f, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x71, 0x6c, 0x65, 0x6e, 0x18,
	0x61, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1c, 0x69, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x51,
	0x6c, 0x65, 0x6e, 0x12, 0x50, 0x0a, 0x25, 0x69, 0x6f, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x62, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x21, 0x69, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x69, 0x6f, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x5f, 0x71, 0x6c, 0x65, 0x6e, 0x18, 0x63, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b,
	0x69, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x53, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x51, 0x6c, 0x65, 0x6e, 0x12, 0x4e, 0x0a, 0x24, 0x69,
	0x6f, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x5f, 0x73, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x04, 0x52, 0x20, 0x69, 0x6f, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x53, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x49, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x69,
	0x6f, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x5f, 0x64, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x71, 0x6c, 0x65, 0x6e, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x19, 0x69, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x44, 0x76, 0x6c, 0x61, 0x6e, 0x51, 0x6c, 0x65, 0x6e, 0x12, 0x4a, 0x0a,
	0x22, 0x69, 0x6f, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x5f, 0x64, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1e, 0x69, 0x6f, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x44, 0x76, 0x6c, 0x61, 0x6e,
	0x49, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x69, 0x6f, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f,
	0x68, 0x61, 0x67, 0x5f, 0x71, 0x6c, 0x65, 0x6e, 0x18, 0x67, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17,
	0x69, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x48, 0x61, 0x67, 0x51, 0x6c, 0x65, 0x6e, 0x12, 0x46, 0x0a, 0x20, 0x69, 0x6f, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x68, 0x61,
	0x67, 0x5f, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x1c, 0x69, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x72, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x48, 0x61, 0x67, 0x49, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x40, 0x0a, 0x1d, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x69, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x6d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x49, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x3e, 0x0a, 0x1c, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x49, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x41, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x12, 0x51, 0x0a, 0x26, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x21, 0x6d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x49, 0x6e, 0x46,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x62, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x27, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x65, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x18,
	0x6c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x6d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x49, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x78, 0x45, 0x76, 0x65, 0x72,
	0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x49, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x39, 0x0a, 0x1a, 0x6d,
	0x61, 0x78, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x74,
	0x6f, 0x5f, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x6d, 0x61, 0x78, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x50, 0x6b, 0x74, 0x54, 0x6f, 0x45,
	0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x64, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x69, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x2f,
	0x0a, 0x14, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e,
	0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x76, 0x6c, 0x61, 0x6e, 0x50, 0x65, 0x61, 0x6b, 0x12,
	0x24, 0x0a, 0x0e, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x68, 0x63,
	0x70, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x44, 0x68, 0x63, 0x70, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x72, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x69, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x68, 0x63, 0x70,
	0x50, 0x65, 0x61, 0x6b, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x70, 0x70, 0x70, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x46,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x50, 0x70, 0x70, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x6e, 0x5f, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x70, 0x70, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x74,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x50, 0x70,
	0x70, 0x50, 0x65, 0x61, 0x6b, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x68, 0x61, 0x67, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6e,
	0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x48, 0x61, 0x67, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x6e, 0x5f,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x68, 0x61, 0x67, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x18,
	0x76, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x48,
	0x61, 0x67, 0x50, 0x65, 0x61, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x69, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2f,
	0x0a, 0x14, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e,
	0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x65, 0x61, 0x6b, 0x12,
	0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x6e, 0x65, 0x67, 0x6f, 0x5f, 0x64, 0x76, 0x6c, 0x61, 0x6e,
	0x18, 0x79, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x4e, 0x65, 0x67, 0x6f, 0x44, 0x76,
	0x6c, 0x61, 0x6e, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x6e, 0x5f, 0x6e, 0x65, 0x67, 0x6f, 0x5f, 0x64,
	0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x69, 0x6e, 0x4e, 0x65, 0x67, 0x6f, 0x44, 0x76, 0x6c, 0x61, 0x6e, 0x50, 0x65, 0x61, 0x6b,
	0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6e, 0x5f, 0x6e, 0x65, 0x67, 0x6f, 0x5f, 0x64, 0x68, 0x63, 0x70,
	0x18, 0x7b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e, 0x4e, 0x65, 0x67, 0x6f, 0x44, 0x68,
	0x63, 0x70, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x6e, 0x65, 0x67, 0x6f, 0x5f, 0x64, 0x68,
	0x63, 0x70, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69,
	0x6e, 0x4e, 0x65, 0x67, 0x6f, 0x44, 0x68, 0x63, 0x70, 0x50, 0x65, 0x61, 0x6b, 0x12, 0x1e, 0x0a,
	0x0b, 0x69, 0x6e, 0x5f, 0x6e, 0x65, 0x67, 0x6f, 0x5f, 0x70, 0x70, 0x70, 0x18, 0x7d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x4e, 0x65, 0x67, 0x6f, 0x50, 0x70, 0x70, 0x12, 0x27, 0x0a,
	0x10, 0x69, 0x6e, 0x5f, 0x6e, 0x65, 0x67, 0x6f, 0x5f, 0x70, 0x70, 0x70, 0x5f, 0x70, 0x65, 0x61,
	0x6b, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x6e, 0x4e, 0x65, 0x67, 0x6f, 0x50,
	0x70, 0x70, 0x50, 0x65, 0x61, 0x6b, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x6e, 0x5f, 0x6e, 0x65, 0x67,
	0x6f, 0x5f, 0x68, 0x61, 0x67, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x4e,
	0x65, 0x67, 0x6f, 0x48, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x5f, 0x6e, 0x65, 0x67,
	0x6f, 0x5f, 0x68, 0x61, 0x67, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x69, 0x6e, 0x4e, 0x65, 0x67, 0x6f, 0x48, 0x61, 0x67, 0x50, 0x65, 0x61, 0x6b,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x6e, 0x65, 0x67, 0x6f, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x4e, 0x65, 0x67, 0x6f,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x5f, 0x6e, 0x65, 0x67, 0x6f,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x82, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x4e, 0x65, 0x67, 0x6f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x65, 0x61, 0x6b, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x6e, 0x65, 0x67, 0x6f, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x69, 0x6e, 0x4e, 0x65, 0x67, 0x6f, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73,
	0x3a, 0x67, 0x0a, 0x1a, 0x6a, 0x6e, 0x70, 0x72, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x12, 0x17,
	0x2e, 0x4a, 0x75, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x16, 0x6a, 0x6e, 0x70, 0x72, 0x44, 0x65, 0x62, 0x75, 0x67, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x78, 0x74, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x6a,
	0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
})

var (
	file_bbe_smgd_smd_queue_stats_oc_proto_rawDescOnce sync.Once
	file_bbe_smgd_smd_queue_stats_oc_proto_rawDescData []byte
)

func file_bbe_smgd_smd_queue_stats_oc_proto_rawDescGZIP() []byte {
	file_bbe_smgd_smd_queue_stats_oc_proto_rawDescOnce.Do(func() {
		file_bbe_smgd_smd_queue_stats_oc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_bbe_smgd_smd_queue_stats_oc_proto_rawDesc), len(file_bbe_smgd_smd_queue_stats_oc_proto_rawDesc)))
	})
	return file_bbe_smgd_smd_queue_stats_oc_proto_rawDescData
}

var file_bbe_smgd_smd_queue_stats_oc_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_bbe_smgd_smd_queue_stats_oc_proto_goTypes = []any{
	(*DebugQueueStats)(nil),                                                                        // 0: debug_queue_stats
	(*DebugQueueStatsSystemType)(nil),                                                              // 1: debug_queue_stats.system_type
	(*DebugQueueStatsSystemTypeSubscriberManagementType)(nil),                                      // 2: debug_queue_stats.system_type.subscriber_management_type
	(*DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesType)(nil),                           // 3: debug_queue_stats.system_type.subscriber_management_type.uplanes_type
	(*DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneList)(nil),                 // 4: debug_queue_stats.system_type.subscriber_management_type.uplanes_type.uplane_list
	(*DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraType)(nil),        // 5: debug_queue_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type
	(*DebugQueueStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeEraType)(nil), // 6: debug_queue_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.era_type
	(*JuniperNetworksSensors)(nil),                                                                 // 7: JuniperNetworksSensors
}
var file_bbe_smgd_smd_queue_stats_oc_proto_depIdxs = []int32{
	1, // 0: debug_queue_stats.system:type_name -> debug_queue_stats.system_type
	2, // 1: debug_queue_stats.system_type.subscriber_management:type_name -> debug_queue_stats.system_type.subscriber_management_type
	3, // 2: debug_queue_stats.system_type.subscriber_management_type.uplanes:type_name -> debug_queue_stats.system_type.subscriber_management_type.uplanes_type
	4, // 3: debug_queue_stats.system_type.subscriber_management_type.uplanes_type.uplane:type_name -> debug_queue_stats.system_type.subscriber_management_type.uplanes_type.uplane_list
	5, // 4: debug_queue_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra:type_name -> debug_queue_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type
	6, // 5: debug_queue_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.era:type_name -> debug_queue_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.era_type
	7, // 6: jnpr_debug_queue_stats_ext:extendee -> JuniperNetworksSensors
	0, // 7: jnpr_debug_queue_stats_ext:type_name -> debug_queue_stats
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	7, // [7:8] is the sub-list for extension type_name
	6, // [6:7] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_bbe_smgd_smd_queue_stats_oc_proto_init() }
func file_bbe_smgd_smd_queue_stats_oc_proto_init() {
	if File_bbe_smgd_smd_queue_stats_oc_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_bbe_smgd_smd_queue_stats_oc_proto_rawDesc), len(file_bbe_smgd_smd_queue_stats_oc_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_bbe_smgd_smd_queue_stats_oc_proto_goTypes,
		DependencyIndexes: file_bbe_smgd_smd_queue_stats_oc_proto_depIdxs,
		MessageInfos:      file_bbe_smgd_smd_queue_stats_oc_proto_msgTypes,
		ExtensionInfos:    file_bbe_smgd_smd_queue_stats_oc_proto_extTypes,
	}.Build()
	File_bbe_smgd_smd_queue_stats_oc_proto = out.File
	file_bbe_smgd_smd_queue_stats_oc_proto_goTypes = nil
	file_bbe_smgd_smd_queue_stats_oc_proto_depIdxs = nil
}
