// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: kernel-ifstate-render.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JunosKernelIfstate struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	KernelIfstate *JunosKernelIfstateKernelIfstateType `protobuf:"bytes,181,opt,name=kernel_ifstate,json=kernelIfstate" json:"kernel_ifstate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosKernelIfstate) Reset() {
	*x = JunosKernelIfstate{}
	mi := &file_kernel_ifstate_render_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKernelIfstate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKernelIfstate) ProtoMessage() {}

func (x *JunosKernelIfstate) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_ifstate_render_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKernelIfstate.ProtoReflect.Descriptor instead.
func (*JunosKernelIfstate) Descriptor() ([]byte, []int) {
	return file_kernel_ifstate_render_proto_rawDescGZIP(), []int{0}
}

func (x *JunosKernelIfstate) GetKernelIfstate() *JunosKernelIfstateKernelIfstateType {
	if x != nil {
		return x.KernelIfstate
	}
	return nil
}

type JunosKernelIfstateKernelIfstateType struct {
	state         protoimpl.MessageState                          `protogen:"open.v1"`
	Stats         []*JunosKernelIfstateKernelIfstateTypeStatsList `protobuf:"bytes,141,rep,name=stats" json:"stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosKernelIfstateKernelIfstateType) Reset() {
	*x = JunosKernelIfstateKernelIfstateType{}
	mi := &file_kernel_ifstate_render_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKernelIfstateKernelIfstateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKernelIfstateKernelIfstateType) ProtoMessage() {}

func (x *JunosKernelIfstateKernelIfstateType) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_ifstate_render_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKernelIfstateKernelIfstateType.ProtoReflect.Descriptor instead.
func (*JunosKernelIfstateKernelIfstateType) Descriptor() ([]byte, []int) {
	return file_kernel_ifstate_render_proto_rawDescGZIP(), []int{0, 0}
}

func (x *JunosKernelIfstateKernelIfstateType) GetStats() []*JunosKernelIfstateKernelIfstateTypeStatsList {
	if x != nil {
		return x.Stats
	}
	return nil
}

type JunosKernelIfstateKernelIfstateTypeStatsList struct {
	state               protoimpl.MessageState                                                 `protogen:"open.v1"`
	RecordTime          *uint32                                                                `protobuf:"varint,121,opt,name=record_time,json=recordTime" json:"record_time,omitempty"`
	RecordSeqNum        *uint32                                                                `protobuf:"varint,122,opt,name=record_seq_num,json=recordSeqNum" json:"record_seq_num,omitempty"`
	ChurnRate           *JunosKernelIfstateKernelIfstateTypeStatsListChurnRateType             `protobuf:"bytes,151,opt,name=churn_rate,json=churnRate" json:"churn_rate,omitempty"`
	PeerConsumptionRate []*JunosKernelIfstateKernelIfstateTypeStatsListPeerConsumptionRateList `protobuf:"bytes,152,rep,name=peer_consumption_rate,json=peerConsumptionRate" json:"peer_consumption_rate,omitempty"`
	VetosStatistics     *JunosKernelIfstateKernelIfstateTypeStatsListVetosStatisticsType       `protobuf:"bytes,153,opt,name=vetos_statistics,json=vetosStatistics" json:"vetos_statistics,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsList) Reset() {
	*x = JunosKernelIfstateKernelIfstateTypeStatsList{}
	mi := &file_kernel_ifstate_render_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKernelIfstateKernelIfstateTypeStatsList) ProtoMessage() {}

func (x *JunosKernelIfstateKernelIfstateTypeStatsList) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_ifstate_render_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKernelIfstateKernelIfstateTypeStatsList.ProtoReflect.Descriptor instead.
func (*JunosKernelIfstateKernelIfstateTypeStatsList) Descriptor() ([]byte, []int) {
	return file_kernel_ifstate_render_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsList) GetRecordTime() uint32 {
	if x != nil && x.RecordTime != nil {
		return *x.RecordTime
	}
	return 0
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsList) GetRecordSeqNum() uint32 {
	if x != nil && x.RecordSeqNum != nil {
		return *x.RecordSeqNum
	}
	return 0
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsList) GetChurnRate() *JunosKernelIfstateKernelIfstateTypeStatsListChurnRateType {
	if x != nil {
		return x.ChurnRate
	}
	return nil
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsList) GetPeerConsumptionRate() []*JunosKernelIfstateKernelIfstateTypeStatsListPeerConsumptionRateList {
	if x != nil {
		return x.PeerConsumptionRate
	}
	return nil
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsList) GetVetosStatistics() *JunosKernelIfstateKernelIfstateTypeStatsListVetosStatisticsType {
	if x != nil {
		return x.VetosStatistics
	}
	return nil
}

type JunosKernelIfstateKernelIfstateTypeStatsListChurnRateType struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	OverallChurnRate  *uint32                `protobuf:"varint,51,opt,name=overall_churn_rate,json=overallChurnRate" json:"overall_churn_rate,omitempty"`
	RouteAddRate      *uint32                `protobuf:"varint,52,opt,name=route_add_rate,json=routeAddRate" json:"route_add_rate,omitempty"`
	RouteChangeRate   *uint32                `protobuf:"varint,53,opt,name=route_change_rate,json=routeChangeRate" json:"route_change_rate,omitempty"`
	RouteDeleteRate   *uint32                `protobuf:"varint,54,opt,name=route_delete_rate,json=routeDeleteRate" json:"route_delete_rate,omitempty"`
	NexthopAddRate    *uint32                `protobuf:"varint,55,opt,name=nexthop_add_rate,json=nexthopAddRate" json:"nexthop_add_rate,omitempty"`
	NexthopDeleteRate *uint32                `protobuf:"varint,56,opt,name=nexthop_delete_rate,json=nexthopDeleteRate" json:"nexthop_delete_rate,omitempty"`
	NexthopChangeRate *uint32                `protobuf:"varint,57,opt,name=nexthop_change_rate,json=nexthopChangeRate" json:"nexthop_change_rate,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListChurnRateType) Reset() {
	*x = JunosKernelIfstateKernelIfstateTypeStatsListChurnRateType{}
	mi := &file_kernel_ifstate_render_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListChurnRateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKernelIfstateKernelIfstateTypeStatsListChurnRateType) ProtoMessage() {}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListChurnRateType) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_ifstate_render_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKernelIfstateKernelIfstateTypeStatsListChurnRateType.ProtoReflect.Descriptor instead.
func (*JunosKernelIfstateKernelIfstateTypeStatsListChurnRateType) Descriptor() ([]byte, []int) {
	return file_kernel_ifstate_render_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListChurnRateType) GetOverallChurnRate() uint32 {
	if x != nil && x.OverallChurnRate != nil {
		return *x.OverallChurnRate
	}
	return 0
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListChurnRateType) GetRouteAddRate() uint32 {
	if x != nil && x.RouteAddRate != nil {
		return *x.RouteAddRate
	}
	return 0
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListChurnRateType) GetRouteChangeRate() uint32 {
	if x != nil && x.RouteChangeRate != nil {
		return *x.RouteChangeRate
	}
	return 0
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListChurnRateType) GetRouteDeleteRate() uint32 {
	if x != nil && x.RouteDeleteRate != nil {
		return *x.RouteDeleteRate
	}
	return 0
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListChurnRateType) GetNexthopAddRate() uint32 {
	if x != nil && x.NexthopAddRate != nil {
		return *x.NexthopAddRate
	}
	return 0
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListChurnRateType) GetNexthopDeleteRate() uint32 {
	if x != nil && x.NexthopDeleteRate != nil {
		return *x.NexthopDeleteRate
	}
	return 0
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListChurnRateType) GetNexthopChangeRate() uint32 {
	if x != nil && x.NexthopChangeRate != nil {
		return *x.NexthopChangeRate
	}
	return 0
}

type JunosKernelIfstateKernelIfstateTypeStatsListPeerConsumptionRateList struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	PeerIndex                    *uint32                `protobuf:"varint,51,opt,name=peer_index,json=peerIndex" json:"peer_index,omitempty"`
	ConsumptionRateCounter       *uint32                `protobuf:"varint,52,opt,name=consumption_rate_counter,json=consumptionRateCounter" json:"consumption_rate_counter,omitempty"`
	ConsumptionRouteAddRate      *uint32                `protobuf:"varint,53,opt,name=consumption_route_add_rate,json=consumptionRouteAddRate" json:"consumption_route_add_rate,omitempty"`
	ConsumptionRouteChangeRate   *uint32                `protobuf:"varint,54,opt,name=consumption_route_change_rate,json=consumptionRouteChangeRate" json:"consumption_route_change_rate,omitempty"`
	ConsumptionRouteDeleteRate   *uint32                `protobuf:"varint,55,opt,name=consumption_route_delete_rate,json=consumptionRouteDeleteRate" json:"consumption_route_delete_rate,omitempty"`
	ConsumptionNexthopAddRate    *uint32                `protobuf:"varint,56,opt,name=consumption_nexthop_add_rate,json=consumptionNexthopAddRate" json:"consumption_nexthop_add_rate,omitempty"`
	ConsumptionNexthopChangeRate *uint32                `protobuf:"varint,57,opt,name=consumption_nexthop_change_rate,json=consumptionNexthopChangeRate" json:"consumption_nexthop_change_rate,omitempty"`
	ConsumptionNexthopDeleteRate *uint32                `protobuf:"varint,58,opt,name=consumption_nexthop_delete_rate,json=consumptionNexthopDeleteRate" json:"consumption_nexthop_delete_rate,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListPeerConsumptionRateList) Reset() {
	*x = JunosKernelIfstateKernelIfstateTypeStatsListPeerConsumptionRateList{}
	mi := &file_kernel_ifstate_render_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListPeerConsumptionRateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKernelIfstateKernelIfstateTypeStatsListPeerConsumptionRateList) ProtoMessage() {}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListPeerConsumptionRateList) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_ifstate_render_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKernelIfstateKernelIfstateTypeStatsListPeerConsumptionRateList.ProtoReflect.Descriptor instead.
func (*JunosKernelIfstateKernelIfstateTypeStatsListPeerConsumptionRateList) Descriptor() ([]byte, []int) {
	return file_kernel_ifstate_render_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListPeerConsumptionRateList) GetPeerIndex() uint32 {
	if x != nil && x.PeerIndex != nil {
		return *x.PeerIndex
	}
	return 0
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListPeerConsumptionRateList) GetConsumptionRateCounter() uint32 {
	if x != nil && x.ConsumptionRateCounter != nil {
		return *x.ConsumptionRateCounter
	}
	return 0
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListPeerConsumptionRateList) GetConsumptionRouteAddRate() uint32 {
	if x != nil && x.ConsumptionRouteAddRate != nil {
		return *x.ConsumptionRouteAddRate
	}
	return 0
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListPeerConsumptionRateList) GetConsumptionRouteChangeRate() uint32 {
	if x != nil && x.ConsumptionRouteChangeRate != nil {
		return *x.ConsumptionRouteChangeRate
	}
	return 0
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListPeerConsumptionRateList) GetConsumptionRouteDeleteRate() uint32 {
	if x != nil && x.ConsumptionRouteDeleteRate != nil {
		return *x.ConsumptionRouteDeleteRate
	}
	return 0
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListPeerConsumptionRateList) GetConsumptionNexthopAddRate() uint32 {
	if x != nil && x.ConsumptionNexthopAddRate != nil {
		return *x.ConsumptionNexthopAddRate
	}
	return 0
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListPeerConsumptionRateList) GetConsumptionNexthopChangeRate() uint32 {
	if x != nil && x.ConsumptionNexthopChangeRate != nil {
		return *x.ConsumptionNexthopChangeRate
	}
	return 0
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListPeerConsumptionRateList) GetConsumptionNexthopDeleteRate() uint32 {
	if x != nil && x.ConsumptionNexthopDeleteRate != nil {
		return *x.ConsumptionNexthopDeleteRate
	}
	return 0
}

type JunosKernelIfstateKernelIfstateTypeStatsListVetosStatisticsType struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	VetoVmPageCountSevere      *uint32                `protobuf:"varint,51,opt,name=veto_vm_page_count_severe,json=vetoVmPageCountSevere" json:"veto_vm_page_count_severe,omitempty"`
	VetoIfstateMemory          *uint32                `protobuf:"varint,52,opt,name=veto_ifstate_memory,json=vetoIfstateMemory" json:"veto_ifstate_memory,omitempty"`
	VetoMemoryOverconsumed     *uint32                `protobuf:"varint,53,opt,name=veto_memory_overconsumed,json=vetoMemoryOverconsumed" json:"veto_memory_overconsumed,omitempty"`
	VetoPfeVetoMaxRoutes       *uint32                `protobuf:"varint,54,opt,name=veto_pfe_veto_max_routes,json=vetoPfeVetoMaxRoutes" json:"veto_pfe_veto_max_routes,omitempty"`
	VetoTooManyDelayedUnrefs   *uint32                `protobuf:"varint,55,opt,name=veto_too_many_delayed_unrefs,json=vetoTooManyDelayedUnrefs" json:"veto_too_many_delayed_unrefs,omitempty"`
	VetoNhMemoryUsage          *uint32                `protobuf:"varint,56,opt,name=veto_nh_memory_usage,json=vetoNhMemoryUsage" json:"veto_nh_memory_usage,omitempty"`
	VetoMbufCluster            *uint32                `protobuf:"varint,57,opt,name=veto_mbuf_cluster,json=vetoMbufCluster" json:"veto_mbuf_cluster,omitempty"`
	VetoFlabelSpaceExhaustion  *uint32                `protobuf:"varint,58,opt,name=veto_flabel_space_exhaustion,json=vetoFlabelSpaceExhaustion" json:"veto_flabel_space_exhaustion,omitempty"`
	VetoFlabelSpaceConsumption *uint32                `protobuf:"varint,59,opt,name=veto_flabel_space_consumption,json=vetoFlabelSpaceConsumption" json:"veto_flabel_space_consumption,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListVetosStatisticsType) Reset() {
	*x = JunosKernelIfstateKernelIfstateTypeStatsListVetosStatisticsType{}
	mi := &file_kernel_ifstate_render_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListVetosStatisticsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKernelIfstateKernelIfstateTypeStatsListVetosStatisticsType) ProtoMessage() {}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListVetosStatisticsType) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_ifstate_render_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKernelIfstateKernelIfstateTypeStatsListVetosStatisticsType.ProtoReflect.Descriptor instead.
func (*JunosKernelIfstateKernelIfstateTypeStatsListVetosStatisticsType) Descriptor() ([]byte, []int) {
	return file_kernel_ifstate_render_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListVetosStatisticsType) GetVetoVmPageCountSevere() uint32 {
	if x != nil && x.VetoVmPageCountSevere != nil {
		return *x.VetoVmPageCountSevere
	}
	return 0
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListVetosStatisticsType) GetVetoIfstateMemory() uint32 {
	if x != nil && x.VetoIfstateMemory != nil {
		return *x.VetoIfstateMemory
	}
	return 0
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListVetosStatisticsType) GetVetoMemoryOverconsumed() uint32 {
	if x != nil && x.VetoMemoryOverconsumed != nil {
		return *x.VetoMemoryOverconsumed
	}
	return 0
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListVetosStatisticsType) GetVetoPfeVetoMaxRoutes() uint32 {
	if x != nil && x.VetoPfeVetoMaxRoutes != nil {
		return *x.VetoPfeVetoMaxRoutes
	}
	return 0
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListVetosStatisticsType) GetVetoTooManyDelayedUnrefs() uint32 {
	if x != nil && x.VetoTooManyDelayedUnrefs != nil {
		return *x.VetoTooManyDelayedUnrefs
	}
	return 0
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListVetosStatisticsType) GetVetoNhMemoryUsage() uint32 {
	if x != nil && x.VetoNhMemoryUsage != nil {
		return *x.VetoNhMemoryUsage
	}
	return 0
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListVetosStatisticsType) GetVetoMbufCluster() uint32 {
	if x != nil && x.VetoMbufCluster != nil {
		return *x.VetoMbufCluster
	}
	return 0
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListVetosStatisticsType) GetVetoFlabelSpaceExhaustion() uint32 {
	if x != nil && x.VetoFlabelSpaceExhaustion != nil {
		return *x.VetoFlabelSpaceExhaustion
	}
	return 0
}

func (x *JunosKernelIfstateKernelIfstateTypeStatsListVetosStatisticsType) GetVetoFlabelSpaceConsumption() uint32 {
	if x != nil && x.VetoFlabelSpaceConsumption != nil {
		return *x.VetoFlabelSpaceConsumption
	}
	return 0
}

var file_kernel_ifstate_render_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*JunosKernelIfstate)(nil),
		Field:         72,
		Name:          "jnpr_junos_kernel_ifstate_ext",
		Tag:           "bytes,72,opt,name=jnpr_junos_kernel_ifstate_ext",
		Filename:      "kernel-ifstate-render.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional junos_kernel_ifstate jnpr_junos_kernel_ifstate_ext = 72;
	E_JnprJunosKernelIfstateExt = &file_kernel_ifstate_render_proto_extTypes[0]
)

var File_kernel_ifstate_render_proto protoreflect.FileDescriptor

var file_kernel_ifstate_render_proto_rawDesc = string([]byte{
	0x0a, 0x1b, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2d, 0x69, 0x66, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2d, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x82, 0x10, 0x0a, 0x14, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x66, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x6b,
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x66, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb5, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x66, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x66, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x66, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x96,
	0x0f, 0x0a, 0x13, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x66, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x8d, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6b,
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x66, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x66, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x1a, 0xb1, 0x0e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x79, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x0a,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x7a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d,
	0x12, 0x64, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x72, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x97,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x66, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x66, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x63, 0x68, 0x75, 0x72,
	0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x63, 0x68, 0x75,
	0x72, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x15, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x98, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f,
	0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x66, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6b,
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x66, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x13, 0x70, 0x65, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x76, 0x0a,
	0x10, 0x76, 0x65, 0x74, 0x6f, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73,
	0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x66, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x66, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x76,
	0x65, 0x74, 0x6f, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x76, 0x65, 0x74, 0x6f, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0xc7, 0x02, 0x0a, 0x0f, 0x63, 0x68, 0x75, 0x72, 0x6e, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x68, 0x75, 0x72, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x43, 0x68,
	0x75, 0x72, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x41, 0x64, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e, 0x65,
	0x78, 0x74, 0x68, 0x6f, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e, 0x65,
	0x78, 0x74, 0x68, 0x6f, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x1a,
	0x8e, 0x04, 0x0a, 0x1a, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x09, 0x70, 0x65, 0x65, 0x72, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3b,
	0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x41,
	0x0a, 0x1d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x41, 0x64, 0x64, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1c, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x1a, 0x94, 0x04, 0x0a, 0x15, 0x76, 0x65, 0x74, 0x6f, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x76, 0x65,
	0x74, 0x6f, 0x5f, 0x76, 0x6d, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x76,
	0x65, 0x74, 0x6f, 0x56, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x65, 0x74, 0x6f, 0x5f, 0x69, 0x66, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x76, 0x65, 0x74, 0x6f, 0x49, 0x66, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x18, 0x76, 0x65, 0x74, 0x6f, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x76, 0x65, 0x74, 0x6f, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x12, 0x36,
	0x0a, 0x18, 0x76, 0x65, 0x74, 0x6f, 0x5f, 0x70, 0x66, 0x65, 0x5f, 0x76, 0x65, 0x74, 0x6f, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x76, 0x65, 0x74, 0x6f, 0x50, 0x66, 0x65, 0x56, 0x65, 0x74, 0x6f, 0x4d, 0x61, 0x78,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x1c, 0x76, 0x65, 0x74, 0x6f, 0x5f, 0x74,
	0x6f, 0x6f, 0x5f, 0x6d, 0x61, 0x6e, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f,
	0x75, 0x6e, 0x72, 0x65, 0x66, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x76, 0x65,
	0x74, 0x6f, 0x54, 0x6f, 0x6f, 0x4d, 0x61, 0x6e, 0x79, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x55, 0x6e, 0x72, 0x65, 0x66, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x76, 0x65, 0x74, 0x6f, 0x5f, 0x6e,
	0x68, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x76, 0x65, 0x74, 0x6f, 0x4e, 0x68, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x65, 0x74, 0x6f, 0x5f,
	0x6d, 0x62, 0x75, 0x66, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x76, 0x65, 0x74, 0x6f, 0x4d, 0x62, 0x75, 0x66, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x76, 0x65, 0x74, 0x6f, 0x5f, 0x66, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x68, 0x61, 0x75, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x76, 0x65, 0x74, 0x6f, 0x46,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x45, 0x78, 0x68, 0x61, 0x75, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x1d, 0x76, 0x65, 0x74, 0x6f, 0x5f, 0x66, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x76, 0x65, 0x74,
	0x6f, 0x46, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x70, 0x0a, 0x1d, 0x6a, 0x6e, 0x70, 0x72, 0x5f,
	0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x66, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x12, 0x17, 0x2e, 0x4a, 0x75, 0x6e, 0x69, 0x70,
	0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x73, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f,
	0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x66, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x19,
	0x6a, 0x6e, 0x70, 0x72, 0x4a, 0x75, 0x6e, 0x6f, 0x73, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49,
	0x66, 0x73, 0x74, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x6a,
	0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
})

var (
	file_kernel_ifstate_render_proto_rawDescOnce sync.Once
	file_kernel_ifstate_render_proto_rawDescData []byte
)

func file_kernel_ifstate_render_proto_rawDescGZIP() []byte {
	file_kernel_ifstate_render_proto_rawDescOnce.Do(func() {
		file_kernel_ifstate_render_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kernel_ifstate_render_proto_rawDesc), len(file_kernel_ifstate_render_proto_rawDesc)))
	})
	return file_kernel_ifstate_render_proto_rawDescData
}

var file_kernel_ifstate_render_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_kernel_ifstate_render_proto_goTypes = []any{
	(*JunosKernelIfstate)(nil),                                                  // 0: junos_kernel_ifstate
	(*JunosKernelIfstateKernelIfstateType)(nil),                                 // 1: junos_kernel_ifstate.kernel_ifstate_type
	(*JunosKernelIfstateKernelIfstateTypeStatsList)(nil),                        // 2: junos_kernel_ifstate.kernel_ifstate_type.stats_list
	(*JunosKernelIfstateKernelIfstateTypeStatsListChurnRateType)(nil),           // 3: junos_kernel_ifstate.kernel_ifstate_type.stats_list.churn_rate_type
	(*JunosKernelIfstateKernelIfstateTypeStatsListPeerConsumptionRateList)(nil), // 4: junos_kernel_ifstate.kernel_ifstate_type.stats_list.peer_consumption_rate_list
	(*JunosKernelIfstateKernelIfstateTypeStatsListVetosStatisticsType)(nil),     // 5: junos_kernel_ifstate.kernel_ifstate_type.stats_list.vetos_statistics_type
	(*JuniperNetworksSensors)(nil),                                              // 6: JuniperNetworksSensors
}
var file_kernel_ifstate_render_proto_depIdxs = []int32{
	1, // 0: junos_kernel_ifstate.kernel_ifstate:type_name -> junos_kernel_ifstate.kernel_ifstate_type
	2, // 1: junos_kernel_ifstate.kernel_ifstate_type.stats:type_name -> junos_kernel_ifstate.kernel_ifstate_type.stats_list
	3, // 2: junos_kernel_ifstate.kernel_ifstate_type.stats_list.churn_rate:type_name -> junos_kernel_ifstate.kernel_ifstate_type.stats_list.churn_rate_type
	4, // 3: junos_kernel_ifstate.kernel_ifstate_type.stats_list.peer_consumption_rate:type_name -> junos_kernel_ifstate.kernel_ifstate_type.stats_list.peer_consumption_rate_list
	5, // 4: junos_kernel_ifstate.kernel_ifstate_type.stats_list.vetos_statistics:type_name -> junos_kernel_ifstate.kernel_ifstate_type.stats_list.vetos_statistics_type
	6, // 5: jnpr_junos_kernel_ifstate_ext:extendee -> JuniperNetworksSensors
	0, // 6: jnpr_junos_kernel_ifstate_ext:type_name -> junos_kernel_ifstate
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	6, // [6:7] is the sub-list for extension type_name
	5, // [5:6] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_kernel_ifstate_render_proto_init() }
func file_kernel_ifstate_render_proto_init() {
	if File_kernel_ifstate_render_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kernel_ifstate_render_proto_rawDesc), len(file_kernel_ifstate_render_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_kernel_ifstate_render_proto_goTypes,
		DependencyIndexes: file_kernel_ifstate_render_proto_depIdxs,
		MessageInfos:      file_kernel_ifstate_render_proto_msgTypes,
		ExtensionInfos:    file_kernel_ifstate_render_proto_extTypes,
	}.Build()
	File_kernel_ifstate_render_proto = out.File
	file_kernel_ifstate_render_proto_goTypes = nil
	file_kernel_ifstate_render_proto_depIdxs = nil
}
