// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: rpd_ni_bgp_oc.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NetworkInstancesNiBgp struct {
	state           protoimpl.MessageState                      `protogen:"open.v1"`
	NetworkInstance []*NetworkInstancesNiBgpNetworkInstanceList `protobuf:"bytes,151,rep,name=network_instance,json=networkInstance" json:"network_instance,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgp) Reset() {
	*x = NetworkInstancesNiBgp{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgp) ProtoMessage() {}

func (x *NetworkInstancesNiBgp) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgp.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgp) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0}
}

func (x *NetworkInstancesNiBgp) GetNetworkInstance() []*NetworkInstancesNiBgpNetworkInstanceList {
	if x != nil {
		return x.NetworkInstance
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceList struct {
	state         protoimpl.MessageState                                 `protogen:"open.v1"`
	Name          *string                                                `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	Protocols     *NetworkInstancesNiBgpNetworkInstanceListProtocolsType `protobuf:"bytes,151,opt,name=protocols" json:"protocols,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceList) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceList{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceList) ProtoMessage() {}

func (x *NetworkInstancesNiBgpNetworkInstanceList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceList) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceList) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NetworkInstancesNiBgpNetworkInstanceList) GetProtocols() *NetworkInstancesNiBgpNetworkInstanceListProtocolsType {
	if x != nil {
		return x.Protocols
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsType struct {
	state         protoimpl.MessageState                                             `protogen:"open.v1"`
	Protocol      *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolType `protobuf:"bytes,151,opt,name=protocol" json:"protocol,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsType) ProtoMessage() {}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsType) GetProtocol() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolType {
	if x != nil {
		return x.Protocol
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolType struct {
	state         protoimpl.MessageState                                                    `protogen:"open.v1"`
	Bgp           *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpType `protobuf:"bytes,151,opt,name=bgp" json:"bgp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolType) ProtoMessage() {}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolType) GetBgp() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpType {
	if x != nil {
		return x.Bgp
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpType struct {
	state         protoimpl.MessageState                                                                  `protogen:"open.v1"`
	Global        *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalType     `protobuf:"bytes,151,opt,name=global" json:"global,omitempty"`
	Neighbors     *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsType  `protobuf:"bytes,152,opt,name=neighbors" json:"neighbors,omitempty"`
	PeerGroups    *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsType `protobuf:"bytes,153,opt,name=peer_groups,json=peerGroups" json:"peer_groups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpType) ProtoMessage() {}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpType) GetGlobal() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalType {
	if x != nil {
		return x.Global
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpType) GetNeighbors() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsType {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpType) GetPeerGroups() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsType {
	if x != nil {
		return x.PeerGroups
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalType struct {
	state                 protoimpl.MessageState                                                                                       `protogen:"open.v1"`
	State                 *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeStateType                 `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	RouteSelectionOptions *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeRouteSelectionOptionsType `protobuf:"bytes,152,opt,name=route_selection_options,json=routeSelectionOptions" json:"route_selection_options,omitempty"`
	Confederation         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeConfederationType         `protobuf:"bytes,153,opt,name=confederation" json:"confederation,omitempty"`
	GracefulRestart       *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeGracefulRestartType       `protobuf:"bytes,154,opt,name=graceful_restart,json=gracefulRestart" json:"graceful_restart,omitempty"`
	ApplyPolicy           *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeApplyPolicyType           `protobuf:"bytes,171,opt,name=apply_policy,json=applyPolicy" json:"apply_policy,omitempty"`
	AfiSafis              *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisType              `protobuf:"bytes,155,opt,name=afi_safis,json=afiSafis" json:"afi_safis,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalType) GetRouteSelectionOptions() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeRouteSelectionOptionsType {
	if x != nil {
		return x.RouteSelectionOptions
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalType) GetConfederation() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeConfederationType {
	if x != nil {
		return x.Confederation
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalType) GetGracefulRestart() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeGracefulRestartType {
	if x != nil {
		return x.GracefulRestart
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalType) GetApplyPolicy() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeApplyPolicyType {
	if x != nil {
		return x.ApplyPolicy
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalType) GetAfiSafis() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisType {
	if x != nil {
		return x.AfiSafis
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsType struct {
	state         protoimpl.MessageState                                                                               `protogen:"open.v1"`
	Neighbor      []*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborList `protobuf:"bytes,151,rep,name=neighbor" json:"neighbor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsType) GetNeighbor() []*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborList {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsType struct {
	state         protoimpl.MessageState                                                                                 `protogen:"open.v1"`
	PeerGroup     []*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupList `protobuf:"bytes,151,rep,name=peer_group,json=peerGroup" json:"peer_group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsType) GetPeerGroup() []*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupList {
	if x != nil {
		return x.PeerGroup
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	As            *uint32                `protobuf:"varint,51,opt,name=as" json:"as,omitempty"`
	RouterId      *string                `protobuf:"bytes,52,opt,name=router_id,json=routerId" json:"router_id,omitempty"`
	TotalPaths    *uint32                `protobuf:"varint,81,opt,name=total_paths,json=totalPaths" json:"total_paths,omitempty"`
	TotalPrefixes *uint32                `protobuf:"varint,82,opt,name=total_prefixes,json=totalPrefixes" json:"total_prefixes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeStateType) GetAs() uint32 {
	if x != nil && x.As != nil {
		return *x.As
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeStateType) GetRouterId() string {
	if x != nil && x.RouterId != nil {
		return *x.RouterId
	}
	return ""
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeStateType) GetTotalPaths() uint32 {
	if x != nil && x.TotalPaths != nil {
		return *x.TotalPaths
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeStateType) GetTotalPrefixes() uint32 {
	if x != nil && x.TotalPrefixes != nil {
		return *x.TotalPrefixes
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeRouteSelectionOptionsType struct {
	state         protoimpl.MessageState                                                                                                `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeRouteSelectionOptionsTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeRouteSelectionOptionsType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeRouteSelectionOptionsType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeRouteSelectionOptionsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeRouteSelectionOptionsType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeRouteSelectionOptionsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeRouteSelectionOptionsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeRouteSelectionOptionsType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 1}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeRouteSelectionOptionsType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeRouteSelectionOptionsTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeConfederationType struct {
	state         protoimpl.MessageState                                                                                        `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeConfederationTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeConfederationType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeConfederationType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeConfederationType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeConfederationType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeConfederationType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeConfederationType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeConfederationType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 2}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeConfederationType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeConfederationTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeGracefulRestartType struct {
	state         protoimpl.MessageState                                                                                          `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeGracefulRestartTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeGracefulRestartType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeGracefulRestartType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeGracefulRestartType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeGracefulRestartType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeGracefulRestartType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeGracefulRestartType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeGracefulRestartType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 3}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeGracefulRestartType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeGracefulRestartTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeApplyPolicyType struct {
	state         protoimpl.MessageState                                                                                      `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeApplyPolicyTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeApplyPolicyType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeApplyPolicyType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeApplyPolicyType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeApplyPolicyType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeApplyPolicyType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeApplyPolicyType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeApplyPolicyType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 4}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeApplyPolicyType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeApplyPolicyTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisType struct {
	state         protoimpl.MessageState                                                                                       `protogen:"open.v1"`
	AfiSafi       []*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiList `protobuf:"bytes,151,rep,name=afi_safi,json=afiSafi" json:"afi_safi,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisType) GetAfiSafi() []*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiList {
	if x != nil {
		return x.AfiSafi
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeRouteSelectionOptionsTypeStateType struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	AlwaysCompareMed        *bool                  `protobuf:"varint,52,opt,name=always_compare_med,json=alwaysCompareMed" json:"always_compare_med,omitempty"`
	IgnoreAsPathLength      *bool                  `protobuf:"varint,53,opt,name=ignore_as_path_length,json=ignoreAsPathLength" json:"ignore_as_path_length,omitempty"`
	ExternalCompareRouterId *bool                  `protobuf:"varint,54,opt,name=external_compare_router_id,json=externalCompareRouterId" json:"external_compare_router_id,omitempty"`
	AdvertiseInactiveRoutes *bool                  `protobuf:"varint,51,opt,name=advertise_inactive_routes,json=advertiseInactiveRoutes" json:"advertise_inactive_routes,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeRouteSelectionOptionsTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeRouteSelectionOptionsTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeRouteSelectionOptionsTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeRouteSelectionOptionsTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeRouteSelectionOptionsTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeRouteSelectionOptionsTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeRouteSelectionOptionsTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 1, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeRouteSelectionOptionsTypeStateType) GetAlwaysCompareMed() bool {
	if x != nil && x.AlwaysCompareMed != nil {
		return *x.AlwaysCompareMed
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeRouteSelectionOptionsTypeStateType) GetIgnoreAsPathLength() bool {
	if x != nil && x.IgnoreAsPathLength != nil {
		return *x.IgnoreAsPathLength
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeRouteSelectionOptionsTypeStateType) GetExternalCompareRouterId() bool {
	if x != nil && x.ExternalCompareRouterId != nil {
		return *x.ExternalCompareRouterId
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeRouteSelectionOptionsTypeStateType) GetAdvertiseInactiveRoutes() bool {
	if x != nil && x.AdvertiseInactiveRoutes != nil {
		return *x.AdvertiseInactiveRoutes
	}
	return false
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeConfederationTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identifier    *uint32                `protobuf:"varint,53,opt,name=identifier" json:"identifier,omitempty"`
	MemberAs      []uint32               `protobuf:"varint,52,rep,name=member_as,json=memberAs" json:"member_as,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeConfederationTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeConfederationTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeConfederationTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeConfederationTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeConfederationTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeConfederationTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeConfederationTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 2, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeConfederationTypeStateType) GetIdentifier() uint32 {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeConfederationTypeStateType) GetMemberAs() []uint32 {
	if x != nil {
		return x.MemberAs
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeGracefulRestartTypeStateType struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Enabled         *bool                  `protobuf:"varint,51,opt,name=enabled" json:"enabled,omitempty"`
	RestartTime     *uint32                `protobuf:"varint,52,opt,name=restart_time,json=restartTime" json:"restart_time,omitempty"`
	StaleRoutesTime *float64               `protobuf:"fixed64,53,opt,name=stale_routes_time,json=staleRoutesTime" json:"stale_routes_time,omitempty"`
	HelperOnly      *bool                  `protobuf:"varint,54,opt,name=helper_only,json=helperOnly" json:"helper_only,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeGracefulRestartTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeGracefulRestartTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeGracefulRestartTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeGracefulRestartTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeGracefulRestartTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeGracefulRestartTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeGracefulRestartTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 3, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeGracefulRestartTypeStateType) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeGracefulRestartTypeStateType) GetRestartTime() uint32 {
	if x != nil && x.RestartTime != nil {
		return *x.RestartTime
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeGracefulRestartTypeStateType) GetStaleRoutesTime() float64 {
	if x != nil && x.StaleRoutesTime != nil {
		return *x.StaleRoutesTime
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeGracefulRestartTypeStateType) GetHelperOnly() bool {
	if x != nil && x.HelperOnly != nil {
		return *x.HelperOnly
	}
	return false
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeApplyPolicyTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ImportPolicy  []string               `protobuf:"bytes,51,rep,name=import_policy,json=importPolicy" json:"import_policy,omitempty"`
	ExportPolicy  []string               `protobuf:"bytes,52,rep,name=export_policy,json=exportPolicy" json:"export_policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeApplyPolicyTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeApplyPolicyTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeApplyPolicyTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeApplyPolicyTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeApplyPolicyTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeApplyPolicyTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeApplyPolicyTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 4, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeApplyPolicyTypeStateType) GetImportPolicy() []string {
	if x != nil {
		return x.ImportPolicy
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeApplyPolicyTypeStateType) GetExportPolicy() []string {
	if x != nil {
		return x.ExportPolicy
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiList struct {
	state              protoimpl.MessageState                                                                                                           `protogen:"open.v1"`
	AfiSafiName        *string                                                                                                                          `protobuf:"bytes,51,opt,name=afi_safi_name,json=afiSafiName" json:"afi_safi_name,omitempty"`
	GracefulRestart    *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListGracefulRestartType    `protobuf:"bytes,151,opt,name=graceful_restart,json=gracefulRestart" json:"graceful_restart,omitempty"`
	State              *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListStateType              `protobuf:"bytes,152,opt,name=state" json:"state,omitempty"`
	AddPaths           *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListAddPathsType           `protobuf:"bytes,153,opt,name=add_paths,json=addPaths" json:"add_paths,omitempty"`
	Ipv4Unicast        *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastType        `protobuf:"bytes,154,opt,name=ipv4_unicast,json=ipv4Unicast" json:"ipv4_unicast,omitempty"`
	Ipv6Unicast        *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastType        `protobuf:"bytes,155,opt,name=ipv6_unicast,json=ipv6Unicast" json:"ipv6_unicast,omitempty"`
	Ipv4LabeledUnicast *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastType `protobuf:"bytes,156,opt,name=ipv4_labeled_unicast,json=ipv4LabeledUnicast" json:"ipv4_labeled_unicast,omitempty"`
	Ipv6LabeledUnicast *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastType `protobuf:"bytes,157,opt,name=ipv6_labeled_unicast,json=ipv6LabeledUnicast" json:"ipv6_labeled_unicast,omitempty"`
	L3VpnIpv4Unicast   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType   `protobuf:"bytes,158,opt,name=l3vpn_ipv4_unicast,json=l3vpnIpv4Unicast" json:"l3vpn_ipv4_unicast,omitempty"`
	L3VpnIpv6Unicast   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType   `protobuf:"bytes,159,opt,name=l3vpn_ipv6_unicast,json=l3vpnIpv6Unicast" json:"l3vpn_ipv6_unicast,omitempty"`
	L3VpnIpv4Multicast *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType `protobuf:"bytes,160,opt,name=l3vpn_ipv4_multicast,json=l3vpnIpv4Multicast" json:"l3vpn_ipv4_multicast,omitempty"`
	L3VpnIpv6Multicast *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType `protobuf:"bytes,161,opt,name=l3vpn_ipv6_multicast,json=l3vpnIpv6Multicast" json:"l3vpn_ipv6_multicast,omitempty"`
	L2VpnVpls          *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsType          `protobuf:"bytes,162,opt,name=l2vpn_vpls,json=l2vpnVpls" json:"l2vpn_vpls,omitempty"`
	L2VpnEvpn          *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnType          `protobuf:"bytes,163,opt,name=l2vpn_evpn,json=l2vpnEvpn" json:"l2vpn_evpn,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiList) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiList{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiList) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiList) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiList) GetAfiSafiName() string {
	if x != nil && x.AfiSafiName != nil {
		return *x.AfiSafiName
	}
	return ""
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiList) GetGracefulRestart() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListGracefulRestartType {
	if x != nil {
		return x.GracefulRestart
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiList) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiList) GetAddPaths() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListAddPathsType {
	if x != nil {
		return x.AddPaths
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiList) GetIpv4Unicast() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastType {
	if x != nil {
		return x.Ipv4Unicast
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiList) GetIpv6Unicast() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastType {
	if x != nil {
		return x.Ipv6Unicast
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiList) GetIpv4LabeledUnicast() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastType {
	if x != nil {
		return x.Ipv4LabeledUnicast
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiList) GetIpv6LabeledUnicast() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastType {
	if x != nil {
		return x.Ipv6LabeledUnicast
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiList) GetL3VpnIpv4Unicast() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType {
	if x != nil {
		return x.L3VpnIpv4Unicast
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiList) GetL3VpnIpv6Unicast() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType {
	if x != nil {
		return x.L3VpnIpv6Unicast
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiList) GetL3VpnIpv4Multicast() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType {
	if x != nil {
		return x.L3VpnIpv4Multicast
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiList) GetL3VpnIpv6Multicast() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType {
	if x != nil {
		return x.L3VpnIpv6Multicast
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiList) GetL2VpnVpls() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsType {
	if x != nil {
		return x.L2VpnVpls
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiList) GetL2VpnEvpn() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnType {
	if x != nil {
		return x.L2VpnEvpn
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListGracefulRestartType struct {
	state         protoimpl.MessageState                                                                                                                 `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListGracefulRestartTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListGracefulRestartType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListGracefulRestartType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListGracefulRestartType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListGracefulRestartType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListGracefulRestartType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListGracefulRestartType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListGracefulRestartType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListGracefulRestartType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListGracefulRestartTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AfiSafiName   *string                `protobuf:"bytes,51,opt,name=afi_safi_name,json=afiSafiName" json:"afi_safi_name,omitempty"`
	Enabled       *bool                  `protobuf:"varint,52,opt,name=enabled" json:"enabled,omitempty"`
	TotalPaths    *uint32                `protobuf:"varint,81,opt,name=total_paths,json=totalPaths" json:"total_paths,omitempty"`
	TotalPrefixes *uint32                `protobuf:"varint,82,opt,name=total_prefixes,json=totalPrefixes" json:"total_prefixes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 1}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListStateType) GetAfiSafiName() string {
	if x != nil && x.AfiSafiName != nil {
		return *x.AfiSafiName
	}
	return ""
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListStateType) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListStateType) GetTotalPaths() uint32 {
	if x != nil && x.TotalPaths != nil {
		return *x.TotalPaths
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListStateType) GetTotalPrefixes() uint32 {
	if x != nil && x.TotalPrefixes != nil {
		return *x.TotalPrefixes
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListAddPathsType struct {
	state         protoimpl.MessageState                                                                                                          `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListAddPathsTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListAddPathsType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListAddPathsType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListAddPathsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListAddPathsType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListAddPathsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListAddPathsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListAddPathsType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 2}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListAddPathsType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListAddPathsTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastType struct {
	state         protoimpl.MessageState                                                                                                                   `protogen:"open.v1"`
	PrefixLimit   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType `protobuf:"bytes,151,opt,name=prefix_limit,json=prefixLimit" json:"prefix_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 3}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastType) GetPrefixLimit() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastType struct {
	state         protoimpl.MessageState                                                                                                                   `protogen:"open.v1"`
	PrefixLimit   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType `protobuf:"bytes,151,opt,name=prefix_limit,json=prefixLimit" json:"prefix_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 4}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastType) GetPrefixLimit() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastType struct {
	state         protoimpl.MessageState                                                                                                                          `protogen:"open.v1"`
	PrefixLimit   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType `protobuf:"bytes,151,opt,name=prefix_limit,json=prefixLimit" json:"prefix_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 5}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastType) GetPrefixLimit() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastType struct {
	state         protoimpl.MessageState                                                                                                                          `protogen:"open.v1"`
	PrefixLimit   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType `protobuf:"bytes,151,opt,name=prefix_limit,json=prefixLimit" json:"prefix_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 6}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastType) GetPrefixLimit() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType struct {
	state         protoimpl.MessageState                                                                                                                        `protogen:"open.v1"`
	PrefixLimit   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType `protobuf:"bytes,151,opt,name=prefix_limit,json=prefixLimit" json:"prefix_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 7}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType) GetPrefixLimit() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType struct {
	state         protoimpl.MessageState                                                                                                                        `protogen:"open.v1"`
	PrefixLimit   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType `protobuf:"bytes,151,opt,name=prefix_limit,json=prefixLimit" json:"prefix_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 8}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType) GetPrefixLimit() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType struct {
	state         protoimpl.MessageState                                                                                                                          `protogen:"open.v1"`
	PrefixLimit   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType `protobuf:"bytes,151,opt,name=prefix_limit,json=prefixLimit" json:"prefix_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 9}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType) GetPrefixLimit() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType struct {
	state         protoimpl.MessageState                                                                                                                          `protogen:"open.v1"`
	PrefixLimit   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType `protobuf:"bytes,151,opt,name=prefix_limit,json=prefixLimit" json:"prefix_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 10}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType) GetPrefixLimit() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsType struct {
	state         protoimpl.MessageState                                                                                                                 `protogen:"open.v1"`
	PrefixLimit   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType `protobuf:"bytes,151,opt,name=prefix_limit,json=prefixLimit" json:"prefix_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 11}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsType) GetPrefixLimit() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnType struct {
	state         protoimpl.MessageState                                                                                                                 `protogen:"open.v1"`
	PrefixLimit   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType `protobuf:"bytes,151,opt,name=prefix_limit,json=prefixLimit" json:"prefix_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 12}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnType) GetPrefixLimit() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListGracefulRestartTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       *bool                  `protobuf:"varint,51,opt,name=enabled" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListGracefulRestartTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListGracefulRestartTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListGracefulRestartTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListGracefulRestartTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListGracefulRestartTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListGracefulRestartTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListGracefulRestartTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListGracefulRestartTypeStateType) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListAddPathsTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Receive              *bool                  `protobuf:"varint,51,opt,name=receive" json:"receive,omitempty"`
	Send                 *bool                  `protobuf:"varint,54,opt,name=send" json:"send,omitempty"`
	SendMax              *uint32                `protobuf:"varint,52,opt,name=send_max,json=sendMax" json:"send_max,omitempty"`
	EligiblePrefixPolicy *string                `protobuf:"bytes,53,opt,name=eligible_prefix_policy,json=eligiblePrefixPolicy" json:"eligible_prefix_policy,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListAddPathsTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListAddPathsTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListAddPathsTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListAddPathsTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListAddPathsTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListAddPathsTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListAddPathsTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 2, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListAddPathsTypeStateType) GetReceive() bool {
	if x != nil && x.Receive != nil {
		return *x.Receive
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListAddPathsTypeStateType) GetSend() bool {
	if x != nil && x.Send != nil {
		return *x.Send
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListAddPathsTypeStateType) GetSendMax() uint32 {
	if x != nil && x.SendMax != nil {
		return *x.SendMax
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListAddPathsTypeStateType) GetEligiblePrefixPolicy() string {
	if x != nil && x.EligiblePrefixPolicy != nil {
		return *x.EligiblePrefixPolicy
	}
	return ""
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType struct {
	state         protoimpl.MessageState                                                                                                                            `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 3, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxPrefixes          *uint32                `protobuf:"varint,51,opt,name=max_prefixes,json=maxPrefixes" json:"max_prefixes,omitempty"`
	PreventTeardown      *bool                  `protobuf:"varint,54,opt,name=prevent_teardown,json=preventTeardown" json:"prevent_teardown,omitempty"`
	ShutdownThresholdPct *uint32                `protobuf:"varint,52,opt,name=shutdown_threshold_pct,json=shutdownThresholdPct" json:"shutdown_threshold_pct,omitempty"`
	RestartTimer         *float64               `protobuf:"fixed64,53,opt,name=restart_timer,json=restartTimer" json:"restart_timer,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 3, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType) GetMaxPrefixes() uint32 {
	if x != nil && x.MaxPrefixes != nil {
		return *x.MaxPrefixes
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType) GetPreventTeardown() bool {
	if x != nil && x.PreventTeardown != nil {
		return *x.PreventTeardown
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType) GetShutdownThresholdPct() uint32 {
	if x != nil && x.ShutdownThresholdPct != nil {
		return *x.ShutdownThresholdPct
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType) GetRestartTimer() float64 {
	if x != nil && x.RestartTimer != nil {
		return *x.RestartTimer
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType struct {
	state         protoimpl.MessageState                                                                                                                            `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 4, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxPrefixes          *uint32                `protobuf:"varint,51,opt,name=max_prefixes,json=maxPrefixes" json:"max_prefixes,omitempty"`
	PreventTeardown      *bool                  `protobuf:"varint,54,opt,name=prevent_teardown,json=preventTeardown" json:"prevent_teardown,omitempty"`
	ShutdownThresholdPct *uint32                `protobuf:"varint,52,opt,name=shutdown_threshold_pct,json=shutdownThresholdPct" json:"shutdown_threshold_pct,omitempty"`
	RestartTimer         *float64               `protobuf:"fixed64,53,opt,name=restart_timer,json=restartTimer" json:"restart_timer,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType) GetMaxPrefixes() uint32 {
	if x != nil && x.MaxPrefixes != nil {
		return *x.MaxPrefixes
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType) GetPreventTeardown() bool {
	if x != nil && x.PreventTeardown != nil {
		return *x.PreventTeardown
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType) GetShutdownThresholdPct() uint32 {
	if x != nil && x.ShutdownThresholdPct != nil {
		return *x.ShutdownThresholdPct
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType) GetRestartTimer() float64 {
	if x != nil && x.RestartTimer != nil {
		return *x.RestartTimer
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType struct {
	state         protoimpl.MessageState                                                                                                                                   `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 5, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxPrefixes          *uint32                `protobuf:"varint,51,opt,name=max_prefixes,json=maxPrefixes" json:"max_prefixes,omitempty"`
	PreventTeardown      *bool                  `protobuf:"varint,54,opt,name=prevent_teardown,json=preventTeardown" json:"prevent_teardown,omitempty"`
	ShutdownThresholdPct *uint32                `protobuf:"varint,52,opt,name=shutdown_threshold_pct,json=shutdownThresholdPct" json:"shutdown_threshold_pct,omitempty"`
	RestartTimer         *float64               `protobuf:"fixed64,53,opt,name=restart_timer,json=restartTimer" json:"restart_timer,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType) GetMaxPrefixes() uint32 {
	if x != nil && x.MaxPrefixes != nil {
		return *x.MaxPrefixes
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType) GetPreventTeardown() bool {
	if x != nil && x.PreventTeardown != nil {
		return *x.PreventTeardown
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType) GetShutdownThresholdPct() uint32 {
	if x != nil && x.ShutdownThresholdPct != nil {
		return *x.ShutdownThresholdPct
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType) GetRestartTimer() float64 {
	if x != nil && x.RestartTimer != nil {
		return *x.RestartTimer
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType struct {
	state         protoimpl.MessageState                                                                                                                                   `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 6, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxPrefixes          *uint32                `protobuf:"varint,51,opt,name=max_prefixes,json=maxPrefixes" json:"max_prefixes,omitempty"`
	PreventTeardown      *bool                  `protobuf:"varint,54,opt,name=prevent_teardown,json=preventTeardown" json:"prevent_teardown,omitempty"`
	ShutdownThresholdPct *uint32                `protobuf:"varint,52,opt,name=shutdown_threshold_pct,json=shutdownThresholdPct" json:"shutdown_threshold_pct,omitempty"`
	RestartTimer         *float64               `protobuf:"fixed64,53,opt,name=restart_timer,json=restartTimer" json:"restart_timer,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType) GetMaxPrefixes() uint32 {
	if x != nil && x.MaxPrefixes != nil {
		return *x.MaxPrefixes
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType) GetPreventTeardown() bool {
	if x != nil && x.PreventTeardown != nil {
		return *x.PreventTeardown
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType) GetShutdownThresholdPct() uint32 {
	if x != nil && x.ShutdownThresholdPct != nil {
		return *x.ShutdownThresholdPct
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType) GetRestartTimer() float64 {
	if x != nil && x.RestartTimer != nil {
		return *x.RestartTimer
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType struct {
	state         protoimpl.MessageState                                                                                                                                 `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 7, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxPrefixes          *uint32                `protobuf:"varint,51,opt,name=max_prefixes,json=maxPrefixes" json:"max_prefixes,omitempty"`
	PreventTeardown      *bool                  `protobuf:"varint,54,opt,name=prevent_teardown,json=preventTeardown" json:"prevent_teardown,omitempty"`
	ShutdownThresholdPct *uint32                `protobuf:"varint,52,opt,name=shutdown_threshold_pct,json=shutdownThresholdPct" json:"shutdown_threshold_pct,omitempty"`
	RestartTimer         *float64               `protobuf:"fixed64,53,opt,name=restart_timer,json=restartTimer" json:"restart_timer,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType) GetMaxPrefixes() uint32 {
	if x != nil && x.MaxPrefixes != nil {
		return *x.MaxPrefixes
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType) GetPreventTeardown() bool {
	if x != nil && x.PreventTeardown != nil {
		return *x.PreventTeardown
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType) GetShutdownThresholdPct() uint32 {
	if x != nil && x.ShutdownThresholdPct != nil {
		return *x.ShutdownThresholdPct
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType) GetRestartTimer() float64 {
	if x != nil && x.RestartTimer != nil {
		return *x.RestartTimer
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType struct {
	state         protoimpl.MessageState                                                                                                                                 `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 8, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxPrefixes          *uint32                `protobuf:"varint,51,opt,name=max_prefixes,json=maxPrefixes" json:"max_prefixes,omitempty"`
	PreventTeardown      *bool                  `protobuf:"varint,54,opt,name=prevent_teardown,json=preventTeardown" json:"prevent_teardown,omitempty"`
	ShutdownThresholdPct *uint32                `protobuf:"varint,52,opt,name=shutdown_threshold_pct,json=shutdownThresholdPct" json:"shutdown_threshold_pct,omitempty"`
	RestartTimer         *float64               `protobuf:"fixed64,53,opt,name=restart_timer,json=restartTimer" json:"restart_timer,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 8, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType) GetMaxPrefixes() uint32 {
	if x != nil && x.MaxPrefixes != nil {
		return *x.MaxPrefixes
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType) GetPreventTeardown() bool {
	if x != nil && x.PreventTeardown != nil {
		return *x.PreventTeardown
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType) GetShutdownThresholdPct() uint32 {
	if x != nil && x.ShutdownThresholdPct != nil {
		return *x.ShutdownThresholdPct
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType) GetRestartTimer() float64 {
	if x != nil && x.RestartTimer != nil {
		return *x.RestartTimer
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType struct {
	state         protoimpl.MessageState                                                                                                                                   `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 9, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxPrefixes          *uint32                `protobuf:"varint,51,opt,name=max_prefixes,json=maxPrefixes" json:"max_prefixes,omitempty"`
	PreventTeardown      *bool                  `protobuf:"varint,54,opt,name=prevent_teardown,json=preventTeardown" json:"prevent_teardown,omitempty"`
	ShutdownThresholdPct *uint32                `protobuf:"varint,52,opt,name=shutdown_threshold_pct,json=shutdownThresholdPct" json:"shutdown_threshold_pct,omitempty"`
	RestartTimer         *float64               `protobuf:"fixed64,53,opt,name=restart_timer,json=restartTimer" json:"restart_timer,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 9, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType) GetMaxPrefixes() uint32 {
	if x != nil && x.MaxPrefixes != nil {
		return *x.MaxPrefixes
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType) GetPreventTeardown() bool {
	if x != nil && x.PreventTeardown != nil {
		return *x.PreventTeardown
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType) GetShutdownThresholdPct() uint32 {
	if x != nil && x.ShutdownThresholdPct != nil {
		return *x.ShutdownThresholdPct
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType) GetRestartTimer() float64 {
	if x != nil && x.RestartTimer != nil {
		return *x.RestartTimer
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType struct {
	state         protoimpl.MessageState                                                                                                                                   `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 10, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxPrefixes          *uint32                `protobuf:"varint,51,opt,name=max_prefixes,json=maxPrefixes" json:"max_prefixes,omitempty"`
	PreventTeardown      *bool                  `protobuf:"varint,54,opt,name=prevent_teardown,json=preventTeardown" json:"prevent_teardown,omitempty"`
	ShutdownThresholdPct *uint32                `protobuf:"varint,52,opt,name=shutdown_threshold_pct,json=shutdownThresholdPct" json:"shutdown_threshold_pct,omitempty"`
	RestartTimer         *float64               `protobuf:"fixed64,53,opt,name=restart_timer,json=restartTimer" json:"restart_timer,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 10, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType) GetMaxPrefixes() uint32 {
	if x != nil && x.MaxPrefixes != nil {
		return *x.MaxPrefixes
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType) GetPreventTeardown() bool {
	if x != nil && x.PreventTeardown != nil {
		return *x.PreventTeardown
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType) GetShutdownThresholdPct() uint32 {
	if x != nil && x.ShutdownThresholdPct != nil {
		return *x.ShutdownThresholdPct
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType) GetRestartTimer() float64 {
	if x != nil && x.RestartTimer != nil {
		return *x.RestartTimer
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType struct {
	state         protoimpl.MessageState                                                                                                                          `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 11, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxPrefixes          *uint32                `protobuf:"varint,51,opt,name=max_prefixes,json=maxPrefixes" json:"max_prefixes,omitempty"`
	PreventTeardown      *bool                  `protobuf:"varint,54,opt,name=prevent_teardown,json=preventTeardown" json:"prevent_teardown,omitempty"`
	ShutdownThresholdPct *uint32                `protobuf:"varint,52,opt,name=shutdown_threshold_pct,json=shutdownThresholdPct" json:"shutdown_threshold_pct,omitempty"`
	RestartTimer         *float64               `protobuf:"fixed64,53,opt,name=restart_timer,json=restartTimer" json:"restart_timer,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 11, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType) GetMaxPrefixes() uint32 {
	if x != nil && x.MaxPrefixes != nil {
		return *x.MaxPrefixes
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType) GetPreventTeardown() bool {
	if x != nil && x.PreventTeardown != nil {
		return *x.PreventTeardown
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType) GetShutdownThresholdPct() uint32 {
	if x != nil && x.ShutdownThresholdPct != nil {
		return *x.ShutdownThresholdPct
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType) GetRestartTimer() float64 {
	if x != nil && x.RestartTimer != nil {
		return *x.RestartTimer
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType struct {
	state         protoimpl.MessageState                                                                                                                          `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 12, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxPrefixes          *uint32                `protobuf:"varint,51,opt,name=max_prefixes,json=maxPrefixes" json:"max_prefixes,omitempty"`
	PreventTeardown      *bool                  `protobuf:"varint,54,opt,name=prevent_teardown,json=preventTeardown" json:"prevent_teardown,omitempty"`
	ShutdownThresholdPct *uint32                `protobuf:"varint,52,opt,name=shutdown_threshold_pct,json=shutdownThresholdPct" json:"shutdown_threshold_pct,omitempty"`
	RestartTimer         *float64               `protobuf:"fixed64,53,opt,name=restart_timer,json=restartTimer" json:"restart_timer,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 5, 0, 12, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType) GetMaxPrefixes() uint32 {
	if x != nil && x.MaxPrefixes != nil {
		return *x.MaxPrefixes
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType) GetPreventTeardown() bool {
	if x != nil && x.PreventTeardown != nil {
		return *x.PreventTeardown
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType) GetShutdownThresholdPct() uint32 {
	if x != nil && x.ShutdownThresholdPct != nil {
		return *x.ShutdownThresholdPct
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType) GetRestartTimer() float64 {
	if x != nil && x.RestartTimer != nil {
		return *x.RestartTimer
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborList struct {
	state            protoimpl.MessageState                                                                                                 `protogen:"open.v1"`
	NeighborAddress  *string                                                                                                                `protobuf:"bytes,51,opt,name=neighbor_address,json=neighborAddress" json:"neighbor_address,omitempty"`
	SnmpPeerIndex    *uint32                                                                                                                `protobuf:"varint,61,opt,name=snmp_peer_index,json=snmpPeerIndex" json:"snmp_peer_index,omitempty"`
	State            *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType            `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	Timers           *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTimersType           `protobuf:"bytes,152,opt,name=timers" json:"timers,omitempty"`
	Transport        *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTransportType        `protobuf:"bytes,153,opt,name=transport" json:"transport,omitempty"`
	ErrorHandling    *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListErrorHandlingType    `protobuf:"bytes,154,opt,name=error_handling,json=errorHandling" json:"error_handling,omitempty"`
	LoggingOptions   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListLoggingOptionsType   `protobuf:"bytes,155,opt,name=logging_options,json=loggingOptions" json:"logging_options,omitempty"`
	EbgpMultihop     *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListEbgpMultihopType     `protobuf:"bytes,156,opt,name=ebgp_multihop,json=ebgpMultihop" json:"ebgp_multihop,omitempty"`
	RouteReflector   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListRouteReflectorType   `protobuf:"bytes,157,opt,name=route_reflector,json=routeReflector" json:"route_reflector,omitempty"`
	AsPathOptions    *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAsPathOptionsType    `protobuf:"bytes,158,opt,name=as_path_options,json=asPathOptions" json:"as_path_options,omitempty"`
	UseMultiplePaths *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsType `protobuf:"bytes,159,opt,name=use_multiple_paths,json=useMultiplePaths" json:"use_multiple_paths,omitempty"`
	AfiSafis         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisType         `protobuf:"bytes,160,opt,name=afi_safis,json=afiSafis" json:"afi_safis,omitempty"`
	GracefulRestart  *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListGracefulRestartType  `protobuf:"bytes,161,opt,name=graceful_restart,json=gracefulRestart" json:"graceful_restart,omitempty"`
	ApplyPolicy      *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListApplyPolicyType      `protobuf:"bytes,171,opt,name=apply_policy,json=applyPolicy" json:"apply_policy,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborList) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborList{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborList) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborList) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborList) GetNeighborAddress() string {
	if x != nil && x.NeighborAddress != nil {
		return *x.NeighborAddress
	}
	return ""
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborList) GetSnmpPeerIndex() uint32 {
	if x != nil && x.SnmpPeerIndex != nil {
		return *x.SnmpPeerIndex
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborList) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborList) GetTimers() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTimersType {
	if x != nil {
		return x.Timers
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborList) GetTransport() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTransportType {
	if x != nil {
		return x.Transport
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborList) GetErrorHandling() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListErrorHandlingType {
	if x != nil {
		return x.ErrorHandling
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborList) GetLoggingOptions() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListLoggingOptionsType {
	if x != nil {
		return x.LoggingOptions
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborList) GetEbgpMultihop() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListEbgpMultihopType {
	if x != nil {
		return x.EbgpMultihop
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborList) GetRouteReflector() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListRouteReflectorType {
	if x != nil {
		return x.RouteReflector
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborList) GetAsPathOptions() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAsPathOptionsType {
	if x != nil {
		return x.AsPathOptions
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborList) GetUseMultiplePaths() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsType {
	if x != nil {
		return x.UseMultiplePaths
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborList) GetAfiSafis() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisType {
	if x != nil {
		return x.AfiSafis
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborList) GetGracefulRestart() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListGracefulRestartType {
	if x != nil {
		return x.GracefulRestart
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborList) GetApplyPolicy() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListApplyPolicyType {
	if x != nil {
		return x.ApplyPolicy
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType struct {
	state                  protoimpl.MessageState                                                                                                  `protogen:"open.v1"`
	PeerAs                 *uint32                                                                                                                 `protobuf:"varint,51,opt,name=peer_as,json=peerAs" json:"peer_as,omitempty"`
	LocalAs                *uint32                                                                                                                 `protobuf:"varint,52,opt,name=local_as,json=localAs" json:"local_as,omitempty"`
	PeerType               *string                                                                                                                 `protobuf:"bytes,53,opt,name=peer_type,json=peerType" json:"peer_type,omitempty"`
	AuthPassword           *string                                                                                                                 `protobuf:"bytes,54,opt,name=auth_password,json=authPassword" json:"auth_password,omitempty"`
	RemovePrivateAs        *string                                                                                                                 `protobuf:"bytes,55,opt,name=remove_private_as,json=removePrivateAs" json:"remove_private_as,omitempty"`
	RouteFlapDamping       *bool                                                                                                                   `protobuf:"varint,56,opt,name=route_flap_damping,json=routeFlapDamping" json:"route_flap_damping,omitempty"`
	Description            *string                                                                                                                 `protobuf:"bytes,57,opt,name=description" json:"description,omitempty"`
	SessionState           *string                                                                                                                 `protobuf:"bytes,61,opt,name=session_state,json=sessionState" json:"session_state,omitempty"`
	LastEstablished        *uint64                                                                                                                 `protobuf:"varint,62,opt,name=last_established,json=lastEstablished" json:"last_established,omitempty"`
	EstablishedTransitions *uint64                                                                                                                 `protobuf:"varint,63,opt,name=established_transitions,json=establishedTransitions" json:"established_transitions,omitempty"`
	SupportedCapabilities  []string                                                                                                                `protobuf:"bytes,64,rep,name=supported_capabilities,json=supportedCapabilities" json:"supported_capabilities,omitempty"`
	Messages               *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesType `protobuf:"bytes,151,opt,name=messages" json:"messages,omitempty"`
	Queues                 *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeQueuesType   `protobuf:"bytes,152,opt,name=queues" json:"queues,omitempty"`
	DynamicallyConfigured  *bool                                                                                                                   `protobuf:"varint,77,opt,name=dynamically_configured,json=dynamicallyConfigured" json:"dynamically_configured,omitempty"`
	SessionStatus          *string                                                                                                                 `protobuf:"bytes,71,opt,name=session_status,json=sessionStatus" json:"session_status,omitempty"`
	SessionAdminStatus     *string                                                                                                                 `protobuf:"bytes,72,opt,name=session_admin_status,json=sessionAdminStatus" json:"session_admin_status,omitempty"`
	InterfaceError         *bool                                                                                                                   `protobuf:"varint,74,opt,name=interface_error,json=interfaceError" json:"interface_error,omitempty"`
	ImportEvalPending      *bool                                                                                                                   `protobuf:"varint,75,opt,name=import_eval_pending,json=importEvalPending" json:"import_eval_pending,omitempty"`
	ImportEval             *bool                                                                                                                   `protobuf:"varint,76,opt,name=import_eval,json=importEval" json:"import_eval,omitempty"`
	PeerGroup              *string                                                                                                                 `protobuf:"bytes,81,opt,name=peer_group,json=peerGroup" json:"peer_group,omitempty"`
	NeighborAddress        *string                                                                                                                 `protobuf:"bytes,82,opt,name=neighbor_address,json=neighborAddress" json:"neighbor_address,omitempty"`
	Enabled                *bool                                                                                                                   `protobuf:"varint,83,opt,name=enabled" json:"enabled,omitempty"`
	SnmpPeerIndex          *uint32                                                                                                                 `protobuf:"varint,84,opt,name=snmp_peer_index,json=snmpPeerIndex" json:"snmp_peer_index,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType) GetPeerAs() uint32 {
	if x != nil && x.PeerAs != nil {
		return *x.PeerAs
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType) GetLocalAs() uint32 {
	if x != nil && x.LocalAs != nil {
		return *x.LocalAs
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType) GetPeerType() string {
	if x != nil && x.PeerType != nil {
		return *x.PeerType
	}
	return ""
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType) GetAuthPassword() string {
	if x != nil && x.AuthPassword != nil {
		return *x.AuthPassword
	}
	return ""
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType) GetRemovePrivateAs() string {
	if x != nil && x.RemovePrivateAs != nil {
		return *x.RemovePrivateAs
	}
	return ""
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType) GetRouteFlapDamping() bool {
	if x != nil && x.RouteFlapDamping != nil {
		return *x.RouteFlapDamping
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType) GetSessionState() string {
	if x != nil && x.SessionState != nil {
		return *x.SessionState
	}
	return ""
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType) GetLastEstablished() uint64 {
	if x != nil && x.LastEstablished != nil {
		return *x.LastEstablished
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType) GetEstablishedTransitions() uint64 {
	if x != nil && x.EstablishedTransitions != nil {
		return *x.EstablishedTransitions
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType) GetSupportedCapabilities() []string {
	if x != nil {
		return x.SupportedCapabilities
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType) GetMessages() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesType {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType) GetQueues() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeQueuesType {
	if x != nil {
		return x.Queues
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType) GetDynamicallyConfigured() bool {
	if x != nil && x.DynamicallyConfigured != nil {
		return *x.DynamicallyConfigured
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType) GetSessionStatus() string {
	if x != nil && x.SessionStatus != nil {
		return *x.SessionStatus
	}
	return ""
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType) GetSessionAdminStatus() string {
	if x != nil && x.SessionAdminStatus != nil {
		return *x.SessionAdminStatus
	}
	return ""
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType) GetInterfaceError() bool {
	if x != nil && x.InterfaceError != nil {
		return *x.InterfaceError
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType) GetImportEvalPending() bool {
	if x != nil && x.ImportEvalPending != nil {
		return *x.ImportEvalPending
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType) GetImportEval() bool {
	if x != nil && x.ImportEval != nil {
		return *x.ImportEval
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType) GetPeerGroup() string {
	if x != nil && x.PeerGroup != nil {
		return *x.PeerGroup
	}
	return ""
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType) GetNeighborAddress() string {
	if x != nil && x.NeighborAddress != nil {
		return *x.NeighborAddress
	}
	return ""
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType) GetSnmpPeerIndex() uint32 {
	if x != nil && x.SnmpPeerIndex != nil {
		return *x.SnmpPeerIndex
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTimersType struct {
	state         protoimpl.MessageState                                                                                                `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTimersTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTimersType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTimersType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTimersType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTimersType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTimersType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTimersType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTimersType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 1}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTimersType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTimersTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTransportType struct {
	state         protoimpl.MessageState                                                                                                   `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTransportTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTransportType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTransportType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTransportType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTransportType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTransportType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTransportType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTransportType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 2}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTransportType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTransportTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListErrorHandlingType struct {
	state         protoimpl.MessageState                                                                                                       `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListErrorHandlingTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListErrorHandlingType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListErrorHandlingType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListErrorHandlingType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListErrorHandlingType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListErrorHandlingType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListErrorHandlingType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListErrorHandlingType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 3}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListErrorHandlingType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListErrorHandlingTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListLoggingOptionsType struct {
	state         protoimpl.MessageState                                                                                                        `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListLoggingOptionsTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListLoggingOptionsType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListLoggingOptionsType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListLoggingOptionsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListLoggingOptionsType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListLoggingOptionsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListLoggingOptionsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListLoggingOptionsType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 4}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListLoggingOptionsType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListLoggingOptionsTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListEbgpMultihopType struct {
	state         protoimpl.MessageState                                                                                                      `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListEbgpMultihopTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListEbgpMultihopType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListEbgpMultihopType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListEbgpMultihopType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListEbgpMultihopType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListEbgpMultihopType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListEbgpMultihopType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListEbgpMultihopType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 5}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListEbgpMultihopType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListEbgpMultihopTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListRouteReflectorType struct {
	state         protoimpl.MessageState                                                                                                        `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListRouteReflectorTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListRouteReflectorType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListRouteReflectorType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListRouteReflectorType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListRouteReflectorType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListRouteReflectorType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListRouteReflectorType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListRouteReflectorType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 6}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListRouteReflectorType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListRouteReflectorTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAsPathOptionsType struct {
	state         protoimpl.MessageState                                                                                                       `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAsPathOptionsTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAsPathOptionsType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAsPathOptionsType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAsPathOptionsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAsPathOptionsType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAsPathOptionsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAsPathOptionsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAsPathOptionsType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 7}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAsPathOptionsType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAsPathOptionsTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsType struct {
	state         protoimpl.MessageState                                                                                                          `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	Ebgp          *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeEbgpType  `protobuf:"bytes,152,opt,name=ebgp" json:"ebgp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 8}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsType) GetEbgp() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeEbgpType {
	if x != nil {
		return x.Ebgp
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisType struct {
	state         protoimpl.MessageState                                                                                                      `protogen:"open.v1"`
	AfiSafi       []*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiList `protobuf:"bytes,51,rep,name=afi_safi,json=afiSafi" json:"afi_safi,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisType) GetAfiSafi() []*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiList {
	if x != nil {
		return x.AfiSafi
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListGracefulRestartType struct {
	state         protoimpl.MessageState                                                                                                         `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListGracefulRestartTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListGracefulRestartType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListGracefulRestartType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListGracefulRestartType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListGracefulRestartType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListGracefulRestartType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListGracefulRestartType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListGracefulRestartType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 10}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListGracefulRestartType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListGracefulRestartTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListApplyPolicyType struct {
	state         protoimpl.MessageState                                                                                                     `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListApplyPolicyTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListApplyPolicyType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListApplyPolicyType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListApplyPolicyType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListApplyPolicyType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListApplyPolicyType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListApplyPolicyType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListApplyPolicyType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 11}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListApplyPolicyType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListApplyPolicyTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesType struct {
	state         protoimpl.MessageState                                                                                                              `protogen:"open.v1"`
	Sent          *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesTypeSentType     `protobuf:"bytes,151,opt,name=sent" json:"sent,omitempty"`
	Received      *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesTypeReceivedType `protobuf:"bytes,152,opt,name=received" json:"received,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesType) GetSent() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesTypeSentType {
	if x != nil {
		return x.Sent
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesType) GetReceived() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesTypeReceivedType {
	if x != nil {
		return x.Received
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeQueuesType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Input         *uint32                `protobuf:"varint,69,opt,name=input" json:"input,omitempty"`
	Output        *uint32                `protobuf:"varint,70,opt,name=output" json:"output,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeQueuesType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeQueuesType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeQueuesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeQueuesType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeQueuesType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeQueuesType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeQueuesType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 0, 1}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeQueuesType) GetInput() uint32 {
	if x != nil && x.Input != nil {
		return *x.Input
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeQueuesType) GetOutput() uint32 {
	if x != nil && x.Output != nil {
		return *x.Output
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesTypeSentType struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	UPDATE                       *uint64                `protobuf:"varint,65,opt,name=UPDATE" json:"UPDATE,omitempty"`
	NOTIFICATION                 *uint64                `protobuf:"varint,66,opt,name=NOTIFICATION" json:"NOTIFICATION,omitempty"`
	LastNotificationTime         *uint64                `protobuf:"varint,71,opt,name=last_notification_time,json=lastNotificationTime" json:"last_notification_time,omitempty"`
	LastNotificationErrorCode    *string                `protobuf:"bytes,72,opt,name=last_notification_error_code,json=lastNotificationErrorCode" json:"last_notification_error_code,omitempty"`
	LastNotificationErrorSubcode *string                `protobuf:"bytes,73,opt,name=last_notification_error_subcode,json=lastNotificationErrorSubcode" json:"last_notification_error_subcode,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesTypeSentType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesTypeSentType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesTypeSentType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesTypeSentType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesTypeSentType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesTypeSentType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesTypeSentType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 0, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesTypeSentType) GetUPDATE() uint64 {
	if x != nil && x.UPDATE != nil {
		return *x.UPDATE
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesTypeSentType) GetNOTIFICATION() uint64 {
	if x != nil && x.NOTIFICATION != nil {
		return *x.NOTIFICATION
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesTypeSentType) GetLastNotificationTime() uint64 {
	if x != nil && x.LastNotificationTime != nil {
		return *x.LastNotificationTime
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesTypeSentType) GetLastNotificationErrorCode() string {
	if x != nil && x.LastNotificationErrorCode != nil {
		return *x.LastNotificationErrorCode
	}
	return ""
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesTypeSentType) GetLastNotificationErrorSubcode() string {
	if x != nil && x.LastNotificationErrorSubcode != nil {
		return *x.LastNotificationErrorSubcode
	}
	return ""
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesTypeReceivedType struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	UPDATE                       *uint64                `protobuf:"varint,67,opt,name=UPDATE" json:"UPDATE,omitempty"`
	NOTIFICATION                 *uint64                `protobuf:"varint,68,opt,name=NOTIFICATION" json:"NOTIFICATION,omitempty"`
	LastNotificationTime         *uint64                `protobuf:"varint,74,opt,name=last_notification_time,json=lastNotificationTime" json:"last_notification_time,omitempty"`
	LastNotificationErrorCode    *string                `protobuf:"bytes,75,opt,name=last_notification_error_code,json=lastNotificationErrorCode" json:"last_notification_error_code,omitempty"`
	LastNotificationErrorSubcode *string                `protobuf:"bytes,76,opt,name=last_notification_error_subcode,json=lastNotificationErrorSubcode" json:"last_notification_error_subcode,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesTypeReceivedType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesTypeReceivedType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesTypeReceivedType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesTypeReceivedType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesTypeReceivedType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesTypeReceivedType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesTypeReceivedType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 0, 0, 1}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesTypeReceivedType) GetUPDATE() uint64 {
	if x != nil && x.UPDATE != nil {
		return *x.UPDATE
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesTypeReceivedType) GetNOTIFICATION() uint64 {
	if x != nil && x.NOTIFICATION != nil {
		return *x.NOTIFICATION
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesTypeReceivedType) GetLastNotificationTime() uint64 {
	if x != nil && x.LastNotificationTime != nil {
		return *x.LastNotificationTime
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesTypeReceivedType) GetLastNotificationErrorCode() string {
	if x != nil && x.LastNotificationErrorCode != nil {
		return *x.LastNotificationErrorCode
	}
	return ""
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesTypeReceivedType) GetLastNotificationErrorSubcode() string {
	if x != nil && x.LastNotificationErrorSubcode != nil {
		return *x.LastNotificationErrorSubcode
	}
	return ""
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTimersTypeStateType struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	ConnectRetry                 *float64               `protobuf:"fixed64,51,opt,name=connect_retry,json=connectRetry" json:"connect_retry,omitempty"`
	HoldTime                     *float64               `protobuf:"fixed64,52,opt,name=hold_time,json=holdTime" json:"hold_time,omitempty"`
	KeepaliveInterval            *float64               `protobuf:"fixed64,53,opt,name=keepalive_interval,json=keepaliveInterval" json:"keepalive_interval,omitempty"`
	MinimumAdvertisementInterval *float64               `protobuf:"fixed64,54,opt,name=minimum_advertisement_interval,json=minimumAdvertisementInterval" json:"minimum_advertisement_interval,omitempty"`
	NegotiatedHoldTime           *float64               `protobuf:"fixed64,61,opt,name=negotiated_hold_time,json=negotiatedHoldTime" json:"negotiated_hold_time,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTimersTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTimersTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTimersTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTimersTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTimersTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTimersTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTimersTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 1, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTimersTypeStateType) GetConnectRetry() float64 {
	if x != nil && x.ConnectRetry != nil {
		return *x.ConnectRetry
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTimersTypeStateType) GetHoldTime() float64 {
	if x != nil && x.HoldTime != nil {
		return *x.HoldTime
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTimersTypeStateType) GetKeepaliveInterval() float64 {
	if x != nil && x.KeepaliveInterval != nil {
		return *x.KeepaliveInterval
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTimersTypeStateType) GetMinimumAdvertisementInterval() float64 {
	if x != nil && x.MinimumAdvertisementInterval != nil {
		return *x.MinimumAdvertisementInterval
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTimersTypeStateType) GetNegotiatedHoldTime() float64 {
	if x != nil && x.NegotiatedHoldTime != nil {
		return *x.NegotiatedHoldTime
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTransportTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TcpMss        *uint32                `protobuf:"varint,51,opt,name=tcp_mss,json=tcpMss" json:"tcp_mss,omitempty"`
	MtuDiscovery  *bool                  `protobuf:"varint,52,opt,name=mtu_discovery,json=mtuDiscovery" json:"mtu_discovery,omitempty"`
	PassiveMode   *bool                  `protobuf:"varint,53,opt,name=passive_mode,json=passiveMode" json:"passive_mode,omitempty"`
	LocalAddress  *string                `protobuf:"bytes,54,opt,name=local_address,json=localAddress" json:"local_address,omitempty"`
	LocalPort     *uint32                `protobuf:"varint,61,opt,name=local_port,json=localPort" json:"local_port,omitempty"`
	RemoteAddress *string                `protobuf:"bytes,62,opt,name=remote_address,json=remoteAddress" json:"remote_address,omitempty"`
	RemotePort    *uint32                `protobuf:"varint,63,opt,name=remote_port,json=remotePort" json:"remote_port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTransportTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTransportTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTransportTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTransportTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTransportTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTransportTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTransportTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 2, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTransportTypeStateType) GetTcpMss() uint32 {
	if x != nil && x.TcpMss != nil {
		return *x.TcpMss
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTransportTypeStateType) GetMtuDiscovery() bool {
	if x != nil && x.MtuDiscovery != nil {
		return *x.MtuDiscovery
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTransportTypeStateType) GetPassiveMode() bool {
	if x != nil && x.PassiveMode != nil {
		return *x.PassiveMode
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTransportTypeStateType) GetLocalAddress() string {
	if x != nil && x.LocalAddress != nil {
		return *x.LocalAddress
	}
	return ""
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTransportTypeStateType) GetLocalPort() uint32 {
	if x != nil && x.LocalPort != nil {
		return *x.LocalPort
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTransportTypeStateType) GetRemoteAddress() string {
	if x != nil && x.RemoteAddress != nil {
		return *x.RemoteAddress
	}
	return ""
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTransportTypeStateType) GetRemotePort() uint32 {
	if x != nil && x.RemotePort != nil {
		return *x.RemotePort
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListErrorHandlingTypeStateType struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	TreatAsWithdraw         *bool                  `protobuf:"varint,51,opt,name=treat_as_withdraw,json=treatAsWithdraw" json:"treat_as_withdraw,omitempty"`
	ErroneousUpdateMessages *uint32                `protobuf:"varint,61,opt,name=erroneous_update_messages,json=erroneousUpdateMessages" json:"erroneous_update_messages,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListErrorHandlingTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListErrorHandlingTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListErrorHandlingTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListErrorHandlingTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListErrorHandlingTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListErrorHandlingTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListErrorHandlingTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 3, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListErrorHandlingTypeStateType) GetTreatAsWithdraw() bool {
	if x != nil && x.TreatAsWithdraw != nil {
		return *x.TreatAsWithdraw
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListErrorHandlingTypeStateType) GetErroneousUpdateMessages() uint32 {
	if x != nil && x.ErroneousUpdateMessages != nil {
		return *x.ErroneousUpdateMessages
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListLoggingOptionsTypeStateType struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	LogNeighborStateChanges *bool                  `protobuf:"varint,51,opt,name=log_neighbor_state_changes,json=logNeighborStateChanges" json:"log_neighbor_state_changes,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListLoggingOptionsTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListLoggingOptionsTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListLoggingOptionsTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListLoggingOptionsTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListLoggingOptionsTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListLoggingOptionsTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListLoggingOptionsTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 4, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListLoggingOptionsTypeStateType) GetLogNeighborStateChanges() bool {
	if x != nil && x.LogNeighborStateChanges != nil {
		return *x.LogNeighborStateChanges
	}
	return false
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListEbgpMultihopTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       *bool                  `protobuf:"varint,51,opt,name=enabled" json:"enabled,omitempty"`
	MultihopTtl   *uint32                `protobuf:"varint,52,opt,name=multihop_ttl,json=multihopTtl" json:"multihop_ttl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListEbgpMultihopTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListEbgpMultihopTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListEbgpMultihopTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListEbgpMultihopTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListEbgpMultihopTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListEbgpMultihopTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListEbgpMultihopTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 5, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListEbgpMultihopTypeStateType) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListEbgpMultihopTypeStateType) GetMultihopTtl() uint32 {
	if x != nil && x.MultihopTtl != nil {
		return *x.MultihopTtl
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListRouteReflectorTypeStateType struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	RouteReflectorClusterId *string                `protobuf:"bytes,51,opt,name=route_reflector_cluster_id,json=routeReflectorClusterId" json:"route_reflector_cluster_id,omitempty"`
	RouteReflectorClient    *bool                  `protobuf:"varint,52,opt,name=route_reflector_client,json=routeReflectorClient" json:"route_reflector_client,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListRouteReflectorTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListRouteReflectorTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListRouteReflectorTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListRouteReflectorTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListRouteReflectorTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListRouteReflectorTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListRouteReflectorTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 6, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListRouteReflectorTypeStateType) GetRouteReflectorClusterId() string {
	if x != nil && x.RouteReflectorClusterId != nil {
		return *x.RouteReflectorClusterId
	}
	return ""
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListRouteReflectorTypeStateType) GetRouteReflectorClient() bool {
	if x != nil && x.RouteReflectorClient != nil {
		return *x.RouteReflectorClient
	}
	return false
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAsPathOptionsTypeStateType struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	AllowOwnAs          *uint32                `protobuf:"varint,51,opt,name=allow_own_as,json=allowOwnAs" json:"allow_own_as,omitempty"`
	ReplacePeerAs       *bool                  `protobuf:"varint,52,opt,name=replace_peer_as,json=replacePeerAs" json:"replace_peer_as,omitempty"`
	DisablePeerAsFilter *bool                  `protobuf:"varint,53,opt,name=disable_peer_as_filter,json=disablePeerAsFilter" json:"disable_peer_as_filter,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAsPathOptionsTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAsPathOptionsTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAsPathOptionsTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAsPathOptionsTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAsPathOptionsTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAsPathOptionsTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAsPathOptionsTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 7, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAsPathOptionsTypeStateType) GetAllowOwnAs() uint32 {
	if x != nil && x.AllowOwnAs != nil {
		return *x.AllowOwnAs
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAsPathOptionsTypeStateType) GetReplacePeerAs() bool {
	if x != nil && x.ReplacePeerAs != nil {
		return *x.ReplacePeerAs
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAsPathOptionsTypeStateType) GetDisablePeerAsFilter() bool {
	if x != nil && x.DisablePeerAsFilter != nil {
		return *x.DisablePeerAsFilter
	}
	return false
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       *bool                  `protobuf:"varint,51,opt,name=enabled" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 8, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeStateType) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeEbgpType struct {
	state         protoimpl.MessageState                                                                                                                  `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeEbgpTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeEbgpType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeEbgpType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeEbgpType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeEbgpType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeEbgpType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeEbgpType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeEbgpType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 8, 1}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeEbgpType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeEbgpTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeEbgpTypeStateType struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AllowMultipleAs *bool                  `protobuf:"varint,51,opt,name=allow_multiple_as,json=allowMultipleAs" json:"allow_multiple_as,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeEbgpTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeEbgpTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeEbgpTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeEbgpTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeEbgpTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeEbgpTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeEbgpTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 8, 1, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeEbgpTypeStateType) GetAllowMultipleAs() bool {
	if x != nil && x.AllowMultipleAs != nil {
		return *x.AllowMultipleAs
	}
	return false
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiList struct {
	state              protoimpl.MessageState                                                                                                                          `protogen:"open.v1"`
	AfiSafiName        *string                                                                                                                                         `protobuf:"bytes,51,opt,name=afi_safi_name,json=afiSafiName" json:"afi_safi_name,omitempty"`
	GracefulRestart    *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListGracefulRestartType    `protobuf:"bytes,151,opt,name=graceful_restart,json=gracefulRestart" json:"graceful_restart,omitempty"`
	State              *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateType              `protobuf:"bytes,152,opt,name=state" json:"state,omitempty"`
	AddPaths           *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListAddPathsType           `protobuf:"bytes,153,opt,name=add_paths,json=addPaths" json:"add_paths,omitempty"`
	Ipv4Unicast        *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastType        `protobuf:"bytes,154,opt,name=ipv4_unicast,json=ipv4Unicast" json:"ipv4_unicast,omitempty"`
	Ipv6Unicast        *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastType        `protobuf:"bytes,155,opt,name=ipv6_unicast,json=ipv6Unicast" json:"ipv6_unicast,omitempty"`
	Ipv4LabeledUnicast *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastType `protobuf:"bytes,156,opt,name=ipv4_labeled_unicast,json=ipv4LabeledUnicast" json:"ipv4_labeled_unicast,omitempty"`
	Ipv6LabeledUnicast *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastType `protobuf:"bytes,157,opt,name=ipv6_labeled_unicast,json=ipv6LabeledUnicast" json:"ipv6_labeled_unicast,omitempty"`
	L3VpnIpv4Unicast   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType   `protobuf:"bytes,158,opt,name=l3vpn_ipv4_unicast,json=l3vpnIpv4Unicast" json:"l3vpn_ipv4_unicast,omitempty"`
	L3VpnIpv6Unicast   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType   `protobuf:"bytes,159,opt,name=l3vpn_ipv6_unicast,json=l3vpnIpv6Unicast" json:"l3vpn_ipv6_unicast,omitempty"`
	L3VpnIpv4Multicast *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType `protobuf:"bytes,160,opt,name=l3vpn_ipv4_multicast,json=l3vpnIpv4Multicast" json:"l3vpn_ipv4_multicast,omitempty"`
	L3VpnIpv6Multicast *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType `protobuf:"bytes,161,opt,name=l3vpn_ipv6_multicast,json=l3vpnIpv6Multicast" json:"l3vpn_ipv6_multicast,omitempty"`
	L2VpnVpls          *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsType          `protobuf:"bytes,162,opt,name=l2vpn_vpls,json=l2vpnVpls" json:"l2vpn_vpls,omitempty"`
	L2VpnEvpn          *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnType          `protobuf:"bytes,163,opt,name=l2vpn_evpn,json=l2vpnEvpn" json:"l2vpn_evpn,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiList) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiList{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiList) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiList) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiList) GetAfiSafiName() string {
	if x != nil && x.AfiSafiName != nil {
		return *x.AfiSafiName
	}
	return ""
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiList) GetGracefulRestart() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListGracefulRestartType {
	if x != nil {
		return x.GracefulRestart
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiList) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiList) GetAddPaths() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListAddPathsType {
	if x != nil {
		return x.AddPaths
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiList) GetIpv4Unicast() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastType {
	if x != nil {
		return x.Ipv4Unicast
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiList) GetIpv6Unicast() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastType {
	if x != nil {
		return x.Ipv6Unicast
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiList) GetIpv4LabeledUnicast() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastType {
	if x != nil {
		return x.Ipv4LabeledUnicast
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiList) GetIpv6LabeledUnicast() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastType {
	if x != nil {
		return x.Ipv6LabeledUnicast
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiList) GetL3VpnIpv4Unicast() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType {
	if x != nil {
		return x.L3VpnIpv4Unicast
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiList) GetL3VpnIpv6Unicast() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType {
	if x != nil {
		return x.L3VpnIpv6Unicast
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiList) GetL3VpnIpv4Multicast() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType {
	if x != nil {
		return x.L3VpnIpv4Multicast
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiList) GetL3VpnIpv6Multicast() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType {
	if x != nil {
		return x.L3VpnIpv6Multicast
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiList) GetL2VpnVpls() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsType {
	if x != nil {
		return x.L2VpnVpls
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiList) GetL2VpnEvpn() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnType {
	if x != nil {
		return x.L2VpnEvpn
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListGracefulRestartType struct {
	state         protoimpl.MessageState                                                                                                                                `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListGracefulRestartTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListGracefulRestartType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListGracefulRestartType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListGracefulRestartType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListGracefulRestartType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListGracefulRestartType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListGracefulRestartType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListGracefulRestartType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListGracefulRestartType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListGracefulRestartTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateType struct {
	state               protoimpl.MessageState                                                                                                                         `protogen:"open.v1"`
	AfiSafiName         *string                                                                                                                                        `protobuf:"bytes,51,opt,name=afi_safi_name,json=afiSafiName" json:"afi_safi_name,omitempty"`
	Enabled             *bool                                                                                                                                          `protobuf:"varint,52,opt,name=enabled" json:"enabled,omitempty"`
	Active              *bool                                                                                                                                          `protobuf:"varint,61,opt,name=active" json:"active,omitempty"`
	Prefixes            *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateTypePrefixesType `protobuf:"bytes,151,opt,name=prefixes" json:"prefixes,omitempty"`
	PrefixLimitExceeded *bool                                                                                                                                          `protobuf:"varint,72,opt,name=prefix_limit_exceeded,json=prefixLimitExceeded" json:"prefix_limit_exceeded,omitempty"`
	Queues              *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateTypeQueuesType   `protobuf:"bytes,152,opt,name=queues" json:"queues,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 1}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateType) GetAfiSafiName() string {
	if x != nil && x.AfiSafiName != nil {
		return *x.AfiSafiName
	}
	return ""
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateType) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateType) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateType) GetPrefixes() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateTypePrefixesType {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateType) GetPrefixLimitExceeded() bool {
	if x != nil && x.PrefixLimitExceeded != nil {
		return *x.PrefixLimitExceeded
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateType) GetQueues() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateTypeQueuesType {
	if x != nil {
		return x.Queues
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListAddPathsType struct {
	state         protoimpl.MessageState                                                                                                                         `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListAddPathsTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListAddPathsType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListAddPathsType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListAddPathsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListAddPathsType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListAddPathsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListAddPathsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListAddPathsType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 2}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListAddPathsType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListAddPathsTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastType struct {
	state         protoimpl.MessageState                                                                                                                                  `protogen:"open.v1"`
	PrefixLimit   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType `protobuf:"bytes,151,opt,name=prefix_limit,json=prefixLimit" json:"prefix_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 3}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastType) GetPrefixLimit() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastType struct {
	state         protoimpl.MessageState                                                                                                                                  `protogen:"open.v1"`
	PrefixLimit   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType `protobuf:"bytes,151,opt,name=prefix_limit,json=prefixLimit" json:"prefix_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 4}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastType) GetPrefixLimit() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastType struct {
	state         protoimpl.MessageState                                                                                                                                         `protogen:"open.v1"`
	PrefixLimit   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType `protobuf:"bytes,151,opt,name=prefix_limit,json=prefixLimit" json:"prefix_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 5}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastType) GetPrefixLimit() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastType struct {
	state         protoimpl.MessageState                                                                                                                                         `protogen:"open.v1"`
	PrefixLimit   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType `protobuf:"bytes,151,opt,name=prefix_limit,json=prefixLimit" json:"prefix_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 6}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastType) GetPrefixLimit() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType struct {
	state         protoimpl.MessageState                                                                                                                                       `protogen:"open.v1"`
	PrefixLimit   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType `protobuf:"bytes,151,opt,name=prefix_limit,json=prefixLimit" json:"prefix_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 7}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType) GetPrefixLimit() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType struct {
	state         protoimpl.MessageState                                                                                                                                       `protogen:"open.v1"`
	PrefixLimit   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType `protobuf:"bytes,151,opt,name=prefix_limit,json=prefixLimit" json:"prefix_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 8}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType) GetPrefixLimit() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType struct {
	state         protoimpl.MessageState                                                                                                                                         `protogen:"open.v1"`
	PrefixLimit   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType `protobuf:"bytes,151,opt,name=prefix_limit,json=prefixLimit" json:"prefix_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 9}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType) GetPrefixLimit() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType struct {
	state         protoimpl.MessageState                                                                                                                                         `protogen:"open.v1"`
	PrefixLimit   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType `protobuf:"bytes,151,opt,name=prefix_limit,json=prefixLimit" json:"prefix_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 10}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType) GetPrefixLimit() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsType struct {
	state         protoimpl.MessageState                                                                                                                                `protogen:"open.v1"`
	PrefixLimit   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType `protobuf:"bytes,151,opt,name=prefix_limit,json=prefixLimit" json:"prefix_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 11}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsType) GetPrefixLimit() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnType struct {
	state         protoimpl.MessageState                                                                                                                                `protogen:"open.v1"`
	PrefixLimit   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType `protobuf:"bytes,151,opt,name=prefix_limit,json=prefixLimit" json:"prefix_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 12}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnType) GetPrefixLimit() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListGracefulRestartTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       *bool                  `protobuf:"varint,51,opt,name=enabled" json:"enabled,omitempty"`
	Received      *bool                  `protobuf:"varint,61,opt,name=received" json:"received,omitempty"`
	Advertised    *bool                  `protobuf:"varint,62,opt,name=advertised" json:"advertised,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListGracefulRestartTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListGracefulRestartTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListGracefulRestartTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListGracefulRestartTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListGracefulRestartTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListGracefulRestartTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListGracefulRestartTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListGracefulRestartTypeStateType) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListGracefulRestartTypeStateType) GetReceived() bool {
	if x != nil && x.Received != nil {
		return *x.Received
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListGracefulRestartTypeStateType) GetAdvertised() bool {
	if x != nil && x.Advertised != nil {
		return *x.Advertised
	}
	return false
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateTypePrefixesType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Received      *uint32                `protobuf:"varint,63,opt,name=received" json:"received,omitempty"`
	Sent          *uint32                `protobuf:"varint,64,opt,name=sent" json:"sent,omitempty"`
	Installed     *uint32                `protobuf:"varint,65,opt,name=installed" json:"installed,omitempty"`
	Accepted      *uint32                `protobuf:"varint,62,opt,name=accepted" json:"accepted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateTypePrefixesType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateTypePrefixesType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateTypePrefixesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateTypePrefixesType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateTypePrefixesType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateTypePrefixesType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateTypePrefixesType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 1, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateTypePrefixesType) GetReceived() uint32 {
	if x != nil && x.Received != nil {
		return *x.Received
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateTypePrefixesType) GetSent() uint32 {
	if x != nil && x.Sent != nil {
		return *x.Sent
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateTypePrefixesType) GetInstalled() uint32 {
	if x != nil && x.Installed != nil {
		return *x.Installed
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateTypePrefixesType) GetAccepted() uint32 {
	if x != nil && x.Accepted != nil {
		return *x.Accepted
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateTypeQueuesType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Input         *uint32                `protobuf:"varint,73,opt,name=input" json:"input,omitempty"`
	Output        *uint32                `protobuf:"varint,74,opt,name=output" json:"output,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateTypeQueuesType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateTypeQueuesType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateTypeQueuesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateTypeQueuesType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateTypeQueuesType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateTypeQueuesType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateTypeQueuesType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 1, 1}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateTypeQueuesType) GetInput() uint32 {
	if x != nil && x.Input != nil {
		return *x.Input
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateTypeQueuesType) GetOutput() uint32 {
	if x != nil && x.Output != nil {
		return *x.Output
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListAddPathsTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Receive              *bool                  `protobuf:"varint,51,opt,name=receive" json:"receive,omitempty"`
	Send                 *bool                  `protobuf:"varint,54,opt,name=send" json:"send,omitempty"`
	SendMax              *uint32                `protobuf:"varint,52,opt,name=send_max,json=sendMax" json:"send_max,omitempty"`
	EligiblePrefixPolicy *string                `protobuf:"bytes,53,opt,name=eligible_prefix_policy,json=eligiblePrefixPolicy" json:"eligible_prefix_policy,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListAddPathsTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListAddPathsTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListAddPathsTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListAddPathsTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListAddPathsTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListAddPathsTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListAddPathsTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 2, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListAddPathsTypeStateType) GetReceive() bool {
	if x != nil && x.Receive != nil {
		return *x.Receive
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListAddPathsTypeStateType) GetSend() bool {
	if x != nil && x.Send != nil {
		return *x.Send
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListAddPathsTypeStateType) GetSendMax() uint32 {
	if x != nil && x.SendMax != nil {
		return *x.SendMax
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListAddPathsTypeStateType) GetEligiblePrefixPolicy() string {
	if x != nil && x.EligiblePrefixPolicy != nil {
		return *x.EligiblePrefixPolicy
	}
	return ""
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType struct {
	state         protoimpl.MessageState                                                                                                                                           `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 3, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxPrefixes          *uint32                `protobuf:"varint,51,opt,name=max_prefixes,json=maxPrefixes" json:"max_prefixes,omitempty"`
	PreventTeardown      *bool                  `protobuf:"varint,54,opt,name=prevent_teardown,json=preventTeardown" json:"prevent_teardown,omitempty"`
	ShutdownThresholdPct *uint32                `protobuf:"varint,52,opt,name=shutdown_threshold_pct,json=shutdownThresholdPct" json:"shutdown_threshold_pct,omitempty"`
	RestartTimer         *float64               `protobuf:"fixed64,53,opt,name=restart_timer,json=restartTimer" json:"restart_timer,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 3, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType) GetMaxPrefixes() uint32 {
	if x != nil && x.MaxPrefixes != nil {
		return *x.MaxPrefixes
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType) GetPreventTeardown() bool {
	if x != nil && x.PreventTeardown != nil {
		return *x.PreventTeardown
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType) GetShutdownThresholdPct() uint32 {
	if x != nil && x.ShutdownThresholdPct != nil {
		return *x.ShutdownThresholdPct
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType) GetRestartTimer() float64 {
	if x != nil && x.RestartTimer != nil {
		return *x.RestartTimer
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType struct {
	state         protoimpl.MessageState                                                                                                                                           `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 4, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxPrefixes          *uint32                `protobuf:"varint,51,opt,name=max_prefixes,json=maxPrefixes" json:"max_prefixes,omitempty"`
	PreventTeardown      *bool                  `protobuf:"varint,54,opt,name=prevent_teardown,json=preventTeardown" json:"prevent_teardown,omitempty"`
	ShutdownThresholdPct *uint32                `protobuf:"varint,52,opt,name=shutdown_threshold_pct,json=shutdownThresholdPct" json:"shutdown_threshold_pct,omitempty"`
	RestartTimer         *float64               `protobuf:"fixed64,53,opt,name=restart_timer,json=restartTimer" json:"restart_timer,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 4, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType) GetMaxPrefixes() uint32 {
	if x != nil && x.MaxPrefixes != nil {
		return *x.MaxPrefixes
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType) GetPreventTeardown() bool {
	if x != nil && x.PreventTeardown != nil {
		return *x.PreventTeardown
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType) GetShutdownThresholdPct() uint32 {
	if x != nil && x.ShutdownThresholdPct != nil {
		return *x.ShutdownThresholdPct
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType) GetRestartTimer() float64 {
	if x != nil && x.RestartTimer != nil {
		return *x.RestartTimer
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType struct {
	state         protoimpl.MessageState                                                                                                                                                  `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 5, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxPrefixes          *uint32                `protobuf:"varint,51,opt,name=max_prefixes,json=maxPrefixes" json:"max_prefixes,omitempty"`
	PreventTeardown      *bool                  `protobuf:"varint,54,opt,name=prevent_teardown,json=preventTeardown" json:"prevent_teardown,omitempty"`
	ShutdownThresholdPct *uint32                `protobuf:"varint,52,opt,name=shutdown_threshold_pct,json=shutdownThresholdPct" json:"shutdown_threshold_pct,omitempty"`
	RestartTimer         *float64               `protobuf:"fixed64,53,opt,name=restart_timer,json=restartTimer" json:"restart_timer,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 5, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType) GetMaxPrefixes() uint32 {
	if x != nil && x.MaxPrefixes != nil {
		return *x.MaxPrefixes
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType) GetPreventTeardown() bool {
	if x != nil && x.PreventTeardown != nil {
		return *x.PreventTeardown
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType) GetShutdownThresholdPct() uint32 {
	if x != nil && x.ShutdownThresholdPct != nil {
		return *x.ShutdownThresholdPct
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType) GetRestartTimer() float64 {
	if x != nil && x.RestartTimer != nil {
		return *x.RestartTimer
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType struct {
	state         protoimpl.MessageState                                                                                                                                                  `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 6, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxPrefixes          *uint32                `protobuf:"varint,51,opt,name=max_prefixes,json=maxPrefixes" json:"max_prefixes,omitempty"`
	PreventTeardown      *bool                  `protobuf:"varint,54,opt,name=prevent_teardown,json=preventTeardown" json:"prevent_teardown,omitempty"`
	ShutdownThresholdPct *uint32                `protobuf:"varint,52,opt,name=shutdown_threshold_pct,json=shutdownThresholdPct" json:"shutdown_threshold_pct,omitempty"`
	RestartTimer         *float64               `protobuf:"fixed64,53,opt,name=restart_timer,json=restartTimer" json:"restart_timer,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 6, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType) GetMaxPrefixes() uint32 {
	if x != nil && x.MaxPrefixes != nil {
		return *x.MaxPrefixes
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType) GetPreventTeardown() bool {
	if x != nil && x.PreventTeardown != nil {
		return *x.PreventTeardown
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType) GetShutdownThresholdPct() uint32 {
	if x != nil && x.ShutdownThresholdPct != nil {
		return *x.ShutdownThresholdPct
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType) GetRestartTimer() float64 {
	if x != nil && x.RestartTimer != nil {
		return *x.RestartTimer
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType struct {
	state         protoimpl.MessageState                                                                                                                                                `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 7, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxPrefixes          *uint32                `protobuf:"varint,51,opt,name=max_prefixes,json=maxPrefixes" json:"max_prefixes,omitempty"`
	PreventTeardown      *bool                  `protobuf:"varint,54,opt,name=prevent_teardown,json=preventTeardown" json:"prevent_teardown,omitempty"`
	ShutdownThresholdPct *uint32                `protobuf:"varint,52,opt,name=shutdown_threshold_pct,json=shutdownThresholdPct" json:"shutdown_threshold_pct,omitempty"`
	RestartTimer         *float64               `protobuf:"fixed64,53,opt,name=restart_timer,json=restartTimer" json:"restart_timer,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 7, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType) GetMaxPrefixes() uint32 {
	if x != nil && x.MaxPrefixes != nil {
		return *x.MaxPrefixes
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType) GetPreventTeardown() bool {
	if x != nil && x.PreventTeardown != nil {
		return *x.PreventTeardown
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType) GetShutdownThresholdPct() uint32 {
	if x != nil && x.ShutdownThresholdPct != nil {
		return *x.ShutdownThresholdPct
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType) GetRestartTimer() float64 {
	if x != nil && x.RestartTimer != nil {
		return *x.RestartTimer
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType struct {
	state         protoimpl.MessageState                                                                                                                                                `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 8, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxPrefixes          *uint32                `protobuf:"varint,51,opt,name=max_prefixes,json=maxPrefixes" json:"max_prefixes,omitempty"`
	PreventTeardown      *bool                  `protobuf:"varint,54,opt,name=prevent_teardown,json=preventTeardown" json:"prevent_teardown,omitempty"`
	ShutdownThresholdPct *uint32                `protobuf:"varint,52,opt,name=shutdown_threshold_pct,json=shutdownThresholdPct" json:"shutdown_threshold_pct,omitempty"`
	RestartTimer         *float64               `protobuf:"fixed64,53,opt,name=restart_timer,json=restartTimer" json:"restart_timer,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 8, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType) GetMaxPrefixes() uint32 {
	if x != nil && x.MaxPrefixes != nil {
		return *x.MaxPrefixes
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType) GetPreventTeardown() bool {
	if x != nil && x.PreventTeardown != nil {
		return *x.PreventTeardown
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType) GetShutdownThresholdPct() uint32 {
	if x != nil && x.ShutdownThresholdPct != nil {
		return *x.ShutdownThresholdPct
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType) GetRestartTimer() float64 {
	if x != nil && x.RestartTimer != nil {
		return *x.RestartTimer
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType struct {
	state         protoimpl.MessageState                                                                                                                                                  `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 9, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxPrefixes          *uint32                `protobuf:"varint,51,opt,name=max_prefixes,json=maxPrefixes" json:"max_prefixes,omitempty"`
	PreventTeardown      *bool                  `protobuf:"varint,54,opt,name=prevent_teardown,json=preventTeardown" json:"prevent_teardown,omitempty"`
	ShutdownThresholdPct *uint32                `protobuf:"varint,52,opt,name=shutdown_threshold_pct,json=shutdownThresholdPct" json:"shutdown_threshold_pct,omitempty"`
	RestartTimer         *float64               `protobuf:"fixed64,53,opt,name=restart_timer,json=restartTimer" json:"restart_timer,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 9, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType) GetMaxPrefixes() uint32 {
	if x != nil && x.MaxPrefixes != nil {
		return *x.MaxPrefixes
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType) GetPreventTeardown() bool {
	if x != nil && x.PreventTeardown != nil {
		return *x.PreventTeardown
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType) GetShutdownThresholdPct() uint32 {
	if x != nil && x.ShutdownThresholdPct != nil {
		return *x.ShutdownThresholdPct
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType) GetRestartTimer() float64 {
	if x != nil && x.RestartTimer != nil {
		return *x.RestartTimer
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType struct {
	state         protoimpl.MessageState                                                                                                                                                  `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 10, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxPrefixes          *uint32                `protobuf:"varint,51,opt,name=max_prefixes,json=maxPrefixes" json:"max_prefixes,omitempty"`
	PreventTeardown      *bool                  `protobuf:"varint,54,opt,name=prevent_teardown,json=preventTeardown" json:"prevent_teardown,omitempty"`
	ShutdownThresholdPct *uint32                `protobuf:"varint,52,opt,name=shutdown_threshold_pct,json=shutdownThresholdPct" json:"shutdown_threshold_pct,omitempty"`
	RestartTimer         *float64               `protobuf:"fixed64,53,opt,name=restart_timer,json=restartTimer" json:"restart_timer,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 10, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType) GetMaxPrefixes() uint32 {
	if x != nil && x.MaxPrefixes != nil {
		return *x.MaxPrefixes
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType) GetPreventTeardown() bool {
	if x != nil && x.PreventTeardown != nil {
		return *x.PreventTeardown
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType) GetShutdownThresholdPct() uint32 {
	if x != nil && x.ShutdownThresholdPct != nil {
		return *x.ShutdownThresholdPct
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType) GetRestartTimer() float64 {
	if x != nil && x.RestartTimer != nil {
		return *x.RestartTimer
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType struct {
	state         protoimpl.MessageState                                                                                                                                         `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 11, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxPrefixes          *uint32                `protobuf:"varint,51,opt,name=max_prefixes,json=maxPrefixes" json:"max_prefixes,omitempty"`
	PreventTeardown      *bool                  `protobuf:"varint,54,opt,name=prevent_teardown,json=preventTeardown" json:"prevent_teardown,omitempty"`
	ShutdownThresholdPct *uint32                `protobuf:"varint,52,opt,name=shutdown_threshold_pct,json=shutdownThresholdPct" json:"shutdown_threshold_pct,omitempty"`
	RestartTimer         *float64               `protobuf:"fixed64,53,opt,name=restart_timer,json=restartTimer" json:"restart_timer,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 11, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType) GetMaxPrefixes() uint32 {
	if x != nil && x.MaxPrefixes != nil {
		return *x.MaxPrefixes
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType) GetPreventTeardown() bool {
	if x != nil && x.PreventTeardown != nil {
		return *x.PreventTeardown
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType) GetShutdownThresholdPct() uint32 {
	if x != nil && x.ShutdownThresholdPct != nil {
		return *x.ShutdownThresholdPct
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType) GetRestartTimer() float64 {
	if x != nil && x.RestartTimer != nil {
		return *x.RestartTimer
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType struct {
	state         protoimpl.MessageState                                                                                                                                         `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 12, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxPrefixes          *uint32                `protobuf:"varint,51,opt,name=max_prefixes,json=maxPrefixes" json:"max_prefixes,omitempty"`
	PreventTeardown      *bool                  `protobuf:"varint,54,opt,name=prevent_teardown,json=preventTeardown" json:"prevent_teardown,omitempty"`
	ShutdownThresholdPct *uint32                `protobuf:"varint,52,opt,name=shutdown_threshold_pct,json=shutdownThresholdPct" json:"shutdown_threshold_pct,omitempty"`
	RestartTimer         *float64               `protobuf:"fixed64,53,opt,name=restart_timer,json=restartTimer" json:"restart_timer,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 9, 0, 12, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType) GetMaxPrefixes() uint32 {
	if x != nil && x.MaxPrefixes != nil {
		return *x.MaxPrefixes
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType) GetPreventTeardown() bool {
	if x != nil && x.PreventTeardown != nil {
		return *x.PreventTeardown
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType) GetShutdownThresholdPct() uint32 {
	if x != nil && x.ShutdownThresholdPct != nil {
		return *x.ShutdownThresholdPct
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType) GetRestartTimer() float64 {
	if x != nil && x.RestartTimer != nil {
		return *x.RestartTimer
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListGracefulRestartTypeStateType struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Enabled         *bool                  `protobuf:"varint,51,opt,name=enabled" json:"enabled,omitempty"`
	RestartTime     *uint32                `protobuf:"varint,52,opt,name=restart_time,json=restartTime" json:"restart_time,omitempty"`
	StaleRoutesTime *float64               `protobuf:"fixed64,53,opt,name=stale_routes_time,json=staleRoutesTime" json:"stale_routes_time,omitempty"`
	HelperOnly      *bool                  `protobuf:"varint,54,opt,name=helper_only,json=helperOnly" json:"helper_only,omitempty"`
	PeerRestartTime *uint32                `protobuf:"varint,61,opt,name=peer_restart_time,json=peerRestartTime" json:"peer_restart_time,omitempty"`
	PeerRestarting  *bool                  `protobuf:"varint,62,opt,name=peer_restarting,json=peerRestarting" json:"peer_restarting,omitempty"`
	LocalRestarting *bool                  `protobuf:"varint,63,opt,name=local_restarting,json=localRestarting" json:"local_restarting,omitempty"`
	Mode            *string                `protobuf:"bytes,64,opt,name=mode" json:"mode,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListGracefulRestartTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListGracefulRestartTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListGracefulRestartTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListGracefulRestartTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListGracefulRestartTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListGracefulRestartTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListGracefulRestartTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 10, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListGracefulRestartTypeStateType) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListGracefulRestartTypeStateType) GetRestartTime() uint32 {
	if x != nil && x.RestartTime != nil {
		return *x.RestartTime
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListGracefulRestartTypeStateType) GetStaleRoutesTime() float64 {
	if x != nil && x.StaleRoutesTime != nil {
		return *x.StaleRoutesTime
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListGracefulRestartTypeStateType) GetHelperOnly() bool {
	if x != nil && x.HelperOnly != nil {
		return *x.HelperOnly
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListGracefulRestartTypeStateType) GetPeerRestartTime() uint32 {
	if x != nil && x.PeerRestartTime != nil {
		return *x.PeerRestartTime
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListGracefulRestartTypeStateType) GetPeerRestarting() bool {
	if x != nil && x.PeerRestarting != nil {
		return *x.PeerRestarting
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListGracefulRestartTypeStateType) GetLocalRestarting() bool {
	if x != nil && x.LocalRestarting != nil {
		return *x.LocalRestarting
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListGracefulRestartTypeStateType) GetMode() string {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return ""
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListApplyPolicyTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ImportPolicy  []string               `protobuf:"bytes,51,rep,name=import_policy,json=importPolicy" json:"import_policy,omitempty"`
	ExportPolicy  []string               `protobuf:"bytes,52,rep,name=export_policy,json=exportPolicy" json:"export_policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListApplyPolicyTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListApplyPolicyTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListApplyPolicyTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListApplyPolicyTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListApplyPolicyTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListApplyPolicyTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListApplyPolicyTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 11, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListApplyPolicyTypeStateType) GetImportPolicy() []string {
	if x != nil {
		return x.ImportPolicy
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListApplyPolicyTypeStateType) GetExportPolicy() []string {
	if x != nil {
		return x.ExportPolicy
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupList struct {
	state                   protoimpl.MessageState                                                                                                          `protogen:"open.v1"`
	PeerGroupName           *string                                                                                                                         `protobuf:"bytes,61,opt,name=peer_group_name,json=peerGroupName" json:"peer_group_name,omitempty"`
	State                   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListStateType                   `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	Timers                  *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTimersType                  `protobuf:"bytes,152,opt,name=timers" json:"timers,omitempty"`
	Transport               *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTransportType               `protobuf:"bytes,153,opt,name=transport" json:"transport,omitempty"`
	ErrorHandling           *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListErrorHandlingType           `protobuf:"bytes,154,opt,name=error_handling,json=errorHandling" json:"error_handling,omitempty"`
	LoggingOptions          *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListLoggingOptionsType          `protobuf:"bytes,155,opt,name=logging_options,json=loggingOptions" json:"logging_options,omitempty"`
	EbgpMultihop            *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListEbgpMultihopType            `protobuf:"bytes,156,opt,name=ebgp_multihop,json=ebgpMultihop" json:"ebgp_multihop,omitempty"`
	RouteReflector          *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListRouteReflectorType          `protobuf:"bytes,157,opt,name=route_reflector,json=routeReflector" json:"route_reflector,omitempty"`
	AsPathOptions           *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAsPathOptionsType           `protobuf:"bytes,158,opt,name=as_path_options,json=asPathOptions" json:"as_path_options,omitempty"`
	UseMultiplePaths        *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsType        `protobuf:"bytes,159,opt,name=use_multiple_paths,json=useMultiplePaths" json:"use_multiple_paths,omitempty"`
	AfiSafis                *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisType                `protobuf:"bytes,160,opt,name=afi_safis,json=afiSafis" json:"afi_safis,omitempty"`
	GracefulRestart         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListGracefulRestartType         `protobuf:"bytes,161,opt,name=graceful_restart,json=gracefulRestart" json:"graceful_restart,omitempty"`
	ApplyPolicy             *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListApplyPolicyType             `protobuf:"bytes,171,opt,name=apply_policy,json=applyPolicy" json:"apply_policy,omitempty"`
	DynamicNeighborPrefixes *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesType `protobuf:"bytes,163,opt,name=dynamic_neighbor_prefixes,json=dynamicNeighborPrefixes" json:"dynamic_neighbor_prefixes,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupList) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupList{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupList) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupList) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupList) GetPeerGroupName() string {
	if x != nil && x.PeerGroupName != nil {
		return *x.PeerGroupName
	}
	return ""
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupList) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupList) GetTimers() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTimersType {
	if x != nil {
		return x.Timers
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupList) GetTransport() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTransportType {
	if x != nil {
		return x.Transport
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupList) GetErrorHandling() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListErrorHandlingType {
	if x != nil {
		return x.ErrorHandling
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupList) GetLoggingOptions() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListLoggingOptionsType {
	if x != nil {
		return x.LoggingOptions
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupList) GetEbgpMultihop() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListEbgpMultihopType {
	if x != nil {
		return x.EbgpMultihop
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupList) GetRouteReflector() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListRouteReflectorType {
	if x != nil {
		return x.RouteReflector
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupList) GetAsPathOptions() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAsPathOptionsType {
	if x != nil {
		return x.AsPathOptions
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupList) GetUseMultiplePaths() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsType {
	if x != nil {
		return x.UseMultiplePaths
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupList) GetAfiSafis() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisType {
	if x != nil {
		return x.AfiSafis
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupList) GetGracefulRestart() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListGracefulRestartType {
	if x != nil {
		return x.GracefulRestart
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupList) GetApplyPolicy() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListApplyPolicyType {
	if x != nil {
		return x.ApplyPolicy
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupList) GetDynamicNeighborPrefixes() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesType {
	if x != nil {
		return x.DynamicNeighborPrefixes
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListStateType struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	PeerAs           *uint32                `protobuf:"varint,51,opt,name=peer_as,json=peerAs" json:"peer_as,omitempty"`
	LocalAs          *uint32                `protobuf:"varint,52,opt,name=local_as,json=localAs" json:"local_as,omitempty"`
	PeerType         *string                `protobuf:"bytes,53,opt,name=peer_type,json=peerType" json:"peer_type,omitempty"`
	AuthPassword     *string                `protobuf:"bytes,54,opt,name=auth_password,json=authPassword" json:"auth_password,omitempty"`
	RemovePrivateAs  *string                `protobuf:"bytes,55,opt,name=remove_private_as,json=removePrivateAs" json:"remove_private_as,omitempty"`
	RouteFlapDamping *bool                  `protobuf:"varint,56,opt,name=route_flap_damping,json=routeFlapDamping" json:"route_flap_damping,omitempty"`
	Description      *string                `protobuf:"bytes,57,opt,name=description" json:"description,omitempty"`
	PeerGroupName    *string                `protobuf:"bytes,61,opt,name=peer_group_name,json=peerGroupName" json:"peer_group_name,omitempty"`
	TotalPaths       *uint32                `protobuf:"varint,81,opt,name=total_paths,json=totalPaths" json:"total_paths,omitempty"`
	TotalPrefixes    *uint32                `protobuf:"varint,82,opt,name=total_prefixes,json=totalPrefixes" json:"total_prefixes,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListStateType) GetPeerAs() uint32 {
	if x != nil && x.PeerAs != nil {
		return *x.PeerAs
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListStateType) GetLocalAs() uint32 {
	if x != nil && x.LocalAs != nil {
		return *x.LocalAs
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListStateType) GetPeerType() string {
	if x != nil && x.PeerType != nil {
		return *x.PeerType
	}
	return ""
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListStateType) GetAuthPassword() string {
	if x != nil && x.AuthPassword != nil {
		return *x.AuthPassword
	}
	return ""
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListStateType) GetRemovePrivateAs() string {
	if x != nil && x.RemovePrivateAs != nil {
		return *x.RemovePrivateAs
	}
	return ""
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListStateType) GetRouteFlapDamping() bool {
	if x != nil && x.RouteFlapDamping != nil {
		return *x.RouteFlapDamping
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListStateType) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListStateType) GetPeerGroupName() string {
	if x != nil && x.PeerGroupName != nil {
		return *x.PeerGroupName
	}
	return ""
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListStateType) GetTotalPaths() uint32 {
	if x != nil && x.TotalPaths != nil {
		return *x.TotalPaths
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListStateType) GetTotalPrefixes() uint32 {
	if x != nil && x.TotalPrefixes != nil {
		return *x.TotalPrefixes
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTimersType struct {
	state         protoimpl.MessageState                                                                                                  `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTimersTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTimersType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTimersType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTimersType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTimersType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTimersType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTimersType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTimersType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 1}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTimersType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTimersTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTransportType struct {
	state         protoimpl.MessageState                                                                                                     `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTransportTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTransportType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTransportType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTransportType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTransportType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTransportType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTransportType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTransportType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 2}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTransportType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTransportTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListErrorHandlingType struct {
	state         protoimpl.MessageState                                                                                                         `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListErrorHandlingTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListErrorHandlingType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListErrorHandlingType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListErrorHandlingType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListErrorHandlingType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListErrorHandlingType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListErrorHandlingType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListErrorHandlingType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 3}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListErrorHandlingType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListErrorHandlingTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListLoggingOptionsType struct {
	state         protoimpl.MessageState                                                                                                          `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListLoggingOptionsTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListLoggingOptionsType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListLoggingOptionsType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListLoggingOptionsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListLoggingOptionsType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListLoggingOptionsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListLoggingOptionsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListLoggingOptionsType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 4}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListLoggingOptionsType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListLoggingOptionsTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListEbgpMultihopType struct {
	state         protoimpl.MessageState                                                                                                        `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListEbgpMultihopTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListEbgpMultihopType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListEbgpMultihopType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListEbgpMultihopType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListEbgpMultihopType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListEbgpMultihopType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListEbgpMultihopType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListEbgpMultihopType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 5}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListEbgpMultihopType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListEbgpMultihopTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListRouteReflectorType struct {
	state         protoimpl.MessageState                                                                                                          `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListRouteReflectorTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListRouteReflectorType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListRouteReflectorType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListRouteReflectorType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListRouteReflectorType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListRouteReflectorType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListRouteReflectorType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListRouteReflectorType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 6}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListRouteReflectorType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListRouteReflectorTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAsPathOptionsType struct {
	state         protoimpl.MessageState                                                                                                         `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAsPathOptionsTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAsPathOptionsType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAsPathOptionsType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAsPathOptionsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAsPathOptionsType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAsPathOptionsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAsPathOptionsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAsPathOptionsType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 7}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAsPathOptionsType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAsPathOptionsTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsType struct {
	state         protoimpl.MessageState                                                                                                            `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	Ebgp          *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeEbgpType  `protobuf:"bytes,152,opt,name=ebgp" json:"ebgp,omitempty"`
	Ibgp          *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeIbgpType  `protobuf:"bytes,153,opt,name=ibgp" json:"ibgp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 8}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsType) GetEbgp() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeEbgpType {
	if x != nil {
		return x.Ebgp
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsType) GetIbgp() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeIbgpType {
	if x != nil {
		return x.Ibgp
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisType struct {
	state         protoimpl.MessageState                                                                                                        `protogen:"open.v1"`
	AfiSafi       []*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiList `protobuf:"bytes,51,rep,name=afi_safi,json=afiSafi" json:"afi_safi,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisType) GetAfiSafi() []*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiList {
	if x != nil {
		return x.AfiSafi
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListGracefulRestartType struct {
	state         protoimpl.MessageState                                                                                                           `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListGracefulRestartTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListGracefulRestartType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListGracefulRestartType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListGracefulRestartType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListGracefulRestartType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListGracefulRestartType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListGracefulRestartType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListGracefulRestartType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 10}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListGracefulRestartType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListGracefulRestartTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListApplyPolicyType struct {
	state         protoimpl.MessageState                                                                                                       `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListApplyPolicyTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListApplyPolicyType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListApplyPolicyType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListApplyPolicyType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListApplyPolicyType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListApplyPolicyType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListApplyPolicyType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListApplyPolicyType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 11}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListApplyPolicyType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListApplyPolicyTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesType struct {
	state                 protoimpl.MessageState                                                                                                                                     `protogen:"open.v1"`
	DynamicNeighborPrefix []*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesTypeDynamicNeighborPrefixList `protobuf:"bytes,51,rep,name=dynamic_neighbor_prefix,json=dynamicNeighborPrefix" json:"dynamic_neighbor_prefix,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 12}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesType) GetDynamicNeighborPrefix() []*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesTypeDynamicNeighborPrefixList {
	if x != nil {
		return x.DynamicNeighborPrefix
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTimersTypeStateType struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	ConnectRetry                 *float64               `protobuf:"fixed64,51,opt,name=connect_retry,json=connectRetry" json:"connect_retry,omitempty"`
	HoldTime                     *float64               `protobuf:"fixed64,52,opt,name=hold_time,json=holdTime" json:"hold_time,omitempty"`
	KeepaliveInterval            *float64               `protobuf:"fixed64,53,opt,name=keepalive_interval,json=keepaliveInterval" json:"keepalive_interval,omitempty"`
	MinimumAdvertisementInterval *float64               `protobuf:"fixed64,54,opt,name=minimum_advertisement_interval,json=minimumAdvertisementInterval" json:"minimum_advertisement_interval,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTimersTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTimersTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTimersTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTimersTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTimersTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTimersTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTimersTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 1, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTimersTypeStateType) GetConnectRetry() float64 {
	if x != nil && x.ConnectRetry != nil {
		return *x.ConnectRetry
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTimersTypeStateType) GetHoldTime() float64 {
	if x != nil && x.HoldTime != nil {
		return *x.HoldTime
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTimersTypeStateType) GetKeepaliveInterval() float64 {
	if x != nil && x.KeepaliveInterval != nil {
		return *x.KeepaliveInterval
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTimersTypeStateType) GetMinimumAdvertisementInterval() float64 {
	if x != nil && x.MinimumAdvertisementInterval != nil {
		return *x.MinimumAdvertisementInterval
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTransportTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TcpMss        *uint32                `protobuf:"varint,51,opt,name=tcp_mss,json=tcpMss" json:"tcp_mss,omitempty"`
	MtuDiscovery  *bool                  `protobuf:"varint,52,opt,name=mtu_discovery,json=mtuDiscovery" json:"mtu_discovery,omitempty"`
	PassiveMode   *bool                  `protobuf:"varint,53,opt,name=passive_mode,json=passiveMode" json:"passive_mode,omitempty"`
	LocalAddress  *string                `protobuf:"bytes,54,opt,name=local_address,json=localAddress" json:"local_address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTransportTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTransportTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTransportTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTransportTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTransportTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTransportTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTransportTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 2, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTransportTypeStateType) GetTcpMss() uint32 {
	if x != nil && x.TcpMss != nil {
		return *x.TcpMss
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTransportTypeStateType) GetMtuDiscovery() bool {
	if x != nil && x.MtuDiscovery != nil {
		return *x.MtuDiscovery
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTransportTypeStateType) GetPassiveMode() bool {
	if x != nil && x.PassiveMode != nil {
		return *x.PassiveMode
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTransportTypeStateType) GetLocalAddress() string {
	if x != nil && x.LocalAddress != nil {
		return *x.LocalAddress
	}
	return ""
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListErrorHandlingTypeStateType struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TreatAsWithdraw *bool                  `protobuf:"varint,51,opt,name=treat_as_withdraw,json=treatAsWithdraw" json:"treat_as_withdraw,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListErrorHandlingTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListErrorHandlingTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListErrorHandlingTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListErrorHandlingTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListErrorHandlingTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListErrorHandlingTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListErrorHandlingTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 3, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListErrorHandlingTypeStateType) GetTreatAsWithdraw() bool {
	if x != nil && x.TreatAsWithdraw != nil {
		return *x.TreatAsWithdraw
	}
	return false
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListLoggingOptionsTypeStateType struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	LogNeighborStateChanges *bool                  `protobuf:"varint,51,opt,name=log_neighbor_state_changes,json=logNeighborStateChanges" json:"log_neighbor_state_changes,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListLoggingOptionsTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListLoggingOptionsTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListLoggingOptionsTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListLoggingOptionsTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListLoggingOptionsTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListLoggingOptionsTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListLoggingOptionsTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 4, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListLoggingOptionsTypeStateType) GetLogNeighborStateChanges() bool {
	if x != nil && x.LogNeighborStateChanges != nil {
		return *x.LogNeighborStateChanges
	}
	return false
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListEbgpMultihopTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       *bool                  `protobuf:"varint,51,opt,name=enabled" json:"enabled,omitempty"`
	MultihopTtl   *uint32                `protobuf:"varint,52,opt,name=multihop_ttl,json=multihopTtl" json:"multihop_ttl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListEbgpMultihopTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListEbgpMultihopTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListEbgpMultihopTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListEbgpMultihopTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListEbgpMultihopTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListEbgpMultihopTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListEbgpMultihopTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 5, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListEbgpMultihopTypeStateType) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListEbgpMultihopTypeStateType) GetMultihopTtl() uint32 {
	if x != nil && x.MultihopTtl != nil {
		return *x.MultihopTtl
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListRouteReflectorTypeStateType struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	RouteReflectorClusterId *string                `protobuf:"bytes,51,opt,name=route_reflector_cluster_id,json=routeReflectorClusterId" json:"route_reflector_cluster_id,omitempty"`
	RouteReflectorClient    *bool                  `protobuf:"varint,52,opt,name=route_reflector_client,json=routeReflectorClient" json:"route_reflector_client,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListRouteReflectorTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListRouteReflectorTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListRouteReflectorTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListRouteReflectorTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListRouteReflectorTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListRouteReflectorTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListRouteReflectorTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 6, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListRouteReflectorTypeStateType) GetRouteReflectorClusterId() string {
	if x != nil && x.RouteReflectorClusterId != nil {
		return *x.RouteReflectorClusterId
	}
	return ""
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListRouteReflectorTypeStateType) GetRouteReflectorClient() bool {
	if x != nil && x.RouteReflectorClient != nil {
		return *x.RouteReflectorClient
	}
	return false
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAsPathOptionsTypeStateType struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	AllowOwnAs          *uint32                `protobuf:"varint,51,opt,name=allow_own_as,json=allowOwnAs" json:"allow_own_as,omitempty"`
	ReplacePeerAs       *bool                  `protobuf:"varint,52,opt,name=replace_peer_as,json=replacePeerAs" json:"replace_peer_as,omitempty"`
	DisablePeerAsFilter *bool                  `protobuf:"varint,53,opt,name=disable_peer_as_filter,json=disablePeerAsFilter" json:"disable_peer_as_filter,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAsPathOptionsTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAsPathOptionsTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAsPathOptionsTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAsPathOptionsTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAsPathOptionsTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAsPathOptionsTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAsPathOptionsTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 7, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAsPathOptionsTypeStateType) GetAllowOwnAs() uint32 {
	if x != nil && x.AllowOwnAs != nil {
		return *x.AllowOwnAs
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAsPathOptionsTypeStateType) GetReplacePeerAs() bool {
	if x != nil && x.ReplacePeerAs != nil {
		return *x.ReplacePeerAs
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAsPathOptionsTypeStateType) GetDisablePeerAsFilter() bool {
	if x != nil && x.DisablePeerAsFilter != nil {
		return *x.DisablePeerAsFilter
	}
	return false
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       *bool                  `protobuf:"varint,51,opt,name=enabled" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 8, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeStateType) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeEbgpType struct {
	state         protoimpl.MessageState                                                                                                                    `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeEbgpTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeEbgpType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeEbgpType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[143]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeEbgpType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeEbgpType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeEbgpType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[143]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeEbgpType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeEbgpType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 8, 1}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeEbgpType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeEbgpTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeIbgpType struct {
	state         protoimpl.MessageState                                                                                                                    `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeIbgpTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeIbgpType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeIbgpType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[144]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeIbgpType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeIbgpType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeIbgpType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[144]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeIbgpType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeIbgpType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 8, 2}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeIbgpType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeIbgpTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeEbgpTypeStateType struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AllowMultipleAs *bool                  `protobuf:"varint,51,opt,name=allow_multiple_as,json=allowMultipleAs" json:"allow_multiple_as,omitempty"`
	MaximumPaths    *uint32                `protobuf:"varint,52,opt,name=maximum_paths,json=maximumPaths" json:"maximum_paths,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeEbgpTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeEbgpTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[145]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeEbgpTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeEbgpTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeEbgpTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[145]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeEbgpTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeEbgpTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 8, 1, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeEbgpTypeStateType) GetAllowMultipleAs() bool {
	if x != nil && x.AllowMultipleAs != nil {
		return *x.AllowMultipleAs
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeEbgpTypeStateType) GetMaximumPaths() uint32 {
	if x != nil && x.MaximumPaths != nil {
		return *x.MaximumPaths
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeIbgpTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MaximumPaths  *uint32                `protobuf:"varint,51,opt,name=maximum_paths,json=maximumPaths" json:"maximum_paths,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeIbgpTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeIbgpTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[146]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeIbgpTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeIbgpTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeIbgpTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[146]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeIbgpTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeIbgpTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 8, 2, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeIbgpTypeStateType) GetMaximumPaths() uint32 {
	if x != nil && x.MaximumPaths != nil {
		return *x.MaximumPaths
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiList struct {
	state              protoimpl.MessageState                                                                                                                            `protogen:"open.v1"`
	AfiSafiName        *string                                                                                                                                           `protobuf:"bytes,51,opt,name=afi_safi_name,json=afiSafiName" json:"afi_safi_name,omitempty"`
	GracefulRestart    *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListGracefulRestartType    `protobuf:"bytes,151,opt,name=graceful_restart,json=gracefulRestart" json:"graceful_restart,omitempty"`
	State              *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListStateType              `protobuf:"bytes,152,opt,name=state" json:"state,omitempty"`
	AddPaths           *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListAddPathsType           `protobuf:"bytes,153,opt,name=add_paths,json=addPaths" json:"add_paths,omitempty"`
	Ipv4Unicast        *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastType        `protobuf:"bytes,154,opt,name=ipv4_unicast,json=ipv4Unicast" json:"ipv4_unicast,omitempty"`
	Ipv6Unicast        *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastType        `protobuf:"bytes,155,opt,name=ipv6_unicast,json=ipv6Unicast" json:"ipv6_unicast,omitempty"`
	Ipv4LabeledUnicast *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastType `protobuf:"bytes,156,opt,name=ipv4_labeled_unicast,json=ipv4LabeledUnicast" json:"ipv4_labeled_unicast,omitempty"`
	Ipv6LabeledUnicast *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastType `protobuf:"bytes,157,opt,name=ipv6_labeled_unicast,json=ipv6LabeledUnicast" json:"ipv6_labeled_unicast,omitempty"`
	L3VpnIpv4Unicast   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType   `protobuf:"bytes,158,opt,name=l3vpn_ipv4_unicast,json=l3vpnIpv4Unicast" json:"l3vpn_ipv4_unicast,omitempty"`
	L3VpnIpv6Unicast   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType   `protobuf:"bytes,159,opt,name=l3vpn_ipv6_unicast,json=l3vpnIpv6Unicast" json:"l3vpn_ipv6_unicast,omitempty"`
	L3VpnIpv4Multicast *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType `protobuf:"bytes,160,opt,name=l3vpn_ipv4_multicast,json=l3vpnIpv4Multicast" json:"l3vpn_ipv4_multicast,omitempty"`
	L3VpnIpv6Multicast *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType `protobuf:"bytes,161,opt,name=l3vpn_ipv6_multicast,json=l3vpnIpv6Multicast" json:"l3vpn_ipv6_multicast,omitempty"`
	L2VpnVpls          *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsType          `protobuf:"bytes,162,opt,name=l2vpn_vpls,json=l2vpnVpls" json:"l2vpn_vpls,omitempty"`
	L2VpnEvpn          *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnType          `protobuf:"bytes,163,opt,name=l2vpn_evpn,json=l2vpnEvpn" json:"l2vpn_evpn,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiList) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiList{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[147]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiList) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[147]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiList) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiList) GetAfiSafiName() string {
	if x != nil && x.AfiSafiName != nil {
		return *x.AfiSafiName
	}
	return ""
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiList) GetGracefulRestart() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListGracefulRestartType {
	if x != nil {
		return x.GracefulRestart
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiList) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiList) GetAddPaths() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListAddPathsType {
	if x != nil {
		return x.AddPaths
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiList) GetIpv4Unicast() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastType {
	if x != nil {
		return x.Ipv4Unicast
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiList) GetIpv6Unicast() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastType {
	if x != nil {
		return x.Ipv6Unicast
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiList) GetIpv4LabeledUnicast() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastType {
	if x != nil {
		return x.Ipv4LabeledUnicast
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiList) GetIpv6LabeledUnicast() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastType {
	if x != nil {
		return x.Ipv6LabeledUnicast
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiList) GetL3VpnIpv4Unicast() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType {
	if x != nil {
		return x.L3VpnIpv4Unicast
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiList) GetL3VpnIpv6Unicast() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType {
	if x != nil {
		return x.L3VpnIpv6Unicast
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiList) GetL3VpnIpv4Multicast() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType {
	if x != nil {
		return x.L3VpnIpv4Multicast
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiList) GetL3VpnIpv6Multicast() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType {
	if x != nil {
		return x.L3VpnIpv6Multicast
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiList) GetL2VpnVpls() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsType {
	if x != nil {
		return x.L2VpnVpls
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiList) GetL2VpnEvpn() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnType {
	if x != nil {
		return x.L2VpnEvpn
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListGracefulRestartType struct {
	state         protoimpl.MessageState                                                                                                                                  `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListGracefulRestartTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListGracefulRestartType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListGracefulRestartType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[148]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListGracefulRestartType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListGracefulRestartType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListGracefulRestartType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[148]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListGracefulRestartType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListGracefulRestartType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListGracefulRestartType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListGracefulRestartTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListStateType struct {
	state         protoimpl.MessageState                                                                                                                           `protogen:"open.v1"`
	AfiSafiName   *string                                                                                                                                          `protobuf:"bytes,51,opt,name=afi_safi_name,json=afiSafiName" json:"afi_safi_name,omitempty"`
	Enabled       *bool                                                                                                                                            `protobuf:"varint,52,opt,name=enabled" json:"enabled,omitempty"`
	Active        *bool                                                                                                                                            `protobuf:"varint,61,opt,name=active" json:"active,omitempty"`
	Prefixes      *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListStateTypePrefixesType `protobuf:"bytes,151,opt,name=prefixes" json:"prefixes,omitempty"`
	TotalPaths    *uint32                                                                                                                                          `protobuf:"varint,81,opt,name=total_paths,json=totalPaths" json:"total_paths,omitempty"`
	TotalPrefixes *uint32                                                                                                                                          `protobuf:"varint,82,opt,name=total_prefixes,json=totalPrefixes" json:"total_prefixes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[149]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[149]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 1}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListStateType) GetAfiSafiName() string {
	if x != nil && x.AfiSafiName != nil {
		return *x.AfiSafiName
	}
	return ""
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListStateType) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListStateType) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListStateType) GetPrefixes() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListStateTypePrefixesType {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListStateType) GetTotalPaths() uint32 {
	if x != nil && x.TotalPaths != nil {
		return *x.TotalPaths
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListStateType) GetTotalPrefixes() uint32 {
	if x != nil && x.TotalPrefixes != nil {
		return *x.TotalPrefixes
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListAddPathsType struct {
	state         protoimpl.MessageState                                                                                                                           `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListAddPathsTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListAddPathsType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListAddPathsType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[150]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListAddPathsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListAddPathsType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListAddPathsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[150]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListAddPathsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListAddPathsType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 2}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListAddPathsType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListAddPathsTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastType struct {
	state         protoimpl.MessageState                                                                                                                                    `protogen:"open.v1"`
	PrefixLimit   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType `protobuf:"bytes,151,opt,name=prefix_limit,json=prefixLimit" json:"prefix_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[151]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[151]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 3}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastType) GetPrefixLimit() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastType struct {
	state         protoimpl.MessageState                                                                                                                                    `protogen:"open.v1"`
	PrefixLimit   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType `protobuf:"bytes,151,opt,name=prefix_limit,json=prefixLimit" json:"prefix_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[152]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[152]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 4}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastType) GetPrefixLimit() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastType struct {
	state         protoimpl.MessageState                                                                                                                                           `protogen:"open.v1"`
	PrefixLimit   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType `protobuf:"bytes,151,opt,name=prefix_limit,json=prefixLimit" json:"prefix_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[153]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[153]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 5}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastType) GetPrefixLimit() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastType struct {
	state         protoimpl.MessageState                                                                                                                                           `protogen:"open.v1"`
	PrefixLimit   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType `protobuf:"bytes,151,opt,name=prefix_limit,json=prefixLimit" json:"prefix_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[154]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[154]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 6}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastType) GetPrefixLimit() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType struct {
	state         protoimpl.MessageState                                                                                                                                         `protogen:"open.v1"`
	PrefixLimit   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType `protobuf:"bytes,151,opt,name=prefix_limit,json=prefixLimit" json:"prefix_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[155]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[155]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 7}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType) GetPrefixLimit() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType struct {
	state         protoimpl.MessageState                                                                                                                                         `protogen:"open.v1"`
	PrefixLimit   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType `protobuf:"bytes,151,opt,name=prefix_limit,json=prefixLimit" json:"prefix_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[156]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[156]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 8}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType) GetPrefixLimit() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType struct {
	state         protoimpl.MessageState                                                                                                                                           `protogen:"open.v1"`
	PrefixLimit   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType `protobuf:"bytes,151,opt,name=prefix_limit,json=prefixLimit" json:"prefix_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[157]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[157]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 9}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType) GetPrefixLimit() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType struct {
	state         protoimpl.MessageState                                                                                                                                           `protogen:"open.v1"`
	PrefixLimit   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType `protobuf:"bytes,151,opt,name=prefix_limit,json=prefixLimit" json:"prefix_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[158]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[158]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 10}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType) GetPrefixLimit() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsType struct {
	state         protoimpl.MessageState                                                                                                                                  `protogen:"open.v1"`
	PrefixLimit   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType `protobuf:"bytes,151,opt,name=prefix_limit,json=prefixLimit" json:"prefix_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[159]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[159]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 11}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsType) GetPrefixLimit() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnType struct {
	state         protoimpl.MessageState                                                                                                                                  `protogen:"open.v1"`
	PrefixLimit   *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType `protobuf:"bytes,151,opt,name=prefix_limit,json=prefixLimit" json:"prefix_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[160]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[160]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 12}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnType) GetPrefixLimit() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListGracefulRestartTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       *bool                  `protobuf:"varint,51,opt,name=enabled" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListGracefulRestartTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListGracefulRestartTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[161]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListGracefulRestartTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListGracefulRestartTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListGracefulRestartTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[161]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListGracefulRestartTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListGracefulRestartTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListGracefulRestartTypeStateType) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListStateTypePrefixesType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Received      *uint32                `protobuf:"varint,63,opt,name=received" json:"received,omitempty"`
	Sent          *uint32                `protobuf:"varint,64,opt,name=sent" json:"sent,omitempty"`
	Installed     *uint32                `protobuf:"varint,65,opt,name=installed" json:"installed,omitempty"`
	Accepted      *uint32                `protobuf:"varint,62,opt,name=accepted" json:"accepted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListStateTypePrefixesType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListStateTypePrefixesType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[162]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListStateTypePrefixesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListStateTypePrefixesType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListStateTypePrefixesType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[162]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListStateTypePrefixesType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListStateTypePrefixesType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 1, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListStateTypePrefixesType) GetReceived() uint32 {
	if x != nil && x.Received != nil {
		return *x.Received
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListStateTypePrefixesType) GetSent() uint32 {
	if x != nil && x.Sent != nil {
		return *x.Sent
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListStateTypePrefixesType) GetInstalled() uint32 {
	if x != nil && x.Installed != nil {
		return *x.Installed
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListStateTypePrefixesType) GetAccepted() uint32 {
	if x != nil && x.Accepted != nil {
		return *x.Accepted
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListAddPathsTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Receive              *bool                  `protobuf:"varint,51,opt,name=receive" json:"receive,omitempty"`
	Send                 *bool                  `protobuf:"varint,54,opt,name=send" json:"send,omitempty"`
	SendMax              *uint32                `protobuf:"varint,52,opt,name=send_max,json=sendMax" json:"send_max,omitempty"`
	EligiblePrefixPolicy *string                `protobuf:"bytes,53,opt,name=eligible_prefix_policy,json=eligiblePrefixPolicy" json:"eligible_prefix_policy,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListAddPathsTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListAddPathsTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[163]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListAddPathsTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListAddPathsTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListAddPathsTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[163]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListAddPathsTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListAddPathsTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 2, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListAddPathsTypeStateType) GetReceive() bool {
	if x != nil && x.Receive != nil {
		return *x.Receive
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListAddPathsTypeStateType) GetSend() bool {
	if x != nil && x.Send != nil {
		return *x.Send
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListAddPathsTypeStateType) GetSendMax() uint32 {
	if x != nil && x.SendMax != nil {
		return *x.SendMax
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListAddPathsTypeStateType) GetEligiblePrefixPolicy() string {
	if x != nil && x.EligiblePrefixPolicy != nil {
		return *x.EligiblePrefixPolicy
	}
	return ""
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType struct {
	state         protoimpl.MessageState                                                                                                                                             `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[164]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[164]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 3, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxPrefixes          *uint32                `protobuf:"varint,51,opt,name=max_prefixes,json=maxPrefixes" json:"max_prefixes,omitempty"`
	PreventTeardown      *bool                  `protobuf:"varint,54,opt,name=prevent_teardown,json=preventTeardown" json:"prevent_teardown,omitempty"`
	ShutdownThresholdPct *uint32                `protobuf:"varint,52,opt,name=shutdown_threshold_pct,json=shutdownThresholdPct" json:"shutdown_threshold_pct,omitempty"`
	RestartTimer         *float64               `protobuf:"fixed64,53,opt,name=restart_timer,json=restartTimer" json:"restart_timer,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[165]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[165]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 3, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType) GetMaxPrefixes() uint32 {
	if x != nil && x.MaxPrefixes != nil {
		return *x.MaxPrefixes
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType) GetPreventTeardown() bool {
	if x != nil && x.PreventTeardown != nil {
		return *x.PreventTeardown
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType) GetShutdownThresholdPct() uint32 {
	if x != nil && x.ShutdownThresholdPct != nil {
		return *x.ShutdownThresholdPct
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType) GetRestartTimer() float64 {
	if x != nil && x.RestartTimer != nil {
		return *x.RestartTimer
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType struct {
	state         protoimpl.MessageState                                                                                                                                             `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[166]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[166]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 4, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxPrefixes          *uint32                `protobuf:"varint,51,opt,name=max_prefixes,json=maxPrefixes" json:"max_prefixes,omitempty"`
	PreventTeardown      *bool                  `protobuf:"varint,54,opt,name=prevent_teardown,json=preventTeardown" json:"prevent_teardown,omitempty"`
	ShutdownThresholdPct *uint32                `protobuf:"varint,52,opt,name=shutdown_threshold_pct,json=shutdownThresholdPct" json:"shutdown_threshold_pct,omitempty"`
	RestartTimer         *float64               `protobuf:"fixed64,53,opt,name=restart_timer,json=restartTimer" json:"restart_timer,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[167]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[167]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 4, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType) GetMaxPrefixes() uint32 {
	if x != nil && x.MaxPrefixes != nil {
		return *x.MaxPrefixes
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType) GetPreventTeardown() bool {
	if x != nil && x.PreventTeardown != nil {
		return *x.PreventTeardown
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType) GetShutdownThresholdPct() uint32 {
	if x != nil && x.ShutdownThresholdPct != nil {
		return *x.ShutdownThresholdPct
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType) GetRestartTimer() float64 {
	if x != nil && x.RestartTimer != nil {
		return *x.RestartTimer
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType struct {
	state         protoimpl.MessageState                                                                                                                                                    `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[168]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[168]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 5, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxPrefixes          *uint32                `protobuf:"varint,51,opt,name=max_prefixes,json=maxPrefixes" json:"max_prefixes,omitempty"`
	PreventTeardown      *bool                  `protobuf:"varint,54,opt,name=prevent_teardown,json=preventTeardown" json:"prevent_teardown,omitempty"`
	ShutdownThresholdPct *uint32                `protobuf:"varint,52,opt,name=shutdown_threshold_pct,json=shutdownThresholdPct" json:"shutdown_threshold_pct,omitempty"`
	RestartTimer         *float64               `protobuf:"fixed64,53,opt,name=restart_timer,json=restartTimer" json:"restart_timer,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[169]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[169]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 5, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType) GetMaxPrefixes() uint32 {
	if x != nil && x.MaxPrefixes != nil {
		return *x.MaxPrefixes
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType) GetPreventTeardown() bool {
	if x != nil && x.PreventTeardown != nil {
		return *x.PreventTeardown
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType) GetShutdownThresholdPct() uint32 {
	if x != nil && x.ShutdownThresholdPct != nil {
		return *x.ShutdownThresholdPct
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType) GetRestartTimer() float64 {
	if x != nil && x.RestartTimer != nil {
		return *x.RestartTimer
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType struct {
	state         protoimpl.MessageState                                                                                                                                                    `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[170]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[170]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 6, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxPrefixes          *uint32                `protobuf:"varint,51,opt,name=max_prefixes,json=maxPrefixes" json:"max_prefixes,omitempty"`
	PreventTeardown      *bool                  `protobuf:"varint,54,opt,name=prevent_teardown,json=preventTeardown" json:"prevent_teardown,omitempty"`
	ShutdownThresholdPct *uint32                `protobuf:"varint,52,opt,name=shutdown_threshold_pct,json=shutdownThresholdPct" json:"shutdown_threshold_pct,omitempty"`
	RestartTimer         *float64               `protobuf:"fixed64,53,opt,name=restart_timer,json=restartTimer" json:"restart_timer,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[171]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[171]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 6, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType) GetMaxPrefixes() uint32 {
	if x != nil && x.MaxPrefixes != nil {
		return *x.MaxPrefixes
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType) GetPreventTeardown() bool {
	if x != nil && x.PreventTeardown != nil {
		return *x.PreventTeardown
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType) GetShutdownThresholdPct() uint32 {
	if x != nil && x.ShutdownThresholdPct != nil {
		return *x.ShutdownThresholdPct
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType) GetRestartTimer() float64 {
	if x != nil && x.RestartTimer != nil {
		return *x.RestartTimer
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType struct {
	state         protoimpl.MessageState                                                                                                                                                  `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[172]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[172]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 7, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxPrefixes          *uint32                `protobuf:"varint,51,opt,name=max_prefixes,json=maxPrefixes" json:"max_prefixes,omitempty"`
	PreventTeardown      *bool                  `protobuf:"varint,54,opt,name=prevent_teardown,json=preventTeardown" json:"prevent_teardown,omitempty"`
	ShutdownThresholdPct *uint32                `protobuf:"varint,52,opt,name=shutdown_threshold_pct,json=shutdownThresholdPct" json:"shutdown_threshold_pct,omitempty"`
	RestartTimer         *float64               `protobuf:"fixed64,53,opt,name=restart_timer,json=restartTimer" json:"restart_timer,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[173]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[173]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 7, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType) GetMaxPrefixes() uint32 {
	if x != nil && x.MaxPrefixes != nil {
		return *x.MaxPrefixes
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType) GetPreventTeardown() bool {
	if x != nil && x.PreventTeardown != nil {
		return *x.PreventTeardown
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType) GetShutdownThresholdPct() uint32 {
	if x != nil && x.ShutdownThresholdPct != nil {
		return *x.ShutdownThresholdPct
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType) GetRestartTimer() float64 {
	if x != nil && x.RestartTimer != nil {
		return *x.RestartTimer
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType struct {
	state         protoimpl.MessageState                                                                                                                                                  `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[174]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[174]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 8, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxPrefixes          *uint32                `protobuf:"varint,51,opt,name=max_prefixes,json=maxPrefixes" json:"max_prefixes,omitempty"`
	PreventTeardown      *bool                  `protobuf:"varint,54,opt,name=prevent_teardown,json=preventTeardown" json:"prevent_teardown,omitempty"`
	ShutdownThresholdPct *uint32                `protobuf:"varint,52,opt,name=shutdown_threshold_pct,json=shutdownThresholdPct" json:"shutdown_threshold_pct,omitempty"`
	RestartTimer         *float64               `protobuf:"fixed64,53,opt,name=restart_timer,json=restartTimer" json:"restart_timer,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[175]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[175]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 8, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType) GetMaxPrefixes() uint32 {
	if x != nil && x.MaxPrefixes != nil {
		return *x.MaxPrefixes
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType) GetPreventTeardown() bool {
	if x != nil && x.PreventTeardown != nil {
		return *x.PreventTeardown
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType) GetShutdownThresholdPct() uint32 {
	if x != nil && x.ShutdownThresholdPct != nil {
		return *x.ShutdownThresholdPct
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType) GetRestartTimer() float64 {
	if x != nil && x.RestartTimer != nil {
		return *x.RestartTimer
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType struct {
	state         protoimpl.MessageState                                                                                                                                                    `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[176]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[176]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 9, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxPrefixes          *uint32                `protobuf:"varint,51,opt,name=max_prefixes,json=maxPrefixes" json:"max_prefixes,omitempty"`
	PreventTeardown      *bool                  `protobuf:"varint,54,opt,name=prevent_teardown,json=preventTeardown" json:"prevent_teardown,omitempty"`
	ShutdownThresholdPct *uint32                `protobuf:"varint,52,opt,name=shutdown_threshold_pct,json=shutdownThresholdPct" json:"shutdown_threshold_pct,omitempty"`
	RestartTimer         *float64               `protobuf:"fixed64,53,opt,name=restart_timer,json=restartTimer" json:"restart_timer,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[177]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[177]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 9, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType) GetMaxPrefixes() uint32 {
	if x != nil && x.MaxPrefixes != nil {
		return *x.MaxPrefixes
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType) GetPreventTeardown() bool {
	if x != nil && x.PreventTeardown != nil {
		return *x.PreventTeardown
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType) GetShutdownThresholdPct() uint32 {
	if x != nil && x.ShutdownThresholdPct != nil {
		return *x.ShutdownThresholdPct
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType) GetRestartTimer() float64 {
	if x != nil && x.RestartTimer != nil {
		return *x.RestartTimer
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType struct {
	state         protoimpl.MessageState                                                                                                                                                    `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[178]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[178]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 10, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxPrefixes          *uint32                `protobuf:"varint,51,opt,name=max_prefixes,json=maxPrefixes" json:"max_prefixes,omitempty"`
	PreventTeardown      *bool                  `protobuf:"varint,54,opt,name=prevent_teardown,json=preventTeardown" json:"prevent_teardown,omitempty"`
	ShutdownThresholdPct *uint32                `protobuf:"varint,52,opt,name=shutdown_threshold_pct,json=shutdownThresholdPct" json:"shutdown_threshold_pct,omitempty"`
	RestartTimer         *float64               `protobuf:"fixed64,53,opt,name=restart_timer,json=restartTimer" json:"restart_timer,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[179]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[179]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 10, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType) GetMaxPrefixes() uint32 {
	if x != nil && x.MaxPrefixes != nil {
		return *x.MaxPrefixes
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType) GetPreventTeardown() bool {
	if x != nil && x.PreventTeardown != nil {
		return *x.PreventTeardown
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType) GetShutdownThresholdPct() uint32 {
	if x != nil && x.ShutdownThresholdPct != nil {
		return *x.ShutdownThresholdPct
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType) GetRestartTimer() float64 {
	if x != nil && x.RestartTimer != nil {
		return *x.RestartTimer
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType struct {
	state         protoimpl.MessageState                                                                                                                                           `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[180]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[180]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 11, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxPrefixes          *uint32                `protobuf:"varint,51,opt,name=max_prefixes,json=maxPrefixes" json:"max_prefixes,omitempty"`
	PreventTeardown      *bool                  `protobuf:"varint,54,opt,name=prevent_teardown,json=preventTeardown" json:"prevent_teardown,omitempty"`
	ShutdownThresholdPct *uint32                `protobuf:"varint,52,opt,name=shutdown_threshold_pct,json=shutdownThresholdPct" json:"shutdown_threshold_pct,omitempty"`
	RestartTimer         *float64               `protobuf:"fixed64,53,opt,name=restart_timer,json=restartTimer" json:"restart_timer,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[181]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[181]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 11, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType) GetMaxPrefixes() uint32 {
	if x != nil && x.MaxPrefixes != nil {
		return *x.MaxPrefixes
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType) GetPreventTeardown() bool {
	if x != nil && x.PreventTeardown != nil {
		return *x.PreventTeardown
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType) GetShutdownThresholdPct() uint32 {
	if x != nil && x.ShutdownThresholdPct != nil {
		return *x.ShutdownThresholdPct
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType) GetRestartTimer() float64 {
	if x != nil && x.RestartTimer != nil {
		return *x.RestartTimer
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType struct {
	state         protoimpl.MessageState                                                                                                                                           `protogen:"open.v1"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[182]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[182]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 12, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxPrefixes          *uint32                `protobuf:"varint,51,opt,name=max_prefixes,json=maxPrefixes" json:"max_prefixes,omitempty"`
	PreventTeardown      *bool                  `protobuf:"varint,54,opt,name=prevent_teardown,json=preventTeardown" json:"prevent_teardown,omitempty"`
	ShutdownThresholdPct *uint32                `protobuf:"varint,52,opt,name=shutdown_threshold_pct,json=shutdownThresholdPct" json:"shutdown_threshold_pct,omitempty"`
	RestartTimer         *float64               `protobuf:"fixed64,53,opt,name=restart_timer,json=restartTimer" json:"restart_timer,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[183]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[183]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 9, 0, 12, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType) GetMaxPrefixes() uint32 {
	if x != nil && x.MaxPrefixes != nil {
		return *x.MaxPrefixes
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType) GetPreventTeardown() bool {
	if x != nil && x.PreventTeardown != nil {
		return *x.PreventTeardown
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType) GetShutdownThresholdPct() uint32 {
	if x != nil && x.ShutdownThresholdPct != nil {
		return *x.ShutdownThresholdPct
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType) GetRestartTimer() float64 {
	if x != nil && x.RestartTimer != nil {
		return *x.RestartTimer
	}
	return 0
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListGracefulRestartTypeStateType struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Enabled         *bool                  `protobuf:"varint,51,opt,name=enabled" json:"enabled,omitempty"`
	RestartTime     *uint32                `protobuf:"varint,52,opt,name=restart_time,json=restartTime" json:"restart_time,omitempty"`
	StaleRoutesTime *float64               `protobuf:"fixed64,53,opt,name=stale_routes_time,json=staleRoutesTime" json:"stale_routes_time,omitempty"`
	HelperOnly      *bool                  `protobuf:"varint,54,opt,name=helper_only,json=helperOnly" json:"helper_only,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListGracefulRestartTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListGracefulRestartTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[184]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListGracefulRestartTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListGracefulRestartTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListGracefulRestartTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[184]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListGracefulRestartTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListGracefulRestartTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 10, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListGracefulRestartTypeStateType) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListGracefulRestartTypeStateType) GetRestartTime() uint32 {
	if x != nil && x.RestartTime != nil {
		return *x.RestartTime
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListGracefulRestartTypeStateType) GetStaleRoutesTime() float64 {
	if x != nil && x.StaleRoutesTime != nil {
		return *x.StaleRoutesTime
	}
	return 0
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListGracefulRestartTypeStateType) GetHelperOnly() bool {
	if x != nil && x.HelperOnly != nil {
		return *x.HelperOnly
	}
	return false
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListApplyPolicyTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ImportPolicy  []string               `protobuf:"bytes,51,rep,name=import_policy,json=importPolicy" json:"import_policy,omitempty"`
	ExportPolicy  []string               `protobuf:"bytes,52,rep,name=export_policy,json=exportPolicy" json:"export_policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListApplyPolicyTypeStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListApplyPolicyTypeStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[185]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListApplyPolicyTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListApplyPolicyTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListApplyPolicyTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[185]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListApplyPolicyTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListApplyPolicyTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 11, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListApplyPolicyTypeStateType) GetImportPolicy() []string {
	if x != nil {
		return x.ImportPolicy
	}
	return nil
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListApplyPolicyTypeStateType) GetExportPolicy() []string {
	if x != nil {
		return x.ExportPolicy
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesTypeDynamicNeighborPrefixList struct {
	state         protoimpl.MessageState                                                                                                                                            `protogen:"open.v1"`
	Prefix        *string                                                                                                                                                           `protobuf:"bytes,51,opt,name=prefix" json:"prefix,omitempty"`
	State         *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesTypeDynamicNeighborPrefixListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesTypeDynamicNeighborPrefixList) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesTypeDynamicNeighborPrefixList{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[186]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesTypeDynamicNeighborPrefixList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesTypeDynamicNeighborPrefixList) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesTypeDynamicNeighborPrefixList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[186]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesTypeDynamicNeighborPrefixList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesTypeDynamicNeighborPrefixList) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 12, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesTypeDynamicNeighborPrefixList) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesTypeDynamicNeighborPrefixList) GetState() *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesTypeDynamicNeighborPrefixListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesTypeDynamicNeighborPrefixListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Prefix        *string                `protobuf:"bytes,51,opt,name=prefix" json:"prefix,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesTypeDynamicNeighborPrefixListStateType) Reset() {
	*x = NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesTypeDynamicNeighborPrefixListStateType{}
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[187]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesTypeDynamicNeighborPrefixListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesTypeDynamicNeighborPrefixListStateType) ProtoMessage() {
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesTypeDynamicNeighborPrefixListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_bgp_oc_proto_msgTypes[187]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesTypeDynamicNeighborPrefixListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesTypeDynamicNeighborPrefixListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_bgp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 12, 0, 0}
}

func (x *NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesTypeDynamicNeighborPrefixListStateType) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

var file_rpd_ni_bgp_oc_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*NetworkInstancesNiBgp)(nil),
		Field:         67,
		Name:          "jnpr_network_instances_ni_bgp_ext",
		Tag:           "bytes,67,opt,name=jnpr_network_instances_ni_bgp_ext",
		Filename:      "rpd_ni_bgp_oc.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional network_instances_ni_bgp jnpr_network_instances_ni_bgp_ext = 67;
	E_JnprNetworkInstancesNiBgpExt = &file_rpd_ni_bgp_oc_proto_extTypes[0]
)

var File_rpd_ni_bgp_oc_proto protoreflect.FileDescriptor

var file_rpd_ni_bgp_oc_proto_rawDesc = string([]byte{
	0x0a, 0x13, 0x72, 0x70, 0x64, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x5f, 0x74, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x90, 0x03, 0x0a, 0x18,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x12, 0x5b, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x97, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x9b, 0x8f, 0x03, 0x0a, 0x15, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05,
	0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x1a, 0x86, 0x8e, 0x03, 0x0a, 0x0e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x69,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x87, 0x8d, 0x03, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x68, 0x0a, 0x03,
	0x62, 0x67, 0x70, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e,
	0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x03, 0x62, 0x67, 0x70, 0x1a, 0x8a, 0x8c, 0x03, 0x0a, 0x08, 0x62, 0x67, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x7a, 0x0a, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x97,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x12, 0x83, 0x01, 0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x98,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x0b, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x66, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x1a, 0xde, 0x5f, 0x0a, 0x0b, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x83, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x6c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xb7, 0x01, 0x0a, 0x17, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7e, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e,
	0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x15, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x9b, 0x01, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x74, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e,
	0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0xa3, 0x01, 0x0a, 0x10, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x77, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67,
	0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x97, 0x01, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x73, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x8e, 0x01, 0x0a, 0x09, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x18, 0x9b, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x1a, 0x81, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x61, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x61, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x51, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18,
	0x52, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x1a, 0xab, 0x03, 0x0a, 0x1c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x89, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62,
	0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xe6, 0x01, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x6c, 0x77, 0x61,
	0x79, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x5f, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x41, 0x73, 0x50,
	0x61, 0x74, 0x68, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3b, 0x0a, 0x1a, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x1a, 0xf8, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7f, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e,
	0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0x49, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x18, 0x34, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x1a, 0xcd, 0x02,
	0x0a, 0x15, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x82, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69,
	0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x72, 0x61,
	0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x96, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x74, 0x61,
	0x6c, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x36, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x1a, 0x83, 0x02,
	0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x7e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x56, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x33, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x34, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x1a, 0x9c, 0x4d, 0x0a, 0x0e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x08, 0x61, 0x66, 0x69, 0x5f, 0x73,
	0x61, 0x66, 0x69, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x7e, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e,
	0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66,
	0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69,
	0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x07, 0x61, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x1a, 0xec, 0x4b, 0x0a, 0x0d, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0d, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66,
	0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40,
	0x02, 0x08, 0x01, 0x52, 0x0b, 0x61, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0xc1, 0x01, 0x0a, 0x10, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x94, 0x01, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x67, 0x72,
	0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x0f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0xa1, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x98,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x89, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67,
	0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66,
	0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xac, 0x01, 0x0a, 0x09, 0x61, 0x64, 0x64,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x8d, 0x01,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61,
	0x64, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61,
	0x64, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0xb5, 0x01, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x90, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62,
	0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12,
	0xb5, 0x01, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x90, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f,
	0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73,
	0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xcc, 0x01, 0x0a, 0x14, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x18, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x98, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f,
	0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73,
	0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x12, 0x69, 0x70, 0x76, 0x34, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x55,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xcc, 0x01, 0x0a, 0x14, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18,
	0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x98, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62,
	0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61,
	0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x12, 0x69, 0x70, 0x76, 0x36, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xc6, 0x01, 0x0a, 0x12, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x9e, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x96, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x10, 0x6c, 0x33,
	0x76, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xc6,
	0x01, 0x0a, 0x12, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x96, 0x01, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x33,
	0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x10, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x36,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xcc, 0x01, 0x0a, 0x14, 0x6c, 0x33, 0x76, 0x70,
	0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x98, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f,
	0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73,
	0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x12, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xcc, 0x01, 0x0a, 0x14, 0x6c, 0x33, 0x76, 0x70, 0x6e,
	0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18,
	0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x98, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62,
	0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61,
	0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x12, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xaf, 0x01, 0x0a, 0x0a, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f,
	0x76, 0x70, 0x6c, 0x73, 0x18, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x8e, 0x01, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61,
	0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x32, 0x76,
	0x70, 0x6e, 0x5f, 0x76, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6c, 0x32,
	0x76, 0x70, 0x6e, 0x56, 0x70, 0x6c, 0x73, 0x12, 0xaf, 0x01, 0x0a, 0x0a, 0x6c, 0x32, 0x76, 0x70,
	0x6e, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x18, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x8e, 0x01,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c,
	0x32, 0x76, 0x70, 0x6e, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x6c, 0x32, 0x76, 0x70, 0x6e, 0x45, 0x76, 0x70, 0x6e, 0x1a, 0xf9, 0x01, 0x0a, 0x15, 0x67, 0x72,
	0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0xb7, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x9f, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x26, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0x92, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x1a, 0xd1, 0x02, 0x0a, 0x0e, 0x61,
	0x64, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xb0, 0x01,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x98,
	0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x61, 0x64, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0x8b, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6e,
	0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x6c, 0x69, 0x67,
	0x69, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62,
	0x6c, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0xf3,
	0x04, 0x0a, 0x11, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0xc7, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xa2, 0x01, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x93,
	0x03, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0xc5, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xad, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67,
	0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66,
	0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb5, 0x01, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f,
	0x70, 0x63, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x68, 0x75, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x1a, 0xf3, 0x04, 0x0a, 0x11, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xc7, 0x01, 0x0a, 0x0c, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0xa2, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x1a, 0x93, 0x03, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xc5, 0x01, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xad, 0x01, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61,
	0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0xb5, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12,
	0x34, 0x0a, 0x16, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x50, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x1a, 0x8b, 0x05, 0x0a, 0x19, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xcf, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0xaa, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x9b, 0x03, 0x0a, 0x11, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0xcd, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0xb5, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0xb5, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65,
	0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x34, 0x0a,
	0x16, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x50, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x1a, 0x8b, 0x05, 0x0a, 0x19, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xcf, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xaa,
	0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x9b, 0x03, 0x0a, 0x11, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xcd,
	0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0xb5, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62,
	0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb5,
	0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x73,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x1a, 0x85, 0x05, 0x0a, 0x17, 0x6c, 0x33, 0x76, 0x70, 0x6e,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0xcd, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xa8, 0x01, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61,
	0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66,
	0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x33, 0x76, 0x70,
	0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x1a, 0x99, 0x03, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xcb, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xb3, 0x01, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e,
	0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66,
	0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69,
	0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x33, 0x76, 0x70, 0x6e,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb5, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64,
	0x6f, 0x77, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x1a, 0x85,
	0x05, 0x0a, 0x17, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xcd, 0x01, 0x0a, 0x0c, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0xa8, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x99, 0x03, 0x0a, 0x11, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0xcb, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0xb3, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb5,
	0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x73,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x1a, 0x8b, 0x05, 0x0a, 0x19, 0x6c, 0x33, 0x76, 0x70, 0x6e,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0xcf, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xaa, 0x01, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x33,
	0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x9b, 0x03, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xcd, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xb5, 0x01,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c,
	0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb5, 0x01, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f,
	0x70, 0x63, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x68, 0x75, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x1a, 0x8b, 0x05, 0x0a, 0x19, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0xcf, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xaa, 0x01, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61,
	0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66,
	0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x33, 0x76, 0x70,
	0x6e, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x1a, 0x9b, 0x03, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xcd, 0x01, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xb5, 0x01, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61,
	0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x33, 0x76,
	0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb5, 0x01, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x68, 0x75, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63,
	0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x1a, 0xed, 0x04, 0x0a, 0x0f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x76, 0x70, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xc5, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xa0,
	0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x76, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x91,
	0x03, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0xc3, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xab, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67,
	0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66,
	0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x76, 0x70, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb5, 0x01, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x68, 0x75, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63,
	0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x1a, 0xed, 0x04, 0x0a, 0x0f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x65, 0x76, 0x70,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xc5, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xa0,
	0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x91,
	0x03, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0xc3, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xab, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67,
	0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66,
	0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x65, 0x76, 0x70,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb5, 0x01, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x68, 0x75, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63,
	0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x1a, 0xa7, 0x98, 0x01, 0x0a, 0x0e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x72, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e,
	0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x1a, 0x81, 0x97, 0x01, 0x0a, 0x0d, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x10, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x0f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x6e, 0x6d, 0x70, 0x50, 0x65, 0x65, 0x72,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x94, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67,
	0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x97, 0x01, 0x0a,
	0x06, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7e,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x81, 0x01, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0xaf, 0x01, 0x0a, 0x0e, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x9a, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x86, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0xb2, 0x01, 0x0a,
	0x0f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x87, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f,
	0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0xac, 0x01, 0x0a, 0x0d, 0x65, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x68, 0x6f, 0x70, 0x18, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x85, 0x01, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x65, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x65, 0x62, 0x67, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70,
	0x12, 0xb2, 0x01, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x87, 0x01, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0xb1, 0x01, 0x0a, 0x0f, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x87, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x61, 0x73, 0x50, 0x61,
	0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xba, 0x01, 0x0a, 0x12, 0x75, 0x73,
	0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x18, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x8a, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f,
	0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x75, 0x73, 0x65,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x10, 0x75, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x09, 0x61, 0x66, 0x69, 0x5f, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x81, 0x01, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x61, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x12, 0xb5, 0x01, 0x0a, 0x10, 0x67, 0x72,
	0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0xa1,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x88, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67,
	0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x65,
	0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x0f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0xa9, 0x01, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x84, 0x01, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e,
	0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0xf1, 0x10,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70,
	0x65, 0x65, 0x72, 0x41, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61,
	0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x70, 0x5f, 0x64, 0x61, 0x6d,
	0x70, 0x69, 0x6e, 0x67, 0x18, 0x38, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x46, 0x6c, 0x61, 0x70, 0x44, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x39, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x73, 0x74, 0x61,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x37,
	0x0a, 0x17, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x16, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x40, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0xa9,
	0x01, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x8b, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x06, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x89, 0x01, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x12, 0x35, 0x0a, 0x16, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30,
	0x0a, 0x14, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x4b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76,
	0x61, 0x6c, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x52, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x53, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x6e, 0x6d, 0x70, 0x50, 0x65, 0x65,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x8b, 0x07, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x04, 0x73, 0x65, 0x6e,
	0x74, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x95, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69,
	0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x12, 0xb7, 0x01, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x99, 0x01, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x1a, 0x85, 0x02, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x18, 0x41, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x18, 0x42, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x4e, 0x4f,
	0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x47, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3f, 0x0a, 0x1c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x45, 0x0a, 0x1f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x75, 0x62,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x6c, 0x61, 0x73, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x53, 0x75, 0x62, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x89, 0x02, 0x0a, 0x0d, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x18, 0x43, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x18, 0x44, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x4a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x1c,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x4b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a,
	0x1f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x75, 0x62,
	0x63, 0x6f, 0x64, 0x65, 0x1a, 0x3b, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x45, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x1a, 0xa9, 0x03, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0xa1, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x89, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xf5, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x33, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x6c,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x68, 0x6f,
	0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c,
	0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x44, 0x0a, 0x1e, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x36, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x6e,
	0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x6e, 0x65, 0x67, 0x6f, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xb3, 0x03,
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0xa4, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x8c, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xf9, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x63, 0x70, 0x5f, 0x6d, 0x73,
	0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x63, 0x70, 0x4d, 0x73, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x6d, 0x74, 0x75, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x74, 0x75, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x61, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x3e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x1a, 0xb7, 0x02, 0x0a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xa9, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x91, 0x01, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x74, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x65, 0x61, 0x74, 0x5f, 0x61,
	0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x74, 0x72, 0x65, 0x61, 0x74, 0x41, 0x73, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x12, 0x3a, 0x0a, 0x19, 0x65, 0x72, 0x72, 0x6f, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x65, 0x72, 0x72, 0x6f, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x8e, 0x02,
	0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xaa, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x92, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f,
	0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0x49, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6c, 0x6f, 0x67, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0x8a,
	0x02, 0x0a, 0x12, 0x65, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x90, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62,
	0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x62, 0x67, 0x70,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0x49, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x68, 0x6f, 0x70, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x54, 0x74, 0x6c, 0x1a, 0xc4, 0x02, 0x0a, 0x14,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0xaa, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x92, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67,
	0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0x7f, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x3b, 0x0a, 0x1a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x17, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x1a, 0xd1, 0x02, 0x0a, 0x14, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xaa, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x92, 0x01, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8b, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x77, 0x6e, 0x41, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x65, 0x65, 0x72, 0x41,
	0x73, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x61, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x65, 0x72, 0x41, 0x73,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0xa0, 0x05, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0xad, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x95, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0xaa, 0x01, 0x0a, 0x04, 0x65, 0x62, 0x67, 0x70, 0x18, 0x98, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x94, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x65, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x65, 0x62, 0x67, 0x70, 0x1a,
	0x26, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xff, 0x01, 0x0a, 0x09, 0x65, 0x62, 0x67, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xb7, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x9f, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62,
	0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x65, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0x38, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f,
	0x61, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x41, 0x73, 0x1a, 0x84, 0x57, 0x0a, 0x0e, 0x61, 0x66,
	0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xab, 0x01, 0x0a,
	0x08, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x18, 0x33, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x8f, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62,
	0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x07, 0x61, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x1a, 0xc3, 0x55, 0x0a, 0x0d, 0x61,
	0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0d,
	0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x61, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0xd2, 0x01, 0x0a, 0x10, 0x67, 0x72, 0x61, 0x63,
	0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x97, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0xa5, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x67, 0x72, 0x61,
	0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0xb2, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x9a, 0x01,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0xbd, 0x01, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x9e, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62,
	0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73,
	0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x64, 0x64, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x12, 0xc6, 0x01, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xa1, 0x01, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e,
	0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61,
	0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66,
	0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x69,
	0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xc6, 0x01, 0x0a, 0x0c, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x9b, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0xa1, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x12, 0xdd, 0x01, 0x0a, 0x14, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x9c, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0xa9, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x12, 0x69, 0x70, 0x76, 0x34, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x12, 0xdd, 0x01, 0x0a, 0x14, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x9d, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0xa9, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x12, 0x69, 0x70, 0x76, 0x36, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x12, 0xd7, 0x01, 0x0a, 0x12, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x9e, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0xa7, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x10, 0x6c, 0x33, 0x76,
	0x70, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xd7, 0x01,
	0x0a, 0x12, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x18, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xa7, 0x01, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x33,
	0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x10, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x36,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xdd, 0x01, 0x0a, 0x14, 0x6c, 0x33, 0x76, 0x70,
	0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xa9, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f,
	0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69,
	0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f,
	0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x12, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xdd, 0x01, 0x0a, 0x14, 0x6c, 0x33, 0x76, 0x70,
	0x6e, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x18, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xa9, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f,
	0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69,
	0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f,
	0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x12, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xc0, 0x01, 0x0a, 0x0a, 0x6c, 0x32, 0x76, 0x70,
	0x6e, 0x5f, 0x76, 0x70, 0x6c, 0x73, 0x18, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x9f, 0x01,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x76, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x56, 0x70, 0x6c, 0x73, 0x12, 0xc0, 0x01, 0x0a, 0x0a, 0x6c,
	0x32, 0x76, 0x70, 0x6e, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x18, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x9f, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x45, 0x76, 0x70, 0x6e, 0x1a, 0xc6, 0x02,
	0x0a, 0x15, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xc8, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xb0, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69,
	0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66,
	0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69,
	0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x65,
	0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0x62, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x1a, 0xda, 0x05, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66,
	0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x3d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0xc6, 0x01, 0x0a, 0x08,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0xa8, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62,
	0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x48, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0xc0, 0x01, 0x0a, 0x06, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xa6, 0x01, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61,
	0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x1a, 0x79, 0x0a, 0x0d, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x1a, 0x3b, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x49,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x1a, 0xe2, 0x02, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xc1, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xa9, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f,
	0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69,
	0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f,
	0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8b, 0x01, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x6d, 0x61, 0x78, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x4d,
	0x61, 0x78, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x95, 0x05, 0x0a, 0x11, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xd8,
	0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xb3, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62,
	0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73,
	0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xa4, 0x03, 0x0a, 0x11, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0xd6, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0xbe, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb5, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d,
	0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61,
	0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72,
	0x1a, 0x95, 0x05, 0x0a, 0x11, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xd8, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xb3,
	0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x1a, 0xa4, 0x03, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xd6, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xbe, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69,
	0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66,
	0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69,
	0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0xb5, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65,
	0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x34, 0x0a,
	0x16, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x50, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x1a, 0xad, 0x05, 0x0a, 0x19, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xe0, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xbb,
	0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xac, 0x03, 0x0a, 0x11, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0xde, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0xc6, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0xb5, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65,
	0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x34, 0x0a,
	0x16, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x50, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x1a, 0xad, 0x05, 0x0a, 0x19, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xe0, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xbb,
	0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xac, 0x03, 0x0a, 0x11, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0xde, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0xc6, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0xb5, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65,
	0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x34, 0x0a,
	0x16, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x50, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x1a, 0xa7, 0x05, 0x0a, 0x17, 0x6c, 0x33, 0x76,
	0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0xde, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xb9, 0x01, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c,
	0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xaa, 0x03, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xdc, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xc4, 0x01, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c,
	0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb5, 0x01, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x68, 0x75, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63,
	0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x1a, 0xa7, 0x05, 0x0a, 0x17, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xde,
	0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xb9, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62,
	0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73,
	0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a,
	0xaa, 0x03, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xdc, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xc4, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62,
	0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73,
	0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0xb5, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77,
	0x6e, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x1a, 0xad, 0x05, 0x0a,
	0x19, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xe0, 0x01, 0x0a, 0x0c, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0xbb, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xac, 0x03,
	0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0xde, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0xc6, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66,
	0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0xb5, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77,
	0x6e, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x1a, 0xad, 0x05, 0x0a,
	0x19, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xe0, 0x01, 0x0a, 0x0c, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0xbb, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xac, 0x03,
	0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0xde, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0xc6, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66,
	0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0xb5, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77,
	0x6e, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x1a, 0x8f, 0x05, 0x0a,
	0x0f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x76, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0xd6, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xb1, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69,
	0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66,
	0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69,
	0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x32, 0x76, 0x70, 0x6e,
	0x5f, 0x76, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xa2, 0x03, 0x0a, 0x11, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0xd4, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0xbc, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x76, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb5, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64,
	0x6f, 0x77, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x1a, 0x8f,
	0x05, 0x0a, 0x0f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0xd6, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xb1, 0x01, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61,
	0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x32, 0x76,
	0x70, 0x6e, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xa2, 0x03, 0x0a, 0x11,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0xd4, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0xbc, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb5, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d,
	0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61,
	0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72,
	0x1a, 0xf2, 0x03, 0x0a, 0x15, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x93, 0x01, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xaa, 0x02, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x4f, 0x6e, 0x6c,
	0x79, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x65,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x3e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x1a, 0x95, 0x02, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xa7, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x8f, 0x01, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x56, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x33, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x34, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0xe3, 0x90,
	0x01, 0x0a, 0x10, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x76, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69,
	0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x09, 0x70, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0xb4, 0x8f, 0x01,
	0x0a, 0x0f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x2d, 0x0a, 0x0f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08,
	0x01, 0x52, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x99, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x81, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x9c, 0x01, 0x0a,
	0x06, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x82,
	0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x09,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x85, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0xb3, 0x01, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x8a, 0x01,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0xb6, 0x01, 0x0a, 0x0f, 0x6c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x9b, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x8b, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0xb0, 0x01, 0x0a, 0x0d, 0x65, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x68, 0x6f, 0x70, 0x18, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x89, 0x01, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68,
	0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x65, 0x62, 0x67, 0x70, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x68, 0x6f, 0x70, 0x12, 0xb6, 0x01, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x8b, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0xb5,
	0x01, 0x0a, 0x0f, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x8b, 0x01, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e,
	0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x61, 0x73, 0x50, 0x61, 0x74, 0x68, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xbe, 0x01, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x9f, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x8e, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x75, 0x73,
	0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x10, 0x75, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0xa4, 0x01, 0x0a, 0x09, 0x61, 0x66, 0x69, 0x5f,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x85, 0x01, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x12, 0xb9,
	0x01, 0x0a, 0x10, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x8c, 0x01, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x67, 0x72, 0x61, 0x63, 0x65,
	0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0xad, 0x01, 0x0a, 0x0c, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0xab, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x88, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0xd3, 0x01, 0x0a, 0x19, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x95, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62,
	0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x17, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x1a, 0xee, 0x02, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x41, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x61, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x41, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x70, 0x5f,
	0x64, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x38, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x70, 0x44, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x65, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x52, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x1a, 0xfb, 0x02, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0xa5, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x8d, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x69, 0x6d, 0x65,
	0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xc3, 0x01, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x33, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6b, 0x65,
	0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x44, 0x0a, 0x1e, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x36, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x1c, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a,
	0xd0, 0x02, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x90, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x92, 0x01,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x63, 0x70, 0x5f, 0x6d, 0x73, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74,
	0x63, 0x70, 0x4d, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x74, 0x75, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x74,
	0x75, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x1a, 0xff, 0x01, 0x0a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xad, 0x01, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x95, 0x01, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x65, 0x61,
	0x74, 0x5f, 0x61, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x74, 0x72, 0x65, 0x61, 0x74, 0x41, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x1a, 0x92, 0x02, 0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xae, 0x01,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x96,
	0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x49,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x1a,
	0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x6c, 0x6f, 0x67, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0x8e, 0x02, 0x0a, 0x12, 0x65, 0x62,
	0x67, 0x70, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0xac, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x94, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x62, 0x67, 0x70, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0x49, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x68, 0x6f, 0x70, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x54, 0x74, 0x6c, 0x1a, 0xc8, 0x02, 0x0a, 0x14, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0xae, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x96, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x7f, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x16, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0xd5, 0x02, 0x0a, 0x14, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xae,
	0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x96, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62,
	0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0x8b, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x73, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x77, 0x6e, 0x41, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x61, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x50, 0x65, 0x65, 0x72, 0x41, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x65, 0x65, 0x72, 0x41, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x81, 0x09,
	0x0a, 0x17, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xb1, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x99, 0x01, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xae, 0x01,
	0x0a, 0x04, 0x65, 0x62, 0x67, 0x70, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x98, 0x01,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x65,
	0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x65, 0x62, 0x67, 0x70, 0x12, 0xae,
	0x01, 0x0a, 0x04, 0x69, 0x62, 0x67, 0x70, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x98,
	0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x69, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x69, 0x62, 0x67, 0x70, 0x1a,
	0x26, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xa8, 0x02, 0x0a, 0x09, 0x65, 0x62, 0x67, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xbb, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xa3, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62,
	0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x75, 0x73, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x65, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0x5d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x41, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x1a, 0xfc, 0x01, 0x0a, 0x09, 0x69, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0xbb, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0xa3, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x69, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x31,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x1a, 0xf0, 0x55, 0x0a, 0x0e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x08, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66,
	0x69, 0x18, 0x33, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x93, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f,
	0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x07, 0x61,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x1a, 0xab, 0x54, 0x0a, 0x0d, 0x61, 0x66, 0x69, 0x5f, 0x73,
	0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0d, 0x61, 0x66, 0x69, 0x5f,
	0x73, 0x61, 0x66, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x61, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0xd6, 0x01, 0x0a, 0x10, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0xa9, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62,
	0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x67, 0x72, 0x61,
	0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0xb6, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x9e, 0x01,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xc1, 0x01, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xa2, 0x01, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x61, 0x64, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0xca, 0x01, 0x0a, 0x0c, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0xa5, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61,
	0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x55,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xca, 0x01, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xa5,
	0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x12, 0xe1, 0x01, 0x0a, 0x14, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x9c, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0xad, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69,
	0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f,
	0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x12, 0x69, 0x70, 0x76, 0x34, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xe1, 0x01, 0x0a, 0x14, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x18, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xad, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f,
	0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x12, 0x69, 0x70, 0x76, 0x36, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xdb, 0x01, 0x0a, 0x12,
	0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x18, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xab, 0x01, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e,
	0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x10, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x49, 0x70,
	0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xdb, 0x01, 0x0a, 0x12, 0x6c, 0x33,
	0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x18, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xab, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f,
	0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x33,
	0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x10, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x36,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xe1, 0x01, 0x0a, 0x14, 0x6c, 0x33, 0x76, 0x70,
	0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xad, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f,
	0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x33,
	0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x12, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x49, 0x70,
	0x76, 0x34, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xe1, 0x01, 0x0a, 0x14,
	0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x18, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xad, 0x01, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x12, 0x6c, 0x33, 0x76,
	0x70, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12,
	0xc4, 0x01, 0x0a, 0x0a, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x76, 0x70, 0x6c, 0x73, 0x18, 0xa2,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xa3, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67,
	0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61,
	0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66,
	0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x32, 0x76, 0x70,
	0x6e, 0x5f, 0x76, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6c, 0x32, 0x76,
	0x70, 0x6e, 0x56, 0x70, 0x6c, 0x73, 0x12, 0xc4, 0x01, 0x0a, 0x0a, 0x6c, 0x32, 0x76, 0x70, 0x6e,
	0x5f, 0x65, 0x76, 0x70, 0x6e, 0x18, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xa3, 0x01, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x45, 0x76, 0x70, 0x6e, 0x1a, 0x8e, 0x02,
	0x0a, 0x15, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xcc, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xb4, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69,
	0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x67,
	0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x26, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xf2,
	0x03, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0xca, 0x01, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xac, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f,
	0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x51, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x1a, 0x79, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x40, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x1a, 0xe6, 0x02, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xc5, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xad, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f,
	0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x64,
	0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8b,
	0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73,
	0x65, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62,
	0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x9d, 0x05, 0x0a,
	0x11, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0xdc, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xb7, 0x01, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x1a, 0xa8, 0x03, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xda, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xc2, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69,
	0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0xb5, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77,
	0x6e, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x1a, 0x9d, 0x05, 0x0a,
	0x11, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0xdc, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xb7, 0x01, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x1a, 0xa8, 0x03, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xda, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xc2, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69,
	0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0xb5, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77,
	0x6e, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x1a, 0xb5, 0x05, 0x0a,
	0x19, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xe4, 0x01, 0x0a, 0x0c, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0xbf, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73,
	0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x1a, 0xb0, 0x03, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xe2, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xca, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69,
	0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb5, 0x01, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f,
	0x70, 0x63, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x68, 0x75, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x1a, 0xb5, 0x05, 0x0a, 0x19, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0xe4, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xbf, 0x01, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xb0, 0x03, 0x0a, 0x11, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0xe2, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0xca, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66,
	0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0xb5, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77,
	0x6e, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x1a, 0xaf, 0x05, 0x0a,
	0x17, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xe2, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0xbd, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66,
	0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xae, 0x03,
	0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0xe0, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0xc8, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66,
	0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69,
	0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x33, 0x76, 0x70, 0x6e,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb5, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64,
	0x6f, 0x77, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x1a, 0xaf,
	0x05, 0x0a, 0x17, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xe2, 0x01, 0x0a, 0x0c, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0xbd, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73,
	0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a,
	0xae, 0x03, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xe0, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xc8, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62,
	0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61,
	0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x33, 0x76,
	0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb5, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d,
	0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61,
	0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72,
	0x1a, 0xb5, 0x05, 0x0a, 0x19, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xe4,
	0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xbf, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62,
	0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61,
	0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x33, 0x76,
	0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xb0, 0x03, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xe2, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xca, 0x01, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0xb5, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65,
	0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x34, 0x0a,
	0x16, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x50, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x1a, 0xb5, 0x05, 0x0a, 0x19, 0x6c, 0x33, 0x76,
	0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xe4, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xbf,
	0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xb0, 0x03,
	0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0xe2, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0xca, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66,
	0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69,
	0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x33, 0x76, 0x70, 0x6e,
	0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb5, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d,
	0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61,
	0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72,
	0x1a, 0x97, 0x05, 0x0a, 0x0f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x76, 0x70, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0xda, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xb5, 0x01, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x76, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x1a, 0xa6, 0x03, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xd8, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xc0, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69,
	0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c,
	0x32, 0x76, 0x70, 0x6e, 0x5f, 0x76, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0xb5, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12,
	0x34, 0x0a, 0x16, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x50, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x1a, 0x97, 0x05, 0x0a, 0x0f, 0x6c,
	0x32, 0x76, 0x70, 0x6e, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xda,
	0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xb5, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62,
	0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61,
	0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x32, 0x76,
	0x70, 0x6e, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xa6, 0x03, 0x0a, 0x11,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0xd8, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0xc0, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73,
	0x61, 0x66, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x65,
	0x76, 0x70, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb5, 0x01, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f,
	0x70, 0x63, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x68, 0x75, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x1a, 0xe2, 0x02, 0x0a, 0x15, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75,
	0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xaf,
	0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x97, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62,
	0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75,
	0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0x96, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x6c, 0x70,
	0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68,
	0x65, 0x6c, 0x70, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x1a, 0x99, 0x02, 0x0a, 0x11, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0xab, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x93, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x56, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x33, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x34, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0xcc, 0x04, 0x0a, 0x1e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xeb, 0x01, 0x0a, 0x17, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x33, 0x20, 0x03, 0x28, 0x0b, 0x32, 0xb2, 0x01, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x6e, 0x69, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x15, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x1a, 0xbb, 0x02, 0x0a, 0x1c, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0xd5, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xbd, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f,
	0x62, 0x67, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x24,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x3a, 0x7b, 0x0a, 0x21, 0x6a, 0x6e, 0x70, 0x72, 0x5f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e,
	0x69, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x65, 0x78, 0x74, 0x12, 0x17, 0x2e, 0x4a, 0x75, 0x6e, 0x69,
	0x70, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x73, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x69, 0x5f,
	0x62, 0x67, 0x70, 0x52, 0x1c, 0x6a, 0x6e, 0x70, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e, 0x69, 0x42, 0x67, 0x70, 0x45, 0x78,
	0x74, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
})

var (
	file_rpd_ni_bgp_oc_proto_rawDescOnce sync.Once
	file_rpd_ni_bgp_oc_proto_rawDescData []byte
)

func file_rpd_ni_bgp_oc_proto_rawDescGZIP() []byte {
	file_rpd_ni_bgp_oc_proto_rawDescOnce.Do(func() {
		file_rpd_ni_bgp_oc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_rpd_ni_bgp_oc_proto_rawDesc), len(file_rpd_ni_bgp_oc_proto_rawDesc)))
	})
	return file_rpd_ni_bgp_oc_proto_rawDescData
}

var file_rpd_ni_bgp_oc_proto_msgTypes = make([]protoimpl.MessageInfo, 188)
var file_rpd_ni_bgp_oc_proto_goTypes = []any{
	(*NetworkInstancesNiBgp)(nil),                                                                                                                                                    // 0: network_instances_ni_bgp
	(*NetworkInstancesNiBgpNetworkInstanceList)(nil),                                                                                                                                 // 1: network_instances_ni_bgp.network_instance_list
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsType)(nil),                                                                                                                    // 2: network_instances_ni_bgp.network_instance_list.protocols_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolType)(nil),                                                                                                        // 3: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpType)(nil),                                                                                                 // 4: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalType)(nil),                                                                                       // 5: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsType)(nil),                                                                                    // 6: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsType)(nil),                                                                                   // 7: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeStateType)(nil),                                                                              // 8: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeRouteSelectionOptionsType)(nil),                                                              // 9: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.route_selection_options_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeConfederationType)(nil),                                                                      // 10: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.confederation_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeGracefulRestartType)(nil),                                                                    // 11: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.graceful_restart_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeApplyPolicyType)(nil),                                                                        // 12: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.apply_policy_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisType)(nil),                                                                           // 13: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeRouteSelectionOptionsTypeStateType)(nil),                                                     // 14: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.route_selection_options_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeConfederationTypeStateType)(nil),                                                             // 15: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.confederation_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeGracefulRestartTypeStateType)(nil),                                                           // 16: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.graceful_restart_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeApplyPolicyTypeStateType)(nil),                                                               // 17: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.apply_policy_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiList)(nil),                                                                // 18: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListGracefulRestartType)(nil),                                             // 19: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.graceful_restart_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListStateType)(nil),                                                       // 20: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListAddPathsType)(nil),                                                    // 21: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.add_paths_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastType)(nil),                                                 // 22: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv4_unicast_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastType)(nil),                                                 // 23: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv6_unicast_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastType)(nil),                                          // 24: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv4_labeled_unicast_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastType)(nil),                                          // 25: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv6_labeled_unicast_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType)(nil),                                            // 26: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv4_unicast_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType)(nil),                                            // 27: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv6_unicast_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType)(nil),                                          // 28: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv4_multicast_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType)(nil),                                          // 29: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv6_multicast_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsType)(nil),                                                   // 30: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l2vpn_vpls_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnType)(nil),                                                   // 31: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l2vpn_evpn_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListGracefulRestartTypeStateType)(nil),                                    // 32: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.graceful_restart_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListAddPathsTypeStateType)(nil),                                           // 33: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.add_paths_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType)(nil),                                  // 34: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv4_unicast_type.prefix_limit_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType)(nil),                         // 35: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv4_unicast_type.prefix_limit_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType)(nil),                                  // 36: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv6_unicast_type.prefix_limit_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType)(nil),                         // 37: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv6_unicast_type.prefix_limit_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType)(nil),                           // 38: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv4_labeled_unicast_type.prefix_limit_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType)(nil),                  // 39: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv4_labeled_unicast_type.prefix_limit_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType)(nil),                           // 40: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv6_labeled_unicast_type.prefix_limit_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType)(nil),                  // 41: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv6_labeled_unicast_type.prefix_limit_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType)(nil),                             // 42: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv4_unicast_type.prefix_limit_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType)(nil),                    // 43: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv4_unicast_type.prefix_limit_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType)(nil),                             // 44: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv6_unicast_type.prefix_limit_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType)(nil),                    // 45: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv6_unicast_type.prefix_limit_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType)(nil),                           // 46: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv4_multicast_type.prefix_limit_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType)(nil),                  // 47: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv4_multicast_type.prefix_limit_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType)(nil),                           // 48: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv6_multicast_type.prefix_limit_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType)(nil),                  // 49: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv6_multicast_type.prefix_limit_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType)(nil),                                    // 50: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l2vpn_vpls_type.prefix_limit_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType)(nil),                           // 51: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l2vpn_vpls_type.prefix_limit_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType)(nil),                                    // 52: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l2vpn_evpn_type.prefix_limit_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeGlobalTypeAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType)(nil),                           // 53: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l2vpn_evpn_type.prefix_limit_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborList)(nil),                                                                        // 54: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateType)(nil),                                                               // 55: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTimersType)(nil),                                                              // 56: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.timers_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTransportType)(nil),                                                           // 57: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.transport_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListErrorHandlingType)(nil),                                                       // 58: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.error_handling_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListLoggingOptionsType)(nil),                                                      // 59: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.logging_options_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListEbgpMultihopType)(nil),                                                        // 60: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.ebgp_multihop_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListRouteReflectorType)(nil),                                                      // 61: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.route_reflector_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAsPathOptionsType)(nil),                                                       // 62: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.as_path_options_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsType)(nil),                                                    // 63: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.use_multiple_paths_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisType)(nil),                                                            // 64: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListGracefulRestartType)(nil),                                                     // 65: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.graceful_restart_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListApplyPolicyType)(nil),                                                         // 66: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.apply_policy_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesType)(nil),                                                   // 67: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.state_type.messages_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeQueuesType)(nil),                                                     // 68: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.state_type.queues_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesTypeSentType)(nil),                                           // 69: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.state_type.messages_type.sent_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListStateTypeMessagesTypeReceivedType)(nil),                                       // 70: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.state_type.messages_type.received_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTimersTypeStateType)(nil),                                                     // 71: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.timers_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListTransportTypeStateType)(nil),                                                  // 72: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.transport_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListErrorHandlingTypeStateType)(nil),                                              // 73: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.error_handling_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListLoggingOptionsTypeStateType)(nil),                                             // 74: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.logging_options_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListEbgpMultihopTypeStateType)(nil),                                               // 75: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.ebgp_multihop_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListRouteReflectorTypeStateType)(nil),                                             // 76: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.route_reflector_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAsPathOptionsTypeStateType)(nil),                                              // 77: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.as_path_options_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeStateType)(nil),                                           // 78: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.use_multiple_paths_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeEbgpType)(nil),                                            // 79: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.use_multiple_paths_type.ebgp_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListUseMultiplePathsTypeEbgpTypeStateType)(nil),                                   // 80: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.use_multiple_paths_type.ebgp_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiList)(nil),                                                 // 81: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListGracefulRestartType)(nil),                              // 82: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.graceful_restart_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateType)(nil),                                        // 83: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListAddPathsType)(nil),                                     // 84: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.add_paths_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastType)(nil),                                  // 85: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv4_unicast_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastType)(nil),                                  // 86: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv6_unicast_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastType)(nil),                           // 87: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv4_labeled_unicast_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastType)(nil),                           // 88: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv6_labeled_unicast_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType)(nil),                             // 89: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_unicast_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType)(nil),                             // 90: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_unicast_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType)(nil),                           // 91: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_multicast_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType)(nil),                           // 92: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_multicast_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsType)(nil),                                    // 93: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l2vpn_vpls_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnType)(nil),                                    // 94: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l2vpn_evpn_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListGracefulRestartTypeStateType)(nil),                     // 95: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.graceful_restart_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateTypePrefixesType)(nil),                            // 96: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.state_type.prefixes_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListStateTypeQueuesType)(nil),                              // 97: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.state_type.queues_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListAddPathsTypeStateType)(nil),                            // 98: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.add_paths_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType)(nil),                   // 99: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv4_unicast_type.prefix_limit_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType)(nil),          // 100: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv4_unicast_type.prefix_limit_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType)(nil),                   // 101: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv6_unicast_type.prefix_limit_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType)(nil),          // 102: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv6_unicast_type.prefix_limit_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType)(nil),            // 103: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv4_labeled_unicast_type.prefix_limit_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType)(nil),   // 104: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv4_labeled_unicast_type.prefix_limit_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType)(nil),            // 105: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv6_labeled_unicast_type.prefix_limit_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType)(nil),   // 106: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv6_labeled_unicast_type.prefix_limit_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType)(nil),              // 107: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_unicast_type.prefix_limit_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType)(nil),     // 108: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_unicast_type.prefix_limit_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType)(nil),              // 109: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_unicast_type.prefix_limit_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType)(nil),     // 110: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_unicast_type.prefix_limit_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType)(nil),            // 111: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_multicast_type.prefix_limit_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType)(nil),   // 112: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_multicast_type.prefix_limit_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType)(nil),            // 113: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_multicast_type.prefix_limit_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType)(nil),   // 114: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_multicast_type.prefix_limit_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType)(nil),                     // 115: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l2vpn_vpls_type.prefix_limit_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType)(nil),            // 116: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l2vpn_vpls_type.prefix_limit_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType)(nil),                     // 117: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l2vpn_evpn_type.prefix_limit_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType)(nil),            // 118: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l2vpn_evpn_type.prefix_limit_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListGracefulRestartTypeStateType)(nil),                                            // 119: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.graceful_restart_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypeNeighborsTypeNeighborListApplyPolicyTypeStateType)(nil),                                                // 120: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.apply_policy_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupList)(nil),                                                                      // 121: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListStateType)(nil),                                                             // 122: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTimersType)(nil),                                                            // 123: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.timers_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTransportType)(nil),                                                         // 124: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.transport_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListErrorHandlingType)(nil),                                                     // 125: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.error_handling_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListLoggingOptionsType)(nil),                                                    // 126: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.logging_options_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListEbgpMultihopType)(nil),                                                      // 127: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.ebgp_multihop_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListRouteReflectorType)(nil),                                                    // 128: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.route_reflector_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAsPathOptionsType)(nil),                                                     // 129: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.as_path_options_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsType)(nil),                                                  // 130: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.use_multiple_paths_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisType)(nil),                                                          // 131: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListGracefulRestartType)(nil),                                                   // 132: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.graceful_restart_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListApplyPolicyType)(nil),                                                       // 133: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.apply_policy_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesType)(nil),                                           // 134: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.dynamic_neighbor_prefixes_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTimersTypeStateType)(nil),                                                   // 135: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.timers_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListTransportTypeStateType)(nil),                                                // 136: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.transport_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListErrorHandlingTypeStateType)(nil),                                            // 137: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.error_handling_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListLoggingOptionsTypeStateType)(nil),                                           // 138: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.logging_options_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListEbgpMultihopTypeStateType)(nil),                                             // 139: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.ebgp_multihop_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListRouteReflectorTypeStateType)(nil),                                           // 140: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.route_reflector_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAsPathOptionsTypeStateType)(nil),                                            // 141: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.as_path_options_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeStateType)(nil),                                         // 142: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.use_multiple_paths_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeEbgpType)(nil),                                          // 143: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.use_multiple_paths_type.ebgp_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeIbgpType)(nil),                                          // 144: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.use_multiple_paths_type.ibgp_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeEbgpTypeStateType)(nil),                                 // 145: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.use_multiple_paths_type.ebgp_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListUseMultiplePathsTypeIbgpTypeStateType)(nil),                                 // 146: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.use_multiple_paths_type.ibgp_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiList)(nil),                                               // 147: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListGracefulRestartType)(nil),                            // 148: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.graceful_restart_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListStateType)(nil),                                      // 149: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListAddPathsType)(nil),                                   // 150: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.add_paths_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastType)(nil),                                // 151: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv4_unicast_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastType)(nil),                                // 152: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv6_unicast_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastType)(nil),                         // 153: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv4_labeled_unicast_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastType)(nil),                         // 154: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv6_labeled_unicast_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastType)(nil),                           // 155: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_unicast_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastType)(nil),                           // 156: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_unicast_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastType)(nil),                         // 157: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_multicast_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastType)(nil),                         // 158: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_multicast_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsType)(nil),                                  // 159: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l2vpn_vpls_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnType)(nil),                                  // 160: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l2vpn_evpn_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListGracefulRestartTypeStateType)(nil),                   // 161: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.graceful_restart_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListStateTypePrefixesType)(nil),                          // 162: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.state_type.prefixes_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListAddPathsTypeStateType)(nil),                          // 163: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.add_paths_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitType)(nil),                 // 164: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv4_unicast_type.prefix_limit_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4UnicastTypePrefixLimitTypeStateType)(nil),        // 165: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv4_unicast_type.prefix_limit_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitType)(nil),                 // 166: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv6_unicast_type.prefix_limit_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6UnicastTypePrefixLimitTypeStateType)(nil),        // 167: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv6_unicast_type.prefix_limit_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitType)(nil),          // 168: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv4_labeled_unicast_type.prefix_limit_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv4LabeledUnicastTypePrefixLimitTypeStateType)(nil), // 169: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv4_labeled_unicast_type.prefix_limit_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitType)(nil),          // 170: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv6_labeled_unicast_type.prefix_limit_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListIpv6LabeledUnicastTypePrefixLimitTypeStateType)(nil), // 171: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv6_labeled_unicast_type.prefix_limit_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitType)(nil),            // 172: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_unicast_type.prefix_limit_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4UnicastTypePrefixLimitTypeStateType)(nil),   // 173: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_unicast_type.prefix_limit_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitType)(nil),            // 174: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_unicast_type.prefix_limit_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6UnicastTypePrefixLimitTypeStateType)(nil),   // 175: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_unicast_type.prefix_limit_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitType)(nil),          // 176: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_multicast_type.prefix_limit_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv4MulticastTypePrefixLimitTypeStateType)(nil), // 177: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_multicast_type.prefix_limit_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitType)(nil),          // 178: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_multicast_type.prefix_limit_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL3VpnIpv6MulticastTypePrefixLimitTypeStateType)(nil), // 179: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_multicast_type.prefix_limit_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitType)(nil),                   // 180: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l2vpn_vpls_type.prefix_limit_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnVplsTypePrefixLimitTypeStateType)(nil),          // 181: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l2vpn_vpls_type.prefix_limit_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitType)(nil),                   // 182: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l2vpn_evpn_type.prefix_limit_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListAfiSafisTypeAfiSafiListL2VpnEvpnTypePrefixLimitTypeStateType)(nil),          // 183: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l2vpn_evpn_type.prefix_limit_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListGracefulRestartTypeStateType)(nil),                                          // 184: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.graceful_restart_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListApplyPolicyTypeStateType)(nil),                                              // 185: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.apply_policy_type.state_type
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesTypeDynamicNeighborPrefixList)(nil),                  // 186: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.dynamic_neighbor_prefixes_type.dynamic_neighbor_prefix_list
	(*NetworkInstancesNiBgpNetworkInstanceListProtocolsTypeProtocolTypeBgpTypePeerGroupsTypePeerGroupListDynamicNeighborPrefixesTypeDynamicNeighborPrefixListStateType)(nil),         // 187: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.dynamic_neighbor_prefixes_type.dynamic_neighbor_prefix_list.state_type
	(*JuniperNetworksSensors)(nil), // 188: JuniperNetworksSensors
}
var file_rpd_ni_bgp_oc_proto_depIdxs = []int32{
	1,   // 0: network_instances_ni_bgp.network_instance:type_name -> network_instances_ni_bgp.network_instance_list
	2,   // 1: network_instances_ni_bgp.network_instance_list.protocols:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type
	3,   // 2: network_instances_ni_bgp.network_instance_list.protocols_type.protocol:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type
	4,   // 3: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type
	5,   // 4: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type
	6,   // 5: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type
	7,   // 6: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type
	8,   // 7: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.state_type
	9,   // 8: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.route_selection_options:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.route_selection_options_type
	10,  // 9: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.confederation:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.confederation_type
	11,  // 10: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.graceful_restart:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.graceful_restart_type
	12,  // 11: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.apply_policy:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.apply_policy_type
	13,  // 12: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type
	54,  // 13: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list
	121, // 14: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list
	14,  // 15: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.route_selection_options_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.route_selection_options_type.state_type
	15,  // 16: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.confederation_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.confederation_type.state_type
	16,  // 17: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.graceful_restart_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.graceful_restart_type.state_type
	17,  // 18: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.apply_policy_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.apply_policy_type.state_type
	18,  // 19: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list
	19,  // 20: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.graceful_restart:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.graceful_restart_type
	20,  // 21: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.state_type
	21,  // 22: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.add_paths:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.add_paths_type
	22,  // 23: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv4_unicast:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv4_unicast_type
	23,  // 24: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv6_unicast:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv6_unicast_type
	24,  // 25: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv4_labeled_unicast:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv4_labeled_unicast_type
	25,  // 26: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv6_labeled_unicast:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv6_labeled_unicast_type
	26,  // 27: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv4_unicast:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv4_unicast_type
	27,  // 28: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv6_unicast:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv6_unicast_type
	28,  // 29: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv4_multicast:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv4_multicast_type
	29,  // 30: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv6_multicast:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv6_multicast_type
	30,  // 31: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l2vpn_vpls:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l2vpn_vpls_type
	31,  // 32: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l2vpn_evpn:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l2vpn_evpn_type
	32,  // 33: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.graceful_restart_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.graceful_restart_type.state_type
	33,  // 34: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.add_paths_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.add_paths_type.state_type
	34,  // 35: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv4_unicast_type.prefix_limit:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv4_unicast_type.prefix_limit_type
	36,  // 36: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv6_unicast_type.prefix_limit:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv6_unicast_type.prefix_limit_type
	38,  // 37: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv4_labeled_unicast_type.prefix_limit:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv4_labeled_unicast_type.prefix_limit_type
	40,  // 38: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv6_labeled_unicast_type.prefix_limit:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv6_labeled_unicast_type.prefix_limit_type
	42,  // 39: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv4_unicast_type.prefix_limit:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv4_unicast_type.prefix_limit_type
	44,  // 40: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv6_unicast_type.prefix_limit:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv6_unicast_type.prefix_limit_type
	46,  // 41: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv4_multicast_type.prefix_limit:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv4_multicast_type.prefix_limit_type
	48,  // 42: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv6_multicast_type.prefix_limit:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv6_multicast_type.prefix_limit_type
	50,  // 43: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l2vpn_vpls_type.prefix_limit:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l2vpn_vpls_type.prefix_limit_type
	52,  // 44: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l2vpn_evpn_type.prefix_limit:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l2vpn_evpn_type.prefix_limit_type
	35,  // 45: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv4_unicast_type.prefix_limit_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv4_unicast_type.prefix_limit_type.state_type
	37,  // 46: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv6_unicast_type.prefix_limit_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv6_unicast_type.prefix_limit_type.state_type
	39,  // 47: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv4_labeled_unicast_type.prefix_limit_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv4_labeled_unicast_type.prefix_limit_type.state_type
	41,  // 48: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv6_labeled_unicast_type.prefix_limit_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.ipv6_labeled_unicast_type.prefix_limit_type.state_type
	43,  // 49: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv4_unicast_type.prefix_limit_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv4_unicast_type.prefix_limit_type.state_type
	45,  // 50: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv6_unicast_type.prefix_limit_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv6_unicast_type.prefix_limit_type.state_type
	47,  // 51: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv4_multicast_type.prefix_limit_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv4_multicast_type.prefix_limit_type.state_type
	49,  // 52: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv6_multicast_type.prefix_limit_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l3vpn_ipv6_multicast_type.prefix_limit_type.state_type
	51,  // 53: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l2vpn_vpls_type.prefix_limit_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l2vpn_vpls_type.prefix_limit_type.state_type
	53,  // 54: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l2vpn_evpn_type.prefix_limit_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.global_type.afi_safis_type.afi_safi_list.l2vpn_evpn_type.prefix_limit_type.state_type
	55,  // 55: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.state_type
	56,  // 56: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.timers:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.timers_type
	57,  // 57: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.transport:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.transport_type
	58,  // 58: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.error_handling:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.error_handling_type
	59,  // 59: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.logging_options:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.logging_options_type
	60,  // 60: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.ebgp_multihop:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.ebgp_multihop_type
	61,  // 61: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.route_reflector:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.route_reflector_type
	62,  // 62: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.as_path_options:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.as_path_options_type
	63,  // 63: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.use_multiple_paths:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.use_multiple_paths_type
	64,  // 64: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type
	65,  // 65: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.graceful_restart:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.graceful_restart_type
	66,  // 66: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.apply_policy:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.apply_policy_type
	67,  // 67: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.state_type.messages:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.state_type.messages_type
	68,  // 68: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.state_type.queues:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.state_type.queues_type
	71,  // 69: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.timers_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.timers_type.state_type
	72,  // 70: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.transport_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.transport_type.state_type
	73,  // 71: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.error_handling_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.error_handling_type.state_type
	74,  // 72: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.logging_options_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.logging_options_type.state_type
	75,  // 73: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.ebgp_multihop_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.ebgp_multihop_type.state_type
	76,  // 74: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.route_reflector_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.route_reflector_type.state_type
	77,  // 75: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.as_path_options_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.as_path_options_type.state_type
	78,  // 76: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.use_multiple_paths_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.use_multiple_paths_type.state_type
	79,  // 77: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.use_multiple_paths_type.ebgp:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.use_multiple_paths_type.ebgp_type
	81,  // 78: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list
	119, // 79: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.graceful_restart_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.graceful_restart_type.state_type
	120, // 80: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.apply_policy_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.apply_policy_type.state_type
	69,  // 81: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.state_type.messages_type.sent:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.state_type.messages_type.sent_type
	70,  // 82: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.state_type.messages_type.received:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.state_type.messages_type.received_type
	80,  // 83: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.use_multiple_paths_type.ebgp_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.use_multiple_paths_type.ebgp_type.state_type
	82,  // 84: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.graceful_restart:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.graceful_restart_type
	83,  // 85: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.state_type
	84,  // 86: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.add_paths:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.add_paths_type
	85,  // 87: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv4_unicast:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv4_unicast_type
	86,  // 88: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv6_unicast:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv6_unicast_type
	87,  // 89: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv4_labeled_unicast:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv4_labeled_unicast_type
	88,  // 90: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv6_labeled_unicast:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv6_labeled_unicast_type
	89,  // 91: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_unicast:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_unicast_type
	90,  // 92: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_unicast:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_unicast_type
	91,  // 93: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_multicast:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_multicast_type
	92,  // 94: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_multicast:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_multicast_type
	93,  // 95: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l2vpn_vpls:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l2vpn_vpls_type
	94,  // 96: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l2vpn_evpn:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l2vpn_evpn_type
	95,  // 97: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.graceful_restart_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.graceful_restart_type.state_type
	96,  // 98: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.state_type.prefixes:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.state_type.prefixes_type
	97,  // 99: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.state_type.queues:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.state_type.queues_type
	98,  // 100: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.add_paths_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.add_paths_type.state_type
	99,  // 101: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv4_unicast_type.prefix_limit:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv4_unicast_type.prefix_limit_type
	101, // 102: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv6_unicast_type.prefix_limit:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv6_unicast_type.prefix_limit_type
	103, // 103: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv4_labeled_unicast_type.prefix_limit:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv4_labeled_unicast_type.prefix_limit_type
	105, // 104: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv6_labeled_unicast_type.prefix_limit:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv6_labeled_unicast_type.prefix_limit_type
	107, // 105: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_unicast_type.prefix_limit:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_unicast_type.prefix_limit_type
	109, // 106: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_unicast_type.prefix_limit:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_unicast_type.prefix_limit_type
	111, // 107: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_multicast_type.prefix_limit:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_multicast_type.prefix_limit_type
	113, // 108: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_multicast_type.prefix_limit:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_multicast_type.prefix_limit_type
	115, // 109: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l2vpn_vpls_type.prefix_limit:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l2vpn_vpls_type.prefix_limit_type
	117, // 110: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l2vpn_evpn_type.prefix_limit:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l2vpn_evpn_type.prefix_limit_type
	100, // 111: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv4_unicast_type.prefix_limit_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv4_unicast_type.prefix_limit_type.state_type
	102, // 112: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv6_unicast_type.prefix_limit_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv6_unicast_type.prefix_limit_type.state_type
	104, // 113: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv4_labeled_unicast_type.prefix_limit_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv4_labeled_unicast_type.prefix_limit_type.state_type
	106, // 114: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv6_labeled_unicast_type.prefix_limit_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.ipv6_labeled_unicast_type.prefix_limit_type.state_type
	108, // 115: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_unicast_type.prefix_limit_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_unicast_type.prefix_limit_type.state_type
	110, // 116: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_unicast_type.prefix_limit_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_unicast_type.prefix_limit_type.state_type
	112, // 117: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_multicast_type.prefix_limit_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_multicast_type.prefix_limit_type.state_type
	114, // 118: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_multicast_type.prefix_limit_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_multicast_type.prefix_limit_type.state_type
	116, // 119: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l2vpn_vpls_type.prefix_limit_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l2vpn_vpls_type.prefix_limit_type.state_type
	118, // 120: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l2vpn_evpn_type.prefix_limit_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.neighbors_type.neighbor_list.afi_safis_type.afi_safi_list.l2vpn_evpn_type.prefix_limit_type.state_type
	122, // 121: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.state_type
	123, // 122: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.timers:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.timers_type
	124, // 123: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.transport:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.transport_type
	125, // 124: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.error_handling:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.error_handling_type
	126, // 125: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.logging_options:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.logging_options_type
	127, // 126: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.ebgp_multihop:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.ebgp_multihop_type
	128, // 127: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.route_reflector:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.route_reflector_type
	129, // 128: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.as_path_options:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.as_path_options_type
	130, // 129: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.use_multiple_paths:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.use_multiple_paths_type
	131, // 130: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type
	132, // 131: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.graceful_restart:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.graceful_restart_type
	133, // 132: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.apply_policy:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.apply_policy_type
	134, // 133: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.dynamic_neighbor_prefixes:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.dynamic_neighbor_prefixes_type
	135, // 134: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.timers_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.timers_type.state_type
	136, // 135: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.transport_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.transport_type.state_type
	137, // 136: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.error_handling_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.error_handling_type.state_type
	138, // 137: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.logging_options_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.logging_options_type.state_type
	139, // 138: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.ebgp_multihop_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.ebgp_multihop_type.state_type
	140, // 139: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.route_reflector_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.route_reflector_type.state_type
	141, // 140: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.as_path_options_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.as_path_options_type.state_type
	142, // 141: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.use_multiple_paths_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.use_multiple_paths_type.state_type
	143, // 142: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.use_multiple_paths_type.ebgp:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.use_multiple_paths_type.ebgp_type
	144, // 143: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.use_multiple_paths_type.ibgp:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.use_multiple_paths_type.ibgp_type
	147, // 144: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list
	184, // 145: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.graceful_restart_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.graceful_restart_type.state_type
	185, // 146: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.apply_policy_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.apply_policy_type.state_type
	186, // 147: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.dynamic_neighbor_prefixes_type.dynamic_neighbor_prefix:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.dynamic_neighbor_prefixes_type.dynamic_neighbor_prefix_list
	145, // 148: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.use_multiple_paths_type.ebgp_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.use_multiple_paths_type.ebgp_type.state_type
	146, // 149: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.use_multiple_paths_type.ibgp_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.use_multiple_paths_type.ibgp_type.state_type
	148, // 150: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.graceful_restart:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.graceful_restart_type
	149, // 151: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.state_type
	150, // 152: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.add_paths:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.add_paths_type
	151, // 153: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv4_unicast:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv4_unicast_type
	152, // 154: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv6_unicast:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv6_unicast_type
	153, // 155: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv4_labeled_unicast:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv4_labeled_unicast_type
	154, // 156: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv6_labeled_unicast:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv6_labeled_unicast_type
	155, // 157: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_unicast:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_unicast_type
	156, // 158: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_unicast:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_unicast_type
	157, // 159: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_multicast:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_multicast_type
	158, // 160: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_multicast:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_multicast_type
	159, // 161: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l2vpn_vpls:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l2vpn_vpls_type
	160, // 162: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l2vpn_evpn:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l2vpn_evpn_type
	161, // 163: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.graceful_restart_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.graceful_restart_type.state_type
	162, // 164: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.state_type.prefixes:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.state_type.prefixes_type
	163, // 165: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.add_paths_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.add_paths_type.state_type
	164, // 166: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv4_unicast_type.prefix_limit:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv4_unicast_type.prefix_limit_type
	166, // 167: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv6_unicast_type.prefix_limit:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv6_unicast_type.prefix_limit_type
	168, // 168: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv4_labeled_unicast_type.prefix_limit:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv4_labeled_unicast_type.prefix_limit_type
	170, // 169: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv6_labeled_unicast_type.prefix_limit:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv6_labeled_unicast_type.prefix_limit_type
	172, // 170: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_unicast_type.prefix_limit:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_unicast_type.prefix_limit_type
	174, // 171: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_unicast_type.prefix_limit:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_unicast_type.prefix_limit_type
	176, // 172: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_multicast_type.prefix_limit:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_multicast_type.prefix_limit_type
	178, // 173: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_multicast_type.prefix_limit:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_multicast_type.prefix_limit_type
	180, // 174: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l2vpn_vpls_type.prefix_limit:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l2vpn_vpls_type.prefix_limit_type
	182, // 175: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l2vpn_evpn_type.prefix_limit:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l2vpn_evpn_type.prefix_limit_type
	165, // 176: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv4_unicast_type.prefix_limit_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv4_unicast_type.prefix_limit_type.state_type
	167, // 177: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv6_unicast_type.prefix_limit_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv6_unicast_type.prefix_limit_type.state_type
	169, // 178: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv4_labeled_unicast_type.prefix_limit_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv4_labeled_unicast_type.prefix_limit_type.state_type
	171, // 179: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv6_labeled_unicast_type.prefix_limit_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.ipv6_labeled_unicast_type.prefix_limit_type.state_type
	173, // 180: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_unicast_type.prefix_limit_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_unicast_type.prefix_limit_type.state_type
	175, // 181: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_unicast_type.prefix_limit_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_unicast_type.prefix_limit_type.state_type
	177, // 182: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_multicast_type.prefix_limit_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv4_multicast_type.prefix_limit_type.state_type
	179, // 183: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_multicast_type.prefix_limit_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l3vpn_ipv6_multicast_type.prefix_limit_type.state_type
	181, // 184: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l2vpn_vpls_type.prefix_limit_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l2vpn_vpls_type.prefix_limit_type.state_type
	183, // 185: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l2vpn_evpn_type.prefix_limit_type.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.afi_safis_type.afi_safi_list.l2vpn_evpn_type.prefix_limit_type.state_type
	187, // 186: network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.dynamic_neighbor_prefixes_type.dynamic_neighbor_prefix_list.state:type_name -> network_instances_ni_bgp.network_instance_list.protocols_type.protocol_type.bgp_type.peer_groups_type.peer_group_list.dynamic_neighbor_prefixes_type.dynamic_neighbor_prefix_list.state_type
	188, // 187: jnpr_network_instances_ni_bgp_ext:extendee -> JuniperNetworksSensors
	0,   // 188: jnpr_network_instances_ni_bgp_ext:type_name -> network_instances_ni_bgp
	189, // [189:189] is the sub-list for method output_type
	189, // [189:189] is the sub-list for method input_type
	188, // [188:189] is the sub-list for extension type_name
	187, // [187:188] is the sub-list for extension extendee
	0,   // [0:187] is the sub-list for field type_name
}

func init() { file_rpd_ni_bgp_oc_proto_init() }
func file_rpd_ni_bgp_oc_proto_init() {
	if File_rpd_ni_bgp_oc_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_rpd_ni_bgp_oc_proto_rawDesc), len(file_rpd_ni_bgp_oc_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   188,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_rpd_ni_bgp_oc_proto_goTypes,
		DependencyIndexes: file_rpd_ni_bgp_oc_proto_depIdxs,
		MessageInfos:      file_rpd_ni_bgp_oc_proto_msgTypes,
		ExtensionInfos:    file_rpd_ni_bgp_oc_proto_extTypes,
	}.Build()
	File_rpd_ni_bgp_oc_proto = out.File
	file_rpd_ni_bgp_oc_proto_goTypes = nil
	file_rpd_ni_bgp_oc_proto_depIdxs = nil
}
