// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: qmon.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueueMonitor struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	QueueMonitorElementInfo []*QueueMonitorElement `protobuf:"bytes,1,rep,name=queue_monitor_element_info,json=queueMonitorElementInfo" json:"queue_monitor_element_info,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *QueueMonitor) Reset() {
	*x = QueueMonitor{}
	mi := &file_qmon_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueMonitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueMonitor) ProtoMessage() {}

func (x *QueueMonitor) ProtoReflect() protoreflect.Message {
	mi := &file_qmon_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueMonitor.ProtoReflect.Descriptor instead.
func (*QueueMonitor) Descriptor() ([]byte, []int) {
	return file_qmon_proto_rawDescGZIP(), []int{0}
}

func (x *QueueMonitor) GetQueueMonitorElementInfo() []*QueueMonitorElement {
	if x != nil {
		return x.QueueMonitorElementInfo
	}
	return nil
}

// QueueMonitorElement for an interface
type QueueMonitorElement struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// interface name
	IfName *string `protobuf:"bytes,1,req,name=if_name,json=ifName" json:"if_name,omitempty"`
	// parent ae interface name
	ParentAeName *string `protobuf:"bytes,2,opt,name=parent_ae_name,json=parentAeName" json:"parent_ae_name,omitempty"`
	// ingress stats
	QueueMonitorStatsIngress *QueueMonitorDirection `protobuf:"bytes,3,opt,name=queue_monitor_stats_ingress,json=queueMonitorStatsIngress" json:"queue_monitor_stats_ingress,omitempty"`
	// egress stats
	QueueMonitorStatsEgress *QueueMonitorDirection `protobuf:"bytes,4,opt,name=queue_monitor_stats_egress,json=queueMonitorStatsEgress" json:"queue_monitor_stats_egress,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *QueueMonitorElement) Reset() {
	*x = QueueMonitorElement{}
	mi := &file_qmon_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueMonitorElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueMonitorElement) ProtoMessage() {}

func (x *QueueMonitorElement) ProtoReflect() protoreflect.Message {
	mi := &file_qmon_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueMonitorElement.ProtoReflect.Descriptor instead.
func (*QueueMonitorElement) Descriptor() ([]byte, []int) {
	return file_qmon_proto_rawDescGZIP(), []int{1}
}

func (x *QueueMonitorElement) GetIfName() string {
	if x != nil && x.IfName != nil {
		return *x.IfName
	}
	return ""
}

func (x *QueueMonitorElement) GetParentAeName() string {
	if x != nil && x.ParentAeName != nil {
		return *x.ParentAeName
	}
	return ""
}

func (x *QueueMonitorElement) GetQueueMonitorStatsIngress() *QueueMonitorDirection {
	if x != nil {
		return x.QueueMonitorStatsIngress
	}
	return nil
}

func (x *QueueMonitorElement) GetQueueMonitorStatsEgress() *QueueMonitorDirection {
	if x != nil {
		return x.QueueMonitorStatsEgress
	}
	return nil
}

type QueueMonitorDirection struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	QueueMonitorStatsInfo []*QueueMonitorStats   `protobuf:"bytes,1,rep,name=queue_monitor_stats_info,json=queueMonitorStatsInfo" json:"queue_monitor_stats_info,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *QueueMonitorDirection) Reset() {
	*x = QueueMonitorDirection{}
	mi := &file_qmon_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueMonitorDirection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueMonitorDirection) ProtoMessage() {}

func (x *QueueMonitorDirection) ProtoReflect() protoreflect.Message {
	mi := &file_qmon_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueMonitorDirection.ProtoReflect.Descriptor instead.
func (*QueueMonitorDirection) Descriptor() ([]byte, []int) {
	return file_qmon_proto_rawDescGZIP(), []int{2}
}

func (x *QueueMonitorDirection) GetQueueMonitorStatsInfo() []*QueueMonitorStats {
	if x != nil {
		return x.QueueMonitorStatsInfo
	}
	return nil
}

// QueueMonitorStats for a queue
type QueueMonitorStats struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// queue number, 0-7
	QueueNumber *uint32 `protobuf:"varint,1,req,name=queue_number,json=queueNumber" json:"queue_number,omitempty"`
	// queue id, 0-max(16k for version 1)
	QueueId *uint32 `protobuf:"varint,2,req,name=queue_id,json=queueId" json:"queue_id,omitempty"`
	// peak_buffer_occupancy in bytes
	PeakBufferOccupancyBytes *uint32 `protobuf:"varint,3,req,name=peak_buffer_occupancy_bytes,json=peakBufferOccupancyBytes" json:"peak_buffer_occupancy_bytes,omitempty"`
	// (peak_buffer_occupancy/max_queue_size) * 100
	PeakBufferOccupancyPercent *uint32 `protobuf:"varint,4,opt,name=peak_buffer_occupancy_percent,json=peakBufferOccupancyPercent" json:"peak_buffer_occupancy_percent,omitempty"`
	// Count of packets/bytes forwarded
	Packets *uint64 `protobuf:"varint,5,req,name=packets" json:"packets,omitempty"`
	Octets  *uint64 `protobuf:"varint,6,req,name=octets" json:"octets,omitempty"`
	// Count of packets/bytes due to dropped tail/force/error
	TailDropPackets *uint64 `protobuf:"varint,7,req,name=tail_drop_packets,json=tailDropPackets" json:"tail_drop_packets,omitempty"`
	TailDropOctets  *uint64 `protobuf:"varint,8,req,name=tail_drop_octets,json=tailDropOctets" json:"tail_drop_octets,omitempty"`
	// Count of packets/bytes due to WRED color 0
	RedDropPacketsColor_0 *uint64 `protobuf:"varint,9,req,name=red_drop_packets_color_0,json=redDropPacketsColor0" json:"red_drop_packets_color_0,omitempty"`
	RedDropOctetsColor_0  *uint64 `protobuf:"varint,10,req,name=red_drop_octets_color_0,json=redDropOctetsColor0" json:"red_drop_octets_color_0,omitempty"`
	// Count of packets/bytes due to WRED color 1
	RedDropPacketsColor_1 *uint64 `protobuf:"varint,11,req,name=red_drop_packets_color_1,json=redDropPacketsColor1" json:"red_drop_packets_color_1,omitempty"`
	RedDropOctetsColor_1  *uint64 `protobuf:"varint,12,req,name=red_drop_octets_color_1,json=redDropOctetsColor1" json:"red_drop_octets_color_1,omitempty"`
	// Count of packets/bytes due to WRED color 2
	RedDropPacketsColor_2 *uint64 `protobuf:"varint,13,req,name=red_drop_packets_color_2,json=redDropPacketsColor2" json:"red_drop_packets_color_2,omitempty"`
	RedDropOctetsColor_2  *uint64 `protobuf:"varint,14,req,name=red_drop_octets_color_2,json=redDropOctetsColor2" json:"red_drop_octets_color_2,omitempty"`
	// Count of packets/bytes due to WRED color 3
	RedDropPacketsColor_3 *uint64 `protobuf:"varint,15,req,name=red_drop_packets_color_3,json=redDropPacketsColor3" json:"red_drop_packets_color_3,omitempty"`
	RedDropOctetsColor_3  *uint64 `protobuf:"varint,16,req,name=red_drop_octets_color_3,json=redDropOctetsColor3" json:"red_drop_octets_color_3,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *QueueMonitorStats) Reset() {
	*x = QueueMonitorStats{}
	mi := &file_qmon_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueMonitorStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueMonitorStats) ProtoMessage() {}

func (x *QueueMonitorStats) ProtoReflect() protoreflect.Message {
	mi := &file_qmon_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueMonitorStats.ProtoReflect.Descriptor instead.
func (*QueueMonitorStats) Descriptor() ([]byte, []int) {
	return file_qmon_proto_rawDescGZIP(), []int{3}
}

func (x *QueueMonitorStats) GetQueueNumber() uint32 {
	if x != nil && x.QueueNumber != nil {
		return *x.QueueNumber
	}
	return 0
}

func (x *QueueMonitorStats) GetQueueId() uint32 {
	if x != nil && x.QueueId != nil {
		return *x.QueueId
	}
	return 0
}

func (x *QueueMonitorStats) GetPeakBufferOccupancyBytes() uint32 {
	if x != nil && x.PeakBufferOccupancyBytes != nil {
		return *x.PeakBufferOccupancyBytes
	}
	return 0
}

func (x *QueueMonitorStats) GetPeakBufferOccupancyPercent() uint32 {
	if x != nil && x.PeakBufferOccupancyPercent != nil {
		return *x.PeakBufferOccupancyPercent
	}
	return 0
}

func (x *QueueMonitorStats) GetPackets() uint64 {
	if x != nil && x.Packets != nil {
		return *x.Packets
	}
	return 0
}

func (x *QueueMonitorStats) GetOctets() uint64 {
	if x != nil && x.Octets != nil {
		return *x.Octets
	}
	return 0
}

func (x *QueueMonitorStats) GetTailDropPackets() uint64 {
	if x != nil && x.TailDropPackets != nil {
		return *x.TailDropPackets
	}
	return 0
}

func (x *QueueMonitorStats) GetTailDropOctets() uint64 {
	if x != nil && x.TailDropOctets != nil {
		return *x.TailDropOctets
	}
	return 0
}

func (x *QueueMonitorStats) GetRedDropPacketsColor_0() uint64 {
	if x != nil && x.RedDropPacketsColor_0 != nil {
		return *x.RedDropPacketsColor_0
	}
	return 0
}

func (x *QueueMonitorStats) GetRedDropOctetsColor_0() uint64 {
	if x != nil && x.RedDropOctetsColor_0 != nil {
		return *x.RedDropOctetsColor_0
	}
	return 0
}

func (x *QueueMonitorStats) GetRedDropPacketsColor_1() uint64 {
	if x != nil && x.RedDropPacketsColor_1 != nil {
		return *x.RedDropPacketsColor_1
	}
	return 0
}

func (x *QueueMonitorStats) GetRedDropOctetsColor_1() uint64 {
	if x != nil && x.RedDropOctetsColor_1 != nil {
		return *x.RedDropOctetsColor_1
	}
	return 0
}

func (x *QueueMonitorStats) GetRedDropPacketsColor_2() uint64 {
	if x != nil && x.RedDropPacketsColor_2 != nil {
		return *x.RedDropPacketsColor_2
	}
	return 0
}

func (x *QueueMonitorStats) GetRedDropOctetsColor_2() uint64 {
	if x != nil && x.RedDropOctetsColor_2 != nil {
		return *x.RedDropOctetsColor_2
	}
	return 0
}

func (x *QueueMonitorStats) GetRedDropPacketsColor_3() uint64 {
	if x != nil && x.RedDropPacketsColor_3 != nil {
		return *x.RedDropPacketsColor_3
	}
	return 0
}

func (x *QueueMonitorStats) GetRedDropOctetsColor_3() uint64 {
	if x != nil && x.RedDropOctetsColor_3 != nil {
		return *x.RedDropOctetsColor_3
	}
	return 0
}

var file_qmon_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*QueueMonitor)(nil),
		Field:         15,
		Name:          "jnpr_qmon_ext",
		Tag:           "bytes,15,opt,name=jnpr_qmon_ext",
		Filename:      "qmon.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional QueueMonitor jnpr_qmon_ext = 15;
	E_JnprQmonExt = &file_qmon_proto_extTypes[0]
)

var File_qmon_proto protoreflect.FileDescriptor

var file_qmon_proto_rawDesc = string([]byte{
	0x0a, 0x0a, 0x71, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x70, 0x62,
	0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x69, 0x0a, 0x0c,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x59, 0x0a, 0x1a,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x06, 0xe2, 0x3f, 0x03, 0x10, 0x80, 0x10, 0x52, 0x17,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x93, 0x02, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x07, 0x69, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x42, 0x0a, 0xe2, 0x3f, 0x02, 0x18, 0x04, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x06, 0x69, 0x66,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0xe2, 0x3f,
	0x02, 0x18, 0x04, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x55, 0x0a, 0x1b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x53, 0x0a, 0x1a, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x6b, 0x0a,
	0x15, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x18, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x05, 0xe2, 0x3f,
	0x02, 0x10, 0x08, 0x52, 0x15, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x83, 0x07, 0x0a, 0x11, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x28, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x08, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40,
	0x02, 0x08, 0x01, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x1b,
	0x70, 0x65, 0x61, 0x6b, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x6f, 0x63, 0x63, 0x75,
	0x70, 0x61, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x20, 0x01, 0x52, 0x18, 0x70, 0x65, 0x61, 0x6b, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x48, 0x0a, 0x1d, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x20, 0x01,
	0x52, 0x1a, 0x70, 0x65, 0x61, 0x6b, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4f, 0x63, 0x63, 0x75,
	0x70, 0x61, 0x6e, 0x63, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x07,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x02, 0x28, 0x04, 0x42, 0x05, 0x82,
	0x40, 0x02, 0x18, 0x01, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1d, 0x0a,
	0x06, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x02, 0x28, 0x04, 0x42, 0x05, 0x82,
	0x40, 0x02, 0x18, 0x01, 0x52, 0x06, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x11,
	0x74, 0x61, 0x69, 0x6c, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x02, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x0f,
	0x74, 0x61, 0x69, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x2f, 0x0a, 0x10, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x6f, 0x63, 0x74,
	0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x02, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01,
	0x52, 0x0e, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73,
	0x12, 0x3d, 0x0a, 0x18, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x30, 0x18, 0x09, 0x20, 0x02,
	0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x14, 0x72, 0x65, 0x64, 0x44, 0x72,
	0x6f, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x30, 0x12,
	0x3b, 0x0a, 0x17, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x6f, 0x63, 0x74, 0x65,
	0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x30, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x04,
	0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x13, 0x72, 0x65, 0x64, 0x44, 0x72, 0x6f, 0x70,
	0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x30, 0x12, 0x3d, 0x0a, 0x18,
	0x72, 0x65, 0x64, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x31, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x04, 0x42, 0x05,
	0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x14, 0x72, 0x65, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x31, 0x12, 0x3b, 0x0a, 0x17, 0x72,
	0x65, 0x64, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x31, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40,
	0x02, 0x18, 0x01, 0x52, 0x13, 0x72, 0x65, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x4f, 0x63, 0x74, 0x65,
	0x74, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x31, 0x12, 0x3d, 0x0a, 0x18, 0x72, 0x65, 0x64, 0x5f,
	0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x5f, 0x32, 0x18, 0x0d, 0x20, 0x02, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18,
	0x01, 0x52, 0x14, 0x72, 0x65, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x32, 0x12, 0x3b, 0x0a, 0x17, 0x72, 0x65, 0x64, 0x5f, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x5f, 0x32, 0x18, 0x0e, 0x20, 0x02, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52,
	0x13, 0x72, 0x65, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x32, 0x12, 0x3d, 0x0a, 0x18, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x72, 0x6f, 0x70,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x33,
	0x18, 0x0f, 0x20, 0x02, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x14, 0x72,
	0x65, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x33, 0x12, 0x3b, 0x0a, 0x17, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x33, 0x18, 0x10,
	0x20, 0x02, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x13, 0x72, 0x65, 0x64,
	0x44, 0x72, 0x6f, 0x70, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x33,
	0x3a, 0x4a, 0x0a, 0x0d, 0x6a, 0x6e, 0x70, 0x72, 0x5f, 0x71, 0x6d, 0x6f, 0x6e, 0x5f, 0x65, 0x78,
	0x74, 0x12, 0x17, 0x2e, 0x4a, 0x75, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x6a, 0x6e, 0x70, 0x72, 0x51, 0x6d, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x42, 0x1d, 0x5a, 0x1b,
	0x2e, 0x2f, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
})

var (
	file_qmon_proto_rawDescOnce sync.Once
	file_qmon_proto_rawDescData []byte
)

func file_qmon_proto_rawDescGZIP() []byte {
	file_qmon_proto_rawDescOnce.Do(func() {
		file_qmon_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_qmon_proto_rawDesc), len(file_qmon_proto_rawDesc)))
	})
	return file_qmon_proto_rawDescData
}

var file_qmon_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_qmon_proto_goTypes = []any{
	(*QueueMonitor)(nil),           // 0: QueueMonitor
	(*QueueMonitorElement)(nil),    // 1: QueueMonitorElement
	(*QueueMonitorDirection)(nil),  // 2: QueueMonitorDirection
	(*QueueMonitorStats)(nil),      // 3: QueueMonitorStats
	(*JuniperNetworksSensors)(nil), // 4: JuniperNetworksSensors
}
var file_qmon_proto_depIdxs = []int32{
	1, // 0: QueueMonitor.queue_monitor_element_info:type_name -> QueueMonitorElement
	2, // 1: QueueMonitorElement.queue_monitor_stats_ingress:type_name -> QueueMonitorDirection
	2, // 2: QueueMonitorElement.queue_monitor_stats_egress:type_name -> QueueMonitorDirection
	3, // 3: QueueMonitorDirection.queue_monitor_stats_info:type_name -> QueueMonitorStats
	4, // 4: jnpr_qmon_ext:extendee -> JuniperNetworksSensors
	0, // 5: jnpr_qmon_ext:type_name -> QueueMonitor
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	5, // [5:6] is the sub-list for extension type_name
	4, // [4:5] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_qmon_proto_init() }
func file_qmon_proto_init() {
	if File_qmon_proto != nil {
		return
	}
	file_pbj_proto_init()
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_qmon_proto_rawDesc), len(file_qmon_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_qmon_proto_goTypes,
		DependencyIndexes: file_qmon_proto_depIdxs,
		MessageInfos:      file_qmon_proto_msgTypes,
		ExtensionInfos:    file_qmon_proto_extTypes,
	}.Build()
	File_qmon_proto = out.File
	file_qmon_proto_goTypes = nil
	file_qmon_proto_depIdxs = nil
}
