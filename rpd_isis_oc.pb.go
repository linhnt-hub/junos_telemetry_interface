// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: rpd_isis_oc.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NetworkInstancesIsis struct {
	state           protoimpl.MessageState                     `protogen:"open.v1"`
	NetworkInstance []*NetworkInstancesIsisNetworkInstanceList `protobuf:"bytes,151,rep,name=network_instance,json=networkInstance" json:"network_instance,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkInstancesIsis) Reset() {
	*x = NetworkInstancesIsis{}
	mi := &file_rpd_isis_oc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsis) ProtoMessage() {}

func (x *NetworkInstancesIsis) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsis.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsis) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0}
}

func (x *NetworkInstancesIsis) GetNetworkInstance() []*NetworkInstancesIsisNetworkInstanceList {
	if x != nil {
		return x.NetworkInstance
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceList struct {
	state         protoimpl.MessageState                                `protogen:"open.v1"`
	Name          *string                                               `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	Protocols     *NetworkInstancesIsisNetworkInstanceListProtocolsType `protobuf:"bytes,151,opt,name=protocols" json:"protocols,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceList) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceList{}
	mi := &file_rpd_isis_oc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceList) ProtoMessage() {}

func (x *NetworkInstancesIsisNetworkInstanceList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceList) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceList) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NetworkInstancesIsisNetworkInstanceList) GetProtocols() *NetworkInstancesIsisNetworkInstanceListProtocolsType {
	if x != nil {
		return x.Protocols
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsType struct {
	state         protoimpl.MessageState                                            `protogen:"open.v1"`
	Protocol      *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolType `protobuf:"bytes,151,opt,name=protocol" json:"protocol,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsType) ProtoMessage() {}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsType) GetProtocol() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolType {
	if x != nil {
		return x.Protocol
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolType struct {
	state         protoimpl.MessageState                                                    `protogen:"open.v1"`
	Isis          *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisType `protobuf:"bytes,151,opt,name=isis" json:"isis,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolType) ProtoMessage() {}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolType) GetIsis() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisType {
	if x != nil {
		return x.Isis
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisType struct {
	state         protoimpl.MessageState                                                                  `protogen:"open.v1"`
	Levels        *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsType     `protobuf:"bytes,151,opt,name=levels" json:"levels,omitempty"`
	Interfaces    *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesType `protobuf:"bytes,152,opt,name=interfaces" json:"interfaces,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisType) ProtoMessage() {}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisType) GetLevels() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsType {
	if x != nil {
		return x.Levels
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisType) GetInterfaces() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesType {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsType struct {
	state         protoimpl.MessageState                                                                         `protogen:"open.v1"`
	Level         []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelList `protobuf:"bytes,151,rep,name=level" json:"level,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsType) GetLevel() []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelList {
	if x != nil {
		return x.Level
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesType struct {
	state         protoimpl.MessageState                                                                                 `protogen:"open.v1"`
	Interface     []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceList `protobuf:"bytes,151,rep,name=interface" json:"interface,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesType) GetInterface() []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceList {
	if x != nil {
		return x.Interface
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelList struct {
	state               protoimpl.MessageState                                                                                              `protogen:"open.v1"`
	LevelNumber         *uint32                                                                                                             `protobuf:"varint,51,opt,name=level_number,json=levelNumber" json:"level_number,omitempty"`
	LinkStateDatabase   *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseType   `protobuf:"bytes,151,opt,name=link_state_database,json=linkStateDatabase" json:"link_state_database,omitempty"`
	State               *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListStateType               `protobuf:"bytes,152,opt,name=state" json:"state,omitempty"`
	SystemLevelCounters *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersType `protobuf:"bytes,153,opt,name=system_level_counters,json=systemLevelCounters" json:"system_level_counters,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelList) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelList{}
	mi := &file_rpd_isis_oc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelList) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelList) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelList) GetLevelNumber() uint32 {
	if x != nil && x.LevelNumber != nil {
		return *x.LevelNumber
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelList) GetLinkStateDatabase() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseType {
	if x != nil {
		return x.LinkStateDatabase
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelList) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelList) GetSystemLevelCounters() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersType {
	if x != nil {
		return x.SystemLevelCounters
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseType struct {
	state         protoimpl.MessageState                                                                                                     `protogen:"open.v1"`
	Lsp           []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspList `protobuf:"bytes,151,rep,name=lsp" json:"lsp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseType) GetLsp() []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspList {
	if x != nil {
		return x.Lsp
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LevelNumber   *uint32                `protobuf:"varint,51,opt,name=level_number,json=levelNumber" json:"level_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 1}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListStateType) GetLevelNumber() uint32 {
	if x != nil && x.LevelNumber != nil {
		return *x.LevelNumber
	}
	return 0
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersType struct {
	state         protoimpl.MessageState                                                                                                       `protogen:"open.v1"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 2}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersType) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspList struct {
	state         protoimpl.MessageState                                                                                                                    `protogen:"open.v1"`
	LspId         *string                                                                                                                                   `protobuf:"bytes,51,opt,name=lsp_id,json=lspId" json:"lsp_id,omitempty"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListStateType         `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	Tlvs          *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsType          `protobuf:"bytes,152,opt,name=tlvs" json:"tlvs,omitempty"`
	UndefinedTlvs *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsType `protobuf:"bytes,153,opt,name=undefined_tlvs,json=undefinedTlvs" json:"undefined_tlvs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspList) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspList{}
	mi := &file_rpd_isis_oc_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspList) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspList) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspList) GetLspId() string {
	if x != nil && x.LspId != nil {
		return *x.LspId
	}
	return ""
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspList) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspList) GetTlvs() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsType {
	if x != nil {
		return x.Tlvs
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspList) GetUndefinedTlvs() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsType {
	if x != nil {
		return x.UndefinedTlvs
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	LspId                *string                `protobuf:"bytes,51,opt,name=lsp_id,json=lspId" json:"lsp_id,omitempty"`
	MaximumAreaAddresses *uint32                `protobuf:"varint,52,opt,name=maximum_area_addresses,json=maximumAreaAddresses" json:"maximum_area_addresses,omitempty"`
	Version              *uint32                `protobuf:"varint,53,opt,name=version" json:"version,omitempty"`
	Version2             *uint32                `protobuf:"varint,54,opt,name=version2" json:"version2,omitempty"`
	IdLength             *uint32                `protobuf:"varint,55,opt,name=id_length,json=idLength" json:"id_length,omitempty"`
	PduType              *string                `protobuf:"bytes,56,opt,name=pdu_type,json=pduType" json:"pdu_type,omitempty"`
	RemainingLifetime    *uint32                `protobuf:"varint,57,opt,name=remaining_lifetime,json=remainingLifetime" json:"remaining_lifetime,omitempty"`
	SequenceNumber       *uint32                `protobuf:"varint,58,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	Checksum             *uint32                `protobuf:"varint,59,opt,name=checksum" json:"checksum,omitempty"`
	PduLength            *uint32                `protobuf:"varint,60,opt,name=pdu_length,json=pduLength" json:"pdu_length,omitempty"`
	Flags                []string               `protobuf:"bytes,62,rep,name=flags" json:"flags,omitempty"`
	IsType               *uint32                `protobuf:"varint,63,opt,name=is_type,json=isType" json:"is_type,omitempty"`
	LspInstallTime       *uint64                `protobuf:"varint,61,opt,name=lsp_install_time,json=lspInstallTime" json:"lsp_install_time,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListStateType) GetLspId() string {
	if x != nil && x.LspId != nil {
		return *x.LspId
	}
	return ""
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListStateType) GetMaximumAreaAddresses() uint32 {
	if x != nil && x.MaximumAreaAddresses != nil {
		return *x.MaximumAreaAddresses
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListStateType) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListStateType) GetVersion2() uint32 {
	if x != nil && x.Version2 != nil {
		return *x.Version2
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListStateType) GetIdLength() uint32 {
	if x != nil && x.IdLength != nil {
		return *x.IdLength
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListStateType) GetPduType() string {
	if x != nil && x.PduType != nil {
		return *x.PduType
	}
	return ""
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListStateType) GetRemainingLifetime() uint32 {
	if x != nil && x.RemainingLifetime != nil {
		return *x.RemainingLifetime
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListStateType) GetSequenceNumber() uint32 {
	if x != nil && x.SequenceNumber != nil {
		return *x.SequenceNumber
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListStateType) GetChecksum() uint32 {
	if x != nil && x.Checksum != nil {
		return *x.Checksum
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListStateType) GetPduLength() uint32 {
	if x != nil && x.PduLength != nil {
		return *x.PduLength
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListStateType) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListStateType) GetIsType() uint32 {
	if x != nil && x.IsType != nil {
		return *x.IsType
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListStateType) GetLspInstallTime() uint64 {
	if x != nil && x.LspInstallTime != nil {
		return *x.LspInstallTime
	}
	return 0
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsType struct {
	state         protoimpl.MessageState                                                                                                                    `protogen:"open.v1"`
	Tlv           []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvList `protobuf:"bytes,151,rep,name=tlv" json:"tlv,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsType) GetTlv() []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvList {
	if x != nil {
		return x.Tlv
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsType struct {
	state         protoimpl.MessageState                                                                                                                                      `protogen:"open.v1"`
	UndefinedTlv  []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsTypeUndefinedTlvList `protobuf:"bytes,151,rep,name=undefined_tlv,json=undefinedTlv" json:"undefined_tlv,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 2}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsType) GetUndefinedTlv() []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsTypeUndefinedTlvList {
	if x != nil {
		return x.UndefinedTlv
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvList struct {
	state                    protoimpl.MessageState                                                                                                                                              `protogen:"open.v1"`
	Type                     *string                                                                                                                                                             `protobuf:"bytes,51,opt,name=type" json:"type,omitempty"`
	State                    *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListStateType                    `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	AreaAddress              *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListAreaAddressType              `protobuf:"bytes,152,opt,name=area_address,json=areaAddress" json:"area_address,omitempty"`
	LspBufferSize            *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListLspBufferSizeType            `protobuf:"bytes,158,opt,name=lsp_buffer_size,json=lspBufferSize" json:"lsp_buffer_size,omitempty"`
	Nlpid                    *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListNlpidType                    `protobuf:"bytes,153,opt,name=nlpid" json:"nlpid,omitempty"`
	Hostname                 *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListHostnameType                 `protobuf:"bytes,154,opt,name=hostname" json:"hostname,omitempty"`
	Ipv4InterfaceAddresses   *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4InterfaceAddressesType   `protobuf:"bytes,156,opt,name=ipv4_interface_addresses,json=ipv4InterfaceAddresses" json:"ipv4_interface_addresses,omitempty"`
	Ipv6InterfaceAddresses   *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6InterfaceAddressesType   `protobuf:"bytes,157,opt,name=ipv6_interface_addresses,json=ipv6InterfaceAddresses" json:"ipv6_interface_addresses,omitempty"`
	Ipv4TeRouterId           *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4TeRouterIdType           `protobuf:"bytes,155,opt,name=ipv4_te_router_id,json=ipv4TeRouterId" json:"ipv4_te_router_id,omitempty"`
	Ipv4Srlgs                *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsType                `protobuf:"bytes,163,opt,name=ipv4_srlgs,json=ipv4Srlgs" json:"ipv4_srlgs,omitempty"`
	RouterCapabilities       *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesType       `protobuf:"bytes,162,opt,name=router_capabilities,json=routerCapabilities" json:"router_capabilities,omitempty"`
	ExtendedIsReachability   *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityType   `protobuf:"bytes,161,opt,name=extended_is_reachability,json=extendedIsReachability" json:"extended_is_reachability,omitempty"`
	ExtendedIpv4Reachability *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityType `protobuf:"bytes,159,opt,name=extended_ipv4_reachability,json=extendedIpv4Reachability" json:"extended_ipv4_reachability,omitempty"`
	Ipv6Reachability         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityType         `protobuf:"bytes,160,opt,name=ipv6_reachability,json=ipv6Reachability" json:"ipv6_reachability,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvList) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvList{}
	mi := &file_rpd_isis_oc_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvList) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvList) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvList) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvList) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvList) GetAreaAddress() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListAreaAddressType {
	if x != nil {
		return x.AreaAddress
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvList) GetLspBufferSize() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListLspBufferSizeType {
	if x != nil {
		return x.LspBufferSize
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvList) GetNlpid() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListNlpidType {
	if x != nil {
		return x.Nlpid
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvList) GetHostname() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListHostnameType {
	if x != nil {
		return x.Hostname
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvList) GetIpv4InterfaceAddresses() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4InterfaceAddressesType {
	if x != nil {
		return x.Ipv4InterfaceAddresses
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvList) GetIpv6InterfaceAddresses() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6InterfaceAddressesType {
	if x != nil {
		return x.Ipv6InterfaceAddresses
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvList) GetIpv4TeRouterId() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4TeRouterIdType {
	if x != nil {
		return x.Ipv4TeRouterId
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvList) GetIpv4Srlgs() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsType {
	if x != nil {
		return x.Ipv4Srlgs
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvList) GetRouterCapabilities() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesType {
	if x != nil {
		return x.RouterCapabilities
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvList) GetExtendedIsReachability() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityType {
	if x != nil {
		return x.ExtendedIsReachability
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvList) GetExtendedIpv4Reachability() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityType {
	if x != nil {
		return x.ExtendedIpv4Reachability
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvList) GetIpv6Reachability() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityType {
	if x != nil {
		return x.Ipv6Reachability
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          *string                `protobuf:"bytes,51,opt,name=type" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListStateType) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListAreaAddressType struct {
	state         protoimpl.MessageState                                                                                                                                          `protogen:"open.v1"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListAreaAddressTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListAreaAddressType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListAreaAddressType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListAreaAddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListAreaAddressType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListAreaAddressType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListAreaAddressType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListAreaAddressType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListAreaAddressType) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListAreaAddressTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListLspBufferSizeType struct {
	state         protoimpl.MessageState                                                                                                                                            `protogen:"open.v1"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListLspBufferSizeTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListLspBufferSizeType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListLspBufferSizeType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListLspBufferSizeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListLspBufferSizeType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListLspBufferSizeType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListLspBufferSizeType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListLspBufferSizeType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListLspBufferSizeType) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListLspBufferSizeTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListNlpidType struct {
	state         protoimpl.MessageState                                                                                                                                    `protogen:"open.v1"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListNlpidTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListNlpidType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListNlpidType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListNlpidType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListNlpidType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListNlpidType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListNlpidType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListNlpidType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListNlpidType) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListNlpidTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListHostnameType struct {
	state         protoimpl.MessageState                                                                                                                                       `protogen:"open.v1"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListHostnameTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListHostnameType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListHostnameType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListHostnameType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListHostnameType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListHostnameType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListHostnameType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListHostnameType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListHostnameType) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListHostnameTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4InterfaceAddressesType struct {
	state         protoimpl.MessageState                                                                                                                                                     `protogen:"open.v1"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4InterfaceAddressesTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4InterfaceAddressesType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4InterfaceAddressesType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4InterfaceAddressesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4InterfaceAddressesType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4InterfaceAddressesType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4InterfaceAddressesType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4InterfaceAddressesType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4InterfaceAddressesType) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4InterfaceAddressesTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6InterfaceAddressesType struct {
	state         protoimpl.MessageState                                                                                                                                                     `protogen:"open.v1"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6InterfaceAddressesTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6InterfaceAddressesType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6InterfaceAddressesType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6InterfaceAddressesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6InterfaceAddressesType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6InterfaceAddressesType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6InterfaceAddressesType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6InterfaceAddressesType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6InterfaceAddressesType) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6InterfaceAddressesTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4TeRouterIdType struct {
	state         protoimpl.MessageState                                                                                                                                             `protogen:"open.v1"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4TeRouterIdTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4TeRouterIdType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4TeRouterIdType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4TeRouterIdType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4TeRouterIdType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4TeRouterIdType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4TeRouterIdType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4TeRouterIdType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4TeRouterIdType) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4TeRouterIdTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsType struct {
	state         protoimpl.MessageState                                                                                                                                             `protogen:"open.v1"`
	Ipv4Srlg      []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsTypeIpv4SrlgList `protobuf:"bytes,151,rep,name=ipv4_srlg,json=ipv4Srlg" json:"ipv4_srlg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsType) GetIpv4Srlg() []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsTypeIpv4SrlgList {
	if x != nil {
		return x.Ipv4Srlg
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesType struct {
	state         protoimpl.MessageState                                                                                                                                                        `protogen:"open.v1"`
	Capability    []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityList `protobuf:"bytes,151,rep,name=capability" json:"capability,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesType) GetCapability() []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityList {
	if x != nil {
		return x.Capability
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityType struct {
	state         protoimpl.MessageState                                                                                                                                                         `protogen:"open.v1"`
	Neighbors     *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsType `protobuf:"bytes,151,opt,name=neighbors" json:"neighbors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityType) GetNeighbors() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsType {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityType struct {
	state         protoimpl.MessageState                                                                                                                                                          `protogen:"open.v1"`
	Prefixes      *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesType `protobuf:"bytes,151,opt,name=prefixes" json:"prefixes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 11}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityType) GetPrefixes() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesType {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityType struct {
	state         protoimpl.MessageState                                                                                                                                                  `protogen:"open.v1"`
	Prefixes      *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesType `protobuf:"bytes,151,opt,name=prefixes" json:"prefixes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 12}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityType) GetPrefixes() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesType {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListAreaAddressTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       []string               `protobuf:"bytes,51,rep,name=address" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListAreaAddressTypeStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListAreaAddressTypeStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListAreaAddressTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListAreaAddressTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListAreaAddressTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListAreaAddressTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListAreaAddressTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListAreaAddressTypeStateType) GetAddress() []string {
	if x != nil {
		return x.Address
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListLspBufferSizeTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Size          *uint32                `protobuf:"varint,51,opt,name=size" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListLspBufferSizeTypeStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListLspBufferSizeTypeStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListLspBufferSizeTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListLspBufferSizeTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListLspBufferSizeTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListLspBufferSizeTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListLspBufferSizeTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListLspBufferSizeTypeStateType) GetSize() uint32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListNlpidTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nlpid         []string               `protobuf:"bytes,51,rep,name=nlpid" json:"nlpid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListNlpidTypeStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListNlpidTypeStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListNlpidTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListNlpidTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListNlpidTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListNlpidTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListNlpidTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListNlpidTypeStateType) GetNlpid() []string {
	if x != nil {
		return x.Nlpid
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListHostnameTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hname         *string                `protobuf:"bytes,51,opt,name=hname" json:"hname,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListHostnameTypeStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListHostnameTypeStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListHostnameTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListHostnameTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListHostnameTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListHostnameTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListHostnameTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListHostnameTypeStateType) GetHname() string {
	if x != nil && x.Hname != nil {
		return *x.Hname
	}
	return ""
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4InterfaceAddressesTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       []string               `protobuf:"bytes,51,rep,name=address" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4InterfaceAddressesTypeStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4InterfaceAddressesTypeStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4InterfaceAddressesTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4InterfaceAddressesTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4InterfaceAddressesTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4InterfaceAddressesTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4InterfaceAddressesTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4InterfaceAddressesTypeStateType) GetAddress() []string {
	if x != nil {
		return x.Address
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6InterfaceAddressesTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       []string               `protobuf:"bytes,51,rep,name=address" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6InterfaceAddressesTypeStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6InterfaceAddressesTypeStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6InterfaceAddressesTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6InterfaceAddressesTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6InterfaceAddressesTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6InterfaceAddressesTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6InterfaceAddressesTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6InterfaceAddressesTypeStateType) GetAddress() []string {
	if x != nil {
		return x.Address
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4TeRouterIdTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TeRouterId    *string                `protobuf:"bytes,51,opt,name=te_router_id,json=teRouterId" json:"te_router_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4TeRouterIdTypeStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4TeRouterIdTypeStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4TeRouterIdTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4TeRouterIdTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4TeRouterIdTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4TeRouterIdTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4TeRouterIdTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4TeRouterIdTypeStateType) GetTeRouterId() string {
	if x != nil && x.TeRouterId != nil {
		return *x.TeRouterId
	}
	return ""
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsTypeIpv4SrlgList struct {
	state          protoimpl.MessageState                                                                                                                                                    `protogen:"open.v1"`
	InstanceNumber *uint32                                                                                                                                                                   `protobuf:"varint,51,opt,name=instance_number,json=instanceNumber" json:"instance_number,omitempty"`
	State          *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsTypeIpv4SrlgListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsTypeIpv4SrlgList) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsTypeIpv4SrlgList{}
	mi := &file_rpd_isis_oc_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsTypeIpv4SrlgList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsTypeIpv4SrlgList) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsTypeIpv4SrlgList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsTypeIpv4SrlgList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsTypeIpv4SrlgList) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsTypeIpv4SrlgList) GetInstanceNumber() uint32 {
	if x != nil && x.InstanceNumber != nil {
		return *x.InstanceNumber
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsTypeIpv4SrlgList) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsTypeIpv4SrlgListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsTypeIpv4SrlgListStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	InstanceNumber       *uint32                `protobuf:"varint,51,opt,name=instance_number,json=instanceNumber" json:"instance_number,omitempty"`
	SystemId             *string                `protobuf:"bytes,52,opt,name=system_id,json=systemId" json:"system_id,omitempty"`
	PsnNumber            *uint32                `protobuf:"varint,53,opt,name=psn_number,json=psnNumber" json:"psn_number,omitempty"`
	Flags                []string               `protobuf:"bytes,57,rep,name=flags" json:"flags,omitempty"`
	Ipv4InterfaceAddress *string                `protobuf:"bytes,54,opt,name=ipv4_interface_address,json=ipv4InterfaceAddress" json:"ipv4_interface_address,omitempty"`
	Ipv4NeighborAddress  *string                `protobuf:"bytes,55,opt,name=ipv4_neighbor_address,json=ipv4NeighborAddress" json:"ipv4_neighbor_address,omitempty"`
	SrlgValue            []uint32               `protobuf:"varint,56,rep,name=srlg_value,json=srlgValue" json:"srlg_value,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsTypeIpv4SrlgListStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsTypeIpv4SrlgListStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsTypeIpv4SrlgListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsTypeIpv4SrlgListStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsTypeIpv4SrlgListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsTypeIpv4SrlgListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsTypeIpv4SrlgListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsTypeIpv4SrlgListStateType) GetInstanceNumber() uint32 {
	if x != nil && x.InstanceNumber != nil {
		return *x.InstanceNumber
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsTypeIpv4SrlgListStateType) GetSystemId() string {
	if x != nil && x.SystemId != nil {
		return *x.SystemId
	}
	return ""
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsTypeIpv4SrlgListStateType) GetPsnNumber() uint32 {
	if x != nil && x.PsnNumber != nil {
		return *x.PsnNumber
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsTypeIpv4SrlgListStateType) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsTypeIpv4SrlgListStateType) GetIpv4InterfaceAddress() string {
	if x != nil && x.Ipv4InterfaceAddress != nil {
		return *x.Ipv4InterfaceAddress
	}
	return ""
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsTypeIpv4SrlgListStateType) GetIpv4NeighborAddress() string {
	if x != nil && x.Ipv4NeighborAddress != nil {
		return *x.Ipv4NeighborAddress
	}
	return ""
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsTypeIpv4SrlgListStateType) GetSrlgValue() []uint32 {
	if x != nil {
		return x.SrlgValue
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityList struct {
	state            protoimpl.MessageState                                                                                                                                                                          `protogen:"open.v1"`
	InstanceNumber   *uint32                                                                                                                                                                                         `protobuf:"varint,51,opt,name=instance_number,json=instanceNumber" json:"instance_number,omitempty"`
	State            *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListStateType            `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	Subtlvs          *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsType          `protobuf:"bytes,152,opt,name=subtlvs" json:"subtlvs,omitempty"`
	UndefinedSubtlvs *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsType `protobuf:"bytes,153,opt,name=undefined_subtlvs,json=undefinedSubtlvs" json:"undefined_subtlvs,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityList) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityList{}
	mi := &file_rpd_isis_oc_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityList) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityList) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityList) GetInstanceNumber() uint32 {
	if x != nil && x.InstanceNumber != nil {
		return *x.InstanceNumber
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityList) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityList) GetSubtlvs() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsType {
	if x != nil {
		return x.Subtlvs
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityList) GetUndefinedSubtlvs() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsType {
	if x != nil {
		return x.UndefinedSubtlvs
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListStateType struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	InstanceNumber *uint32                `protobuf:"varint,51,opt,name=instance_number,json=instanceNumber" json:"instance_number,omitempty"`
	RouterId       *string                `protobuf:"bytes,52,opt,name=router_id,json=routerId" json:"router_id,omitempty"`
	Flags          []string               `protobuf:"bytes,53,rep,name=flags" json:"flags,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListStateType) GetInstanceNumber() uint32 {
	if x != nil && x.InstanceNumber != nil {
		return *x.InstanceNumber
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListStateType) GetRouterId() string {
	if x != nil && x.RouterId != nil {
		return *x.RouterId
	}
	return ""
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListStateType) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsType struct {
	state         protoimpl.MessageState                                                                                                                                                                             `protogen:"open.v1"`
	Subtlv        []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvList `protobuf:"bytes,151,rep,name=subtlv" json:"subtlv,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9, 0, 1}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsType) GetSubtlv() []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvList {
	if x != nil {
		return x.Subtlv
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsType struct {
	state           protoimpl.MessageState                                                                                                                                                                                               `protogen:"open.v1"`
	UndefinedSubtlv []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsTypeUndefinedSubtlvList `protobuf:"bytes,151,rep,name=undefined_subtlv,json=undefinedSubtlv" json:"undefined_subtlv,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9, 0, 2}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsType) GetUndefinedSubtlv() []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsTypeUndefinedSubtlvList {
	if x != nil {
		return x.UndefinedSubtlv
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvList struct {
	state                    protoimpl.MessageState                                                                                                                                                                                                       `protogen:"open.v1"`
	Type                     *string                                                                                                                                                                                                                      `protobuf:"bytes,51,opt,name=type" json:"type,omitempty"`
	State                    *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListStateType                    `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	SegmentRoutingAlgorithms *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingAlgorithmsType `protobuf:"bytes,152,opt,name=segment_routing_algorithms,json=segmentRoutingAlgorithms" json:"segment_routing_algorithms,omitempty"`
	SegmentRoutingCapability *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityType `protobuf:"bytes,153,opt,name=segment_routing_capability,json=segmentRoutingCapability" json:"segment_routing_capability,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvList) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvList{}
	mi := &file_rpd_isis_oc_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvList) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvList) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9, 0, 1, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvList) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvList) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvList) GetSegmentRoutingAlgorithms() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingAlgorithmsType {
	if x != nil {
		return x.SegmentRoutingAlgorithms
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvList) GetSegmentRoutingCapability() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityType {
	if x != nil {
		return x.SegmentRoutingCapability
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          *string                `protobuf:"bytes,51,opt,name=type" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9, 0, 1, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListStateType) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingAlgorithmsType struct {
	state         protoimpl.MessageState                                                                                                                                                                                                                `protogen:"open.v1"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingAlgorithmsTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingAlgorithmsType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingAlgorithmsType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingAlgorithmsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingAlgorithmsType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingAlgorithmsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingAlgorithmsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingAlgorithmsType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9, 0, 1, 0, 1}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingAlgorithmsType) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingAlgorithmsTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityType struct {
	state           protoimpl.MessageState                                                                                                                                                                                                                          `protogen:"open.v1"`
	State           *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeStateType           `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	SrgbDescriptors *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsType `protobuf:"bytes,152,opt,name=srgb_descriptors,json=srgbDescriptors" json:"srgb_descriptors,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9, 0, 1, 0, 2}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityType) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityType) GetSrgbDescriptors() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsType {
	if x != nil {
		return x.SrgbDescriptors
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingAlgorithmsTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Algorithm     []string               `protobuf:"bytes,51,rep,name=algorithm" json:"algorithm,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingAlgorithmsTypeStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingAlgorithmsTypeStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingAlgorithmsTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingAlgorithmsTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingAlgorithmsTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingAlgorithmsTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingAlgorithmsTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9, 0, 1, 0, 1, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingAlgorithmsTypeStateType) GetAlgorithm() []string {
	if x != nil {
		return x.Algorithm
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Flags         []string               `protobuf:"bytes,51,rep,name=flags" json:"flags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9, 0, 1, 0, 2, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeStateType) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsType struct {
	state          protoimpl.MessageState                                                                                                                                                                                                                                              `protogen:"open.v1"`
	SrgbDescriptor []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsTypeSrgbDescriptorList `protobuf:"bytes,151,rep,name=srgb_descriptor,json=srgbDescriptor" json:"srgb_descriptor,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9, 0, 1, 0, 2, 1}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsType) GetSrgbDescriptor() []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsTypeSrgbDescriptorList {
	if x != nil {
		return x.SrgbDescriptor
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsTypeSrgbDescriptorList struct {
	state         protoimpl.MessageState                                                                                                                                                                                                                                                     `protogen:"open.v1"`
	Range         *uint32                                                                                                                                                                                                                                                                    `protobuf:"varint,51,opt,name=range" json:"range,omitempty"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsTypeSrgbDescriptorListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsTypeSrgbDescriptorList) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsTypeSrgbDescriptorList{}
	mi := &file_rpd_isis_oc_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsTypeSrgbDescriptorList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsTypeSrgbDescriptorList) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsTypeSrgbDescriptorList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsTypeSrgbDescriptorList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsTypeSrgbDescriptorList) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9, 0, 1, 0, 2, 1, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsTypeSrgbDescriptorList) GetRange() uint32 {
	if x != nil && x.Range != nil {
		return *x.Range
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsTypeSrgbDescriptorList) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsTypeSrgbDescriptorListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsTypeSrgbDescriptorListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Range         *uint32                `protobuf:"varint,51,opt,name=range" json:"range,omitempty"`
	Label         *string                `protobuf:"bytes,52,opt,name=label" json:"label,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsTypeSrgbDescriptorListStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsTypeSrgbDescriptorListStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsTypeSrgbDescriptorListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsTypeSrgbDescriptorListStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsTypeSrgbDescriptorListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsTypeSrgbDescriptorListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsTypeSrgbDescriptorListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9, 0, 1, 0, 2, 1, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsTypeSrgbDescriptorListStateType) GetRange() uint32 {
	if x != nil && x.Range != nil {
		return *x.Range
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsTypeSrgbDescriptorListStateType) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsTypeUndefinedSubtlvList struct {
	state         protoimpl.MessageState                                                                                                                                                                                                      `protogen:"open.v1"`
	Type          *uint32                                                                                                                                                                                                                     `protobuf:"varint,51,opt,name=type" json:"type,omitempty"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsTypeUndefinedSubtlvListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsTypeUndefinedSubtlvList) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsTypeUndefinedSubtlvList{}
	mi := &file_rpd_isis_oc_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsTypeUndefinedSubtlvList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsTypeUndefinedSubtlvList) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsTypeUndefinedSubtlvList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsTypeUndefinedSubtlvList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsTypeUndefinedSubtlvList) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9, 0, 2, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsTypeUndefinedSubtlvList) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsTypeUndefinedSubtlvList) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsTypeUndefinedSubtlvListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsTypeUndefinedSubtlvListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          *uint32                `protobuf:"varint,51,opt,name=type" json:"type,omitempty"`
	Length        *uint32                `protobuf:"varint,52,opt,name=length" json:"length,omitempty"`
	Value         *string                `protobuf:"bytes,53,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsTypeUndefinedSubtlvListStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsTypeUndefinedSubtlvListStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsTypeUndefinedSubtlvListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsTypeUndefinedSubtlvListStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsTypeUndefinedSubtlvListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsTypeUndefinedSubtlvListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsTypeUndefinedSubtlvListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9, 0, 2, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsTypeUndefinedSubtlvListStateType) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsTypeUndefinedSubtlvListStateType) GetLength() uint32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsTypeUndefinedSubtlvListStateType) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsType struct {
	state         protoimpl.MessageState                                                                                                                                                                       `protogen:"open.v1"`
	Neighbor      []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborList `protobuf:"bytes,151,rep,name=neighbor" json:"neighbor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsType) GetNeighbor() []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborList {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborList struct {
	state            protoimpl.MessageState                                                                                                                                                                                         `protogen:"open.v1"`
	SystemId         *string                                                                                                                                                                                                        `protobuf:"bytes,51,opt,name=system_id,json=systemId" json:"system_id,omitempty"`
	State            *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListStateType            `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	Subtlvs          *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsType          `protobuf:"bytes,152,opt,name=subtlvs" json:"subtlvs,omitempty"`
	UndefinedSubtlvs *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsType `protobuf:"bytes,153,opt,name=undefined_subtlvs,json=undefinedSubtlvs" json:"undefined_subtlvs,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborList) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborList{}
	mi := &file_rpd_isis_oc_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborList) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborList) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborList) GetSystemId() string {
	if x != nil && x.SystemId != nil {
		return *x.SystemId
	}
	return ""
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborList) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborList) GetSubtlvs() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsType {
	if x != nil {
		return x.Subtlvs
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborList) GetUndefinedSubtlvs() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsType {
	if x != nil {
		return x.UndefinedSubtlvs
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SystemId      *string                `protobuf:"bytes,51,opt,name=system_id,json=systemId" json:"system_id,omitempty"`
	Metric        *uint32                `protobuf:"varint,52,opt,name=metric" json:"metric,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListStateType) GetSystemId() string {
	if x != nil && x.SystemId != nil {
		return *x.SystemId
	}
	return ""
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListStateType) GetMetric() uint32 {
	if x != nil && x.Metric != nil {
		return *x.Metric
	}
	return 0
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsType struct {
	state         protoimpl.MessageState                                                                                                                                                                                            `protogen:"open.v1"`
	Subtlv        []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvList `protobuf:"bytes,151,rep,name=subtlv" json:"subtlv,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsType) GetSubtlv() []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvList {
	if x != nil {
		return x.Subtlv
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsType struct {
	state           protoimpl.MessageState                                                                                                                                                                                                              `protogen:"open.v1"`
	UndefinedSubtlv []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsTypeUndefinedSubtlvList `protobuf:"bytes,151,rep,name=undefined_subtlv,json=undefinedSubtlv" json:"undefined_subtlv,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 2}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsType) GetUndefinedSubtlv() []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsTypeUndefinedSubtlvList {
	if x != nil {
		return x.UndefinedSubtlv
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvList struct {
	state                      protoimpl.MessageState                                                                                                                                                                                                                        `protogen:"open.v1"`
	Type                       *string                                                                                                                                                                                                                                       `protobuf:"bytes,51,opt,name=type" json:"type,omitempty"`
	State                      *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListStateType                      `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	AdminGroup                 *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdminGroupType                 `protobuf:"bytes,160,opt,name=admin_group,json=adminGroup" json:"admin_group,omitempty"`
	LinkId                     *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLinkIdType                     `protobuf:"bytes,154,opt,name=link_id,json=linkId" json:"link_id,omitempty"`
	Ipv4InterfaceAddress       *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4InterfaceAddressType       `protobuf:"bytes,152,opt,name=ipv4_interface_address,json=ipv4InterfaceAddress" json:"ipv4_interface_address,omitempty"`
	Ipv4NeighborAddress        *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4NeighborAddressType        `protobuf:"bytes,153,opt,name=ipv4_neighbor_address,json=ipv4NeighborAddress" json:"ipv4_neighbor_address,omitempty"`
	MaxLinkBandwidth           *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxLinkBandwidthType           `protobuf:"bytes,155,opt,name=max_link_bandwidth,json=maxLinkBandwidth" json:"max_link_bandwidth,omitempty"`
	MaxReservableLinkBandwidth *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxReservableLinkBandwidthType `protobuf:"bytes,156,opt,name=max_reservable_link_bandwidth,json=maxReservableLinkBandwidth" json:"max_reservable_link_bandwidth,omitempty"`
	UnreservedBandwidth        *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthType        `protobuf:"bytes,157,opt,name=unreserved_bandwidth,json=unreservedBandwidth" json:"unreserved_bandwidth,omitempty"`
	Ipv6InterfaceAddress       *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6InterfaceAddressType       `protobuf:"bytes,163,opt,name=ipv6_interface_address,json=ipv6InterfaceAddress" json:"ipv6_interface_address,omitempty"`
	Ipv6NeighborAddress        *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6NeighborAddressType        `protobuf:"bytes,164,opt,name=ipv6_neighbor_address,json=ipv6NeighborAddress" json:"ipv6_neighbor_address,omitempty"`
	TeDefaultMetric            *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListTeDefaultMetricType            `protobuf:"bytes,158,opt,name=te_default_metric,json=teDefaultMetric" json:"te_default_metric,omitempty"`
	BandwidthConstraints       *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsType       `protobuf:"bytes,159,opt,name=bandwidth_constraints,json=bandwidthConstraints" json:"bandwidth_constraints,omitempty"`
	AdjacencySids              *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsType              `protobuf:"bytes,161,opt,name=adjacency_sids,json=adjacencySids" json:"adjacency_sids,omitempty"`
	LanAdjacencySids           *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsType           `protobuf:"bytes,162,opt,name=lan_adjacency_sids,json=lanAdjacencySids" json:"lan_adjacency_sids,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvList) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvList{}
	mi := &file_rpd_isis_oc_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvList) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvList) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvList) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvList) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvList) GetAdminGroup() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdminGroupType {
	if x != nil {
		return x.AdminGroup
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvList) GetLinkId() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLinkIdType {
	if x != nil {
		return x.LinkId
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvList) GetIpv4InterfaceAddress() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4InterfaceAddressType {
	if x != nil {
		return x.Ipv4InterfaceAddress
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvList) GetIpv4NeighborAddress() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4NeighborAddressType {
	if x != nil {
		return x.Ipv4NeighborAddress
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvList) GetMaxLinkBandwidth() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxLinkBandwidthType {
	if x != nil {
		return x.MaxLinkBandwidth
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvList) GetMaxReservableLinkBandwidth() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxReservableLinkBandwidthType {
	if x != nil {
		return x.MaxReservableLinkBandwidth
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvList) GetUnreservedBandwidth() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthType {
	if x != nil {
		return x.UnreservedBandwidth
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvList) GetIpv6InterfaceAddress() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6InterfaceAddressType {
	if x != nil {
		return x.Ipv6InterfaceAddress
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvList) GetIpv6NeighborAddress() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6NeighborAddressType {
	if x != nil {
		return x.Ipv6NeighborAddress
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvList) GetTeDefaultMetric() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListTeDefaultMetricType {
	if x != nil {
		return x.TeDefaultMetric
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvList) GetBandwidthConstraints() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsType {
	if x != nil {
		return x.BandwidthConstraints
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvList) GetAdjacencySids() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsType {
	if x != nil {
		return x.AdjacencySids
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvList) GetLanAdjacencySids() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsType {
	if x != nil {
		return x.LanAdjacencySids
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          *string                `protobuf:"bytes,51,opt,name=type" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListStateType) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdminGroupType struct {
	state         protoimpl.MessageState                                                                                                                                                                                                                 `protogen:"open.v1"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdminGroupTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdminGroupType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdminGroupType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdminGroupType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdminGroupType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdminGroupType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdminGroupType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdminGroupType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 1}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdminGroupType) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdminGroupTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLinkIdType struct {
	state         protoimpl.MessageState                                                                                                                                                                                                             `protogen:"open.v1"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLinkIdTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLinkIdType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLinkIdType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLinkIdType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLinkIdType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLinkIdType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLinkIdType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLinkIdType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 2}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLinkIdType) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLinkIdTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4InterfaceAddressType struct {
	state         protoimpl.MessageState                                                                                                                                                                                                                           `protogen:"open.v1"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4InterfaceAddressTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4InterfaceAddressType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4InterfaceAddressType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4InterfaceAddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4InterfaceAddressType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4InterfaceAddressType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4InterfaceAddressType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4InterfaceAddressType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 3}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4InterfaceAddressType) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4InterfaceAddressTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4NeighborAddressType struct {
	state         protoimpl.MessageState                                                                                                                                                                                                                          `protogen:"open.v1"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4NeighborAddressTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4NeighborAddressType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4NeighborAddressType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4NeighborAddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4NeighborAddressType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4NeighborAddressType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4NeighborAddressType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4NeighborAddressType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 4}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4NeighborAddressType) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4NeighborAddressTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxLinkBandwidthType struct {
	state         protoimpl.MessageState                                                                                                                                                                                                                       `protogen:"open.v1"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxLinkBandwidthTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxLinkBandwidthType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxLinkBandwidthType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxLinkBandwidthType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxLinkBandwidthType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxLinkBandwidthType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxLinkBandwidthType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxLinkBandwidthType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 5}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxLinkBandwidthType) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxLinkBandwidthTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxReservableLinkBandwidthType struct {
	state         protoimpl.MessageState                                                                                                                                                                                                                                 `protogen:"open.v1"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxReservableLinkBandwidthTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxReservableLinkBandwidthType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxReservableLinkBandwidthType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxReservableLinkBandwidthType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxReservableLinkBandwidthType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxReservableLinkBandwidthType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxReservableLinkBandwidthType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxReservableLinkBandwidthType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 6}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxReservableLinkBandwidthType) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxReservableLinkBandwidthTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthType struct {
	state         protoimpl.MessageState                                                                                                                                                                                                                                    `protogen:"open.v1"`
	SetupPriority []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthTypeSetupPriorityList `protobuf:"bytes,151,rep,name=setup_priority,json=setupPriority" json:"setup_priority,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 7}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthType) GetSetupPriority() []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthTypeSetupPriorityList {
	if x != nil {
		return x.SetupPriority
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6InterfaceAddressType struct {
	state         protoimpl.MessageState                                                                                                                                                                                                                           `protogen:"open.v1"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6InterfaceAddressTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6InterfaceAddressType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6InterfaceAddressType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6InterfaceAddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6InterfaceAddressType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6InterfaceAddressType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6InterfaceAddressType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6InterfaceAddressType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 8}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6InterfaceAddressType) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6InterfaceAddressTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6NeighborAddressType struct {
	state         protoimpl.MessageState                                                                                                                                                                                                                          `protogen:"open.v1"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6NeighborAddressTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6NeighborAddressType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6NeighborAddressType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6NeighborAddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6NeighborAddressType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6NeighborAddressType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6NeighborAddressType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6NeighborAddressType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 9}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6NeighborAddressType) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6NeighborAddressTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListTeDefaultMetricType struct {
	state         protoimpl.MessageState                                                                                                                                                                                                                      `protogen:"open.v1"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListTeDefaultMetricTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListTeDefaultMetricType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListTeDefaultMetricType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListTeDefaultMetricType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListTeDefaultMetricType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListTeDefaultMetricType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListTeDefaultMetricType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListTeDefaultMetricType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 10}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListTeDefaultMetricType) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListTeDefaultMetricTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsType struct {
	state               protoimpl.MessageState                                                                                                                                                                                                                                           `protogen:"open.v1"`
	BandwidthConstraint []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintList `protobuf:"bytes,151,rep,name=bandwidth_constraint,json=bandwidthConstraint" json:"bandwidth_constraint,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 11}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsType) GetBandwidthConstraint() []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintList {
	if x != nil {
		return x.BandwidthConstraint
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsType struct {
	state         protoimpl.MessageState                                                                                                                                                                                                                     `protogen:"open.v1"`
	AdjSid        *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsTypeAdjSidType `protobuf:"bytes,151,opt,name=adj_sid,json=adjSid" json:"adj_sid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 12}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsType) GetAdjSid() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsTypeAdjSidType {
	if x != nil {
		return x.AdjSid
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsType struct {
	state         protoimpl.MessageState                                                                                                                                                                                                                           `protogen:"open.v1"`
	LanAdjSid     *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsTypeLanAdjSidType `protobuf:"bytes,151,opt,name=lan_adj_sid,json=lanAdjSid" json:"lan_adj_sid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 13}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsType) GetLanAdjSid() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsTypeLanAdjSidType {
	if x != nil {
		return x.LanAdjSid
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdminGroupTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AdminGroup    []uint32               `protobuf:"varint,51,rep,name=admin_group,json=adminGroup" json:"admin_group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdminGroupTypeStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdminGroupTypeStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdminGroupTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdminGroupTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdminGroupTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdminGroupTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdminGroupTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 1, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdminGroupTypeStateType) GetAdminGroup() []uint32 {
	if x != nil {
		return x.AdminGroup
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLinkIdTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Local         *uint32                `protobuf:"varint,51,opt,name=local" json:"local,omitempty"`
	Remote        *uint32                `protobuf:"varint,52,opt,name=remote" json:"remote,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLinkIdTypeStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLinkIdTypeStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLinkIdTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLinkIdTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLinkIdTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLinkIdTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLinkIdTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 2, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLinkIdTypeStateType) GetLocal() uint32 {
	if x != nil && x.Local != nil {
		return *x.Local
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLinkIdTypeStateType) GetRemote() uint32 {
	if x != nil && x.Remote != nil {
		return *x.Remote
	}
	return 0
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4InterfaceAddressTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       []string               `protobuf:"bytes,51,rep,name=address" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4InterfaceAddressTypeStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4InterfaceAddressTypeStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4InterfaceAddressTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4InterfaceAddressTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4InterfaceAddressTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4InterfaceAddressTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4InterfaceAddressTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 3, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4InterfaceAddressTypeStateType) GetAddress() []string {
	if x != nil {
		return x.Address
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4NeighborAddressTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       []string               `protobuf:"bytes,51,rep,name=address" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4NeighborAddressTypeStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4NeighborAddressTypeStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4NeighborAddressTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4NeighborAddressTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4NeighborAddressTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4NeighborAddressTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4NeighborAddressTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 4, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4NeighborAddressTypeStateType) GetAddress() []string {
	if x != nil {
		return x.Address
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxLinkBandwidthTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bandwidth     *string                `protobuf:"bytes,51,opt,name=bandwidth" json:"bandwidth,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxLinkBandwidthTypeStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxLinkBandwidthTypeStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxLinkBandwidthTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxLinkBandwidthTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxLinkBandwidthTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxLinkBandwidthTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxLinkBandwidthTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 5, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxLinkBandwidthTypeStateType) GetBandwidth() string {
	if x != nil && x.Bandwidth != nil {
		return *x.Bandwidth
	}
	return ""
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxReservableLinkBandwidthTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bandwidth     *string                `protobuf:"bytes,51,opt,name=bandwidth" json:"bandwidth,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxReservableLinkBandwidthTypeStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxReservableLinkBandwidthTypeStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxReservableLinkBandwidthTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxReservableLinkBandwidthTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxReservableLinkBandwidthTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxReservableLinkBandwidthTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxReservableLinkBandwidthTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 6, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxReservableLinkBandwidthTypeStateType) GetBandwidth() string {
	if x != nil && x.Bandwidth != nil {
		return *x.Bandwidth
	}
	return ""
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthTypeSetupPriorityList struct {
	state         protoimpl.MessageState                                                                                                                                                                                                                                           `protogen:"open.v1"`
	Priority      *uint32                                                                                                                                                                                                                                                          `protobuf:"varint,51,opt,name=priority" json:"priority,omitempty"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthTypeSetupPriorityListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthTypeSetupPriorityList) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthTypeSetupPriorityList{}
	mi := &file_rpd_isis_oc_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthTypeSetupPriorityList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthTypeSetupPriorityList) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthTypeSetupPriorityList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthTypeSetupPriorityList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthTypeSetupPriorityList) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 7, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthTypeSetupPriorityList) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthTypeSetupPriorityList) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthTypeSetupPriorityListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthTypeSetupPriorityListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Priority      *uint32                `protobuf:"varint,51,opt,name=priority" json:"priority,omitempty"`
	Bandwidth     *string                `protobuf:"bytes,52,opt,name=bandwidth" json:"bandwidth,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthTypeSetupPriorityListStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthTypeSetupPriorityListStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthTypeSetupPriorityListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthTypeSetupPriorityListStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthTypeSetupPriorityListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthTypeSetupPriorityListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthTypeSetupPriorityListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 7, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthTypeSetupPriorityListStateType) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthTypeSetupPriorityListStateType) GetBandwidth() string {
	if x != nil && x.Bandwidth != nil {
		return *x.Bandwidth
	}
	return ""
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6InterfaceAddressTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       []string               `protobuf:"bytes,51,rep,name=address" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6InterfaceAddressTypeStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6InterfaceAddressTypeStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6InterfaceAddressTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6InterfaceAddressTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6InterfaceAddressTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6InterfaceAddressTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6InterfaceAddressTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 8, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6InterfaceAddressTypeStateType) GetAddress() []string {
	if x != nil {
		return x.Address
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6NeighborAddressTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       []string               `protobuf:"bytes,51,rep,name=address" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6NeighborAddressTypeStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6NeighborAddressTypeStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6NeighborAddressTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6NeighborAddressTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6NeighborAddressTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6NeighborAddressTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6NeighborAddressTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 9, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6NeighborAddressTypeStateType) GetAddress() []string {
	if x != nil {
		return x.Address
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListTeDefaultMetricTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metric        *uint32                `protobuf:"varint,51,opt,name=metric" json:"metric,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListTeDefaultMetricTypeStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListTeDefaultMetricTypeStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListTeDefaultMetricTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListTeDefaultMetricTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListTeDefaultMetricTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListTeDefaultMetricTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListTeDefaultMetricTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 10, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListTeDefaultMetricTypeStateType) GetMetric() uint32 {
	if x != nil && x.Metric != nil {
		return *x.Metric
	}
	return 0
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintList struct {
	state         protoimpl.MessageState                                                                                                                                                                                                                                                        `protogen:"open.v1"`
	ModelId       *uint32                                                                                                                                                                                                                                                                       `protobuf:"varint,51,opt,name=model_id,json=modelId" json:"model_id,omitempty"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListStateType       `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	Constraints   *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsType `protobuf:"bytes,152,opt,name=constraints" json:"constraints,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintList) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintList{}
	mi := &file_rpd_isis_oc_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintList) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintList) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 11, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintList) GetModelId() uint32 {
	if x != nil && x.ModelId != nil {
		return *x.ModelId
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintList) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintList) GetConstraints() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsType {
	if x != nil {
		return x.Constraints
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ModelId       *uint32                `protobuf:"varint,51,opt,name=model_id,json=modelId" json:"model_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 11, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListStateType) GetModelId() uint32 {
	if x != nil && x.ModelId != nil {
		return *x.ModelId
	}
	return 0
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsType struct {
	state         protoimpl.MessageState                                                                                                                                                                                                                                                                        `protogen:"open.v1"`
	Constraint    []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsTypeConstraintList `protobuf:"bytes,151,rep,name=constraint" json:"constraint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 11, 0, 1}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsType) GetConstraint() []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsTypeConstraintList {
	if x != nil {
		return x.Constraint
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsTypeConstraintList struct {
	state         protoimpl.MessageState                                                                                                                                                                                                                                                                               `protogen:"open.v1"`
	ConstraintId  *uint32                                                                                                                                                                                                                                                                                              `protobuf:"varint,51,opt,name=constraint_id,json=constraintId" json:"constraint_id,omitempty"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsTypeConstraintListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsTypeConstraintList) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsTypeConstraintList{}
	mi := &file_rpd_isis_oc_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsTypeConstraintList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsTypeConstraintList) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsTypeConstraintList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsTypeConstraintList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsTypeConstraintList) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 11, 0, 1, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsTypeConstraintList) GetConstraintId() uint32 {
	if x != nil && x.ConstraintId != nil {
		return *x.ConstraintId
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsTypeConstraintList) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsTypeConstraintListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsTypeConstraintListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConstraintId  *uint32                `protobuf:"varint,51,opt,name=constraint_id,json=constraintId" json:"constraint_id,omitempty"`
	Bandwidth     *string                `protobuf:"bytes,52,opt,name=bandwidth" json:"bandwidth,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsTypeConstraintListStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsTypeConstraintListStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsTypeConstraintListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsTypeConstraintListStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsTypeConstraintListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsTypeConstraintListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsTypeConstraintListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 11, 0, 1, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsTypeConstraintListStateType) GetConstraintId() uint32 {
	if x != nil && x.ConstraintId != nil {
		return *x.ConstraintId
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsTypeConstraintListStateType) GetBandwidth() string {
	if x != nil && x.Bandwidth != nil {
		return *x.Bandwidth
	}
	return ""
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsTypeAdjSidType struct {
	state         protoimpl.MessageState                                                                                                                                                                                                                              `protogen:"open.v1"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsTypeAdjSidTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsTypeAdjSidType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsTypeAdjSidType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsTypeAdjSidType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsTypeAdjSidType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsTypeAdjSidType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsTypeAdjSidType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsTypeAdjSidType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 12, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsTypeAdjSidType) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsTypeAdjSidTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsTypeAdjSidTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         *uint32                `protobuf:"varint,51,opt,name=value" json:"value,omitempty"`
	Flags         []string               `protobuf:"bytes,52,rep,name=flags" json:"flags,omitempty"`
	Weight        *uint32                `protobuf:"varint,53,opt,name=weight" json:"weight,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsTypeAdjSidTypeStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsTypeAdjSidTypeStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsTypeAdjSidTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsTypeAdjSidTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsTypeAdjSidTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsTypeAdjSidTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsTypeAdjSidTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 12, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsTypeAdjSidTypeStateType) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsTypeAdjSidTypeStateType) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsTypeAdjSidTypeStateType) GetWeight() uint32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsTypeLanAdjSidType struct {
	state         protoimpl.MessageState                                                                                                                                                                                                                                    `protogen:"open.v1"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsTypeLanAdjSidTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsTypeLanAdjSidType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsTypeLanAdjSidType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsTypeLanAdjSidType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsTypeLanAdjSidType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsTypeLanAdjSidType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsTypeLanAdjSidType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsTypeLanAdjSidType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 13, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsTypeLanAdjSidType) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsTypeLanAdjSidTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsTypeLanAdjSidTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         *uint32                `protobuf:"varint,51,opt,name=value" json:"value,omitempty"`
	Flags         []string               `protobuf:"bytes,52,rep,name=flags" json:"flags,omitempty"`
	Weight        *uint32                `protobuf:"varint,53,opt,name=weight" json:"weight,omitempty"`
	NeighborId    *string                `protobuf:"bytes,54,opt,name=neighbor_id,json=neighborId" json:"neighbor_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsTypeLanAdjSidTypeStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsTypeLanAdjSidTypeStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsTypeLanAdjSidTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsTypeLanAdjSidTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsTypeLanAdjSidTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsTypeLanAdjSidTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsTypeLanAdjSidTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 1, 0, 13, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsTypeLanAdjSidTypeStateType) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsTypeLanAdjSidTypeStateType) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsTypeLanAdjSidTypeStateType) GetWeight() uint32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsTypeLanAdjSidTypeStateType) GetNeighborId() string {
	if x != nil && x.NeighborId != nil {
		return *x.NeighborId
	}
	return ""
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsTypeUndefinedSubtlvList struct {
	state         protoimpl.MessageState                                                                                                                                                                                                                     `protogen:"open.v1"`
	Type          *uint32                                                                                                                                                                                                                                    `protobuf:"varint,51,opt,name=type" json:"type,omitempty"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsTypeUndefinedSubtlvListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsTypeUndefinedSubtlvList) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsTypeUndefinedSubtlvList{}
	mi := &file_rpd_isis_oc_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsTypeUndefinedSubtlvList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsTypeUndefinedSubtlvList) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsTypeUndefinedSubtlvList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsTypeUndefinedSubtlvList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsTypeUndefinedSubtlvList) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 2, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsTypeUndefinedSubtlvList) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsTypeUndefinedSubtlvList) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsTypeUndefinedSubtlvListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsTypeUndefinedSubtlvListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          *uint32                `protobuf:"varint,51,opt,name=type" json:"type,omitempty"`
	Length        *uint32                `protobuf:"varint,52,opt,name=length" json:"length,omitempty"`
	Value         *string                `protobuf:"bytes,53,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsTypeUndefinedSubtlvListStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsTypeUndefinedSubtlvListStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsTypeUndefinedSubtlvListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsTypeUndefinedSubtlvListStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsTypeUndefinedSubtlvListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsTypeUndefinedSubtlvListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsTypeUndefinedSubtlvListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 2, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsTypeUndefinedSubtlvListStateType) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsTypeUndefinedSubtlvListStateType) GetLength() uint32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsTypeUndefinedSubtlvListStateType) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesType struct {
	state         protoimpl.MessageState                                                                                                                                                                      `protogen:"open.v1"`
	Prefix        []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixList `protobuf:"bytes,151,rep,name=prefix" json:"prefix,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 11, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesType) GetPrefix() []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixList {
	if x != nil {
		return x.Prefix
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixList struct {
	state            protoimpl.MessageState                                                                                                                                                                                        `protogen:"open.v1"`
	Prefix           *string                                                                                                                                                                                                       `protobuf:"bytes,51,opt,name=prefix" json:"prefix,omitempty"`
	State            *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListStateType            `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	Subtlvs          *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsType          `protobuf:"bytes,152,opt,name=subtlvs" json:"subtlvs,omitempty"`
	UndefinedSubtlvs *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsType `protobuf:"bytes,153,opt,name=undefined_subtlvs,json=undefinedSubtlvs" json:"undefined_subtlvs,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixList) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixList{}
	mi := &file_rpd_isis_oc_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixList) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixList) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 11, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixList) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixList) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixList) GetSubtlvs() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsType {
	if x != nil {
		return x.Subtlvs
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixList) GetUndefinedSubtlvs() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsType {
	if x != nil {
		return x.UndefinedSubtlvs
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UpDown        *bool                  `protobuf:"varint,51,opt,name=up_down,json=upDown" json:"up_down,omitempty"`
	SBit          *bool                  `protobuf:"varint,52,opt,name=s_bit,json=sBit" json:"s_bit,omitempty"`
	Prefix        *string                `protobuf:"bytes,54,opt,name=prefix" json:"prefix,omitempty"`
	Metric        *uint32                `protobuf:"varint,53,opt,name=metric" json:"metric,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 11, 0, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListStateType) GetUpDown() bool {
	if x != nil && x.UpDown != nil {
		return *x.UpDown
	}
	return false
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListStateType) GetSBit() bool {
	if x != nil && x.SBit != nil {
		return *x.SBit
	}
	return false
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListStateType) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListStateType) GetMetric() uint32 {
	if x != nil && x.Metric != nil {
		return *x.Metric
	}
	return 0
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsType struct {
	state         protoimpl.MessageState                                                                                                                                                                                           `protogen:"open.v1"`
	Subtlv        []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvList `protobuf:"bytes,151,rep,name=subtlv" json:"subtlv,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 11, 0, 0, 1}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsType) GetSubtlv() []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvList {
	if x != nil {
		return x.Subtlv
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsType struct {
	state           protoimpl.MessageState                                                                                                                                                                                                             `protogen:"open.v1"`
	UndefinedSubtlv []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvList `protobuf:"bytes,151,rep,name=undefined_subtlv,json=undefinedSubtlv" json:"undefined_subtlv,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 11, 0, 0, 2}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsType) GetUndefinedSubtlv() []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvList {
	if x != nil {
		return x.UndefinedSubtlv
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvList struct {
	state         protoimpl.MessageState                                                                                                                                                                                                       `protogen:"open.v1"`
	Type          *string                                                                                                                                                                                                                      `protobuf:"bytes,51,opt,name=type" json:"type,omitempty"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListStateType      `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	Tag           *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagType        `protobuf:"bytes,152,opt,name=tag" json:"tag,omitempty"`
	PrefixSids    *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsType `protobuf:"bytes,153,opt,name=prefix_sids,json=prefixSids" json:"prefix_sids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvList) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvList{}
	mi := &file_rpd_isis_oc_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvList) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvList) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 11, 0, 0, 1, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvList) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvList) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvList) GetTag() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagType {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvList) GetPrefixSids() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsType {
	if x != nil {
		return x.PrefixSids
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          *string                `protobuf:"bytes,51,opt,name=type" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 11, 0, 0, 1, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListStateType) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagType struct {
	state         protoimpl.MessageState                                                                                                                                                                                                         `protogen:"open.v1"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 11, 0, 0, 1, 0, 1}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagType) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsType struct {
	state         protoimpl.MessageState                                                                                                                                                                                                                      `protogen:"open.v1"`
	PrefixSid     []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidList `protobuf:"bytes,151,rep,name=prefix_sid,json=prefixSid" json:"prefix_sid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 11, 0, 0, 1, 0, 2}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsType) GetPrefixSid() []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidList {
	if x != nil {
		return x.PrefixSid
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tag32         []uint32               `protobuf:"varint,51,rep,name=tag32" json:"tag32,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagTypeStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagTypeStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 11, 0, 0, 1, 0, 1, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagTypeStateType) GetTag32() []uint32 {
	if x != nil {
		return x.Tag32
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidList struct {
	state         protoimpl.MessageState                                                                                                                                                                                                                             `protogen:"open.v1"`
	Value         *uint32                                                                                                                                                                                                                                            `protobuf:"varint,51,opt,name=value" json:"value,omitempty"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidList) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidList{}
	mi := &file_rpd_isis_oc_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidList) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidList) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 11, 0, 0, 1, 0, 2, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidList) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidList) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         *uint32                `protobuf:"varint,51,opt,name=value" json:"value,omitempty"`
	Flags         []string               `protobuf:"bytes,53,rep,name=flags" json:"flags,omitempty"`
	Algorithm     *uint32                `protobuf:"varint,52,opt,name=algorithm" json:"algorithm,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidListStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidListStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidListStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 11, 0, 0, 1, 0, 2, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidListStateType) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidListStateType) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidListStateType) GetAlgorithm() uint32 {
	if x != nil && x.Algorithm != nil {
		return *x.Algorithm
	}
	return 0
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvList struct {
	state         protoimpl.MessageState                                                                                                                                                                                                                    `protogen:"open.v1"`
	Type          *uint32                                                                                                                                                                                                                                   `protobuf:"varint,51,opt,name=type" json:"type,omitempty"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvList) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvList{}
	mi := &file_rpd_isis_oc_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvList) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvList) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 11, 0, 0, 2, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvList) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvList) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          *uint32                `protobuf:"varint,51,opt,name=type" json:"type,omitempty"`
	Length        *uint32                `protobuf:"varint,52,opt,name=length" json:"length,omitempty"`
	Value         *string                `protobuf:"bytes,53,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvListStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvListStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvListStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 11, 0, 0, 2, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvListStateType) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvListStateType) GetLength() uint32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvListStateType) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesType struct {
	state         protoimpl.MessageState                                                                                                                                                              `protogen:"open.v1"`
	Prefix        []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixList `protobuf:"bytes,151,rep,name=prefix" json:"prefix,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 12, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesType) GetPrefix() []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixList {
	if x != nil {
		return x.Prefix
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixList struct {
	state            protoimpl.MessageState                                                                                                                                                                                `protogen:"open.v1"`
	Prefix           *string                                                                                                                                                                                               `protobuf:"bytes,51,opt,name=prefix" json:"prefix,omitempty"`
	State            *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListStateType            `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	Subtlvs          *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsType          `protobuf:"bytes,152,opt,name=subtlvs" json:"subtlvs,omitempty"`
	UndefinedSubtlvs *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsType `protobuf:"bytes,153,opt,name=undefined_subtlvs,json=undefinedSubtlvs" json:"undefined_subtlvs,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixList) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixList{}
	mi := &file_rpd_isis_oc_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixList) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixList) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 12, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixList) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixList) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixList) GetSubtlvs() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsType {
	if x != nil {
		return x.Subtlvs
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixList) GetUndefinedSubtlvs() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsType {
	if x != nil {
		return x.UndefinedSubtlvs
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UpDown        *bool                  `protobuf:"varint,52,opt,name=up_down,json=upDown" json:"up_down,omitempty"`
	XBit          *bool                  `protobuf:"varint,53,opt,name=x_bit,json=xBit" json:"x_bit,omitempty"`
	SBit          *bool                  `protobuf:"varint,54,opt,name=s_bit,json=sBit" json:"s_bit,omitempty"`
	Prefix        *string                `protobuf:"bytes,51,opt,name=prefix" json:"prefix,omitempty"`
	Metric        *uint32                `protobuf:"varint,55,opt,name=metric" json:"metric,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 12, 0, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListStateType) GetUpDown() bool {
	if x != nil && x.UpDown != nil {
		return *x.UpDown
	}
	return false
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListStateType) GetXBit() bool {
	if x != nil && x.XBit != nil {
		return *x.XBit
	}
	return false
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListStateType) GetSBit() bool {
	if x != nil && x.SBit != nil {
		return *x.SBit
	}
	return false
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListStateType) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListStateType) GetMetric() uint32 {
	if x != nil && x.Metric != nil {
		return *x.Metric
	}
	return 0
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsType struct {
	state         protoimpl.MessageState                                                                                                                                                                                   `protogen:"open.v1"`
	Subtlv        []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvList `protobuf:"bytes,151,rep,name=subtlv" json:"subtlv,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 12, 0, 0, 1}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsType) GetSubtlv() []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvList {
	if x != nil {
		return x.Subtlv
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsType struct {
	state           protoimpl.MessageState                                                                                                                                                                                                     `protogen:"open.v1"`
	UndefinedSubtlv []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvList `protobuf:"bytes,151,rep,name=undefined_subtlv,json=undefinedSubtlv" json:"undefined_subtlv,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 12, 0, 0, 2}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsType) GetUndefinedSubtlv() []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvList {
	if x != nil {
		return x.UndefinedSubtlv
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvList struct {
	state         protoimpl.MessageState                                                                                                                                                                                               `protogen:"open.v1"`
	Type          *string                                                                                                                                                                                                              `protobuf:"bytes,51,opt,name=type" json:"type,omitempty"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListStateType      `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	Tag           *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagType        `protobuf:"bytes,152,opt,name=tag" json:"tag,omitempty"`
	PrefixSids    *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsType `protobuf:"bytes,153,opt,name=prefix_sids,json=prefixSids" json:"prefix_sids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvList) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvList{}
	mi := &file_rpd_isis_oc_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvList) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvList) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 12, 0, 0, 1, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvList) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvList) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvList) GetTag() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagType {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvList) GetPrefixSids() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsType {
	if x != nil {
		return x.PrefixSids
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          *string                `protobuf:"bytes,51,opt,name=type" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 12, 0, 0, 1, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListStateType) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagType struct {
	state         protoimpl.MessageState                                                                                                                                                                                                 `protogen:"open.v1"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 12, 0, 0, 1, 0, 1}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagType) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsType struct {
	state         protoimpl.MessageState                                                                                                                                                                                                              `protogen:"open.v1"`
	PrefixSid     []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidList `protobuf:"bytes,151,rep,name=prefix_sid,json=prefixSid" json:"prefix_sid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 12, 0, 0, 1, 0, 2}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsType) GetPrefixSid() []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidList {
	if x != nil {
		return x.PrefixSid
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tag32         []uint32               `protobuf:"varint,51,rep,name=tag32" json:"tag32,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagTypeStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagTypeStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 12, 0, 0, 1, 0, 1, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagTypeStateType) GetTag32() []uint32 {
	if x != nil {
		return x.Tag32
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidList struct {
	state         protoimpl.MessageState                                                                                                                                                                                                                     `protogen:"open.v1"`
	Value         *uint32                                                                                                                                                                                                                                    `protobuf:"varint,51,opt,name=value" json:"value,omitempty"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidList) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidList{}
	mi := &file_rpd_isis_oc_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidList) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidList) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 12, 0, 0, 1, 0, 2, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidList) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidList) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         *uint32                `protobuf:"varint,51,opt,name=value" json:"value,omitempty"`
	Flags         []string               `protobuf:"bytes,53,rep,name=flags" json:"flags,omitempty"`
	Algorithm     *uint32                `protobuf:"varint,52,opt,name=algorithm" json:"algorithm,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidListStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidListStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidListStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 12, 0, 0, 1, 0, 2, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidListStateType) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidListStateType) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidListStateType) GetAlgorithm() uint32 {
	if x != nil && x.Algorithm != nil {
		return *x.Algorithm
	}
	return 0
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvList struct {
	state         protoimpl.MessageState                                                                                                                                                                                                            `protogen:"open.v1"`
	Type          *uint32                                                                                                                                                                                                                           `protobuf:"varint,51,opt,name=type" json:"type,omitempty"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvList) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvList{}
	mi := &file_rpd_isis_oc_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvList) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvList) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 12, 0, 0, 2, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvList) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvList) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          *uint32                `protobuf:"varint,51,opt,name=type" json:"type,omitempty"`
	Length        *uint32                `protobuf:"varint,52,opt,name=length" json:"length,omitempty"`
	Value         *string                `protobuf:"bytes,53,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvListStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvListStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvListStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 12, 0, 0, 2, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvListStateType) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvListStateType) GetLength() uint32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvListStateType) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsTypeUndefinedTlvList struct {
	state         protoimpl.MessageState                                                                                                                                             `protogen:"open.v1"`
	Type          *uint32                                                                                                                                                            `protobuf:"varint,51,opt,name=type" json:"type,omitempty"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsTypeUndefinedTlvListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsTypeUndefinedTlvList) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsTypeUndefinedTlvList{}
	mi := &file_rpd_isis_oc_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsTypeUndefinedTlvList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsTypeUndefinedTlvList) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsTypeUndefinedTlvList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsTypeUndefinedTlvList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsTypeUndefinedTlvList) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsTypeUndefinedTlvList) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsTypeUndefinedTlvList) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsTypeUndefinedTlvListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsTypeUndefinedTlvListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          *uint32                `protobuf:"varint,51,opt,name=type" json:"type,omitempty"`
	Length        *uint32                `protobuf:"varint,52,opt,name=length" json:"length,omitempty"`
	Value         *string                `protobuf:"bytes,53,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsTypeUndefinedTlvListStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsTypeUndefinedTlvListStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsTypeUndefinedTlvListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsTypeUndefinedTlvListStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsTypeUndefinedTlvListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsTypeUndefinedTlvListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsTypeUndefinedTlvListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsTypeUndefinedTlvListStateType) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsTypeUndefinedTlvListStateType) GetLength() uint32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsTypeUndefinedTlvListStateType) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersTypeStateType struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CorruptedLsps              *uint32                `protobuf:"varint,51,opt,name=corrupted_lsps,json=corruptedLsps" json:"corrupted_lsps,omitempty"`
	DatabaseOverloads          *uint32                `protobuf:"varint,52,opt,name=database_overloads,json=databaseOverloads" json:"database_overloads,omitempty"`
	ManualAddressDropFromAreas *uint32                `protobuf:"varint,53,opt,name=manual_address_drop_from_areas,json=manualAddressDropFromAreas" json:"manual_address_drop_from_areas,omitempty"`
	ExceedMaxSeqNums           *uint32                `protobuf:"varint,54,opt,name=exceed_max_seq_nums,json=exceedMaxSeqNums" json:"exceed_max_seq_nums,omitempty"`
	SeqNumSkips                *uint32                `protobuf:"varint,55,opt,name=seq_num_skips,json=seqNumSkips" json:"seq_num_skips,omitempty"`
	OwnLspPurges               *uint32                `protobuf:"varint,56,opt,name=own_lsp_purges,json=ownLspPurges" json:"own_lsp_purges,omitempty"`
	IdLenMismatch              *uint32                `protobuf:"varint,57,opt,name=id_len_mismatch,json=idLenMismatch" json:"id_len_mismatch,omitempty"`
	PartChanges                *uint32                `protobuf:"varint,58,opt,name=part_changes,json=partChanges" json:"part_changes,omitempty"`
	MaxAreaAddressMismatches   *uint32                `protobuf:"varint,59,opt,name=max_area_address_mismatches,json=maxAreaAddressMismatches" json:"max_area_address_mismatches,omitempty"`
	AuthFails                  *uint32                `protobuf:"varint,60,opt,name=auth_fails,json=authFails" json:"auth_fails,omitempty"`
	SpfRuns                    *uint32                `protobuf:"varint,61,opt,name=spf_runs,json=spfRuns" json:"spf_runs,omitempty"`
	AuthTypeFails              *uint32                `protobuf:"varint,62,opt,name=auth_type_fails,json=authTypeFails" json:"auth_type_fails,omitempty"`
	LspErrors                  *uint32                `protobuf:"varint,63,opt,name=lsp_errors,json=lspErrors" json:"lsp_errors,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersTypeStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersTypeStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 2, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersTypeStateType) GetCorruptedLsps() uint32 {
	if x != nil && x.CorruptedLsps != nil {
		return *x.CorruptedLsps
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersTypeStateType) GetDatabaseOverloads() uint32 {
	if x != nil && x.DatabaseOverloads != nil {
		return *x.DatabaseOverloads
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersTypeStateType) GetManualAddressDropFromAreas() uint32 {
	if x != nil && x.ManualAddressDropFromAreas != nil {
		return *x.ManualAddressDropFromAreas
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersTypeStateType) GetExceedMaxSeqNums() uint32 {
	if x != nil && x.ExceedMaxSeqNums != nil {
		return *x.ExceedMaxSeqNums
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersTypeStateType) GetSeqNumSkips() uint32 {
	if x != nil && x.SeqNumSkips != nil {
		return *x.SeqNumSkips
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersTypeStateType) GetOwnLspPurges() uint32 {
	if x != nil && x.OwnLspPurges != nil {
		return *x.OwnLspPurges
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersTypeStateType) GetIdLenMismatch() uint32 {
	if x != nil && x.IdLenMismatch != nil {
		return *x.IdLenMismatch
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersTypeStateType) GetPartChanges() uint32 {
	if x != nil && x.PartChanges != nil {
		return *x.PartChanges
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersTypeStateType) GetMaxAreaAddressMismatches() uint32 {
	if x != nil && x.MaxAreaAddressMismatches != nil {
		return *x.MaxAreaAddressMismatches
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersTypeStateType) GetAuthFails() uint32 {
	if x != nil && x.AuthFails != nil {
		return *x.AuthFails
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersTypeStateType) GetSpfRuns() uint32 {
	if x != nil && x.SpfRuns != nil {
		return *x.SpfRuns
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersTypeStateType) GetAuthTypeFails() uint32 {
	if x != nil && x.AuthTypeFails != nil {
		return *x.AuthTypeFails
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersTypeStateType) GetLspErrors() uint32 {
	if x != nil && x.LspErrors != nil {
		return *x.LspErrors
	}
	return 0
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceList struct {
	state           protoimpl.MessageState                                                                                                  `protogen:"open.v1"`
	InterfaceId     *string                                                                                                                 `protobuf:"bytes,51,opt,name=interface_id,json=interfaceId" json:"interface_id,omitempty"`
	State           *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListStateType           `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	CircuitCounters *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListCircuitCountersType `protobuf:"bytes,152,opt,name=circuit_counters,json=circuitCounters" json:"circuit_counters,omitempty"`
	PacketCounters  *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersType  `protobuf:"bytes,153,opt,name=packet_counters,json=packetCounters" json:"packet_counters,omitempty"`
	Levels          *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsType          `protobuf:"bytes,154,opt,name=levels" json:"levels,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceList) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceList{}
	mi := &file_rpd_isis_oc_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceList) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceList) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceList) GetInterfaceId() string {
	if x != nil && x.InterfaceId != nil {
		return *x.InterfaceId
	}
	return ""
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceList) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceList) GetCircuitCounters() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListCircuitCountersType {
	if x != nil {
		return x.CircuitCounters
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceList) GetPacketCounters() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersType {
	if x != nil {
		return x.PacketCounters
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceList) GetLevels() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsType {
	if x != nil {
		return x.Levels
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InterfaceId   *string                `protobuf:"bytes,51,opt,name=interface_id,json=interfaceId" json:"interface_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListStateType) GetInterfaceId() string {
	if x != nil && x.InterfaceId != nil {
		return *x.InterfaceId
	}
	return ""
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListCircuitCountersType struct {
	state         protoimpl.MessageState                                                                                                           `protogen:"open.v1"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListCircuitCountersTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListCircuitCountersType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListCircuitCountersType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListCircuitCountersType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListCircuitCountersType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListCircuitCountersType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListCircuitCountersType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListCircuitCountersType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 1}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListCircuitCountersType) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListCircuitCountersTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersType struct {
	state         protoimpl.MessageState                                                                                                            `protogen:"open.v1"`
	Lsp           *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeLspType     `protobuf:"bytes,151,opt,name=lsp" json:"lsp,omitempty"`
	Iih           *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIihType     `protobuf:"bytes,152,opt,name=iih" json:"iih,omitempty"`
	Ish           *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIshType     `protobuf:"bytes,155,opt,name=ish" json:"ish,omitempty"`
	Esh           *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeEshType     `protobuf:"bytes,156,opt,name=esh" json:"esh,omitempty"`
	Psnp          *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypePsnpType    `protobuf:"bytes,153,opt,name=psnp" json:"psnp,omitempty"`
	Csnp          *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeCsnpType    `protobuf:"bytes,154,opt,name=csnp" json:"csnp,omitempty"`
	Unknown       *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeUnknownType `protobuf:"bytes,157,opt,name=unknown" json:"unknown,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 2}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersType) GetLsp() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeLspType {
	if x != nil {
		return x.Lsp
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersType) GetIih() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIihType {
	if x != nil {
		return x.Iih
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersType) GetIsh() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIshType {
	if x != nil {
		return x.Ish
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersType) GetEsh() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeEshType {
	if x != nil {
		return x.Esh
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersType) GetPsnp() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypePsnpType {
	if x != nil {
		return x.Psnp
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersType) GetCsnp() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeCsnpType {
	if x != nil {
		return x.Csnp
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersType) GetUnknown() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeUnknownType {
	if x != nil {
		return x.Unknown
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsType struct {
	state         protoimpl.MessageState                                                                                                    `protogen:"open.v1"`
	Level         []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelList `protobuf:"bytes,151,rep,name=level" json:"level,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 3}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsType) GetLevel() []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelList {
	if x != nil {
		return x.Level
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListCircuitCountersTypeStateType struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	AdjChanges               *uint32                `protobuf:"varint,51,opt,name=adj_changes,json=adjChanges" json:"adj_changes,omitempty"`
	InitFails                *uint32                `protobuf:"varint,52,opt,name=init_fails,json=initFails" json:"init_fails,omitempty"`
	RejectedAdj              *uint32                `protobuf:"varint,53,opt,name=rejected_adj,json=rejectedAdj" json:"rejected_adj,omitempty"`
	IdFieldLenMismatches     *uint32                `protobuf:"varint,54,opt,name=id_field_len_mismatches,json=idFieldLenMismatches" json:"id_field_len_mismatches,omitempty"`
	MaxAreaAddressMismatches *uint32                `protobuf:"varint,55,opt,name=max_area_address_mismatches,json=maxAreaAddressMismatches" json:"max_area_address_mismatches,omitempty"`
	AuthTypeFails            *uint32                `protobuf:"varint,56,opt,name=auth_type_fails,json=authTypeFails" json:"auth_type_fails,omitempty"`
	AuthFails                *uint32                `protobuf:"varint,57,opt,name=auth_fails,json=authFails" json:"auth_fails,omitempty"`
	LanDisChanges            *uint32                `protobuf:"varint,58,opt,name=lan_dis_changes,json=lanDisChanges" json:"lan_dis_changes,omitempty"`
	AdjNumber                *uint32                `protobuf:"varint,59,opt,name=adj_number,json=adjNumber" json:"adj_number,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListCircuitCountersTypeStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListCircuitCountersTypeStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListCircuitCountersTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListCircuitCountersTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListCircuitCountersTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListCircuitCountersTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListCircuitCountersTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 1, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListCircuitCountersTypeStateType) GetAdjChanges() uint32 {
	if x != nil && x.AdjChanges != nil {
		return *x.AdjChanges
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListCircuitCountersTypeStateType) GetInitFails() uint32 {
	if x != nil && x.InitFails != nil {
		return *x.InitFails
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListCircuitCountersTypeStateType) GetRejectedAdj() uint32 {
	if x != nil && x.RejectedAdj != nil {
		return *x.RejectedAdj
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListCircuitCountersTypeStateType) GetIdFieldLenMismatches() uint32 {
	if x != nil && x.IdFieldLenMismatches != nil {
		return *x.IdFieldLenMismatches
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListCircuitCountersTypeStateType) GetMaxAreaAddressMismatches() uint32 {
	if x != nil && x.MaxAreaAddressMismatches != nil {
		return *x.MaxAreaAddressMismatches
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListCircuitCountersTypeStateType) GetAuthTypeFails() uint32 {
	if x != nil && x.AuthTypeFails != nil {
		return *x.AuthTypeFails
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListCircuitCountersTypeStateType) GetAuthFails() uint32 {
	if x != nil && x.AuthFails != nil {
		return *x.AuthFails
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListCircuitCountersTypeStateType) GetLanDisChanges() uint32 {
	if x != nil && x.LanDisChanges != nil {
		return *x.LanDisChanges
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListCircuitCountersTypeStateType) GetAdjNumber() uint32 {
	if x != nil && x.AdjNumber != nil {
		return *x.AdjNumber
	}
	return 0
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeLspType struct {
	state         protoimpl.MessageState                                                                                                                 `protogen:"open.v1"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeLspTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeLspType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeLspType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeLspType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeLspType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeLspType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeLspType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeLspType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 2, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeLspType) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeLspTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIihType struct {
	state         protoimpl.MessageState                                                                                                                 `protogen:"open.v1"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIihTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIihType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIihType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIihType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIihType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIihType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIihType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIihType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 2, 1}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIihType) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIihTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIshType struct {
	state         protoimpl.MessageState                                                                                                                 `protogen:"open.v1"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIshTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIshType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIshType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIshType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIshType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIshType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIshType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIshType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 2, 2}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIshType) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIshTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeEshType struct {
	state         protoimpl.MessageState                                                                                                                 `protogen:"open.v1"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeEshTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeEshType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeEshType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeEshType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeEshType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeEshType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeEshType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeEshType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 2, 3}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeEshType) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeEshTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypePsnpType struct {
	state         protoimpl.MessageState                                                                                                                  `protogen:"open.v1"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypePsnpTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypePsnpType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypePsnpType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypePsnpType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypePsnpType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypePsnpType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypePsnpType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypePsnpType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 2, 4}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypePsnpType) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypePsnpTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeCsnpType struct {
	state         protoimpl.MessageState                                                                                                                  `protogen:"open.v1"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeCsnpTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeCsnpType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeCsnpType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeCsnpType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeCsnpType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeCsnpType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeCsnpType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeCsnpType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 2, 5}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeCsnpType) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeCsnpTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeUnknownType struct {
	state         protoimpl.MessageState                                                                                                                     `protogen:"open.v1"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeUnknownTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeUnknownType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeUnknownType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeUnknownType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeUnknownType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeUnknownType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeUnknownType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeUnknownType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 2, 6}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeUnknownType) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeUnknownTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeLspTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Received      *uint32                `protobuf:"varint,51,opt,name=received" json:"received,omitempty"`
	Processed     *uint32                `protobuf:"varint,53,opt,name=processed" json:"processed,omitempty"`
	Dropped       *uint32                `protobuf:"varint,52,opt,name=dropped" json:"dropped,omitempty"`
	Sent          *uint32                `protobuf:"varint,54,opt,name=sent" json:"sent,omitempty"`
	Retransmit    *uint32                `protobuf:"varint,55,opt,name=retransmit" json:"retransmit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeLspTypeStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeLspTypeStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeLspTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeLspTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeLspTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeLspTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeLspTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 2, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeLspTypeStateType) GetReceived() uint32 {
	if x != nil && x.Received != nil {
		return *x.Received
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeLspTypeStateType) GetProcessed() uint32 {
	if x != nil && x.Processed != nil {
		return *x.Processed
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeLspTypeStateType) GetDropped() uint32 {
	if x != nil && x.Dropped != nil {
		return *x.Dropped
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeLspTypeStateType) GetSent() uint32 {
	if x != nil && x.Sent != nil {
		return *x.Sent
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeLspTypeStateType) GetRetransmit() uint32 {
	if x != nil && x.Retransmit != nil {
		return *x.Retransmit
	}
	return 0
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIihTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Received      *uint32                `protobuf:"varint,51,opt,name=received" json:"received,omitempty"`
	Processed     *uint32                `protobuf:"varint,53,opt,name=processed" json:"processed,omitempty"`
	Dropped       *uint32                `protobuf:"varint,52,opt,name=dropped" json:"dropped,omitempty"`
	Sent          *uint32                `protobuf:"varint,54,opt,name=sent" json:"sent,omitempty"`
	Retransmit    *uint32                `protobuf:"varint,55,opt,name=retransmit" json:"retransmit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIihTypeStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIihTypeStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIihTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIihTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIihTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIihTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIihTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 2, 1, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIihTypeStateType) GetReceived() uint32 {
	if x != nil && x.Received != nil {
		return *x.Received
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIihTypeStateType) GetProcessed() uint32 {
	if x != nil && x.Processed != nil {
		return *x.Processed
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIihTypeStateType) GetDropped() uint32 {
	if x != nil && x.Dropped != nil {
		return *x.Dropped
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIihTypeStateType) GetSent() uint32 {
	if x != nil && x.Sent != nil {
		return *x.Sent
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIihTypeStateType) GetRetransmit() uint32 {
	if x != nil && x.Retransmit != nil {
		return *x.Retransmit
	}
	return 0
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIshTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Received      *uint32                `protobuf:"varint,51,opt,name=received" json:"received,omitempty"`
	Processed     *uint32                `protobuf:"varint,53,opt,name=processed" json:"processed,omitempty"`
	Dropped       *uint32                `protobuf:"varint,52,opt,name=dropped" json:"dropped,omitempty"`
	Sent          *uint32                `protobuf:"varint,54,opt,name=sent" json:"sent,omitempty"`
	Retransmit    *uint32                `protobuf:"varint,55,opt,name=retransmit" json:"retransmit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIshTypeStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIshTypeStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIshTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIshTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIshTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIshTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIshTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 2, 2, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIshTypeStateType) GetReceived() uint32 {
	if x != nil && x.Received != nil {
		return *x.Received
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIshTypeStateType) GetProcessed() uint32 {
	if x != nil && x.Processed != nil {
		return *x.Processed
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIshTypeStateType) GetDropped() uint32 {
	if x != nil && x.Dropped != nil {
		return *x.Dropped
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIshTypeStateType) GetSent() uint32 {
	if x != nil && x.Sent != nil {
		return *x.Sent
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIshTypeStateType) GetRetransmit() uint32 {
	if x != nil && x.Retransmit != nil {
		return *x.Retransmit
	}
	return 0
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeEshTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Received      *uint32                `protobuf:"varint,51,opt,name=received" json:"received,omitempty"`
	Processed     *uint32                `protobuf:"varint,53,opt,name=processed" json:"processed,omitempty"`
	Dropped       *uint32                `protobuf:"varint,52,opt,name=dropped" json:"dropped,omitempty"`
	Sent          *uint32                `protobuf:"varint,54,opt,name=sent" json:"sent,omitempty"`
	Retransmit    *uint32                `protobuf:"varint,55,opt,name=retransmit" json:"retransmit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeEshTypeStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeEshTypeStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeEshTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeEshTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeEshTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeEshTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeEshTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 2, 3, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeEshTypeStateType) GetReceived() uint32 {
	if x != nil && x.Received != nil {
		return *x.Received
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeEshTypeStateType) GetProcessed() uint32 {
	if x != nil && x.Processed != nil {
		return *x.Processed
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeEshTypeStateType) GetDropped() uint32 {
	if x != nil && x.Dropped != nil {
		return *x.Dropped
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeEshTypeStateType) GetSent() uint32 {
	if x != nil && x.Sent != nil {
		return *x.Sent
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeEshTypeStateType) GetRetransmit() uint32 {
	if x != nil && x.Retransmit != nil {
		return *x.Retransmit
	}
	return 0
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypePsnpTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Received      *uint32                `protobuf:"varint,51,opt,name=received" json:"received,omitempty"`
	Processed     *uint32                `protobuf:"varint,53,opt,name=processed" json:"processed,omitempty"`
	Dropped       *uint32                `protobuf:"varint,52,opt,name=dropped" json:"dropped,omitempty"`
	Sent          *uint32                `protobuf:"varint,54,opt,name=sent" json:"sent,omitempty"`
	Retransmit    *uint32                `protobuf:"varint,55,opt,name=retransmit" json:"retransmit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypePsnpTypeStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypePsnpTypeStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[143]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypePsnpTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypePsnpTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypePsnpTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[143]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypePsnpTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypePsnpTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 2, 4, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypePsnpTypeStateType) GetReceived() uint32 {
	if x != nil && x.Received != nil {
		return *x.Received
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypePsnpTypeStateType) GetProcessed() uint32 {
	if x != nil && x.Processed != nil {
		return *x.Processed
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypePsnpTypeStateType) GetDropped() uint32 {
	if x != nil && x.Dropped != nil {
		return *x.Dropped
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypePsnpTypeStateType) GetSent() uint32 {
	if x != nil && x.Sent != nil {
		return *x.Sent
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypePsnpTypeStateType) GetRetransmit() uint32 {
	if x != nil && x.Retransmit != nil {
		return *x.Retransmit
	}
	return 0
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeCsnpTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Received      *uint32                `protobuf:"varint,51,opt,name=received" json:"received,omitempty"`
	Processed     *uint32                `protobuf:"varint,53,opt,name=processed" json:"processed,omitempty"`
	Dropped       *uint32                `protobuf:"varint,52,opt,name=dropped" json:"dropped,omitempty"`
	Sent          *uint32                `protobuf:"varint,54,opt,name=sent" json:"sent,omitempty"`
	Retransmit    *uint32                `protobuf:"varint,55,opt,name=retransmit" json:"retransmit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeCsnpTypeStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeCsnpTypeStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[144]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeCsnpTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeCsnpTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeCsnpTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[144]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeCsnpTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeCsnpTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 2, 5, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeCsnpTypeStateType) GetReceived() uint32 {
	if x != nil && x.Received != nil {
		return *x.Received
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeCsnpTypeStateType) GetProcessed() uint32 {
	if x != nil && x.Processed != nil {
		return *x.Processed
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeCsnpTypeStateType) GetDropped() uint32 {
	if x != nil && x.Dropped != nil {
		return *x.Dropped
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeCsnpTypeStateType) GetSent() uint32 {
	if x != nil && x.Sent != nil {
		return *x.Sent
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeCsnpTypeStateType) GetRetransmit() uint32 {
	if x != nil && x.Retransmit != nil {
		return *x.Retransmit
	}
	return 0
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeUnknownTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Received      *uint32                `protobuf:"varint,51,opt,name=received" json:"received,omitempty"`
	Processed     *uint32                `protobuf:"varint,53,opt,name=processed" json:"processed,omitempty"`
	Dropped       *uint32                `protobuf:"varint,52,opt,name=dropped" json:"dropped,omitempty"`
	Sent          *uint32                `protobuf:"varint,54,opt,name=sent" json:"sent,omitempty"`
	Retransmit    *uint32                `protobuf:"varint,55,opt,name=retransmit" json:"retransmit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeUnknownTypeStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeUnknownTypeStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[145]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeUnknownTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeUnknownTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeUnknownTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[145]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeUnknownTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeUnknownTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 2, 6, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeUnknownTypeStateType) GetReceived() uint32 {
	if x != nil && x.Received != nil {
		return *x.Received
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeUnknownTypeStateType) GetProcessed() uint32 {
	if x != nil && x.Processed != nil {
		return *x.Processed
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeUnknownTypeStateType) GetDropped() uint32 {
	if x != nil && x.Dropped != nil {
		return *x.Dropped
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeUnknownTypeStateType) GetSent() uint32 {
	if x != nil && x.Sent != nil {
		return *x.Sent
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeUnknownTypeStateType) GetRetransmit() uint32 {
	if x != nil && x.Retransmit != nil {
		return *x.Retransmit
	}
	return 0
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelList struct {
	state         protoimpl.MessageState                                                                                                                 `protogen:"open.v1"`
	LevelNumber   *uint32                                                                                                                                `protobuf:"varint,51,opt,name=level_number,json=levelNumber" json:"level_number,omitempty"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListStateType       `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	Adjacencies   *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesType `protobuf:"bytes,152,opt,name=adjacencies" json:"adjacencies,omitempty"`
	AfiSafi       *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiType     `protobuf:"bytes,153,opt,name=afi_safi,json=afiSafi" json:"afi_safi,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelList) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelList{}
	mi := &file_rpd_isis_oc_proto_msgTypes[146]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelList) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[146]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelList) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 3, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelList) GetLevelNumber() uint32 {
	if x != nil && x.LevelNumber != nil {
		return *x.LevelNumber
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelList) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelList) GetAdjacencies() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesType {
	if x != nil {
		return x.Adjacencies
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelList) GetAfiSafi() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiType {
	if x != nil {
		return x.AfiSafi
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LevelNumber   *uint32                `protobuf:"varint,51,opt,name=level_number,json=levelNumber" json:"level_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[147]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[147]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 3, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListStateType) GetLevelNumber() uint32 {
	if x != nil && x.LevelNumber != nil {
		return *x.LevelNumber
	}
	return 0
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesType struct {
	state         protoimpl.MessageState                                                                                                                                `protogen:"open.v1"`
	Adjacency     []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyList `protobuf:"bytes,151,rep,name=adjacency" json:"adjacency,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[148]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[148]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 3, 0, 1}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesType) GetAdjacency() []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyList {
	if x != nil {
		return x.Adjacency
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiType struct {
	state         protoimpl.MessageState                                                                                                                     `protogen:"open.v1"`
	Af            []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiTypeAfList `protobuf:"bytes,151,rep,name=af" json:"af,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[149]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[149]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 3, 0, 2}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiType) GetAf() []*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiTypeAfList {
	if x != nil {
		return x.Af
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyList struct {
	state         protoimpl.MessageState                                                                                                                                       `protogen:"open.v1"`
	SystemId      *string                                                                                                                                                      `protobuf:"bytes,51,opt,name=system_id,json=systemId" json:"system_id,omitempty"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyList) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyList{}
	mi := &file_rpd_isis_oc_proto_msgTypes[150]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyList) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[150]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyList) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 3, 0, 1, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyList) GetSystemId() string {
	if x != nil && x.SystemId != nil {
		return *x.SystemId
	}
	return ""
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyList) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyListStateType struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	SystemId                  *string                `protobuf:"bytes,51,opt,name=system_id,json=systemId" json:"system_id,omitempty"`
	NeighborSnpa              *string                `protobuf:"bytes,52,opt,name=neighbor_snpa,json=neighborSnpa" json:"neighbor_snpa,omitempty"`
	LocalExtendedCircuitId    *uint32                `protobuf:"varint,53,opt,name=local_extended_circuit_id,json=localExtendedCircuitId" json:"local_extended_circuit_id,omitempty"`
	NeighborExtendedCircuitId *uint32                `protobuf:"varint,54,opt,name=neighbor_extended_circuit_id,json=neighborExtendedCircuitId" json:"neighbor_extended_circuit_id,omitempty"`
	Priority                  *uint32                `protobuf:"varint,55,opt,name=priority" json:"priority,omitempty"`
	DisSystemId               *string                `protobuf:"bytes,56,opt,name=dis_system_id,json=disSystemId" json:"dis_system_id,omitempty"`
	NeighborCircuitType       *string                `protobuf:"bytes,57,opt,name=neighbor_circuit_type,json=neighborCircuitType" json:"neighbor_circuit_type,omitempty"`
	AdjacencyType             *string                `protobuf:"bytes,58,opt,name=adjacency_type,json=adjacencyType" json:"adjacency_type,omitempty"`
	AdjacencyState            *string                `protobuf:"bytes,59,opt,name=adjacency_state,json=adjacencyState" json:"adjacency_state,omitempty"`
	RemainingHoldTime         *uint32                `protobuf:"varint,66,opt,name=remaining_hold_time,json=remainingHoldTime" json:"remaining_hold_time,omitempty"`
	UpTime                    *uint32                `protobuf:"varint,60,opt,name=up_time,json=upTime" json:"up_time,omitempty"`
	MultiTopology             *bool                  `protobuf:"varint,61,opt,name=multi_topology,json=multiTopology" json:"multi_topology,omitempty"`
	Topology                  []string               `protobuf:"bytes,62,rep,name=topology" json:"topology,omitempty"`
	RestartSupport            *bool                  `protobuf:"varint,63,opt,name=restart_support,json=restartSupport" json:"restart_support,omitempty"`
	RestartSuppress           *bool                  `protobuf:"varint,64,opt,name=restart_suppress,json=restartSuppress" json:"restart_suppress,omitempty"`
	RestartStatus             *bool                  `protobuf:"varint,65,opt,name=restart_status,json=restartStatus" json:"restart_status,omitempty"`
	AreaAddress               []string               `protobuf:"bytes,67,rep,name=area_address,json=areaAddress" json:"area_address,omitempty"`
	Nlpid                     []string               `protobuf:"bytes,68,rep,name=nlpid" json:"nlpid,omitempty"`
	Ipv4NeighborAddress       []string               `protobuf:"bytes,69,rep,name=ipv4_neighbor_address,json=ipv4NeighborAddress" json:"ipv4_neighbor_address,omitempty"`
	Ipv6NeighborAddress       []string               `protobuf:"bytes,70,rep,name=ipv6_neighbor_address,json=ipv6NeighborAddress" json:"ipv6_neighbor_address,omitempty"`
	LanAdjacencyState         *string                `protobuf:"bytes,71,opt,name=lan_adjacency_state,json=lanAdjacencyState" json:"lan_adjacency_state,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyListStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyListStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[151]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyListStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[151]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 3, 0, 1, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyListStateType) GetSystemId() string {
	if x != nil && x.SystemId != nil {
		return *x.SystemId
	}
	return ""
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyListStateType) GetNeighborSnpa() string {
	if x != nil && x.NeighborSnpa != nil {
		return *x.NeighborSnpa
	}
	return ""
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyListStateType) GetLocalExtendedCircuitId() uint32 {
	if x != nil && x.LocalExtendedCircuitId != nil {
		return *x.LocalExtendedCircuitId
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyListStateType) GetNeighborExtendedCircuitId() uint32 {
	if x != nil && x.NeighborExtendedCircuitId != nil {
		return *x.NeighborExtendedCircuitId
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyListStateType) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyListStateType) GetDisSystemId() string {
	if x != nil && x.DisSystemId != nil {
		return *x.DisSystemId
	}
	return ""
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyListStateType) GetNeighborCircuitType() string {
	if x != nil && x.NeighborCircuitType != nil {
		return *x.NeighborCircuitType
	}
	return ""
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyListStateType) GetAdjacencyType() string {
	if x != nil && x.AdjacencyType != nil {
		return *x.AdjacencyType
	}
	return ""
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyListStateType) GetAdjacencyState() string {
	if x != nil && x.AdjacencyState != nil {
		return *x.AdjacencyState
	}
	return ""
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyListStateType) GetRemainingHoldTime() uint32 {
	if x != nil && x.RemainingHoldTime != nil {
		return *x.RemainingHoldTime
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyListStateType) GetUpTime() uint32 {
	if x != nil && x.UpTime != nil {
		return *x.UpTime
	}
	return 0
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyListStateType) GetMultiTopology() bool {
	if x != nil && x.MultiTopology != nil {
		return *x.MultiTopology
	}
	return false
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyListStateType) GetTopology() []string {
	if x != nil {
		return x.Topology
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyListStateType) GetRestartSupport() bool {
	if x != nil && x.RestartSupport != nil {
		return *x.RestartSupport
	}
	return false
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyListStateType) GetRestartSuppress() bool {
	if x != nil && x.RestartSuppress != nil {
		return *x.RestartSuppress
	}
	return false
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyListStateType) GetRestartStatus() bool {
	if x != nil && x.RestartStatus != nil {
		return *x.RestartStatus
	}
	return false
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyListStateType) GetAreaAddress() []string {
	if x != nil {
		return x.AreaAddress
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyListStateType) GetNlpid() []string {
	if x != nil {
		return x.Nlpid
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyListStateType) GetIpv4NeighborAddress() []string {
	if x != nil {
		return x.Ipv4NeighborAddress
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyListStateType) GetIpv6NeighborAddress() []string {
	if x != nil {
		return x.Ipv6NeighborAddress
	}
	return nil
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyListStateType) GetLanAdjacencyState() string {
	if x != nil && x.LanAdjacencyState != nil {
		return *x.LanAdjacencyState
	}
	return ""
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiTypeAfList struct {
	state         protoimpl.MessageState                                                                                                                            `protogen:"open.v1"`
	AfiName       *string                                                                                                                                           `protobuf:"bytes,51,opt,name=afi_name,json=afiName" json:"afi_name,omitempty"`
	SafiName      *string                                                                                                                                           `protobuf:"bytes,52,opt,name=safi_name,json=safiName" json:"safi_name,omitempty"`
	State         *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiTypeAfListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiTypeAfList) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiTypeAfList{}
	mi := &file_rpd_isis_oc_proto_msgTypes[152]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiTypeAfList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiTypeAfList) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiTypeAfList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[152]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiTypeAfList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiTypeAfList) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiTypeAfList) GetAfiName() string {
	if x != nil && x.AfiName != nil {
		return *x.AfiName
	}
	return ""
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiTypeAfList) GetSafiName() string {
	if x != nil && x.SafiName != nil {
		return *x.SafiName
	}
	return ""
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiTypeAfList) GetState() *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiTypeAfListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiTypeAfListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AfiName       *string                `protobuf:"bytes,51,opt,name=afi_name,json=afiName" json:"afi_name,omitempty"`
	SafiName      *string                `protobuf:"bytes,52,opt,name=safi_name,json=safiName" json:"safi_name,omitempty"`
	Metric        *uint32                `protobuf:"varint,53,opt,name=metric" json:"metric,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiTypeAfListStateType) Reset() {
	*x = NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiTypeAfListStateType{}
	mi := &file_rpd_isis_oc_proto_msgTypes[153]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiTypeAfListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiTypeAfListStateType) ProtoMessage() {
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiTypeAfListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_isis_oc_proto_msgTypes[153]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiTypeAfListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiTypeAfListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_isis_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0}
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiTypeAfListStateType) GetAfiName() string {
	if x != nil && x.AfiName != nil {
		return *x.AfiName
	}
	return ""
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiTypeAfListStateType) GetSafiName() string {
	if x != nil && x.SafiName != nil {
		return *x.SafiName
	}
	return ""
}

func (x *NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiTypeAfListStateType) GetMetric() uint32 {
	if x != nil && x.Metric != nil {
		return *x.Metric
	}
	return 0
}

var file_rpd_isis_oc_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*NetworkInstancesIsis)(nil),
		Field:         65,
		Name:          "jnpr_network_instances_isis_ext",
		Tag:           "bytes,65,opt,name=jnpr_network_instances_isis_ext",
		Filename:      "rpd_isis_oc.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional network_instances_isis jnpr_network_instances_isis_ext = 65;
	E_JnprNetworkInstancesIsisExt = &file_rpd_isis_oc_proto_extTypes[0]
)

var File_rpd_isis_oc_proto protoreflect.FileDescriptor

var file_rpd_isis_oc_proto_rawDesc = string([]byte{
	0x0a, 0x11, 0x72, 0x70, 0x64, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74,
	0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd2, 0xf1, 0x02, 0x0a, 0x16, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x69, 0x73, 0x69, 0x73, 0x12, 0x59, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a,
	0xdb, 0xf0, 0x02, 0x0a, 0x15, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x1a, 0xc8, 0xef, 0x02, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x67, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a,
	0xcb, 0xee, 0x02, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x69, 0x0a, 0x04, 0x69, 0x73, 0x69, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x54, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x69, 0x73, 0x69, 0x73, 0x1a, 0xcd, 0xed,
	0x02, 0x0a, 0x09, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x79, 0x0a, 0x06,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x1a,
	0xad, 0xad, 0x02, 0x0a, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x82, 0x01, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x6b, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0x97, 0xac, 0x02, 0x0a, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02,
	0x08, 0x01, 0x52, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0xb6, 0x01, 0x0a, 0x13, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x84,
	0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x11, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x76, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xbc, 0x01, 0x0a, 0x15, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x86, 0x01, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69,
	0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x13, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x1a, 0xac, 0xa1, 0x02, 0x0a, 0x18, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x03, 0x6c, 0x73, 0x70, 0x18, 0x97, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x8d, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x03, 0x6c, 0x73, 0x70, 0x1a, 0xea, 0x9f, 0x02, 0x0a, 0x08, 0x6c,
	0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x06, 0x6c, 0x73, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x05,
	0x6c, 0x73, 0x70, 0x49, 0x64, 0x12, 0xb0, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x98, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73,
	0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xad, 0x01, 0x0a, 0x04, 0x74, 0x6c, 0x76,
	0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x97, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x6c, 0x76, 0x73, 0x12, 0xca, 0x01, 0x0a, 0x0e, 0x75, 0x6e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6c, 0x76, 0x73, 0x18, 0x99, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0xa1, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6c, 0x76,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x54, 0x6c, 0x76, 0x73, 0x1a, 0xb3, 0x03, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x73, 0x70, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x41, 0x72, 0x65, 0x61, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x64, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x64, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x64, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x64, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x66,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x64, 0x75, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x64, 0x75, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x3e, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x73, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6c, 0x73, 0x70,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x86, 0x93, 0x02, 0x0a,
	0x09, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xb4, 0x01, 0x0a, 0x03, 0x74,
	0x6c, 0x76, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0xa0, 0x01, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69,
	0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x03, 0x74, 0x6c,
	0x76, 0x1a, 0xc0, 0x91, 0x02, 0x0a, 0x08, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82,
	0x40, 0x02, 0x08, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0xc3, 0x01, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xab, 0x01, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0xd7, 0x01, 0x0a, 0x0c, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xb2, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x72, 0x65, 0x61,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61,
	0x72, 0x65, 0x61, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xdf, 0x01, 0x0a, 0x0f, 0x6c,
	0x73, 0x70, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x9e,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xb5, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6c,
	0x73, 0x70, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0xc3, 0x01, 0x0a,
	0x05, 0x6e, 0x6c, 0x70, 0x69, 0x64, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xab, 0x01,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c,
	0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x6e, 0x6c, 0x70, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x6e, 0x6c, 0x70,
	0x69, 0x64, 0x12, 0xcc, 0x01, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xae, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73,
	0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0xfa, 0x01, 0x0a, 0x18, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x9c,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xbe, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x16, 0x69, 0x70, 0x76, 0x34, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0xfa,
	0x01, 0x0a, 0x18, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x9d, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0xbe, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x16, 0x69, 0x70, 0x76, 0x36, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0xe4, 0x01, 0x0a, 0x11,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xb7, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x0e, 0x69, 0x70, 0x76, 0x34, 0x54, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0xd1, 0x01, 0x0a, 0x0a, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x73, 0x72, 0x6c, 0x67,
	0x73, 0x18, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xb0, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x73, 0x72, 0x6c, 0x67, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x69, 0x70, 0x76,
	0x34, 0x53, 0x72, 0x6c, 0x67, 0x73, 0x12, 0xec, 0x01, 0x0a, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0xa2,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xb9, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0xfa, 0x01, 0x0a, 0x18, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xbe, 0x01, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69,
	0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x16, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x49, 0x73, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x80, 0x02, 0x0a, 0x1a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xc0, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x18, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x70, 0x76, 0x34, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0xe6, 0x01, 0x0a, 0x11, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0xa0, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0xb7, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x10, 0x69, 0x70,
	0x76, 0x36, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x20,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x1a, 0x93, 0x02, 0x0a, 0x11, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xd5, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xbd, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69,
	0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c,
	0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x26,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x33, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x93, 0x02, 0x0a, 0x14, 0x6c, 0x73, 0x70, 0x5f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0xd8, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0xc0, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x20, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x1a, 0x81, 0x02, 0x0a,
	0x0a, 0x6e, 0x6c, 0x70, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xce, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xb6, 0x01, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x6e, 0x6c, 0x70, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x22, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6c,
	0x70, 0x69, 0x64, 0x18, 0x33, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6c, 0x70, 0x69, 0x64,
	0x1a, 0x87, 0x02, 0x0a, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0xd1, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0xb9, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c,
	0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xab, 0x02, 0x0a, 0x1d, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xe1, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xc9, 0x01,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c,
	0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0x26, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x33, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xab, 0x02, 0x0a, 0x1d, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xe1, 0x01, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xc9, 0x01, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x26,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x33, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xa5, 0x02, 0x0a, 0x16, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x74, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0xda, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0xc2, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x74, 0x65, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x2e,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c,
	0x74, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x1a, 0xad,
	0x06, 0x0a, 0x0f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x73, 0x72, 0x6c, 0x67, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0xde, 0x01, 0x0a, 0x09, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x73, 0x72, 0x6c, 0x67,
	0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0xbf, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69,
	0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c,
	0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x73, 0x72, 0x6c, 0x67, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x73, 0x72, 0x6c, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x69, 0x70, 0x76, 0x34, 0x53,
	0x72, 0x6c, 0x67, 0x1a, 0xb8, 0x04, 0x0a, 0x0e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x73, 0x72, 0x6c,
	0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0xe2, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xca, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69,
	0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c,
	0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x73, 0x72, 0x6c, 0x67, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x73, 0x72, 0x6c, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x90, 0x02, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x73, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x73, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x39, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x70, 0x76, 0x34, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x70, 0x76, 0x34,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x72, 0x6c, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x38, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x72, 0x6c, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xe5,
	0x27, 0x0a, 0x18, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xeb, 0x01, 0x0a, 0x0a,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0xc9, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0xda, 0x25, 0x0a, 0x0f, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0xec, 0x01,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xd4,
	0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74,
	0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xf2, 0x01, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0xd6, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74,
	0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76,
	0x73, 0x12, 0x8f, 0x02, 0x0a, 0x11, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xe0,
	0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74,
	0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x10, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x75, 0x62, 0x74,
	0x6c, 0x76, 0x73, 0x1a, 0x68, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x35, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x1a, 0xd4, 0x18,
	0x0a, 0x0c, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xfc,
	0x01, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0xe2, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62,
	0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x1a, 0xc4, 0x16,
	0x0a, 0x0b, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02,
	0x08, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x85, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xed, 0x01, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69,
	0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0xc2, 0x02, 0x0a, 0x1a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x18,
	0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x82, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73,
	0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x18, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x73, 0x12, 0xc2, 0x02, 0x0a, 0x1a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x82, 0x02, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x18, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x20, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xf5, 0x02, 0x0a,
	0x1f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0xa5, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x8d, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75,
	0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c,
	0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x2a, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x18, 0x33, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x1a, 0xed, 0x0b, 0x0a, 0x1f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xa5, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x8d, 0x02, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69,
	0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0xc5, 0x02, 0x0a, 0x10, 0x73, 0x72, 0x67, 0x62, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x98, 0x02, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x73, 0x72, 0x67, 0x62, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x73, 0x72, 0x67, 0x62, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x1a, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x33, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x1a, 0xb5, 0x06, 0x0a,
	0x15, 0x73, 0x72, 0x67, 0x62, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xd8, 0x02, 0x0a, 0x0f, 0x73, 0x72, 0x67, 0x62, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0xad, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75,
	0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c,
	0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x72, 0x67, 0x62, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x72, 0x67,
	0x62, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x0e, 0x73, 0x72, 0x67, 0x62, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x1a, 0xc0, 0x03, 0x0a, 0x14, 0x73, 0x72, 0x67, 0x62, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0xd0, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xb8, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x72,
	0x67, 0x62, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x73, 0x72, 0x67, 0x62, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x1a, 0xdf, 0x05, 0x0a, 0x16, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0xa3, 0x02, 0x0a, 0x10, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75,
	0x62, 0x74, 0x6c, 0x76, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0xf6, 0x01, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75,
	0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53,
	0x75, 0x62, 0x74, 0x6c, 0x76, 0x1a, 0x9e, 0x03, 0x0a, 0x15, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82,
	0x40, 0x02, 0x08, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x99, 0x02, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x81, 0x02, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75,
	0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x4e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xd8, 0x74, 0x0a, 0x1d, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xed, 0x01, 0x0a, 0x09, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xcd, 0x01,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c,
	0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61,
	0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x1a, 0xc6, 0x72, 0x0a, 0x0e, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xf9, 0x01, 0x0a, 0x08,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0xdb, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x1a, 0xb7, 0x70, 0x0a, 0x0d, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x09, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40,
	0x02, 0x08, 0x01, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0xfe, 0x01,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xe6,
	0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74,
	0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x84,
	0x02, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0xe8, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x73,
	0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x74, 0x6c, 0x76, 0x73, 0x12, 0xa1, 0x02, 0x0a, 0x11, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x18, 0x99, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0xf2, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69,
	0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6c,
	0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x1a, 0x41, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x1a, 0x8c, 0x63, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x8e, 0x02,
	0x0a, 0x06, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0xf4, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75,
	0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c,
	0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x1a, 0xea,
	0x60, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40,
	0x02, 0x08, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x97, 0x02, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xff, 0x01, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0xa8, 0x02, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x85, 0x02, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x9c,
	0x02, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x81, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x73,
	0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62,
	0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0xc8, 0x02,
	0x0a, 0x16, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x90, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75,
	0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c,
	0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x14, 0x69, 0x70, 0x76, 0x34, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xc5, 0x02, 0x0a, 0x15, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x8f, 0x02, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69,
	0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x13, 0x69, 0x70, 0x76,
	0x34, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0xbc, 0x02, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x62, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x8c,
	0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74,
	0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62,
	0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x10, 0x6d,
	0x61, 0x78, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0xdc, 0x02, 0x0a, 0x1d, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x97, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x1a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0xc3,
	0x02, 0x0a, 0x14, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x8e,
	0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74,
	0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62,
	0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x13, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x12, 0xc8, 0x02, 0x0a, 0x16, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x90, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73,
	0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x14, 0x69, 0x70, 0x76, 0x36, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0xc5, 0x02, 0x0a, 0x15, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x8f, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73,
	0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x74,
	0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x13, 0x69, 0x70, 0x76, 0x36, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xb9, 0x02, 0x0a, 0x11, 0x74, 0x65, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x9e, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x8b, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74,
	0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x65, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x0f, 0x74, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0xc6, 0x02, 0x0a, 0x15, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x9f, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x8f, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74,
	0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x14, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0xb1, 0x02, 0x0a,
	0x0e, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18,
	0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x88, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73,
	0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x64,
	0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x0d, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x69, 0x64, 0x73,
	0x12, 0xbc, 0x02, 0x0a, 0x12, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x8c,
	0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74,
	0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62,
	0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x10, 0x6c,
	0x61, 0x6e, 0x41, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x69, 0x64, 0x73, 0x1a,
	0x20, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x1a, 0xec, 0x02, 0x0a, 0x10, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xa8, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x90, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69,
	0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c,
	0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0x2d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x33,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x1a, 0xf1, 0x02, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0xa4, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x8c, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69,
	0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75,
	0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x3a, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x1a, 0xfb, 0x02, 0x0a, 0x1b, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0xb3, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x9b, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x26, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x33, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x1a, 0xf9, 0x02, 0x0a, 0x1a, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0xb2, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x9a, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69,
	0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75,
	0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x26, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x33, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xf7,
	0x02, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xaf, 0x02, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x97, 0x02, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x2a, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x1a, 0x8d, 0x03, 0x0a, 0x22, 0x6d, 0x61, 0x78,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0xba, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0xa2, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73,
	0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x74,
	0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x2a, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x1a, 0xb4, 0x06, 0x0a, 0x19, 0x75, 0x6e, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xcb, 0x02, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x75, 0x70,
	0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0xa2, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73,
	0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x74,
	0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x75, 0x70, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x1a, 0xc8, 0x03, 0x0a, 0x13, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05,
	0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0xc5, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0xad, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73,
	0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x74,
	0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x46, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x1a,
	0xfb, 0x02, 0x0a, 0x1b, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0xb3, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x9b, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73,
	0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x74,
	0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x26, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x33,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xf9, 0x02,
	0x0a, 0x1a, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xb2, 0x02, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x9a, 0x02,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c,
	0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61,
	0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74,
	0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0x26, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x33, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xef, 0x02, 0x0a, 0x16, 0x74, 0x65,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0xae, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x96, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x65, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x24, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x1a, 0x9b, 0x10, 0x0a, 0x1a,
	0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xde, 0x02, 0x0a, 0x14, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0xa9, 0x02, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x13, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x1a, 0x9b, 0x0d, 0x0a, 0x19,
	0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x08, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02,
	0x08, 0x01, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0xcc, 0x02, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xb4, 0x02, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c,
	0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xde, 0x02, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0xba, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x73,
	0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62,
	0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x27, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x49, 0x64, 0x1a, 0x82, 0x07, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xec, 0x02, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0xca, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75,
	0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c,
	0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x1a, 0xfe, 0x03, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0xed, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xd5, 0x02, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69,
	0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x4f, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x1a, 0xe6, 0x05, 0x0a, 0x13, 0x61, 0x64,
	0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0xb0, 0x02, 0x0a, 0x07, 0x61, 0x64, 0x6a, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x97, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x95, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74,
	0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x64, 0x6a, 0x61,
	0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x61, 0x64, 0x6a, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x06, 0x61, 0x64,
	0x6a, 0x53, 0x69, 0x64, 0x1a, 0x9b, 0x03, 0x0a, 0x0c, 0x61, 0x64, 0x6a, 0x5f, 0x73, 0x69, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xb8, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xa0, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73,
	0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x64,
	0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x61, 0x64, 0x6a, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0x50, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x34, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x1a, 0xa6, 0x06, 0x0a, 0x17, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x6a, 0x61, 0x63,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xbf,
	0x02, 0x0a, 0x0b, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x97,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x9d, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x61, 0x6e,
	0x5f, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x73, 0x69, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x41, 0x64, 0x6a, 0x53, 0x69, 0x64,
	0x1a, 0xc8, 0x03, 0x0a, 0x10, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x73, 0x69, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xc0, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xa8, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73,
	0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x61,
	0x6e, 0x5f, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x73, 0x69,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x71, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x34, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x49, 0x64, 0x1a, 0x83, 0x06, 0x0a, 0x16,
	0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xb5, 0x02, 0x0a, 0x10, 0x75, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x18, 0x97, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x88, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69,
	0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6c,
	0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x75,
	0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x1a, 0xb0,
	0x03, 0x0a, 0x15, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62,
	0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0xab, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x93, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74,
	0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62,
	0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0x4e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x88, 0x24, 0x0a, 0x1f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xec, 0x01, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xce, 0x01, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69,
	0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x1a, 0xf5, 0x21, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xf4, 0x01, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0xda, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x1a, 0xec, 0x1f,
	0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82,
	0x40, 0x02, 0x08, 0x01, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0xfd, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xe5, 0x01,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c,
	0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x83, 0x02, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0xe7, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62,
	0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x74, 0x6c,
	0x76, 0x73, 0x12, 0xa0, 0x02, 0x0a, 0x11, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x5f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0xf1, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x75, 0x6e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x75,
	0x62, 0x74, 0x6c, 0x76, 0x73, 0x1a, 0x6a, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x70, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x13, 0x0a, 0x05,
	0x73, 0x5f, 0x62, 0x69, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x42, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x36, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x1a, 0xa4, 0x12, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x8d, 0x02, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x18, 0x97, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0xf3, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74,
	0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73,
	0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x73, 0x75, 0x62, 0x74,
	0x6c, 0x76, 0x1a, 0x83, 0x10, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x96, 0x02,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xfe,
	0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74,
	0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74,
	0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x90, 0x02, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x98,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xfc, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x61, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0xa7, 0x02, 0x0a, 0x0b, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x84, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75,
	0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c,
	0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x69,
	0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53,
	0x69, 0x64, 0x73, 0x1a, 0x20, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xd0, 0x02, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x9f, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x87, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c,
	0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75,
	0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x33, 0x32, 0x18, 0x33, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x05, 0x74, 0x61, 0x67, 0x33, 0x32, 0x1a, 0x8d, 0x06, 0x0a, 0x10, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xb5, 0x02,
	0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x97, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x94, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c,
	0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75,
	0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x73, 0x69, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x53, 0x69, 0x64, 0x1a, 0xc0, 0x03, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x73, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0xb7, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x9f, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69,
	0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c,
	0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0x56, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x35, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x1a, 0x81, 0x06, 0x0a, 0x16, 0x75, 0x6e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0xb4, 0x02, 0x0a, 0x10, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x87, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x75, 0x6e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75,
	0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x75, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x1a, 0xaf, 0x03, 0x0a, 0x15, 0x75,
	0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0xaa, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x92, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x75, 0x6e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73,
	0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x4e, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x96, 0x23, 0x0a,
	0x16, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xe3, 0x01, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xc5, 0x01, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x1a, 0x95, 0x21,
	0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0xeb, 0x01, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0xd1, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x1a, 0x95, 0x1f,
	0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82,
	0x40, 0x02, 0x08, 0x01, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0xf4, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xdc, 0x01,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c,
	0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0xfa, 0x01, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x18,
	0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xde, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73,
	0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c,
	0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73,
	0x12, 0x97, 0x02, 0x0a, 0x11, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73,
	0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xe8, 0x01,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c,
	0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x74,
	0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x1a, 0x7f, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x70, 0x5f, 0x64,
	0x6f, 0x77, 0x6e, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x70, 0x44, 0x6f, 0x77,
	0x6e, 0x12, 0x13, 0x0a, 0x05, 0x78, 0x5f, 0x62, 0x69, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x78, 0x42, 0x69, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x5f, 0x62, 0x69, 0x74, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x42, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x1a, 0xe5, 0x11, 0x0a, 0x0c,
	0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x84, 0x02, 0x0a,
	0x06, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0xea,
	0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74,
	0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x73, 0x75, 0x62,
	0x74, 0x6c, 0x76, 0x1a, 0xcd, 0x0f, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x8d,
	0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0xf5, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x87,
	0x02, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xf3, 0x01,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c,
	0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73,
	0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x9e, 0x02, 0x0a, 0x0b, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0xfb, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x69, 0x64, 0x73, 0x1a, 0x20, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xc7, 0x02, 0x0a, 0x08,
	0x74, 0x61, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x96, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xfe, 0x01, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69,
	0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75,
	0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c,
	0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x33, 0x32, 0x18, 0x33, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05,
	0x74, 0x61, 0x67, 0x33, 0x32, 0x1a, 0xfb, 0x05, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x73, 0x69, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xac, 0x02, 0x0a, 0x0a, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x8b, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x09,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x69, 0x64, 0x1a, 0xb7, 0x03, 0x0a, 0x0f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40,
	0x02, 0x08, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0xae, 0x02, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x96, 0x02, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62,
	0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x73, 0x69, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x73, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x56, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x35, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x1a, 0xef, 0x05, 0x0a, 0x16, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xab,
	0x02, 0x0a, 0x10, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62,
	0x74, 0x6c, 0x76, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0xfe, 0x01, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x75,
	0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x75, 0x6e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x1a, 0xa6, 0x03, 0x0a,
	0x15, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6c,
	0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0xa1, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x89, 0x02, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x6c, 0x76,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x5f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x6e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x4e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xcf, 0x04, 0x0a, 0x13, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xdb, 0x01,
	0x0a, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6c, 0x76, 0x18,
	0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0xb4, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73,
	0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x5f, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x75,
	0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x6c, 0x76, 0x1a, 0xd9, 0x02, 0x0a, 0x12,
	0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0xd7, 0x01,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xbf,
	0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x75,
	0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6c, 0x76,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x4e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x2f, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0xf5, 0x05, 0x0a, 0x1a, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xa9, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x91, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0xaa, 0x04, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x65, 0x64, 0x5f,
	0x6c, 0x73, 0x70, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72,
	0x75, 0x70, 0x74, 0x65, 0x64, 0x4c, 0x73, 0x70, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x6d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1a, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44,
	0x72, 0x6f, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x72, 0x65, 0x61, 0x73, 0x12, 0x2d, 0x0a, 0x13,
	0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e,
	0x75, 0x6d, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x78, 0x63, 0x65, 0x65,
	0x64, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x73,
	0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x73, 0x18, 0x37, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x53, 0x6b, 0x69, 0x70, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x6f, 0x77, 0x6e, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x70, 0x75, 0x72, 0x67, 0x65,
	0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x4c, 0x73, 0x70, 0x50,
	0x75, 0x72, 0x67, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x5f,
	0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x69, 0x64, 0x4c, 0x65, 0x6e, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x3a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18,
	0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6d, 0x61, 0x78, 0x41, 0x72, 0x65, 0x61, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x46, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x70, 0x66, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x73, 0x70, 0x66, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x3e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x73, 0x70, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x73, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x1a, 0x8b, 0x3e, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xe2, 0x3c, 0x0a, 0x0e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0c,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x95, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xb6,
	0x01, 0x0a, 0x10, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x89, 0x01, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0xb3, 0x01, 0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x99, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x88, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x98, 0x01,
	0x0a, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x7f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x1a, 0x2f, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x1a, 0xbc, 0x04, 0x0a, 0x15, 0x63, 0x69,
	0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0xac, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x94, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0xf3, 0x02, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6a, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x64, 0x6a, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x64,
	0x6a, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x41, 0x64, 0x6a, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x69, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x65,
	0x6e, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x6d,
	0x61, 0x78, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x18, 0x6d, 0x61, 0x78, 0x41, 0x72, 0x65, 0x61, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x38, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x46, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x61, 0x6e, 0x44,
	0x69, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x6a,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61,
	0x64, 0x6a, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0xc9, 0x1c, 0x0a, 0x14, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0xa5, 0x01, 0x0a, 0x03, 0x6c, 0x73, 0x70, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x91, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x03, 0x6c, 0x73, 0x70, 0x12, 0xa5, 0x01, 0x0a, 0x03, 0x69, 0x69,
	0x68, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x91, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x69, 0x69, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x03, 0x69, 0x69,
	0x68, 0x12, 0xa5, 0x01, 0x0a, 0x03, 0x69, 0x73, 0x68, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x91, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x68, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x03, 0x69, 0x73, 0x68, 0x12, 0xa5, 0x01, 0x0a, 0x03, 0x65, 0x73,
	0x68, 0x18, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x91, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x03, 0x65, 0x73,
	0x68, 0x12, 0xa8, 0x01, 0x0a, 0x04, 0x70, 0x73, 0x6e, 0x70, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x92, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x73, 0x6e,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x70, 0x73, 0x6e, 0x70, 0x12, 0xa8, 0x01, 0x0a,
	0x04, 0x63, 0x73, 0x6e, 0x70, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x92, 0x01, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x73, 0x6e, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x63, 0x73, 0x6e, 0x70, 0x12, 0xb1, 0x01, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x18, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x95, 0x01, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x1a, 0xd8, 0x02, 0x0a, 0x08,
	0x6c, 0x73, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xb4, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x9c, 0x01, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69,
	0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0x94, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x72, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x1a, 0xd8, 0x02, 0x0a, 0x08, 0x69, 0x69, 0x68, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0xb4, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x9c, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x69, 0x69, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x94, 0x01, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x65, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x18,
	0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x74, 0x1a, 0xd8, 0x02, 0x0a, 0x08, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xb4,
	0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x9c, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x68, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x94, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x1a, 0xd8, 0x02, 0x0a,
	0x08, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xb4, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x9c, 0x01, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0x94, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x72, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x1a, 0xda, 0x02, 0x0a, 0x09, 0x70, 0x73, 0x6e, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xb5, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x9d, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x73, 0x6e, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x94, 0x01,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x73, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x1a, 0xda, 0x02, 0x0a, 0x09, 0x63, 0x73, 0x6e, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0xb5, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x9d, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63,
	0x73, 0x6e, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x94, 0x01, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x65, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x18,
	0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x74, 0x1a, 0xe0, 0x02, 0x0a, 0x0c, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0xb8, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0xa0, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x94, 0x01,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x73, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x1a, 0xc7, 0x15, 0x0a, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x97,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x8a, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0x92, 0x14, 0x0a, 0x0a, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0c, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05,
	0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0xad, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x95, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0xbf, 0x01, 0x0a, 0x0b, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x9b, 0x01, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69,
	0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x12, 0xb5, 0x01, 0x0a, 0x08, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66,
	0x69, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x98, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x61, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x1a, 0x2f, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0xcf, 0x0a,
	0x0a, 0x10, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0xca, 0x01, 0x0a, 0x09, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0xaa, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69,
	0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x1a,
	0xed, 0x08, 0x0a, 0x0e, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x08, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0xcd, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xb5, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69,
	0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xe6, 0x06, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73,
	0x6e, 0x70, 0x61, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x53, 0x6e, 0x70, 0x61, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74,
	0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x22, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f,
	0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x43, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x64, 0x6a, 0x61, 0x63,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e,
	0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x42,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x48,
	0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x70, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x18, 0x3e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x10,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53,
	0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x41, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x43,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x72, 0x65, 0x61, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6c, 0x70, 0x69, 0x64, 0x18, 0x44, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x6e, 0x6c, 0x70, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x45, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x69, 0x70, 0x76, 0x34, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x46, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x69, 0x70, 0x76, 0x36,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x61,
	0x6e, 0x41, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0xac, 0x04, 0x0a, 0x0d, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0xb2, 0x01, 0x0a, 0x02, 0x61, 0x66, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0xa0, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69,
	0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x02, 0x61, 0x66, 0x1a, 0xe5, 0x02, 0x0a, 0x07, 0x61, 0x66, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x66, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x66, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x61, 0x66, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0xc3, 0x01, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xab, 0x01, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66,
	0x69, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x66, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0x5c, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x66, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x66, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x66,
	0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61,
	0x66, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x3a, 0x76,
	0x0a, 0x1f, 0x6a, 0x6e, 0x70, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x65, 0x78,
	0x74, 0x12, 0x17, 0x2e, 0x4a, 0x75, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x52, 0x1b, 0x6a, 0x6e, 0x70, 0x72, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x49,
	0x73, 0x69, 0x73, 0x45, 0x78, 0x74, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x6a, 0x75, 0x6e, 0x6f,
	0x73, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65,
})

var (
	file_rpd_isis_oc_proto_rawDescOnce sync.Once
	file_rpd_isis_oc_proto_rawDescData []byte
)

func file_rpd_isis_oc_proto_rawDescGZIP() []byte {
	file_rpd_isis_oc_proto_rawDescOnce.Do(func() {
		file_rpd_isis_oc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_rpd_isis_oc_proto_rawDesc), len(file_rpd_isis_oc_proto_rawDesc)))
	})
	return file_rpd_isis_oc_proto_rawDescData
}

var file_rpd_isis_oc_proto_msgTypes = make([]protoimpl.MessageInfo, 154)
var file_rpd_isis_oc_proto_goTypes = []any{
	(*NetworkInstancesIsis)(nil),                                                                                                                                                                                                                                                                                // 0: network_instances_isis
	(*NetworkInstancesIsisNetworkInstanceList)(nil),                                                                                                                                                                                                                                                             // 1: network_instances_isis.network_instance_list
	(*NetworkInstancesIsisNetworkInstanceListProtocolsType)(nil),                                                                                                                                                                                                                                                // 2: network_instances_isis.network_instance_list.protocols_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolType)(nil),                                                                                                                                                                                                                                    // 3: network_instances_isis.network_instance_list.protocols_type.protocol_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisType)(nil),                                                                                                                                                                                                                            // 4: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsType)(nil),                                                                                                                                                                                                                  // 5: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesType)(nil),                                                                                                                                                                                                              // 6: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelList)(nil),                                                                                                                                                                                                         // 7: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseType)(nil),                                                                                                                                                                                    // 8: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListStateType)(nil),                                                                                                                                                                                                // 9: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersType)(nil),                                                                                                                                                                                  // 10: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.system_level_counters_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspList)(nil),                                                                                                                                                                             // 11: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListStateType)(nil),                                                                                                                                                                    // 12: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsType)(nil),                                                                                                                                                                     // 13: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsType)(nil),                                                                                                                                                            // 14: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.undefined_tlvs_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvList)(nil),                                                                                                                                                              // 15: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListStateType)(nil),                                                                                                                                                     // 16: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListAreaAddressType)(nil),                                                                                                                                               // 17: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.area_address_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListLspBufferSizeType)(nil),                                                                                                                                             // 18: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.lsp_buffer_size_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListNlpidType)(nil),                                                                                                                                                     // 19: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.nlpid_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListHostnameType)(nil),                                                                                                                                                  // 20: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.hostname_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4InterfaceAddressesType)(nil),                                                                                                                                    // 21: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv4_interface_addresses_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6InterfaceAddressesType)(nil),                                                                                                                                    // 22: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_interface_addresses_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4TeRouterIdType)(nil),                                                                                                                                            // 23: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv4_te_router_id_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsType)(nil),                                                                                                                                                 // 24: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv4_srlgs_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesType)(nil),                                                                                                                                        // 25: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityType)(nil),                                                                                                                                    // 26: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityType)(nil),                                                                                                                                  // 27: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityType)(nil),                                                                                                                                          // 28: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListAreaAddressTypeStateType)(nil),                                                                                                                                      // 29: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.area_address_type.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListLspBufferSizeTypeStateType)(nil),                                                                                                                                    // 30: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.lsp_buffer_size_type.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListNlpidTypeStateType)(nil),                                                                                                                                            // 31: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.nlpid_type.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListHostnameTypeStateType)(nil),                                                                                                                                         // 32: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.hostname_type.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4InterfaceAddressesTypeStateType)(nil),                                                                                                                           // 33: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv4_interface_addresses_type.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6InterfaceAddressesTypeStateType)(nil),                                                                                                                           // 34: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_interface_addresses_type.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4TeRouterIdTypeStateType)(nil),                                                                                                                                   // 35: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv4_te_router_id_type.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsTypeIpv4SrlgList)(nil),                                                                                                                                     // 36: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv4_srlgs_type.ipv4_srlg_list
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv4SrlgsTypeIpv4SrlgListStateType)(nil),                                                                                                                            // 37: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv4_srlgs_type.ipv4_srlg_list.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityList)(nil),                                                                                                                          // 38: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListStateType)(nil),                                                                                                                 // 39: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsType)(nil),                                                                                                               // 40: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.subtlvs_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsType)(nil),                                                                                                      // 41: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.undefined_subtlvs_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvList)(nil),                                                                                                     // 42: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.subtlvs_type.subtlv_list
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListStateType)(nil),                                                                                            // 43: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.subtlvs_type.subtlv_list.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingAlgorithmsType)(nil),                                                                         // 44: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.subtlvs_type.subtlv_list.segment_routing_algorithms_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityType)(nil),                                                                         // 45: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.subtlvs_type.subtlv_list.segment_routing_capability_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingAlgorithmsTypeStateType)(nil),                                                                // 46: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.subtlvs_type.subtlv_list.segment_routing_algorithms_type.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeStateType)(nil),                                                                // 47: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.subtlvs_type.subtlv_list.segment_routing_capability_type.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsType)(nil),                                                      // 48: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.subtlvs_type.subtlv_list.segment_routing_capability_type.srgb_descriptors_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsTypeSrgbDescriptorList)(nil),                                    // 49: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.subtlvs_type.subtlv_list.segment_routing_capability_type.srgb_descriptors_type.srgb_descriptor_list
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListSubtlvsTypeSubtlvListSegmentRoutingCapabilityTypeSrgbDescriptorsTypeSrgbDescriptorListStateType)(nil),                           // 50: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.subtlvs_type.subtlv_list.segment_routing_capability_type.srgb_descriptors_type.srgb_descriptor_list.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsTypeUndefinedSubtlvList)(nil),                                                                                   // 51: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.undefined_subtlvs_type.undefined_subtlv_list
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListRouterCapabilitiesTypeCapabilityListUndefinedSubtlvsTypeUndefinedSubtlvListStateType)(nil),                                                                          // 52: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.undefined_subtlvs_type.undefined_subtlv_list.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsType)(nil),                                                                                                                       // 53: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborList)(nil),                                                                                                           // 54: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListStateType)(nil),                                                                                                  // 55: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsType)(nil),                                                                                                // 56: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsType)(nil),                                                                                       // 57: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.undefined_subtlvs_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvList)(nil),                                                                                      // 58: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListStateType)(nil),                                                                             // 59: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdminGroupType)(nil),                                                                        // 60: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.admin_group_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLinkIdType)(nil),                                                                            // 61: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.link_id_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4InterfaceAddressType)(nil),                                                              // 62: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.ipv4_interface_address_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4NeighborAddressType)(nil),                                                               // 63: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.ipv4_neighbor_address_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxLinkBandwidthType)(nil),                                                                  // 64: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.max_link_bandwidth_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxReservableLinkBandwidthType)(nil),                                                        // 65: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.max_reservable_link_bandwidth_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthType)(nil),                                                               // 66: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.unreserved_bandwidth_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6InterfaceAddressType)(nil),                                                              // 67: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.ipv6_interface_address_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6NeighborAddressType)(nil),                                                               // 68: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.ipv6_neighbor_address_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListTeDefaultMetricType)(nil),                                                                   // 69: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.te_default_metric_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsType)(nil),                                                              // 70: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.bandwidth_constraints_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsType)(nil),                                                                     // 71: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.adjacency_sids_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsType)(nil),                                                                  // 72: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.lan_adjacency_sids_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdminGroupTypeStateType)(nil),                                                               // 73: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.admin_group_type.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLinkIdTypeStateType)(nil),                                                                   // 74: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.link_id_type.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4InterfaceAddressTypeStateType)(nil),                                                     // 75: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.ipv4_interface_address_type.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv4NeighborAddressTypeStateType)(nil),                                                      // 76: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.ipv4_neighbor_address_type.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxLinkBandwidthTypeStateType)(nil),                                                         // 77: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.max_link_bandwidth_type.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListMaxReservableLinkBandwidthTypeStateType)(nil),                                               // 78: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.max_reservable_link_bandwidth_type.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthTypeSetupPriorityList)(nil),                                              // 79: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.unreserved_bandwidth_type.setup_priority_list
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListUnreservedBandwidthTypeSetupPriorityListStateType)(nil),                                     // 80: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.unreserved_bandwidth_type.setup_priority_list.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6InterfaceAddressTypeStateType)(nil),                                                     // 81: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.ipv6_interface_address_type.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListIpv6NeighborAddressTypeStateType)(nil),                                                      // 82: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.ipv6_neighbor_address_type.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListTeDefaultMetricTypeStateType)(nil),                                                          // 83: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.te_default_metric_type.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintList)(nil),                                       // 84: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.bandwidth_constraints_type.bandwidth_constraint_list
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListStateType)(nil),                              // 85: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.bandwidth_constraints_type.bandwidth_constraint_list.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsType)(nil),                        // 86: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.bandwidth_constraints_type.bandwidth_constraint_list.constraints_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsTypeConstraintList)(nil),          // 87: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.bandwidth_constraints_type.bandwidth_constraint_list.constraints_type.constraint_list
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListBandwidthConstraintsTypeBandwidthConstraintListConstraintsTypeConstraintListStateType)(nil), // 88: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.bandwidth_constraints_type.bandwidth_constraint_list.constraints_type.constraint_list.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsTypeAdjSidType)(nil),                                                           // 89: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.adjacency_sids_type.adj_sid_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListAdjacencySidsTypeAdjSidTypeStateType)(nil),                                                  // 90: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.adjacency_sids_type.adj_sid_type.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsTypeLanAdjSidType)(nil),                                                     // 91: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.lan_adjacency_sids_type.lan_adj_sid_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListSubtlvsTypeSubtlvListLanAdjacencySidsTypeLanAdjSidTypeStateType)(nil),                                            // 92: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.lan_adjacency_sids_type.lan_adj_sid_type.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsTypeUndefinedSubtlvList)(nil),                                                                    // 93: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.undefined_subtlvs_type.undefined_subtlv_list
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIsReachabilityTypeNeighborsTypeNeighborListUndefinedSubtlvsTypeUndefinedSubtlvListStateType)(nil),                                                           // 94: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.undefined_subtlvs_type.undefined_subtlv_list.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesType)(nil),                                                                                                                      // 95: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixList)(nil),                                                                                                            // 96: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListStateType)(nil),                                                                                                   // 97: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsType)(nil),                                                                                                 // 98: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.subtlvs_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsType)(nil),                                                                                        // 99: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.undefined_subtlvs_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvList)(nil),                                                                                       // 100: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListStateType)(nil),                                                                              // 101: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagType)(nil),                                                                                // 102: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.tag_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsType)(nil),                                                                         // 103: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.prefix_sids_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagTypeStateType)(nil),                                                                       // 104: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.tag_type.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidList)(nil),                                                            // 105: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.prefix_sids_type.prefix_sid_list
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidListStateType)(nil),                                                   // 106: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.prefix_sids_type.prefix_sid_list.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvList)(nil),                                                                     // 107: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.undefined_subtlvs_type.undefined_subtlv_list
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListExtendedIpv4ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvListStateType)(nil),                                                            // 108: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.undefined_subtlvs_type.undefined_subtlv_list.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesType)(nil),                                                                                                                              // 109: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixList)(nil),                                                                                                                    // 110: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListStateType)(nil),                                                                                                           // 111: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsType)(nil),                                                                                                         // 112: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.subtlvs_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsType)(nil),                                                                                                // 113: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.undefined_subtlvs_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvList)(nil),                                                                                               // 114: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListStateType)(nil),                                                                                      // 115: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagType)(nil),                                                                                        // 116: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.tag_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsType)(nil),                                                                                 // 117: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.prefix_sids_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListTagTypeStateType)(nil),                                                                               // 118: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.tag_type.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidList)(nil),                                                                    // 119: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.prefix_sids_type.prefix_sid_list
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListSubtlvsTypeSubtlvListPrefixSidsTypePrefixSidListStateType)(nil),                                                           // 120: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.prefix_sids_type.prefix_sid_list.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvList)(nil),                                                                             // 121: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.undefined_subtlvs_type.undefined_subtlv_list
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListTlvsTypeTlvListIpv6ReachabilityTypePrefixesTypePrefixListUndefinedSubtlvsTypeUndefinedSubtlvListStateType)(nil),                                                                    // 122: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.undefined_subtlvs_type.undefined_subtlv_list.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsTypeUndefinedTlvList)(nil),                                                                                                                                            // 123: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.undefined_tlvs_type.undefined_tlv_list
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListLinkStateDatabaseTypeLspListUndefinedTlvsTypeUndefinedTlvListStateType)(nil),                                                                                                                                   // 124: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.undefined_tlvs_type.undefined_tlv_list.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeLevelsTypeLevelListSystemLevelCountersTypeStateType)(nil),                                                                                                                                                                         // 125: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.system_level_counters_type.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceList)(nil),                                                                                                                                                                                                 // 126: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListStateType)(nil),                                                                                                                                                                                        // 127: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListCircuitCountersType)(nil),                                                                                                                                                                              // 128: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.circuit_counters_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersType)(nil),                                                                                                                                                                               // 129: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsType)(nil),                                                                                                                                                                                       // 130: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.levels_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListCircuitCountersTypeStateType)(nil),                                                                                                                                                                     // 131: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.circuit_counters_type.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeLspType)(nil),                                                                                                                                                                        // 132: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.lsp_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIihType)(nil),                                                                                                                                                                        // 133: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.iih_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIshType)(nil),                                                                                                                                                                        // 134: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.ish_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeEshType)(nil),                                                                                                                                                                        // 135: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.esh_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypePsnpType)(nil),                                                                                                                                                                       // 136: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.psnp_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeCsnpType)(nil),                                                                                                                                                                       // 137: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.csnp_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeUnknownType)(nil),                                                                                                                                                                    // 138: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.unknown_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeLspTypeStateType)(nil),                                                                                                                                                               // 139: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.lsp_type.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIihTypeStateType)(nil),                                                                                                                                                               // 140: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.iih_type.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeIshTypeStateType)(nil),                                                                                                                                                               // 141: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.ish_type.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeEshTypeStateType)(nil),                                                                                                                                                               // 142: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.esh_type.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypePsnpTypeStateType)(nil),                                                                                                                                                              // 143: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.psnp_type.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeCsnpTypeStateType)(nil),                                                                                                                                                              // 144: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.csnp_type.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListPacketCountersTypeUnknownTypeStateType)(nil),                                                                                                                                                           // 145: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.unknown_type.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelList)(nil),                                                                                                                                                                              // 146: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.levels_type.level_list
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListStateType)(nil),                                                                                                                                                                     // 147: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.levels_type.level_list.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesType)(nil),                                                                                                                                                               // 148: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.levels_type.level_list.adjacencies_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiType)(nil),                                                                                                                                                                   // 149: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.levels_type.level_list.afi_safi_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyList)(nil),                                                                                                                                                  // 150: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.levels_type.level_list.adjacencies_type.adjacency_list
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAdjacenciesTypeAdjacencyListStateType)(nil),                                                                                                                                         // 151: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.levels_type.level_list.adjacencies_type.adjacency_list.state_type
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiTypeAfList)(nil),                                                                                                                                                             // 152: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.levels_type.level_list.afi_safi_type.af_list
	(*NetworkInstancesIsisNetworkInstanceListProtocolsTypeProtocolTypeIsisTypeInterfacesTypeInterfaceListLevelsTypeLevelListAfiSafiTypeAfListStateType)(nil),                                                                                                                                                    // 153: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.levels_type.level_list.afi_safi_type.af_list.state_type
	(*JuniperNetworksSensors)(nil), // 154: JuniperNetworksSensors
}
var file_rpd_isis_oc_proto_depIdxs = []int32{
	1,   // 0: network_instances_isis.network_instance:type_name -> network_instances_isis.network_instance_list
	2,   // 1: network_instances_isis.network_instance_list.protocols:type_name -> network_instances_isis.network_instance_list.protocols_type
	3,   // 2: network_instances_isis.network_instance_list.protocols_type.protocol:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type
	4,   // 3: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type
	5,   // 4: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type
	6,   // 5: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type
	7,   // 6: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list
	126, // 7: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list
	8,   // 8: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type
	9,   // 9: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.state_type
	10,  // 10: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.system_level_counters:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.system_level_counters_type
	11,  // 11: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list
	125, // 12: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.system_level_counters_type.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.system_level_counters_type.state_type
	12,  // 13: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.state_type
	13,  // 14: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type
	14,  // 15: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.undefined_tlvs:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.undefined_tlvs_type
	15,  // 16: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list
	123, // 17: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.undefined_tlvs_type.undefined_tlv:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.undefined_tlvs_type.undefined_tlv_list
	16,  // 18: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.state_type
	17,  // 19: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.area_address:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.area_address_type
	18,  // 20: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.lsp_buffer_size:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.lsp_buffer_size_type
	19,  // 21: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.nlpid:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.nlpid_type
	20,  // 22: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.hostname:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.hostname_type
	21,  // 23: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv4_interface_addresses:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv4_interface_addresses_type
	22,  // 24: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_interface_addresses:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_interface_addresses_type
	23,  // 25: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv4_te_router_id:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv4_te_router_id_type
	24,  // 26: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv4_srlgs:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv4_srlgs_type
	25,  // 27: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type
	26,  // 28: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type
	27,  // 29: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type
	28,  // 30: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type
	29,  // 31: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.area_address_type.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.area_address_type.state_type
	30,  // 32: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.lsp_buffer_size_type.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.lsp_buffer_size_type.state_type
	31,  // 33: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.nlpid_type.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.nlpid_type.state_type
	32,  // 34: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.hostname_type.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.hostname_type.state_type
	33,  // 35: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv4_interface_addresses_type.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv4_interface_addresses_type.state_type
	34,  // 36: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_interface_addresses_type.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_interface_addresses_type.state_type
	35,  // 37: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv4_te_router_id_type.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv4_te_router_id_type.state_type
	36,  // 38: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv4_srlgs_type.ipv4_srlg:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv4_srlgs_type.ipv4_srlg_list
	38,  // 39: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list
	53,  // 40: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type
	95,  // 41: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type
	109, // 42: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type
	37,  // 43: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv4_srlgs_type.ipv4_srlg_list.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv4_srlgs_type.ipv4_srlg_list.state_type
	39,  // 44: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.state_type
	40,  // 45: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.subtlvs:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.subtlvs_type
	41,  // 46: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.undefined_subtlvs:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.undefined_subtlvs_type
	42,  // 47: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.subtlvs_type.subtlv:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.subtlvs_type.subtlv_list
	51,  // 48: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.undefined_subtlvs_type.undefined_subtlv:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.undefined_subtlvs_type.undefined_subtlv_list
	43,  // 49: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.subtlvs_type.subtlv_list.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.subtlvs_type.subtlv_list.state_type
	44,  // 50: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.subtlvs_type.subtlv_list.segment_routing_algorithms:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.subtlvs_type.subtlv_list.segment_routing_algorithms_type
	45,  // 51: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.subtlvs_type.subtlv_list.segment_routing_capability:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.subtlvs_type.subtlv_list.segment_routing_capability_type
	46,  // 52: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.subtlvs_type.subtlv_list.segment_routing_algorithms_type.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.subtlvs_type.subtlv_list.segment_routing_algorithms_type.state_type
	47,  // 53: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.subtlvs_type.subtlv_list.segment_routing_capability_type.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.subtlvs_type.subtlv_list.segment_routing_capability_type.state_type
	48,  // 54: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.subtlvs_type.subtlv_list.segment_routing_capability_type.srgb_descriptors:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.subtlvs_type.subtlv_list.segment_routing_capability_type.srgb_descriptors_type
	49,  // 55: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.subtlvs_type.subtlv_list.segment_routing_capability_type.srgb_descriptors_type.srgb_descriptor:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.subtlvs_type.subtlv_list.segment_routing_capability_type.srgb_descriptors_type.srgb_descriptor_list
	50,  // 56: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.subtlvs_type.subtlv_list.segment_routing_capability_type.srgb_descriptors_type.srgb_descriptor_list.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.subtlvs_type.subtlv_list.segment_routing_capability_type.srgb_descriptors_type.srgb_descriptor_list.state_type
	52,  // 57: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.undefined_subtlvs_type.undefined_subtlv_list.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.router_capabilities_type.capability_list.undefined_subtlvs_type.undefined_subtlv_list.state_type
	54,  // 58: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list
	55,  // 59: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.state_type
	56,  // 60: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type
	57,  // 61: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.undefined_subtlvs:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.undefined_subtlvs_type
	58,  // 62: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list
	93,  // 63: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.undefined_subtlvs_type.undefined_subtlv:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.undefined_subtlvs_type.undefined_subtlv_list
	59,  // 64: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.state_type
	60,  // 65: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.admin_group:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.admin_group_type
	61,  // 66: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.link_id:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.link_id_type
	62,  // 67: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.ipv4_interface_address:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.ipv4_interface_address_type
	63,  // 68: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.ipv4_neighbor_address:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.ipv4_neighbor_address_type
	64,  // 69: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.max_link_bandwidth:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.max_link_bandwidth_type
	65,  // 70: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.max_reservable_link_bandwidth:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.max_reservable_link_bandwidth_type
	66,  // 71: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.unreserved_bandwidth:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.unreserved_bandwidth_type
	67,  // 72: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.ipv6_interface_address:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.ipv6_interface_address_type
	68,  // 73: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.ipv6_neighbor_address:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.ipv6_neighbor_address_type
	69,  // 74: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.te_default_metric:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.te_default_metric_type
	70,  // 75: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.bandwidth_constraints:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.bandwidth_constraints_type
	71,  // 76: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.adjacency_sids:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.adjacency_sids_type
	72,  // 77: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.lan_adjacency_sids:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.lan_adjacency_sids_type
	73,  // 78: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.admin_group_type.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.admin_group_type.state_type
	74,  // 79: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.link_id_type.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.link_id_type.state_type
	75,  // 80: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.ipv4_interface_address_type.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.ipv4_interface_address_type.state_type
	76,  // 81: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.ipv4_neighbor_address_type.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.ipv4_neighbor_address_type.state_type
	77,  // 82: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.max_link_bandwidth_type.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.max_link_bandwidth_type.state_type
	78,  // 83: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.max_reservable_link_bandwidth_type.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.max_reservable_link_bandwidth_type.state_type
	79,  // 84: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.unreserved_bandwidth_type.setup_priority:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.unreserved_bandwidth_type.setup_priority_list
	81,  // 85: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.ipv6_interface_address_type.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.ipv6_interface_address_type.state_type
	82,  // 86: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.ipv6_neighbor_address_type.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.ipv6_neighbor_address_type.state_type
	83,  // 87: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.te_default_metric_type.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.te_default_metric_type.state_type
	84,  // 88: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.bandwidth_constraints_type.bandwidth_constraint:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.bandwidth_constraints_type.bandwidth_constraint_list
	89,  // 89: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.adjacency_sids_type.adj_sid:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.adjacency_sids_type.adj_sid_type
	91,  // 90: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.lan_adjacency_sids_type.lan_adj_sid:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.lan_adjacency_sids_type.lan_adj_sid_type
	80,  // 91: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.unreserved_bandwidth_type.setup_priority_list.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.unreserved_bandwidth_type.setup_priority_list.state_type
	85,  // 92: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.bandwidth_constraints_type.bandwidth_constraint_list.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.bandwidth_constraints_type.bandwidth_constraint_list.state_type
	86,  // 93: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.bandwidth_constraints_type.bandwidth_constraint_list.constraints:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.bandwidth_constraints_type.bandwidth_constraint_list.constraints_type
	87,  // 94: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.bandwidth_constraints_type.bandwidth_constraint_list.constraints_type.constraint:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.bandwidth_constraints_type.bandwidth_constraint_list.constraints_type.constraint_list
	88,  // 95: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.bandwidth_constraints_type.bandwidth_constraint_list.constraints_type.constraint_list.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.bandwidth_constraints_type.bandwidth_constraint_list.constraints_type.constraint_list.state_type
	90,  // 96: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.adjacency_sids_type.adj_sid_type.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.adjacency_sids_type.adj_sid_type.state_type
	92,  // 97: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.lan_adjacency_sids_type.lan_adj_sid_type.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.subtlvs_type.subtlv_list.lan_adjacency_sids_type.lan_adj_sid_type.state_type
	94,  // 98: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.undefined_subtlvs_type.undefined_subtlv_list.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_is_reachability_type.neighbors_type.neighbor_list.undefined_subtlvs_type.undefined_subtlv_list.state_type
	96,  // 99: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list
	97,  // 100: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.state_type
	98,  // 101: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.subtlvs:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.subtlvs_type
	99,  // 102: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.undefined_subtlvs:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.undefined_subtlvs_type
	100, // 103: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list
	107, // 104: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.undefined_subtlvs_type.undefined_subtlv:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.undefined_subtlvs_type.undefined_subtlv_list
	101, // 105: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.state_type
	102, // 106: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.tag:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.tag_type
	103, // 107: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.prefix_sids:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.prefix_sids_type
	104, // 108: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.tag_type.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.tag_type.state_type
	105, // 109: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.prefix_sids_type.prefix_sid:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.prefix_sids_type.prefix_sid_list
	106, // 110: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.prefix_sids_type.prefix_sid_list.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.prefix_sids_type.prefix_sid_list.state_type
	108, // 111: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.undefined_subtlvs_type.undefined_subtlv_list.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.extended_ipv4_reachability_type.prefixes_type.prefix_list.undefined_subtlvs_type.undefined_subtlv_list.state_type
	110, // 112: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list
	111, // 113: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.state_type
	112, // 114: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.subtlvs:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.subtlvs_type
	113, // 115: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.undefined_subtlvs:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.undefined_subtlvs_type
	114, // 116: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list
	121, // 117: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.undefined_subtlvs_type.undefined_subtlv:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.undefined_subtlvs_type.undefined_subtlv_list
	115, // 118: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.state_type
	116, // 119: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.tag:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.tag_type
	117, // 120: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.prefix_sids:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.prefix_sids_type
	118, // 121: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.tag_type.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.tag_type.state_type
	119, // 122: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.prefix_sids_type.prefix_sid:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.prefix_sids_type.prefix_sid_list
	120, // 123: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.prefix_sids_type.prefix_sid_list.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.subtlvs_type.subtlv_list.prefix_sids_type.prefix_sid_list.state_type
	122, // 124: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.undefined_subtlvs_type.undefined_subtlv_list.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.tlvs_type.tlv_list.ipv6_reachability_type.prefixes_type.prefix_list.undefined_subtlvs_type.undefined_subtlv_list.state_type
	124, // 125: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.undefined_tlvs_type.undefined_tlv_list.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.levels_type.level_list.link_state_database_type.lsp_list.undefined_tlvs_type.undefined_tlv_list.state_type
	127, // 126: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.state_type
	128, // 127: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.circuit_counters:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.circuit_counters_type
	129, // 128: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type
	130, // 129: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.levels:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.levels_type
	131, // 130: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.circuit_counters_type.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.circuit_counters_type.state_type
	132, // 131: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.lsp:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.lsp_type
	133, // 132: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.iih:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.iih_type
	134, // 133: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.ish:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.ish_type
	135, // 134: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.esh:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.esh_type
	136, // 135: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.psnp:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.psnp_type
	137, // 136: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.csnp:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.csnp_type
	138, // 137: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.unknown:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.unknown_type
	146, // 138: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.levels_type.level:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.levels_type.level_list
	139, // 139: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.lsp_type.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.lsp_type.state_type
	140, // 140: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.iih_type.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.iih_type.state_type
	141, // 141: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.ish_type.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.ish_type.state_type
	142, // 142: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.esh_type.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.esh_type.state_type
	143, // 143: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.psnp_type.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.psnp_type.state_type
	144, // 144: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.csnp_type.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.csnp_type.state_type
	145, // 145: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.unknown_type.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.packet_counters_type.unknown_type.state_type
	147, // 146: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.levels_type.level_list.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.levels_type.level_list.state_type
	148, // 147: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.levels_type.level_list.adjacencies:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.levels_type.level_list.adjacencies_type
	149, // 148: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.levels_type.level_list.afi_safi:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.levels_type.level_list.afi_safi_type
	150, // 149: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.levels_type.level_list.adjacencies_type.adjacency:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.levels_type.level_list.adjacencies_type.adjacency_list
	152, // 150: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.levels_type.level_list.afi_safi_type.af:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.levels_type.level_list.afi_safi_type.af_list
	151, // 151: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.levels_type.level_list.adjacencies_type.adjacency_list.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.levels_type.level_list.adjacencies_type.adjacency_list.state_type
	153, // 152: network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.levels_type.level_list.afi_safi_type.af_list.state:type_name -> network_instances_isis.network_instance_list.protocols_type.protocol_type.isis_type.interfaces_type.interface_list.levels_type.level_list.afi_safi_type.af_list.state_type
	154, // 153: jnpr_network_instances_isis_ext:extendee -> JuniperNetworksSensors
	0,   // 154: jnpr_network_instances_isis_ext:type_name -> network_instances_isis
	155, // [155:155] is the sub-list for method output_type
	155, // [155:155] is the sub-list for method input_type
	154, // [154:155] is the sub-list for extension type_name
	153, // [153:154] is the sub-list for extension extendee
	0,   // [0:153] is the sub-list for field type_name
}

func init() { file_rpd_isis_oc_proto_init() }
func file_rpd_isis_oc_proto_init() {
	if File_rpd_isis_oc_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_rpd_isis_oc_proto_rawDesc), len(file_rpd_isis_oc_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   154,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_rpd_isis_oc_proto_goTypes,
		DependencyIndexes: file_rpd_isis_oc_proto_depIdxs,
		MessageInfos:      file_rpd_isis_oc_proto_msgTypes,
		ExtensionInfos:    file_rpd_isis_oc_proto_extTypes,
	}.Build()
	File_rpd_isis_oc_proto = out.File
	file_rpd_isis_oc_proto_goTypes = nil
	file_rpd_isis_oc_proto_depIdxs = nil
}
