// Copyrights (c)  2016, Juniper Networks, Inc.
// All rights reserved.
//

//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

//
// Chandresh Bhise, Rajesh Pillai, March 2016
//
// This defines the gpb message format used by the cpu memory utilization sensor.
// The top level message is CpuMemoryUtilization
// Included here are the stats for,
// - Overall CPU memory utilization
// - Per Application based CPU memory utilization
//
//
// Version 1.0
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: cpu_memory_utilization.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The top level message is CpuMemoryUtilization
type CpuMemoryUtilization struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Utilization   []*CpuMemoryUtilizationSummary `protobuf:"bytes,1,rep,name=utilization" json:"utilization,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CpuMemoryUtilization) Reset() {
	*x = CpuMemoryUtilization{}
	mi := &file_cpu_memory_utilization_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CpuMemoryUtilization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuMemoryUtilization) ProtoMessage() {}

func (x *CpuMemoryUtilization) ProtoReflect() protoreflect.Message {
	mi := &file_cpu_memory_utilization_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuMemoryUtilization.ProtoReflect.Descriptor instead.
func (*CpuMemoryUtilization) Descriptor() ([]byte, []int) {
	return file_cpu_memory_utilization_proto_rawDescGZIP(), []int{0}
}

func (x *CpuMemoryUtilization) GetUtilization() []*CpuMemoryUtilizationSummary {
	if x != nil {
		return x.Utilization
	}
	return nil
}

// This array gives the CPU  memory utilization on per partition basis
// and also the per application memory utilization for each partition
type CpuMemoryUtilizationSummary struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the partition.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The total size of the partition in bytes
	Size *uint64 `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	// The amount of memory currently allocated from the partition in bytes
	BytesAllocated *uint64 `protobuf:"varint,3,opt,name=bytes_allocated,json=bytesAllocated" json:"bytes_allocated,omitempty"`
	// The amount of memory that is currently allocated, expressed
	// as percentage of the total (0--100).
	Utilization *int32 `protobuf:"varint,4,opt,name=utilization" json:"utilization,omitempty"`
	// Per application based memory utilization for this memory partition
	ApplicationUtilization []*CpuMemoryUtilizationPerApplication `protobuf:"bytes,5,rep,name=application_utilization,json=applicationUtilization" json:"application_utilization,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CpuMemoryUtilizationSummary) Reset() {
	*x = CpuMemoryUtilizationSummary{}
	mi := &file_cpu_memory_utilization_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CpuMemoryUtilizationSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuMemoryUtilizationSummary) ProtoMessage() {}

func (x *CpuMemoryUtilizationSummary) ProtoReflect() protoreflect.Message {
	mi := &file_cpu_memory_utilization_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuMemoryUtilizationSummary.ProtoReflect.Descriptor instead.
func (*CpuMemoryUtilizationSummary) Descriptor() ([]byte, []int) {
	return file_cpu_memory_utilization_proto_rawDescGZIP(), []int{1}
}

func (x *CpuMemoryUtilizationSummary) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CpuMemoryUtilizationSummary) GetSize() uint64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *CpuMemoryUtilizationSummary) GetBytesAllocated() uint64 {
	if x != nil && x.BytesAllocated != nil {
		return *x.BytesAllocated
	}
	return 0
}

func (x *CpuMemoryUtilizationSummary) GetUtilization() int32 {
	if x != nil && x.Utilization != nil {
		return *x.Utilization
	}
	return 0
}

func (x *CpuMemoryUtilizationSummary) GetApplicationUtilization() []*CpuMemoryUtilizationPerApplication {
	if x != nil {
		return x.ApplicationUtilization
	}
	return nil
}

// This describes per Application specific CPU memory utilization
type CpuMemoryUtilizationPerApplication struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Application name
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Number of bytes allocated
	BytesAllocated *uint64 `protobuf:"varint,2,opt,name=bytes_allocated,json=bytesAllocated" json:"bytes_allocated,omitempty"`
	// Number of allocations
	Allocations *uint64 `protobuf:"varint,3,opt,name=allocations" json:"allocations,omitempty"`
	// Number of frees
	Frees *uint64 `protobuf:"varint,4,opt,name=frees" json:"frees,omitempty"`
	// Number of allocations failed
	AllocationsFailed *uint64 `protobuf:"varint,5,opt,name=allocations_failed,json=allocationsFailed" json:"allocations_failed,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CpuMemoryUtilizationPerApplication) Reset() {
	*x = CpuMemoryUtilizationPerApplication{}
	mi := &file_cpu_memory_utilization_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CpuMemoryUtilizationPerApplication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuMemoryUtilizationPerApplication) ProtoMessage() {}

func (x *CpuMemoryUtilizationPerApplication) ProtoReflect() protoreflect.Message {
	mi := &file_cpu_memory_utilization_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuMemoryUtilizationPerApplication.ProtoReflect.Descriptor instead.
func (*CpuMemoryUtilizationPerApplication) Descriptor() ([]byte, []int) {
	return file_cpu_memory_utilization_proto_rawDescGZIP(), []int{2}
}

func (x *CpuMemoryUtilizationPerApplication) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CpuMemoryUtilizationPerApplication) GetBytesAllocated() uint64 {
	if x != nil && x.BytesAllocated != nil {
		return *x.BytesAllocated
	}
	return 0
}

func (x *CpuMemoryUtilizationPerApplication) GetAllocations() uint64 {
	if x != nil && x.Allocations != nil {
		return *x.Allocations
	}
	return 0
}

func (x *CpuMemoryUtilizationPerApplication) GetFrees() uint64 {
	if x != nil && x.Frees != nil {
		return *x.Frees
	}
	return 0
}

func (x *CpuMemoryUtilizationPerApplication) GetAllocationsFailed() uint64 {
	if x != nil && x.AllocationsFailed != nil {
		return *x.AllocationsFailed
	}
	return 0
}

var file_cpu_memory_utilization_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*CpuMemoryUtilization)(nil),
		Field:         1,
		Name:          "cpu_memory_util_ext",
		Tag:           "bytes,1,opt,name=cpu_memory_util_ext",
		Filename:      "cpu_memory_utilization.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional CpuMemoryUtilization cpu_memory_util_ext = 1;
	E_CpuMemoryUtilExt = &file_cpu_memory_utilization_proto_extTypes[0]
)

var File_cpu_memory_utilization_proto protoreflect.FileDescriptor

var file_cpu_memory_utilization_proto_rawDesc = string([]byte{
	0x0a, 0x1c, 0x63, 0x70, 0x75, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x56, 0x0a, 0x14, 0x43, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x75,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x43, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0b,
	0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xee, 0x01, 0x0a, 0x1b,
	0x43, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c,
	0x0a, 0x17, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x43, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc8, 0x01, 0x0a,
	0x22, 0x43, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x72, 0x65, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x66, 0x72, 0x65, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x3a, 0x5d, 0x0a, 0x13, 0x63, 0x70, 0x75, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x5f, 0x65, 0x78, 0x74, 0x12, 0x17,
	0x2e, 0x4a, 0x75, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x43, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55,
	0x74, 0x69, 0x6c, 0x45, 0x78, 0x74, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x6a, 0x75, 0x6e, 0x6f,
	0x73, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65,
})

var (
	file_cpu_memory_utilization_proto_rawDescOnce sync.Once
	file_cpu_memory_utilization_proto_rawDescData []byte
)

func file_cpu_memory_utilization_proto_rawDescGZIP() []byte {
	file_cpu_memory_utilization_proto_rawDescOnce.Do(func() {
		file_cpu_memory_utilization_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cpu_memory_utilization_proto_rawDesc), len(file_cpu_memory_utilization_proto_rawDesc)))
	})
	return file_cpu_memory_utilization_proto_rawDescData
}

var file_cpu_memory_utilization_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_cpu_memory_utilization_proto_goTypes = []any{
	(*CpuMemoryUtilization)(nil),               // 0: CpuMemoryUtilization
	(*CpuMemoryUtilizationSummary)(nil),        // 1: CpuMemoryUtilizationSummary
	(*CpuMemoryUtilizationPerApplication)(nil), // 2: CpuMemoryUtilizationPerApplication
	(*JuniperNetworksSensors)(nil),             // 3: JuniperNetworksSensors
}
var file_cpu_memory_utilization_proto_depIdxs = []int32{
	1, // 0: CpuMemoryUtilization.utilization:type_name -> CpuMemoryUtilizationSummary
	2, // 1: CpuMemoryUtilizationSummary.application_utilization:type_name -> CpuMemoryUtilizationPerApplication
	3, // 2: cpu_memory_util_ext:extendee -> JuniperNetworksSensors
	0, // 3: cpu_memory_util_ext:type_name -> CpuMemoryUtilization
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	3, // [3:4] is the sub-list for extension type_name
	2, // [2:3] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_cpu_memory_utilization_proto_init() }
func file_cpu_memory_utilization_proto_init() {
	if File_cpu_memory_utilization_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cpu_memory_utilization_proto_rawDesc), len(file_cpu_memory_utilization_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_cpu_memory_utilization_proto_goTypes,
		DependencyIndexes: file_cpu_memory_utilization_proto_depIdxs,
		MessageInfos:      file_cpu_memory_utilization_proto_msgTypes,
		ExtensionInfos:    file_cpu_memory_utilization_proto_extTypes,
	}.Build()
	File_cpu_memory_utilization_proto = out.File
	file_cpu_memory_utilization_proto_goTypes = nil
	file_cpu_memory_utilization_proto_depIdxs = nil
}
