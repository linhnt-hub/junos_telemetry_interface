// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: pfe_export_mon_oc.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JunosPfeExportMonStats struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	System        *JunosPfeExportMonStatsSystemType `protobuf:"bytes,151,opt,name=system" json:"system,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosPfeExportMonStats) Reset() {
	*x = JunosPfeExportMonStats{}
	mi := &file_pfe_export_mon_oc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosPfeExportMonStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosPfeExportMonStats) ProtoMessage() {}

func (x *JunosPfeExportMonStats) ProtoReflect() protoreflect.Message {
	mi := &file_pfe_export_mon_oc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosPfeExportMonStats.ProtoReflect.Descriptor instead.
func (*JunosPfeExportMonStats) Descriptor() ([]byte, []int) {
	return file_pfe_export_mon_oc_proto_rawDescGZIP(), []int{0}
}

func (x *JunosPfeExportMonStats) GetSystem() *JunosPfeExportMonStatsSystemType {
	if x != nil {
		return x.System
	}
	return nil
}

type JunosPfeExportMonStatsSystemType struct {
	state         protoimpl.MessageState                        `protogen:"open.v1"`
	Linecard      *JunosPfeExportMonStatsSystemTypeLinecardType `protobuf:"bytes,151,opt,name=linecard" json:"linecard,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosPfeExportMonStatsSystemType) Reset() {
	*x = JunosPfeExportMonStatsSystemType{}
	mi := &file_pfe_export_mon_oc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosPfeExportMonStatsSystemType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosPfeExportMonStatsSystemType) ProtoMessage() {}

func (x *JunosPfeExportMonStatsSystemType) ProtoReflect() protoreflect.Message {
	mi := &file_pfe_export_mon_oc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosPfeExportMonStatsSystemType.ProtoReflect.Descriptor instead.
func (*JunosPfeExportMonStatsSystemType) Descriptor() ([]byte, []int) {
	return file_pfe_export_mon_oc_proto_rawDescGZIP(), []int{0, 0}
}

func (x *JunosPfeExportMonStatsSystemType) GetLinecard() *JunosPfeExportMonStatsSystemTypeLinecardType {
	if x != nil {
		return x.Linecard
	}
	return nil
}

type JunosPfeExportMonStatsSystemTypeLinecardType struct {
	state         protoimpl.MessageState                                         `protogen:"open.v1"`
	ExportMonitor *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType `protobuf:"bytes,151,opt,name=export_monitor,json=exportMonitor" json:"export_monitor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardType) Reset() {
	*x = JunosPfeExportMonStatsSystemTypeLinecardType{}
	mi := &file_pfe_export_mon_oc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosPfeExportMonStatsSystemTypeLinecardType) ProtoMessage() {}

func (x *JunosPfeExportMonStatsSystemTypeLinecardType) ProtoReflect() protoreflect.Message {
	mi := &file_pfe_export_mon_oc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosPfeExportMonStatsSystemTypeLinecardType.ProtoReflect.Descriptor instead.
func (*JunosPfeExportMonStatsSystemTypeLinecardType) Descriptor() ([]byte, []int) {
	return file_pfe_export_mon_oc_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardType) GetExportMonitor() *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType {
	if x != nil {
		return x.ExportMonitor
	}
	return nil
}

type JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType struct {
	state         protoimpl.MessageState                                                         `protogen:"open.v1"`
	ExportInfo    []*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList `protobuf:"bytes,152,rep,name=export_info,json=exportInfo" json:"export_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType) Reset() {
	*x = JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType{}
	mi := &file_pfe_export_mon_oc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType) ProtoMessage() {}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType) ProtoReflect() protoreflect.Message {
	mi := &file_pfe_export_mon_oc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType.ProtoReflect.Descriptor instead.
func (*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType) Descriptor() ([]byte, []int) {
	return file_pfe_export_mon_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType) GetExportInfo() []*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList {
	if x != nil {
		return x.ExportInfo
	}
	return nil
}

type JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList struct {
	state         protoimpl.MessageState                                                                     `protogen:"open.v1"`
	Resource      *string                                                                                    `protobuf:"bytes,153,opt,name=resource" json:"resource,omitempty"`
	RepInterval   *uint32                                                                                    `protobuf:"varint,154,opt,name=rep_interval,json=repInterval" json:"rep_interval,omitempty"`
	PayloadSize   *uint32                                                                                    `protobuf:"varint,155,opt,name=payload_size,json=payloadSize" json:"payload_size,omitempty"`
	QosOptions    *uint32                                                                                    `protobuf:"varint,156,opt,name=qos_options,json=qosOptions" json:"qos_options,omitempty"`
	FcOptions     *uint32                                                                                    `protobuf:"varint,157,opt,name=fc_options,json=fcOptions" json:"fc_options,omitempty"`
	PlpOptions    *uint32                                                                                    `protobuf:"varint,158,opt,name=plp_options,json=plpOptions" json:"plp_options,omitempty"`
	Server        *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType     `protobuf:"bytes,159,opt,name=server" json:"server,omitempty"`
	NumClients    *uint32                                                                                    `protobuf:"varint,162,opt,name=num_clients,json=numClients" json:"num_clients,omitempty"`
	Clients       []*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList  `protobuf:"bytes,163,rep,name=clients" json:"clients,omitempty"`
	Accounting    *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType `protobuf:"bytes,167,opt,name=accounting" json:"accounting,omitempty"`
	Wraps         []*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList    `protobuf:"bytes,177,rep,name=wraps" json:"wraps,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) Reset() {
	*x = JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList{}
	mi := &file_pfe_export_mon_oc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) ProtoMessage() {}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_pfe_export_mon_oc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList.ProtoReflect.Descriptor instead.
func (*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) Descriptor() ([]byte, []int) {
	return file_pfe_export_mon_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) GetResource() string {
	if x != nil && x.Resource != nil {
		return *x.Resource
	}
	return ""
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) GetRepInterval() uint32 {
	if x != nil && x.RepInterval != nil {
		return *x.RepInterval
	}
	return 0
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) GetPayloadSize() uint32 {
	if x != nil && x.PayloadSize != nil {
		return *x.PayloadSize
	}
	return 0
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) GetQosOptions() uint32 {
	if x != nil && x.QosOptions != nil {
		return *x.QosOptions
	}
	return 0
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) GetFcOptions() uint32 {
	if x != nil && x.FcOptions != nil {
		return *x.FcOptions
	}
	return 0
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) GetPlpOptions() uint32 {
	if x != nil && x.PlpOptions != nil {
		return *x.PlpOptions
	}
	return 0
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) GetServer() *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) GetNumClients() uint32 {
	if x != nil && x.NumClients != nil {
		return *x.NumClients
	}
	return 0
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) GetClients() []*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList {
	if x != nil {
		return x.Clients
	}
	return nil
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) GetAccounting() *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType {
	if x != nil {
		return x.Accounting
	}
	return nil
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) GetWraps() []*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList {
	if x != nil {
		return x.Wraps
	}
	return nil
}

type JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ip            *string                `protobuf:"bytes,160,opt,name=ip" json:"ip,omitempty"`
	Port          *uint32                `protobuf:"varint,161,opt,name=port" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType) Reset() {
	*x = JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType{}
	mi := &file_pfe_export_mon_oc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType) ProtoMessage() {
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType) ProtoReflect() protoreflect.Message {
	mi := &file_pfe_export_mon_oc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType.ProtoReflect.Descriptor instead.
func (*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType) Descriptor() ([]byte, []int) {
	return file_pfe_export_mon_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0}
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

type JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         *uint32                `protobuf:"varint,164,opt,name=index" json:"index,omitempty"`
	Ip            *string                `protobuf:"bytes,165,opt,name=ip" json:"ip,omitempty"`
	Port          *uint32                `protobuf:"varint,166,opt,name=port" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList) Reset() {
	*x = JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList{}
	mi := &file_pfe_export_mon_oc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList) ProtoMessage() {
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList) ProtoReflect() protoreflect.Message {
	mi := &file_pfe_export_mon_oc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList.ProtoReflect.Descriptor instead.
func (*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList) Descriptor() ([]byte, []int) {
	return file_pfe_export_mon_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1}
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

type JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	SuccessfulReaps            *uint64                `protobuf:"varint,168,opt,name=successful_reaps,json=successfulReaps" json:"successful_reaps,omitempty"`
	FailedReaps                *uint64                `protobuf:"varint,169,opt,name=failed_reaps,json=failedReaps" json:"failed_reaps,omitempty"`
	ReapsInLastRepInterval     *uint32                `protobuf:"varint,170,opt,name=reaps_in_last_rep_interval,json=reapsInLastRepInterval" json:"reaps_in_last_rep_interval,omitempty"`
	PacketsInLastRepInterval   *uint32                `protobuf:"varint,171,opt,name=packets_in_last_rep_interval,json=packetsInLastRepInterval" json:"packets_in_last_rep_interval,omitempty"`
	InstancesInLastRepInterval *uint32                `protobuf:"varint,172,opt,name=instances_in_last_rep_interval,json=instancesInLastRepInterval" json:"instances_in_last_rep_interval,omitempty"`
	TotalPackets               *uint64                `protobuf:"varint,173,opt,name=total_packets,json=totalPackets" json:"total_packets,omitempty"`
	NumWraps                   *uint64                `protobuf:"varint,174,opt,name=num_wraps,json=numWraps" json:"num_wraps,omitempty"`
	AverageReaps               *uint64                `protobuf:"varint,175,opt,name=average_reaps,json=averageReaps" json:"average_reaps,omitempty"`
	LastPacketSize             *uint32                `protobuf:"varint,176,opt,name=last_packet_size,json=lastPacketSize" json:"last_packet_size,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) Reset() {
	*x = JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType{}
	mi := &file_pfe_export_mon_oc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) ProtoMessage() {
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) ProtoReflect() protoreflect.Message {
	mi := &file_pfe_export_mon_oc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType.ProtoReflect.Descriptor instead.
func (*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) Descriptor() ([]byte, []int) {
	return file_pfe_export_mon_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2}
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) GetSuccessfulReaps() uint64 {
	if x != nil && x.SuccessfulReaps != nil {
		return *x.SuccessfulReaps
	}
	return 0
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) GetFailedReaps() uint64 {
	if x != nil && x.FailedReaps != nil {
		return *x.FailedReaps
	}
	return 0
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) GetReapsInLastRepInterval() uint32 {
	if x != nil && x.ReapsInLastRepInterval != nil {
		return *x.ReapsInLastRepInterval
	}
	return 0
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) GetPacketsInLastRepInterval() uint32 {
	if x != nil && x.PacketsInLastRepInterval != nil {
		return *x.PacketsInLastRepInterval
	}
	return 0
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) GetInstancesInLastRepInterval() uint32 {
	if x != nil && x.InstancesInLastRepInterval != nil {
		return *x.InstancesInLastRepInterval
	}
	return 0
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) GetTotalPackets() uint64 {
	if x != nil && x.TotalPackets != nil {
		return *x.TotalPackets
	}
	return 0
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) GetNumWraps() uint64 {
	if x != nil && x.NumWraps != nil {
		return *x.NumWraps
	}
	return 0
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) GetAverageReaps() uint64 {
	if x != nil && x.AverageReaps != nil {
		return *x.AverageReaps
	}
	return 0
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) GetLastPacketSize() uint32 {
	if x != nil && x.LastPacketSize != nil {
		return *x.LastPacketSize
	}
	return 0
}

type JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         *uint32                `protobuf:"varint,178,opt,name=index" json:"index,omitempty"`
	Time          *string                `protobuf:"bytes,179,opt,name=time" json:"time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList) Reset() {
	*x = JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList{}
	mi := &file_pfe_export_mon_oc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList) ProtoMessage() {
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList) ProtoReflect() protoreflect.Message {
	mi := &file_pfe_export_mon_oc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList.ProtoReflect.Descriptor instead.
func (*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList) Descriptor() ([]byte, []int) {
	return file_pfe_export_mon_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 3}
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList) GetTime() string {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return ""
}

var file_pfe_export_mon_oc_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*JunosPfeExportMonStats)(nil),
		Field:         129,
		Name:          "jnpr_junos_pfe_export_mon_stats_ext",
		Tag:           "bytes,129,opt,name=jnpr_junos_pfe_export_mon_stats_ext",
		Filename:      "pfe_export_mon_oc.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional junos_pfe_export_mon_stats jnpr_junos_pfe_export_mon_stats_ext = 129;
	E_JnprJunosPfeExportMonStatsExt = &file_pfe_export_mon_oc_proto_extTypes[0]
)

var File_pfe_export_mon_oc_proto protoreflect.FileDescriptor

var file_pfe_export_mon_oc_proto_rawDesc = string([]byte{
	0x0a, 0x17, 0x70, 0x66, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x6e,
	0x5f, 0x6f, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfc,
	0x0e, 0x0a, 0x1a, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x70, 0x66, 0x65, 0x5f, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x40, 0x0a,
	0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x70, 0x66, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x1a,
	0x9b, 0x0e, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x52, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x72, 0x64, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x70, 0x66, 0x65, 0x5f, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x69, 0x6e, 0x65,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x63,
	0x61, 0x72, 0x64, 0x1a, 0xb7, 0x0d, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x71, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49,
	0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x70, 0x66, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x1a, 0xb2, 0x0c, 0x0a, 0x13, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x7c, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x98, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x70,
	0x66, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x9c,
	0x0b, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x99, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x72, 0x65, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x9b, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x71, 0x6f, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x9c,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x71, 0x6f, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x9d, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x70, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x70, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x7f, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x9f, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x66, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x70, 0x66, 0x65,
	0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x69,
	0x6e, 0x65, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0xa3, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x67, 0x2e, 0x6a, 0x75, 0x6e, 0x6f,
	0x73, 0x5f, 0x70, 0x66, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x18, 0xa7, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x6a, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x70, 0x66, 0x65, 0x5f, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x69, 0x6e, 0x65, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x7c, 0x0a, 0x05, 0x77, 0x72, 0x61,
	0x70, 0x73, 0x18, 0xb1, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x6a, 0x75, 0x6e, 0x6f,
	0x73, 0x5f, 0x70, 0x66, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x77, 0x72, 0x61, 0x70, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x52, 0x05, 0x77, 0x72, 0x61, 0x70, 0x73, 0x1a, 0x33, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x02, 0x69, 0x70, 0x18, 0xa0, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x13, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0xa1, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x52, 0x0a, 0x0c,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40,
	0x02, 0x08, 0x01, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x0f, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x13, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0xa6, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x1a, 0xb9, 0x03, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x70, 0x73, 0x18, 0xa8, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x61, 0x70, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x70, 0x73,
	0x18, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x61, 0x70, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x65, 0x61, 0x70, 0x73, 0x5f, 0x69, 0x6e,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x72, 0x65, 0x61, 0x70, 0x73,
	0x49, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x49, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x43, 0x0a, 0x1e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x69, 0x6e, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0xac, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0xad, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x73, 0x18, 0xae, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x57, 0x72, 0x61, 0x70, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x70, 0x73, 0x18, 0xaf, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x70,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0xb0, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0x3f, 0x0a, 0x0a,
	0x77, 0x72, 0x61, 0x70, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0xb2, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08,
	0x01, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x13, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x81, 0x01,
	0x0a, 0x23, 0x6a, 0x6e, 0x70, 0x72, 0x5f, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x70, 0x66, 0x65,
	0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x5f, 0x65, 0x78, 0x74, 0x12, 0x17, 0x2e, 0x4a, 0x75, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x81,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x70, 0x66,
	0x65, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x1d, 0x6a, 0x6e, 0x70, 0x72, 0x4a, 0x75, 0x6e, 0x6f, 0x73, 0x50, 0x66, 0x65,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x78,
	0x74, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
})

var (
	file_pfe_export_mon_oc_proto_rawDescOnce sync.Once
	file_pfe_export_mon_oc_proto_rawDescData []byte
)

func file_pfe_export_mon_oc_proto_rawDescGZIP() []byte {
	file_pfe_export_mon_oc_proto_rawDescOnce.Do(func() {
		file_pfe_export_mon_oc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pfe_export_mon_oc_proto_rawDesc), len(file_pfe_export_mon_oc_proto_rawDesc)))
	})
	return file_pfe_export_mon_oc_proto_rawDescData
}

var file_pfe_export_mon_oc_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_pfe_export_mon_oc_proto_goTypes = []any{
	(*JunosPfeExportMonStats)(nil),                                                                    // 0: junos_pfe_export_mon_stats
	(*JunosPfeExportMonStatsSystemType)(nil),                                                          // 1: junos_pfe_export_mon_stats.system_type
	(*JunosPfeExportMonStatsSystemTypeLinecardType)(nil),                                              // 2: junos_pfe_export_mon_stats.system_type.linecard_type
	(*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType)(nil),                             // 3: junos_pfe_export_mon_stats.system_type.linecard_type.export_monitor_type
	(*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList)(nil),               // 4: junos_pfe_export_mon_stats.system_type.linecard_type.export_monitor_type.export_info_list
	(*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType)(nil),     // 5: junos_pfe_export_mon_stats.system_type.linecard_type.export_monitor_type.export_info_list.server_type
	(*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList)(nil),    // 6: junos_pfe_export_mon_stats.system_type.linecard_type.export_monitor_type.export_info_list.clients_list
	(*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType)(nil), // 7: junos_pfe_export_mon_stats.system_type.linecard_type.export_monitor_type.export_info_list.accounting_type
	(*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList)(nil),      // 8: junos_pfe_export_mon_stats.system_type.linecard_type.export_monitor_type.export_info_list.wraps_list
	(*JuniperNetworksSensors)(nil),                                                                    // 9: JuniperNetworksSensors
}
var file_pfe_export_mon_oc_proto_depIdxs = []int32{
	1,  // 0: junos_pfe_export_mon_stats.system:type_name -> junos_pfe_export_mon_stats.system_type
	2,  // 1: junos_pfe_export_mon_stats.system_type.linecard:type_name -> junos_pfe_export_mon_stats.system_type.linecard_type
	3,  // 2: junos_pfe_export_mon_stats.system_type.linecard_type.export_monitor:type_name -> junos_pfe_export_mon_stats.system_type.linecard_type.export_monitor_type
	4,  // 3: junos_pfe_export_mon_stats.system_type.linecard_type.export_monitor_type.export_info:type_name -> junos_pfe_export_mon_stats.system_type.linecard_type.export_monitor_type.export_info_list
	5,  // 4: junos_pfe_export_mon_stats.system_type.linecard_type.export_monitor_type.export_info_list.server:type_name -> junos_pfe_export_mon_stats.system_type.linecard_type.export_monitor_type.export_info_list.server_type
	6,  // 5: junos_pfe_export_mon_stats.system_type.linecard_type.export_monitor_type.export_info_list.clients:type_name -> junos_pfe_export_mon_stats.system_type.linecard_type.export_monitor_type.export_info_list.clients_list
	7,  // 6: junos_pfe_export_mon_stats.system_type.linecard_type.export_monitor_type.export_info_list.accounting:type_name -> junos_pfe_export_mon_stats.system_type.linecard_type.export_monitor_type.export_info_list.accounting_type
	8,  // 7: junos_pfe_export_mon_stats.system_type.linecard_type.export_monitor_type.export_info_list.wraps:type_name -> junos_pfe_export_mon_stats.system_type.linecard_type.export_monitor_type.export_info_list.wraps_list
	9,  // 8: jnpr_junos_pfe_export_mon_stats_ext:extendee -> JuniperNetworksSensors
	0,  // 9: jnpr_junos_pfe_export_mon_stats_ext:type_name -> junos_pfe_export_mon_stats
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	9,  // [9:10] is the sub-list for extension type_name
	8,  // [8:9] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_pfe_export_mon_oc_proto_init() }
func file_pfe_export_mon_oc_proto_init() {
	if File_pfe_export_mon_oc_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pfe_export_mon_oc_proto_rawDesc), len(file_pfe_export_mon_oc_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_pfe_export_mon_oc_proto_goTypes,
		DependencyIndexes: file_pfe_export_mon_oc_proto_depIdxs,
		MessageInfos:      file_pfe_export_mon_oc_proto_msgTypes,
		ExtensionInfos:    file_pfe_export_mon_oc_proto_extTypes,
	}.Build()
	File_pfe_export_mon_oc_proto = out.File
	file_pfe_export_mon_oc_proto_goTypes = nil
	file_pfe_export_mon_oc_proto_depIdxs = nil
}
