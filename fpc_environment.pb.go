// fpc_environment.proto  - FPC Environments protobuf message for JVision
//
// Author: Srinivas Seshadri -  July, 2014
//
// Copyrights (c) 2014, 2016, Juniper Networks, Inc.
// All rights reserved.

//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: fpc_environment.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Temperature sensor information
type GTempInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Temperature sensor name
	TempSensorName *string `protobuf:"bytes,1,req,name=temp_sensor_name,json=tempSensorName" json:"temp_sensor_name,omitempty"`
	// Gauge: the current temperature read by this sensor, in degrees Celcius
	TempValue     *int32 `protobuf:"varint,2,req,name=temp_value,json=tempValue" json:"temp_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GTempInfo) Reset() {
	*x = GTempInfo{}
	mi := &file_fpc_environment_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GTempInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GTempInfo) ProtoMessage() {}

func (x *GTempInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fpc_environment_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GTempInfo.ProtoReflect.Descriptor instead.
func (*GTempInfo) Descriptor() ([]byte, []int) {
	return file_fpc_environment_proto_rawDescGZIP(), []int{0}
}

func (x *GTempInfo) GetTempSensorName() string {
	if x != nil && x.TempSensorName != nil {
		return *x.TempSensorName
	}
	return ""
}

func (x *GTempInfo) GetTempValue() int32 {
	if x != nil && x.TempValue != nil {
		return *x.TempValue
	}
	return 0
}

// Voltage sensor information
type GVoltageInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Voltage sensor name
	VoltageSensorName *string `protobuf:"bytes,1,req,name=voltage_sensor_name,json=voltageSensorName" json:"voltage_sensor_name,omitempty"`
	// Gauge: The current voltage (in milli volts) read by this sensor
	VoltageValue  *int32 `protobuf:"varint,2,req,name=voltage_value,json=voltageValue" json:"voltage_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GVoltageInfo) Reset() {
	*x = GVoltageInfo{}
	mi := &file_fpc_environment_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GVoltageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GVoltageInfo) ProtoMessage() {}

func (x *GVoltageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fpc_environment_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GVoltageInfo.ProtoReflect.Descriptor instead.
func (*GVoltageInfo) Descriptor() ([]byte, []int) {
	return file_fpc_environment_proto_rawDescGZIP(), []int{1}
}

func (x *GVoltageInfo) GetVoltageSensorName() string {
	if x != nil && x.VoltageSensorName != nil {
		return *x.VoltageSensorName
	}
	return ""
}

func (x *GVoltageInfo) GetVoltageValue() int32 {
	if x != nil && x.VoltageValue != nil {
		return *x.VoltageValue
	}
	return 0
}

// Power consumed by FPC, ASICs & Max consumption
type GPowerInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This is maximum power, in Watts, that this fpc is allowed to consume
	MaxFpcPower *int32 `protobuf:"varint,1,opt,name=max_fpc_power,json=maxFpcPower" json:"max_fpc_power,omitempty"`
	// This is the amount of power, in Watts, that this fpc currently is consuming
	FpcPower      *int32 `protobuf:"varint,2,opt,name=fpc_power,json=fpcPower" json:"fpc_power,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GPowerInfo) Reset() {
	*x = GPowerInfo{}
	mi := &file_fpc_environment_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GPowerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPowerInfo) ProtoMessage() {}

func (x *GPowerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fpc_environment_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPowerInfo.ProtoReflect.Descriptor instead.
func (*GPowerInfo) Descriptor() ([]byte, []int) {
	return file_fpc_environment_proto_rawDescGZIP(), []int{2}
}

func (x *GPowerInfo) GetMaxFpcPower() int32 {
	if x != nil && x.MaxFpcPower != nil {
		return *x.MaxFpcPower
	}
	return 0
}

func (x *GPowerInfo) GetFpcPower() int32 {
	if x != nil && x.FpcPower != nil {
		return *x.FpcPower
	}
	return 0
}

// Main FPC Environment message, which will be shipped out
type GFpcEnvironment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// FPC power info
	PowerRecord *GPowerInfo `protobuf:"bytes,1,opt,name=power_record,json=powerRecord" json:"power_record,omitempty"`
	// Various temp sensor info
	TempRecord []*GTempInfo `protobuf:"bytes,2,rep,name=temp_record,json=tempRecord" json:"temp_record,omitempty"`
	// Various voltage sensor info
	VoltageRecord []*GVoltageInfo `protobuf:"bytes,3,rep,name=voltage_record,json=voltageRecord" json:"voltage_record,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GFpcEnvironment) Reset() {
	*x = GFpcEnvironment{}
	mi := &file_fpc_environment_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GFpcEnvironment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GFpcEnvironment) ProtoMessage() {}

func (x *GFpcEnvironment) ProtoReflect() protoreflect.Message {
	mi := &file_fpc_environment_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GFpcEnvironment.ProtoReflect.Descriptor instead.
func (*GFpcEnvironment) Descriptor() ([]byte, []int) {
	return file_fpc_environment_proto_rawDescGZIP(), []int{3}
}

func (x *GFpcEnvironment) GetPowerRecord() *GPowerInfo {
	if x != nil {
		return x.PowerRecord
	}
	return nil
}

func (x *GFpcEnvironment) GetTempRecord() []*GTempInfo {
	if x != nil {
		return x.TempRecord
	}
	return nil
}

func (x *GFpcEnvironment) GetVoltageRecord() []*GVoltageInfo {
	if x != nil {
		return x.VoltageRecord
	}
	return nil
}

var file_fpc_environment_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*GFpcEnvironment)(nil),
		Field:         4,
		Name:          "fpcEnvironmentExt",
		Tag:           "bytes,4,opt,name=fpcEnvironmentExt",
		Filename:      "fpc_environment.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional g_fpc_environment fpcEnvironmentExt = 4;
	E_FpcEnvironmentExt = &file_fpc_environment_proto_extTypes[0]
)

var File_fpc_environment_proto protoreflect.FileDescriptor

var file_fpc_environment_proto_rawDesc = string([]byte{
	0x0a, 0x15, 0x66, 0x70, 0x63, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x64, 0x0a, 0x0b,
	0x67, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x10, 0x74,
	0x65, 0x6d, 0x70, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x74, 0x65,
	0x6d, 0x70, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0a,
	0x74, 0x65, 0x6d, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x42, 0x05, 0x82, 0x40, 0x02, 0x20, 0x01, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x73, 0x0a, 0x0e, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x13, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x11, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0d, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x42, 0x05, 0x82, 0x40, 0x02, 0x20, 0x01, 0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4f, 0x0a, 0x0c, 0x67, 0x5f, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x66,
	0x70, 0x63, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x6d, 0x61, 0x78, 0x46, 0x70, 0x63, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x70, 0x63, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x66, 0x70, 0x63, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x22, 0xac, 0x01, 0x0a, 0x11, 0x67, 0x5f, 0x66,
	0x70, 0x63, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30,
	0x0a, 0x0c, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x2d, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x36, 0x0a, 0x0e, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x3a, 0x59, 0x0a, 0x11, 0x66, 0x70, 0x63, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x12, 0x17, 0x2e, 0x4a,
	0x75, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x5f,
	0x66, 0x70, 0x63, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x11, 0x66, 0x70, 0x63, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x78, 0x74, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65,
})

var (
	file_fpc_environment_proto_rawDescOnce sync.Once
	file_fpc_environment_proto_rawDescData []byte
)

func file_fpc_environment_proto_rawDescGZIP() []byte {
	file_fpc_environment_proto_rawDescOnce.Do(func() {
		file_fpc_environment_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_fpc_environment_proto_rawDesc), len(file_fpc_environment_proto_rawDesc)))
	})
	return file_fpc_environment_proto_rawDescData
}

var file_fpc_environment_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_fpc_environment_proto_goTypes = []any{
	(*GTempInfo)(nil),              // 0: g_temp_info
	(*GVoltageInfo)(nil),           // 1: g_voltage_info
	(*GPowerInfo)(nil),             // 2: g_power_info
	(*GFpcEnvironment)(nil),        // 3: g_fpc_environment
	(*JuniperNetworksSensors)(nil), // 4: JuniperNetworksSensors
}
var file_fpc_environment_proto_depIdxs = []int32{
	2, // 0: g_fpc_environment.power_record:type_name -> g_power_info
	0, // 1: g_fpc_environment.temp_record:type_name -> g_temp_info
	1, // 2: g_fpc_environment.voltage_record:type_name -> g_voltage_info
	4, // 3: fpcEnvironmentExt:extendee -> JuniperNetworksSensors
	3, // 4: fpcEnvironmentExt:type_name -> g_fpc_environment
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	4, // [4:5] is the sub-list for extension type_name
	3, // [3:4] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_fpc_environment_proto_init() }
func file_fpc_environment_proto_init() {
	if File_fpc_environment_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_fpc_environment_proto_rawDesc), len(file_fpc_environment_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_fpc_environment_proto_goTypes,
		DependencyIndexes: file_fpc_environment_proto_depIdxs,
		MessageInfos:      file_fpc_environment_proto_msgTypes,
		ExtensionInfos:    file_fpc_environment_proto_extTypes,
	}.Build()
	File_fpc_environment_proto = out.File
	file_fpc_environment_proto_goTypes = nil
	file_fpc_environment_proto_depIdxs = nil
}
