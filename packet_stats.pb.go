//
// This defines the gpb message format used by the packet stats sensort
//
// The top level messages is PacketStats
//
// Copyrights (c)  2015, Juniper Networks, Inc.
// All rights reserved.
//

//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
//
// Nitin Kumar, Jan 2015
//
// This file defines the messages in Protocol Buffers format used by
// the packet statistics sensor. The top level message is PacketStatistics
//
// Version 1.0
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: packet_stats.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PacketStatistics struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of stats aggregated across all forwarding engines
	PacketStats []*PacketStatsClass `protobuf:"bytes,1,rep,name=packet_stats,json=packetStats" json:"packet_stats,omitempty"`
	// List of stats per forwarding engine
	PacketStatsPfe []*PacketStatsPacketForwardingEngine `protobuf:"bytes,2,rep,name=packet_stats_pfe,json=packetStatsPfe" json:"packet_stats_pfe,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PacketStatistics) Reset() {
	*x = PacketStatistics{}
	mi := &file_packet_stats_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PacketStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketStatistics) ProtoMessage() {}

func (x *PacketStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_packet_stats_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketStatistics.ProtoReflect.Descriptor instead.
func (*PacketStatistics) Descriptor() ([]byte, []int) {
	return file_packet_stats_proto_rawDescGZIP(), []int{0}
}

func (x *PacketStatistics) GetPacketStats() []*PacketStatsClass {
	if x != nil {
		return x.PacketStats
	}
	return nil
}

func (x *PacketStatistics) GetPacketStatsPfe() []*PacketStatsPacketForwardingEngine {
	if x != nil {
		return x.PacketStatsPfe
	}
	return nil
}

type PacketStatsPacketForwardingEngine struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A string of the form pfe-X/Y that identifies a PFE in the system
	PfeIdentifier *string `protobuf:"bytes,1,req,name=pfe_identifier,json=pfeIdentifier" json:"pfe_identifier,omitempty"`
	// Array of all counters that are available
	PacketStats   []*PacketStatsClass `protobuf:"bytes,2,rep,name=packet_stats,json=packetStats" json:"packet_stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PacketStatsPacketForwardingEngine) Reset() {
	*x = PacketStatsPacketForwardingEngine{}
	mi := &file_packet_stats_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PacketStatsPacketForwardingEngine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketStatsPacketForwardingEngine) ProtoMessage() {}

func (x *PacketStatsPacketForwardingEngine) ProtoReflect() protoreflect.Message {
	mi := &file_packet_stats_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketStatsPacketForwardingEngine.ProtoReflect.Descriptor instead.
func (*PacketStatsPacketForwardingEngine) Descriptor() ([]byte, []int) {
	return file_packet_stats_proto_rawDescGZIP(), []int{1}
}

func (x *PacketStatsPacketForwardingEngine) GetPfeIdentifier() string {
	if x != nil && x.PfeIdentifier != nil {
		return *x.PfeIdentifier
	}
	return ""
}

func (x *PacketStatsPacketForwardingEngine) GetPacketStats() []*PacketStatsClass {
	if x != nil {
		return x.PacketStats
	}
	return nil
}

type PacketStatsClass struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Broad category that defines this class of counters
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// Packet/Byte counters for the above category
	Counter       *PacketStatsCounter `protobuf:"bytes,2,req,name=counter" json:"counter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PacketStatsClass) Reset() {
	*x = PacketStatsClass{}
	mi := &file_packet_stats_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PacketStatsClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketStatsClass) ProtoMessage() {}

func (x *PacketStatsClass) ProtoReflect() protoreflect.Message {
	mi := &file_packet_stats_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketStatsClass.ProtoReflect.Descriptor instead.
func (*PacketStatsClass) Descriptor() ([]byte, []int) {
	return file_packet_stats_proto_rawDescGZIP(), []int{2}
}

func (x *PacketStatsClass) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PacketStatsClass) GetCounter() *PacketStatsCounter {
	if x != nil {
		return x.Counter
	}
	return nil
}

type PacketStatsCounter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Counter64: This is a counter representing the total number of packets
	// that were dropped for a given error.
	PacketCount *uint64 `protobuf:"varint,1,req,name=packet_count,json=packetCount" json:"packet_count,omitempty"`
	// Counter64: This is a counter representing the total number of
	// bytes that were dropped for a given error.
	ByteCount *uint64 `protobuf:"varint,2,opt,name=byte_count,json=byteCount" json:"byte_count,omitempty"`
	// Rate: This value represents the rate of packets dropped
	// due to a given error, expressed in packets per second.
	// On most platforms, this rate is computed over a 1 second interval.
	PacketRate *uint64 `protobuf:"varint,3,opt,name=packet_rate,json=packetRate" json:"packet_rate,omitempty"`
	// Rate: This value represents the total number of
	// bits per second that were dropped for a given error.
	BitRate       *uint64 `protobuf:"varint,4,opt,name=bit_rate,json=bitRate" json:"bit_rate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PacketStatsCounter) Reset() {
	*x = PacketStatsCounter{}
	mi := &file_packet_stats_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PacketStatsCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketStatsCounter) ProtoMessage() {}

func (x *PacketStatsCounter) ProtoReflect() protoreflect.Message {
	mi := &file_packet_stats_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketStatsCounter.ProtoReflect.Descriptor instead.
func (*PacketStatsCounter) Descriptor() ([]byte, []int) {
	return file_packet_stats_proto_rawDescGZIP(), []int{3}
}

func (x *PacketStatsCounter) GetPacketCount() uint64 {
	if x != nil && x.PacketCount != nil {
		return *x.PacketCount
	}
	return 0
}

func (x *PacketStatsCounter) GetByteCount() uint64 {
	if x != nil && x.ByteCount != nil {
		return *x.ByteCount
	}
	return 0
}

func (x *PacketStatsCounter) GetPacketRate() uint64 {
	if x != nil && x.PacketRate != nil {
		return *x.PacketRate
	}
	return 0
}

func (x *PacketStatsCounter) GetBitRate() uint64 {
	if x != nil && x.BitRate != nil {
		return *x.BitRate
	}
	return 0
}

var file_packet_stats_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*PacketStatistics)(nil),
		Field:         8,
		Name:          "jnpr_packet_statistics_ext",
		Tag:           "bytes,8,opt,name=jnpr_packet_statistics_ext",
		Filename:      "packet_stats.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional PacketStatistics jnpr_packet_statistics_ext = 8;
	E_JnprPacketStatisticsExt = &file_packet_stats_proto_extTypes[0]
)

var File_packet_stats_proto protoreflect.FileDescriptor

var file_packet_stats_proto_rawDesc = string([]byte{
	0x0a, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x74, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x01, 0x0a, 0x10, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x34,
	0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x5f, 0x70, 0x66, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x50,
	0x66, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x21, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x66, 0x65, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x66, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x55, 0x0a, 0x10, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x92, 0x01, 0x0a,
	0x12, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x69, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x3a, 0x67, 0x0a, 0x1a, 0x6a, 0x6e, 0x70, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x12,
	0x17, 0x2e, 0x4a, 0x75, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x17, 0x6a, 0x6e, 0x70, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x78, 0x74, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f,
	0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
})

var (
	file_packet_stats_proto_rawDescOnce sync.Once
	file_packet_stats_proto_rawDescData []byte
)

func file_packet_stats_proto_rawDescGZIP() []byte {
	file_packet_stats_proto_rawDescOnce.Do(func() {
		file_packet_stats_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_packet_stats_proto_rawDesc), len(file_packet_stats_proto_rawDesc)))
	})
	return file_packet_stats_proto_rawDescData
}

var file_packet_stats_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_packet_stats_proto_goTypes = []any{
	(*PacketStatistics)(nil),                  // 0: PacketStatistics
	(*PacketStatsPacketForwardingEngine)(nil), // 1: PacketStatsPacketForwardingEngine
	(*PacketStatsClass)(nil),                  // 2: PacketStatsClass
	(*PacketStatsCounter)(nil),                // 3: PacketStatsCounter
	(*JuniperNetworksSensors)(nil),            // 4: JuniperNetworksSensors
}
var file_packet_stats_proto_depIdxs = []int32{
	2, // 0: PacketStatistics.packet_stats:type_name -> PacketStatsClass
	1, // 1: PacketStatistics.packet_stats_pfe:type_name -> PacketStatsPacketForwardingEngine
	2, // 2: PacketStatsPacketForwardingEngine.packet_stats:type_name -> PacketStatsClass
	3, // 3: PacketStatsClass.counter:type_name -> PacketStatsCounter
	4, // 4: jnpr_packet_statistics_ext:extendee -> JuniperNetworksSensors
	0, // 5: jnpr_packet_statistics_ext:type_name -> PacketStatistics
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	5, // [5:6] is the sub-list for extension type_name
	4, // [4:5] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_packet_stats_proto_init() }
func file_packet_stats_proto_init() {
	if File_packet_stats_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_packet_stats_proto_rawDesc), len(file_packet_stats_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_packet_stats_proto_goTypes,
		DependencyIndexes: file_packet_stats_proto_depIdxs,
		MessageInfos:      file_packet_stats_proto_msgTypes,
		ExtensionInfos:    file_packet_stats_proto_extTypes,
	}.Build()
	File_packet_stats_proto = out.File
	file_packet_stats_proto_goTypes = nil
	file_packet_stats_proto_depIdxs = nil
}
