// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: lacpd_oc.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LacpLacp struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	State         *LacpLacpStateType      `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	Interfaces    *LacpLacpInterfacesType `protobuf:"bytes,152,opt,name=interfaces" json:"interfaces,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LacpLacp) Reset() {
	*x = LacpLacp{}
	mi := &file_lacpd_oc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LacpLacp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LacpLacp) ProtoMessage() {}

func (x *LacpLacp) ProtoReflect() protoreflect.Message {
	mi := &file_lacpd_oc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LacpLacp.ProtoReflect.Descriptor instead.
func (*LacpLacp) Descriptor() ([]byte, []int) {
	return file_lacpd_oc_proto_rawDescGZIP(), []int{0}
}

func (x *LacpLacp) GetState() *LacpLacpStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *LacpLacp) GetInterfaces() *LacpLacpInterfacesType {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

type LacpLacpStateType struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SystemPriority *uint32                `protobuf:"varint,51,opt,name=system_priority,json=systemPriority" json:"system_priority,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *LacpLacpStateType) Reset() {
	*x = LacpLacpStateType{}
	mi := &file_lacpd_oc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LacpLacpStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LacpLacpStateType) ProtoMessage() {}

func (x *LacpLacpStateType) ProtoReflect() protoreflect.Message {
	mi := &file_lacpd_oc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LacpLacpStateType.ProtoReflect.Descriptor instead.
func (*LacpLacpStateType) Descriptor() ([]byte, []int) {
	return file_lacpd_oc_proto_rawDescGZIP(), []int{0, 0}
}

func (x *LacpLacpStateType) GetSystemPriority() uint32 {
	if x != nil && x.SystemPriority != nil {
		return *x.SystemPriority
	}
	return 0
}

type LacpLacpInterfacesType struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	Interface     []*LacpLacpInterfacesTypeInterfaceList `protobuf:"bytes,151,rep,name=interface" json:"interface,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LacpLacpInterfacesType) Reset() {
	*x = LacpLacpInterfacesType{}
	mi := &file_lacpd_oc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LacpLacpInterfacesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LacpLacpInterfacesType) ProtoMessage() {}

func (x *LacpLacpInterfacesType) ProtoReflect() protoreflect.Message {
	mi := &file_lacpd_oc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LacpLacpInterfacesType.ProtoReflect.Descriptor instead.
func (*LacpLacpInterfacesType) Descriptor() ([]byte, []int) {
	return file_lacpd_oc_proto_rawDescGZIP(), []int{0, 1}
}

func (x *LacpLacpInterfacesType) GetInterface() []*LacpLacpInterfacesTypeInterfaceList {
	if x != nil {
		return x.Interface
	}
	return nil
}

type LacpLacpInterfacesTypeInterfaceList struct {
	state         protoimpl.MessageState                          `protogen:"open.v1"`
	Name          *string                                         `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	State         *LacpLacpInterfacesTypeInterfaceListStateType   `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	Members       *LacpLacpInterfacesTypeInterfaceListMembersType `protobuf:"bytes,152,opt,name=members" json:"members,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LacpLacpInterfacesTypeInterfaceList) Reset() {
	*x = LacpLacpInterfacesTypeInterfaceList{}
	mi := &file_lacpd_oc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LacpLacpInterfacesTypeInterfaceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LacpLacpInterfacesTypeInterfaceList) ProtoMessage() {}

func (x *LacpLacpInterfacesTypeInterfaceList) ProtoReflect() protoreflect.Message {
	mi := &file_lacpd_oc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LacpLacpInterfacesTypeInterfaceList.ProtoReflect.Descriptor instead.
func (*LacpLacpInterfacesTypeInterfaceList) Descriptor() ([]byte, []int) {
	return file_lacpd_oc_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *LacpLacpInterfacesTypeInterfaceList) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *LacpLacpInterfacesTypeInterfaceList) GetState() *LacpLacpInterfacesTypeInterfaceListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *LacpLacpInterfacesTypeInterfaceList) GetMembers() *LacpLacpInterfacesTypeInterfaceListMembersType {
	if x != nil {
		return x.Members
	}
	return nil
}

type LacpLacpInterfacesTypeInterfaceListStateType struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Name           *string                `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	Interval       *string                `protobuf:"bytes,52,opt,name=interval" json:"interval,omitempty"`
	LacpMode       *string                `protobuf:"bytes,53,opt,name=lacp_mode,json=lacpMode" json:"lacp_mode,omitempty"`
	SystemIdMac    *string                `protobuf:"bytes,54,opt,name=system_id_mac,json=systemIdMac" json:"system_id_mac,omitempty"`
	SystemPriority *uint32                `protobuf:"varint,55,opt,name=system_priority,json=systemPriority" json:"system_priority,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *LacpLacpInterfacesTypeInterfaceListStateType) Reset() {
	*x = LacpLacpInterfacesTypeInterfaceListStateType{}
	mi := &file_lacpd_oc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LacpLacpInterfacesTypeInterfaceListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LacpLacpInterfacesTypeInterfaceListStateType) ProtoMessage() {}

func (x *LacpLacpInterfacesTypeInterfaceListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_lacpd_oc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LacpLacpInterfacesTypeInterfaceListStateType.ProtoReflect.Descriptor instead.
func (*LacpLacpInterfacesTypeInterfaceListStateType) Descriptor() ([]byte, []int) {
	return file_lacpd_oc_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

func (x *LacpLacpInterfacesTypeInterfaceListStateType) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *LacpLacpInterfacesTypeInterfaceListStateType) GetInterval() string {
	if x != nil && x.Interval != nil {
		return *x.Interval
	}
	return ""
}

func (x *LacpLacpInterfacesTypeInterfaceListStateType) GetLacpMode() string {
	if x != nil && x.LacpMode != nil {
		return *x.LacpMode
	}
	return ""
}

func (x *LacpLacpInterfacesTypeInterfaceListStateType) GetSystemIdMac() string {
	if x != nil && x.SystemIdMac != nil {
		return *x.SystemIdMac
	}
	return ""
}

func (x *LacpLacpInterfacesTypeInterfaceListStateType) GetSystemPriority() uint32 {
	if x != nil && x.SystemPriority != nil {
		return *x.SystemPriority
	}
	return 0
}

type LacpLacpInterfacesTypeInterfaceListMembersType struct {
	state         protoimpl.MessageState                                      `protogen:"open.v1"`
	Member        []*LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList `protobuf:"bytes,151,rep,name=member" json:"member,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersType) Reset() {
	*x = LacpLacpInterfacesTypeInterfaceListMembersType{}
	mi := &file_lacpd_oc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LacpLacpInterfacesTypeInterfaceListMembersType) ProtoMessage() {}

func (x *LacpLacpInterfacesTypeInterfaceListMembersType) ProtoReflect() protoreflect.Message {
	mi := &file_lacpd_oc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LacpLacpInterfacesTypeInterfaceListMembersType.ProtoReflect.Descriptor instead.
func (*LacpLacpInterfacesTypeInterfaceListMembersType) Descriptor() ([]byte, []int) {
	return file_lacpd_oc_proto_rawDescGZIP(), []int{0, 1, 0, 1}
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersType) GetMember() []*LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList {
	if x != nil {
		return x.Member
	}
	return nil
}

type LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList struct {
	state         protoimpl.MessageState                                             `protogen:"open.v1"`
	Interface     *string                                                            `protobuf:"bytes,51,opt,name=interface" json:"interface,omitempty"`
	State         *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList) Reset() {
	*x = LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList{}
	mi := &file_lacpd_oc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList) ProtoMessage() {}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList) ProtoReflect() protoreflect.Message {
	mi := &file_lacpd_oc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList.ProtoReflect.Descriptor instead.
func (*LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList) Descriptor() ([]byte, []int) {
	return file_lacpd_oc_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0}
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList) GetInterface() string {
	if x != nil && x.Interface != nil {
		return *x.Interface
	}
	return ""
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList) GetState() *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType struct {
	state                  protoimpl.MessageState                                                         `protogen:"open.v1"`
	Interface              *string                                                                        `protobuf:"bytes,51,opt,name=interface" json:"interface,omitempty"`
	Activity               *string                                                                        `protobuf:"bytes,52,opt,name=activity" json:"activity,omitempty"`
	Timeout                *string                                                                        `protobuf:"bytes,53,opt,name=timeout" json:"timeout,omitempty"`
	Synchronization        *string                                                                        `protobuf:"bytes,54,opt,name=synchronization" json:"synchronization,omitempty"`
	Aggregatable           *bool                                                                          `protobuf:"varint,55,opt,name=aggregatable" json:"aggregatable,omitempty"`
	Collecting             *bool                                                                          `protobuf:"varint,56,opt,name=collecting" json:"collecting,omitempty"`
	Distributing           *bool                                                                          `protobuf:"varint,57,opt,name=distributing" json:"distributing,omitempty"`
	SystemId               *string                                                                        `protobuf:"bytes,58,opt,name=system_id,json=systemId" json:"system_id,omitempty"`
	OperKey                *uint32                                                                        `protobuf:"varint,59,opt,name=oper_key,json=operKey" json:"oper_key,omitempty"`
	PartnerId              *string                                                                        `protobuf:"bytes,61,opt,name=partner_id,json=partnerId" json:"partner_id,omitempty"`
	PartnerKey             *uint32                                                                        `protobuf:"varint,62,opt,name=partner_key,json=partnerKey" json:"partner_key,omitempty"`
	PortNum                *uint32                                                                        `protobuf:"varint,60,opt,name=port_num,json=portNum" json:"port_num,omitempty"`
	PartnerPortNum         *uint32                                                                        `protobuf:"varint,63,opt,name=partner_port_num,json=partnerPortNum" json:"partner_port_num,omitempty"`
	Counters               *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType `protobuf:"bytes,151,opt,name=counters" json:"counters,omitempty"`
	MuxState               *string                                                                        `protobuf:"bytes,64,opt,name=mux_state,json=muxState" json:"mux_state,omitempty"`
	PartnerTimeout         *string                                                                        `protobuf:"bytes,65,opt,name=partner_timeout,json=partnerTimeout" json:"partner_timeout,omitempty"`
	PartnerSynchronization *string                                                                        `protobuf:"bytes,66,opt,name=partner_synchronization,json=partnerSynchronization" json:"partner_synchronization,omitempty"`
	PartnerAggregatable    *bool                                                                          `protobuf:"varint,67,opt,name=partner_aggregatable,json=partnerAggregatable" json:"partner_aggregatable,omitempty"`
	PartnerCollecting      *bool                                                                          `protobuf:"varint,68,opt,name=partner_collecting,json=partnerCollecting" json:"partner_collecting,omitempty"`
	PartnerDistributing    *bool                                                                          `protobuf:"varint,69,opt,name=partner_distributing,json=partnerDistributing" json:"partner_distributing,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) Reset() {
	*x = LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType{}
	mi := &file_lacpd_oc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) ProtoMessage() {}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_lacpd_oc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType.ProtoReflect.Descriptor instead.
func (*LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) Descriptor() ([]byte, []int) {
	return file_lacpd_oc_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0, 0}
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetInterface() string {
	if x != nil && x.Interface != nil {
		return *x.Interface
	}
	return ""
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetActivity() string {
	if x != nil && x.Activity != nil {
		return *x.Activity
	}
	return ""
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetTimeout() string {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return ""
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetSynchronization() string {
	if x != nil && x.Synchronization != nil {
		return *x.Synchronization
	}
	return ""
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetAggregatable() bool {
	if x != nil && x.Aggregatable != nil {
		return *x.Aggregatable
	}
	return false
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetCollecting() bool {
	if x != nil && x.Collecting != nil {
		return *x.Collecting
	}
	return false
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetDistributing() bool {
	if x != nil && x.Distributing != nil {
		return *x.Distributing
	}
	return false
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetSystemId() string {
	if x != nil && x.SystemId != nil {
		return *x.SystemId
	}
	return ""
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetOperKey() uint32 {
	if x != nil && x.OperKey != nil {
		return *x.OperKey
	}
	return 0
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetPartnerId() string {
	if x != nil && x.PartnerId != nil {
		return *x.PartnerId
	}
	return ""
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetPartnerKey() uint32 {
	if x != nil && x.PartnerKey != nil {
		return *x.PartnerKey
	}
	return 0
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetPortNum() uint32 {
	if x != nil && x.PortNum != nil {
		return *x.PortNum
	}
	return 0
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetPartnerPortNum() uint32 {
	if x != nil && x.PartnerPortNum != nil {
		return *x.PartnerPortNum
	}
	return 0
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetCounters() *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetMuxState() string {
	if x != nil && x.MuxState != nil {
		return *x.MuxState
	}
	return ""
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetPartnerTimeout() string {
	if x != nil && x.PartnerTimeout != nil {
		return *x.PartnerTimeout
	}
	return ""
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetPartnerSynchronization() string {
	if x != nil && x.PartnerSynchronization != nil {
		return *x.PartnerSynchronization
	}
	return ""
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetPartnerAggregatable() bool {
	if x != nil && x.PartnerAggregatable != nil {
		return *x.PartnerAggregatable
	}
	return false
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetPartnerCollecting() bool {
	if x != nil && x.PartnerCollecting != nil {
		return *x.PartnerCollecting
	}
	return false
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetPartnerDistributing() bool {
	if x != nil && x.PartnerDistributing != nil {
		return *x.PartnerDistributing
	}
	return false
}

type LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	LacpInPkts        *uint64                `protobuf:"varint,51,opt,name=lacp_in_pkts,json=lacpInPkts" json:"lacp_in_pkts,omitempty"`
	LacpOutPkts       *uint64                `protobuf:"varint,52,opt,name=lacp_out_pkts,json=lacpOutPkts" json:"lacp_out_pkts,omitempty"`
	LacpRxErrors      *uint64                `protobuf:"varint,53,opt,name=lacp_rx_errors,json=lacpRxErrors" json:"lacp_rx_errors,omitempty"`
	LacpTxErrors      *uint64                `protobuf:"varint,54,opt,name=lacp_tx_errors,json=lacpTxErrors" json:"lacp_tx_errors,omitempty"`
	LacpUnknownErrors *uint64                `protobuf:"varint,55,opt,name=lacp_unknown_errors,json=lacpUnknownErrors" json:"lacp_unknown_errors,omitempty"`
	LacpErrors        *uint64                `protobuf:"varint,56,opt,name=lacp_errors,json=lacpErrors" json:"lacp_errors,omitempty"`
	CollectionTime    *string                `protobuf:"bytes,57,opt,name=collection_time,json=collectionTime" json:"collection_time,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) Reset() {
	*x = LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType{}
	mi := &file_lacpd_oc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) ProtoMessage() {
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) ProtoReflect() protoreflect.Message {
	mi := &file_lacpd_oc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType.ProtoReflect.Descriptor instead.
func (*LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) Descriptor() ([]byte, []int) {
	return file_lacpd_oc_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0, 0, 0}
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) GetLacpInPkts() uint64 {
	if x != nil && x.LacpInPkts != nil {
		return *x.LacpInPkts
	}
	return 0
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) GetLacpOutPkts() uint64 {
	if x != nil && x.LacpOutPkts != nil {
		return *x.LacpOutPkts
	}
	return 0
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) GetLacpRxErrors() uint64 {
	if x != nil && x.LacpRxErrors != nil {
		return *x.LacpRxErrors
	}
	return 0
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) GetLacpTxErrors() uint64 {
	if x != nil && x.LacpTxErrors != nil {
		return *x.LacpTxErrors
	}
	return 0
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) GetLacpUnknownErrors() uint64 {
	if x != nil && x.LacpUnknownErrors != nil {
		return *x.LacpUnknownErrors
	}
	return 0
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) GetLacpErrors() uint64 {
	if x != nil && x.LacpErrors != nil {
		return *x.LacpErrors
	}
	return 0
}

func (x *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) GetCollectionTime() string {
	if x != nil && x.CollectionTime != nil {
		return *x.CollectionTime
	}
	return ""
}

var file_lacpd_oc_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*LacpLacp)(nil),
		Field:         52,
		Name:          "jnpr_lacp_lacp_ext",
		Tag:           "bytes,52,opt,name=jnpr_lacp_lacp_ext",
		Filename:      "lacpd_oc.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional lacp_lacp jnpr_lacp_lacp_ext = 52;
	E_JnprLacpLacpExt = &file_lacpd_oc_proto_extTypes[0]
)

var File_lacpd_oc_proto protoreflect.FileDescriptor

var file_lacpd_oc_proto_rawDesc = string([]byte{
	0x0a, 0x0e, 0x6c, 0x61, 0x63, 0x70, 0x64, 0x5f, 0x6f, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x13, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe9, 0x0f, 0x0a, 0x09, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x6c,
	0x61, 0x63, 0x70, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x6c, 0x61, 0x63, 0x70, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x6c, 0x61,
	0x63, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x1a, 0x35,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a, 0xb9, 0x0e, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x6c, 0x61, 0x63, 0x70, 0x5f, 0x6c, 0x61, 0x63, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x1a, 0xdb, 0x0d, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x4b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x6c, 0x61, 0x63, 0x70, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x51,
	0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x6c, 0x61, 0x63, 0x70, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x1a, 0xa6, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x63, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x4d, 0x61,
	0x63, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a, 0xe4, 0x0a, 0x0a, 0x0c, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5b, 0x0a, 0x06, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6c,
	0x61, 0x63, 0x70, 0x5f, 0x6c, 0x61, 0x63, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0xf6, 0x09, 0x0a, 0x0b, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02,
	0x08, 0x01, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x64, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e,
	0x6c, 0x61, 0x63, 0x70, 0x5f, 0x6c, 0x61, 0x63, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0xdb, 0x08, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72,
	0x6f, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x37, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x38, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x39, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x3e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x50, 0x6f,
	0x72, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x78, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x6c, 0x61, 0x63, 0x70, 0x5f,
	0x6c, 0x61, 0x63, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x75, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x40, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x75, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x37, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x53,
	0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31,
	0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x44, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x31, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x45, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x1a, 0x9b, 0x02, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x69, 0x6e,
	0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x61, 0x63,
	0x70, 0x49, 0x6e, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x63, 0x70, 0x5f,
	0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x6c, 0x61, 0x63, 0x70, 0x4f, 0x75, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6c,
	0x61, 0x63, 0x70, 0x5f, 0x72, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x6c, 0x61, 0x63, 0x70, 0x52, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x74, 0x78, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6c, 0x61, 0x63, 0x70, 0x54,
	0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x63, 0x70, 0x5f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x37,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6c, 0x61, 0x63, 0x70, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x63, 0x70, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x61,
	0x63, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x3a, 0x50, 0x0a, 0x12, 0x6a, 0x6e, 0x70, 0x72, 0x5f, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x6c,
	0x61, 0x63, 0x70, 0x5f, 0x65, 0x78, 0x74, 0x12, 0x17, 0x2e, 0x4a, 0x75, 0x6e, 0x69, 0x70, 0x65,
	0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x6c, 0x61,
	0x63, 0x70, 0x52, 0x0f, 0x6a, 0x6e, 0x70, 0x72, 0x4c, 0x61, 0x63, 0x70, 0x4c, 0x61, 0x63, 0x70,
	0x45, 0x78, 0x74, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65,
})

var (
	file_lacpd_oc_proto_rawDescOnce sync.Once
	file_lacpd_oc_proto_rawDescData []byte
)

func file_lacpd_oc_proto_rawDescGZIP() []byte {
	file_lacpd_oc_proto_rawDescOnce.Do(func() {
		file_lacpd_oc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_lacpd_oc_proto_rawDesc), len(file_lacpd_oc_proto_rawDesc)))
	})
	return file_lacpd_oc_proto_rawDescData
}

var file_lacpd_oc_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_lacpd_oc_proto_goTypes = []any{
	(*LacpLacp)(nil),                                                                      // 0: lacp_lacp
	(*LacpLacpStateType)(nil),                                                             // 1: lacp_lacp.state_type
	(*LacpLacpInterfacesType)(nil),                                                        // 2: lacp_lacp.interfaces_type
	(*LacpLacpInterfacesTypeInterfaceList)(nil),                                           // 3: lacp_lacp.interfaces_type.interface_list
	(*LacpLacpInterfacesTypeInterfaceListStateType)(nil),                                  // 4: lacp_lacp.interfaces_type.interface_list.state_type
	(*LacpLacpInterfacesTypeInterfaceListMembersType)(nil),                                // 5: lacp_lacp.interfaces_type.interface_list.members_type
	(*LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList)(nil),                      // 6: lacp_lacp.interfaces_type.interface_list.members_type.member_list
	(*LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType)(nil),             // 7: lacp_lacp.interfaces_type.interface_list.members_type.member_list.state_type
	(*LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType)(nil), // 8: lacp_lacp.interfaces_type.interface_list.members_type.member_list.state_type.counters_type
	(*JuniperNetworksSensors)(nil),                                                        // 9: JuniperNetworksSensors
}
var file_lacpd_oc_proto_depIdxs = []int32{
	1,  // 0: lacp_lacp.state:type_name -> lacp_lacp.state_type
	2,  // 1: lacp_lacp.interfaces:type_name -> lacp_lacp.interfaces_type
	3,  // 2: lacp_lacp.interfaces_type.interface:type_name -> lacp_lacp.interfaces_type.interface_list
	4,  // 3: lacp_lacp.interfaces_type.interface_list.state:type_name -> lacp_lacp.interfaces_type.interface_list.state_type
	5,  // 4: lacp_lacp.interfaces_type.interface_list.members:type_name -> lacp_lacp.interfaces_type.interface_list.members_type
	6,  // 5: lacp_lacp.interfaces_type.interface_list.members_type.member:type_name -> lacp_lacp.interfaces_type.interface_list.members_type.member_list
	7,  // 6: lacp_lacp.interfaces_type.interface_list.members_type.member_list.state:type_name -> lacp_lacp.interfaces_type.interface_list.members_type.member_list.state_type
	8,  // 7: lacp_lacp.interfaces_type.interface_list.members_type.member_list.state_type.counters:type_name -> lacp_lacp.interfaces_type.interface_list.members_type.member_list.state_type.counters_type
	9,  // 8: jnpr_lacp_lacp_ext:extendee -> JuniperNetworksSensors
	0,  // 9: jnpr_lacp_lacp_ext:type_name -> lacp_lacp
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	9,  // [9:10] is the sub-list for extension type_name
	8,  // [8:9] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_lacpd_oc_proto_init() }
func file_lacpd_oc_proto_init() {
	if File_lacpd_oc_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_lacpd_oc_proto_rawDesc), len(file_lacpd_oc_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_lacpd_oc_proto_goTypes,
		DependencyIndexes: file_lacpd_oc_proto_depIdxs,
		MessageInfos:      file_lacpd_oc_proto_msgTypes,
		ExtensionInfos:    file_lacpd_oc_proto_extTypes,
	}.Build()
	File_lacpd_oc_proto = out.File
	file_lacpd_oc_proto_goTypes = nil
	file_lacpd_oc_proto_depIdxs = nil
}
