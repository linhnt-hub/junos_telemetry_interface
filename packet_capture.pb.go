// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: packet_capture.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JunosPfePacketCapture struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	System        *JunosPfePacketCaptureSystemType `protobuf:"bytes,151,opt,name=system" json:"system,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosPfePacketCapture) Reset() {
	*x = JunosPfePacketCapture{}
	mi := &file_packet_capture_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosPfePacketCapture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosPfePacketCapture) ProtoMessage() {}

func (x *JunosPfePacketCapture) ProtoReflect() protoreflect.Message {
	mi := &file_packet_capture_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosPfePacketCapture.ProtoReflect.Descriptor instead.
func (*JunosPfePacketCapture) Descriptor() ([]byte, []int) {
	return file_packet_capture_proto_rawDescGZIP(), []int{0}
}

func (x *JunosPfePacketCapture) GetSystem() *JunosPfePacketCaptureSystemType {
	if x != nil {
		return x.System
	}
	return nil
}

type JunosPfePacketCaptureSystemType struct {
	state         protoimpl.MessageState                       `protogen:"open.v1"`
	Linecard      *JunosPfePacketCaptureSystemTypeLinecardType `protobuf:"bytes,151,opt,name=linecard" json:"linecard,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosPfePacketCaptureSystemType) Reset() {
	*x = JunosPfePacketCaptureSystemType{}
	mi := &file_packet_capture_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosPfePacketCaptureSystemType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosPfePacketCaptureSystemType) ProtoMessage() {}

func (x *JunosPfePacketCaptureSystemType) ProtoReflect() protoreflect.Message {
	mi := &file_packet_capture_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosPfePacketCaptureSystemType.ProtoReflect.Descriptor instead.
func (*JunosPfePacketCaptureSystemType) Descriptor() ([]byte, []int) {
	return file_packet_capture_proto_rawDescGZIP(), []int{0, 0}
}

func (x *JunosPfePacketCaptureSystemType) GetLinecard() *JunosPfePacketCaptureSystemTypeLinecardType {
	if x != nil {
		return x.Linecard
	}
	return nil
}

type JunosPfePacketCaptureSystemTypeLinecardType struct {
	state         protoimpl.MessageState                                        `protogen:"open.v1"`
	PacketCapture *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType `protobuf:"bytes,151,opt,name=packet_capture,json=packetCapture" json:"packet_capture,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosPfePacketCaptureSystemTypeLinecardType) Reset() {
	*x = JunosPfePacketCaptureSystemTypeLinecardType{}
	mi := &file_packet_capture_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosPfePacketCaptureSystemTypeLinecardType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosPfePacketCaptureSystemTypeLinecardType) ProtoMessage() {}

func (x *JunosPfePacketCaptureSystemTypeLinecardType) ProtoReflect() protoreflect.Message {
	mi := &file_packet_capture_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosPfePacketCaptureSystemTypeLinecardType.ProtoReflect.Descriptor instead.
func (*JunosPfePacketCaptureSystemTypeLinecardType) Descriptor() ([]byte, []int) {
	return file_packet_capture_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *JunosPfePacketCaptureSystemTypeLinecardType) GetPacketCapture() *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType {
	if x != nil {
		return x.PacketCapture
	}
	return nil
}

type JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType struct {
	state         protoimpl.MessageState                                                    `protogen:"open.v1"`
	Packet        []*JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList `protobuf:"bytes,151,rep,name=packet" json:"packet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType) Reset() {
	*x = JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType{}
	mi := &file_packet_capture_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType) ProtoMessage() {}

func (x *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType) ProtoReflect() protoreflect.Message {
	mi := &file_packet_capture_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType.ProtoReflect.Descriptor instead.
func (*JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType) Descriptor() ([]byte, []int) {
	return file_packet_capture_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType) GetPacket() []*JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList {
	if x != nil {
		return x.Packet
	}
	return nil
}

type JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint64                `protobuf:"varint,51,opt,name=id" json:"id,omitempty"`
	TotalLength   *uint64                `protobuf:"varint,52,opt,name=total_length,json=totalLength" json:"total_length,omitempty"`
	ActualLength  *uint64                `protobuf:"varint,53,opt,name=actual_length,json=actualLength" json:"actual_length,omitempty"`
	PacketData    *string                `protobuf:"bytes,54,opt,name=packet_data,json=packetData" json:"packet_data,omitempty"`
	Timestamp     *uint64                `protobuf:"varint,55,opt,name=timestamp" json:"timestamp,omitempty"`
	IflIndex      *uint32                `protobuf:"varint,56,opt,name=ifl_index,json=iflIndex" json:"ifl_index,omitempty"`
	CosQueue      *uint32                `protobuf:"varint,57,opt,name=cos_queue,json=cosQueue" json:"cos_queue,omitempty"`
	Direction     *string                `protobuf:"bytes,58,opt,name=direction" json:"direction,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) Reset() {
	*x = JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList{}
	mi := &file_packet_capture_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) ProtoMessage() {}

func (x *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) ProtoReflect() protoreflect.Message {
	mi := &file_packet_capture_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList.ProtoReflect.Descriptor instead.
func (*JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) Descriptor() ([]byte, []int) {
	return file_packet_capture_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) GetTotalLength() uint64 {
	if x != nil && x.TotalLength != nil {
		return *x.TotalLength
	}
	return 0
}

func (x *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) GetActualLength() uint64 {
	if x != nil && x.ActualLength != nil {
		return *x.ActualLength
	}
	return 0
}

func (x *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) GetPacketData() string {
	if x != nil && x.PacketData != nil {
		return *x.PacketData
	}
	return ""
}

func (x *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) GetIflIndex() uint32 {
	if x != nil && x.IflIndex != nil {
		return *x.IflIndex
	}
	return 0
}

func (x *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) GetCosQueue() uint32 {
	if x != nil && x.CosQueue != nil {
		return *x.CosQueue
	}
	return 0
}

func (x *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) GetDirection() string {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return ""
}

var file_packet_capture_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*JunosPfePacketCapture)(nil),
		Field:         139,
		Name:          "jnpr_junos_pfe_packet_capture_ext",
		Tag:           "bytes,139,opt,name=jnpr_junos_pfe_packet_capture_ext",
		Filename:      "packet_capture.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional junos_pfe_packet_capture jnpr_junos_pfe_packet_capture_ext = 139;
	E_JnprJunosPfePacketCaptureExt = &file_packet_capture_proto_extTypes[0]
)

var File_packet_capture_proto protoreflect.FileDescriptor

var file_packet_capture_proto_rawDesc = string([]byte{
	0x0a, 0x14, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x74, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcb, 0x05, 0x0a, 0x18,
	0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x70, 0x66, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6a, 0x75, 0x6e, 0x6f,
	0x73, 0x5f, 0x70, 0x66, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x1a, 0xee, 0x04, 0x0a, 0x0b, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x65,
	0x63, 0x61, 0x72, 0x64, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6a, 0x75,
	0x6e, 0x6f, 0x73, 0x5f, 0x70, 0x66, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x72, 0x64, 0x1a, 0x8c, 0x04, 0x0a, 0x0d, 0x6c,
	0x69, 0x6e, 0x65, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x6f, 0x0a, 0x0e,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x18, 0x97,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x70, 0x66,
	0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x69, 0x6e,
	0x65, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x89, 0x03,
	0x0a, 0x13, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x6c, 0x0a, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x70,
	0x66, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x69,
	0x6e, 0x65, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x1a, 0x83, 0x02, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x37, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x66, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x66, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6f, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x7c, 0x0a, 0x21, 0x6a, 0x6e, 0x70,
	0x72, 0x5f, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x70, 0x66, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x12, 0x17,
	0x2e, 0x4a, 0x75, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x70, 0x66, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x1c, 0x6a, 0x6e, 0x70, 0x72, 0x4a,
	0x75, 0x6e, 0x6f, 0x73, 0x50, 0x66, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x45, 0x78, 0x74, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x6a, 0x75, 0x6e,
	0x6f, 0x73, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
})

var (
	file_packet_capture_proto_rawDescOnce sync.Once
	file_packet_capture_proto_rawDescData []byte
)

func file_packet_capture_proto_rawDescGZIP() []byte {
	file_packet_capture_proto_rawDescOnce.Do(func() {
		file_packet_capture_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_packet_capture_proto_rawDesc), len(file_packet_capture_proto_rawDesc)))
	})
	return file_packet_capture_proto_rawDescData
}

var file_packet_capture_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_packet_capture_proto_goTypes = []any{
	(*JunosPfePacketCapture)(nil),                                                  // 0: junos_pfe_packet_capture
	(*JunosPfePacketCaptureSystemType)(nil),                                        // 1: junos_pfe_packet_capture.system_type
	(*JunosPfePacketCaptureSystemTypeLinecardType)(nil),                            // 2: junos_pfe_packet_capture.system_type.linecard_type
	(*JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType)(nil),           // 3: junos_pfe_packet_capture.system_type.linecard_type.packet_capture_type
	(*JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList)(nil), // 4: junos_pfe_packet_capture.system_type.linecard_type.packet_capture_type.packet_list
	(*JuniperNetworksSensors)(nil),                                                 // 5: JuniperNetworksSensors
}
var file_packet_capture_proto_depIdxs = []int32{
	1, // 0: junos_pfe_packet_capture.system:type_name -> junos_pfe_packet_capture.system_type
	2, // 1: junos_pfe_packet_capture.system_type.linecard:type_name -> junos_pfe_packet_capture.system_type.linecard_type
	3, // 2: junos_pfe_packet_capture.system_type.linecard_type.packet_capture:type_name -> junos_pfe_packet_capture.system_type.linecard_type.packet_capture_type
	4, // 3: junos_pfe_packet_capture.system_type.linecard_type.packet_capture_type.packet:type_name -> junos_pfe_packet_capture.system_type.linecard_type.packet_capture_type.packet_list
	5, // 4: jnpr_junos_pfe_packet_capture_ext:extendee -> JuniperNetworksSensors
	0, // 5: jnpr_junos_pfe_packet_capture_ext:type_name -> junos_pfe_packet_capture
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	5, // [5:6] is the sub-list for extension type_name
	4, // [4:5] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_packet_capture_proto_init() }
func file_packet_capture_proto_init() {
	if File_packet_capture_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_packet_capture_proto_rawDesc), len(file_packet_capture_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_packet_capture_proto_goTypes,
		DependencyIndexes: file_packet_capture_proto_depIdxs,
		MessageInfos:      file_packet_capture_proto_msgTypes,
		ExtensionInfos:    file_packet_capture_proto_extTypes,
	}.Build()
	File_packet_capture_proto = out.File
	file_packet_capture_proto_goTypes = nil
	file_packet_capture_proto_depIdxs = nil
}
