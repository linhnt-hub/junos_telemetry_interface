// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: l2ald_evpn_render.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NetworkInstancesL2Evpn struct {
	state           protoimpl.MessageState                       `protogen:"open.v1"`
	NetworkInstance []*NetworkInstancesL2EvpnNetworkInstanceList `protobuf:"bytes,161,rep,name=network_instance,json=networkInstance" json:"network_instance,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkInstancesL2Evpn) Reset() {
	*x = NetworkInstancesL2Evpn{}
	mi := &file_l2ald_evpn_render_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesL2Evpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesL2Evpn) ProtoMessage() {}

func (x *NetworkInstancesL2Evpn) ProtoReflect() protoreflect.Message {
	mi := &file_l2ald_evpn_render_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesL2Evpn.ProtoReflect.Descriptor instead.
func (*NetworkInstancesL2Evpn) Descriptor() ([]byte, []int) {
	return file_l2ald_evpn_render_proto_rawDescGZIP(), []int{0}
}

func (x *NetworkInstancesL2Evpn) GetNetworkInstance() []*NetworkInstancesL2EvpnNetworkInstanceList {
	if x != nil {
		return x.NetworkInstance
	}
	return nil
}

type NetworkInstancesL2EvpnNetworkInstanceList struct {
	state         protoimpl.MessageState                                  `protogen:"open.v1"`
	Name          *string                                                 `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	Protocols     *NetworkInstancesL2EvpnNetworkInstanceListProtocolsType `protobuf:"bytes,151,opt,name=protocols" json:"protocols,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesL2EvpnNetworkInstanceList) Reset() {
	*x = NetworkInstancesL2EvpnNetworkInstanceList{}
	mi := &file_l2ald_evpn_render_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesL2EvpnNetworkInstanceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesL2EvpnNetworkInstanceList) ProtoMessage() {}

func (x *NetworkInstancesL2EvpnNetworkInstanceList) ProtoReflect() protoreflect.Message {
	mi := &file_l2ald_evpn_render_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesL2EvpnNetworkInstanceList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesL2EvpnNetworkInstanceList) Descriptor() ([]byte, []int) {
	return file_l2ald_evpn_render_proto_rawDescGZIP(), []int{0, 0}
}

func (x *NetworkInstancesL2EvpnNetworkInstanceList) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NetworkInstancesL2EvpnNetworkInstanceList) GetProtocols() *NetworkInstancesL2EvpnNetworkInstanceListProtocolsType {
	if x != nil {
		return x.Protocols
	}
	return nil
}

type NetworkInstancesL2EvpnNetworkInstanceListProtocolsType struct {
	state         protoimpl.MessageState                                              `protogen:"open.v1"`
	Protocol      *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType `protobuf:"bytes,151,opt,name=protocol" json:"protocol,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesL2EvpnNetworkInstanceListProtocolsType) Reset() {
	*x = NetworkInstancesL2EvpnNetworkInstanceListProtocolsType{}
	mi := &file_l2ald_evpn_render_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesL2EvpnNetworkInstanceListProtocolsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesL2EvpnNetworkInstanceListProtocolsType) ProtoMessage() {}

func (x *NetworkInstancesL2EvpnNetworkInstanceListProtocolsType) ProtoReflect() protoreflect.Message {
	mi := &file_l2ald_evpn_render_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesL2EvpnNetworkInstanceListProtocolsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesL2EvpnNetworkInstanceListProtocolsType) Descriptor() ([]byte, []int) {
	return file_l2ald_evpn_render_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *NetworkInstancesL2EvpnNetworkInstanceListProtocolsType) GetProtocol() *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType {
	if x != nil {
		return x.Protocol
	}
	return nil
}

type NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType struct {
	state         protoimpl.MessageState                                                      `protogen:"open.v1"`
	Evpn          *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType `protobuf:"bytes,151,opt,name=evpn" json:"evpn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType) Reset() {
	*x = NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType{}
	mi := &file_l2ald_evpn_render_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType) ProtoMessage() {}

func (x *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType) ProtoReflect() protoreflect.Message {
	mi := &file_l2ald_evpn_render_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType) Descriptor() ([]byte, []int) {
	return file_l2ald_evpn_render_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType) GetEvpn() *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType {
	if x != nil {
		return x.Evpn
	}
	return nil
}

type NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType struct {
	state               protoimpl.MessageState                                                                               `protogen:"open.v1"`
	VxlanTunnelEndPoint []*NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList `protobuf:"bytes,152,rep,name=vxlan_tunnel_end_point,json=vxlanTunnelEndPoint" json:"vxlan_tunnel_end_point,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) Reset() {
	*x = NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType{}
	mi := &file_l2ald_evpn_render_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) ProtoMessage() {}

func (x *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) ProtoReflect() protoreflect.Message {
	mi := &file_l2ald_evpn_render_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) Descriptor() ([]byte, []int) {
	return file_l2ald_evpn_render_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetVxlanTunnelEndPoint() []*NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList {
	if x != nil {
		return x.VxlanTunnelEndPoint
	}
	return nil
}

type NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SourceIpAddress *string                `protobuf:"bytes,51,opt,name=source_ip_address,json=sourceIpAddress" json:"source_ip_address,omitempty"`
	RemoteIpAddress *string                `protobuf:"bytes,52,opt,name=remote_ip_address,json=remoteIpAddress" json:"remote_ip_address,omitempty"`
	Status          *string                `protobuf:"bytes,53,opt,name=status" json:"status,omitempty"`
	Mode            *string                `protobuf:"bytes,54,opt,name=mode" json:"mode,omitempty"`
	NexthopIndex    *uint32                `protobuf:"varint,55,opt,name=nexthop_index,json=nexthopIndex" json:"nexthop_index,omitempty"`
	SourceInterface *string                `protobuf:"bytes,56,opt,name=source_interface,json=sourceInterface" json:"source_interface,omitempty"`
	EventType       *string                `protobuf:"bytes,57,opt,name=event_type,json=eventType" json:"event_type,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) Reset() {
	*x = NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList{}
	mi := &file_l2ald_evpn_render_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) ProtoMessage() {
}

func (x *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) ProtoReflect() protoreflect.Message {
	mi := &file_l2ald_evpn_render_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) Descriptor() ([]byte, []int) {
	return file_l2ald_evpn_render_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0}
}

func (x *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) GetSourceIpAddress() string {
	if x != nil && x.SourceIpAddress != nil {
		return *x.SourceIpAddress
	}
	return ""
}

func (x *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) GetRemoteIpAddress() string {
	if x != nil && x.RemoteIpAddress != nil {
		return *x.RemoteIpAddress
	}
	return ""
}

func (x *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) GetMode() string {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return ""
}

func (x *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) GetNexthopIndex() uint32 {
	if x != nil && x.NexthopIndex != nil {
		return *x.NexthopIndex
	}
	return 0
}

func (x *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) GetSourceInterface() string {
	if x != nil && x.SourceInterface != nil {
		return *x.SourceInterface
	}
	return ""
}

func (x *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) GetEventType() string {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return ""
}

var file_l2ald_evpn_render_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*NetworkInstancesL2Evpn)(nil),
		Field:         116,
		Name:          "jnpr_network_instances_l2evpn_ext",
		Tag:           "bytes,116,opt,name=jnpr_network_instances_l2evpn_ext",
		Filename:      "l2ald_evpn_render.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional network_instances_l2evpn jnpr_network_instances_l2evpn_ext = 116;
	E_JnprNetworkInstancesL2EvpnExt = &file_l2ald_evpn_render_proto_extTypes[0]
)

var File_l2ald_evpn_render_proto protoreflect.FileDescriptor

var file_l2ald_evpn_render_proto_rawDesc = string([]byte{
	0x0a, 0x17, 0x6c, 0x32, 0x61, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x72, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdb,
	0x07, 0x0a, 0x18, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x32, 0x65, 0x76, 0x70, 0x6e, 0x12, 0x5b, 0x0a, 0x10, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0xa1, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x32, 0x65, 0x76, 0x70,
	0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0xe1, 0x06, 0x0a, 0x15, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x32, 0x65, 0x76, 0x70, 0x6e, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x1a, 0xcd, 0x05, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x69, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x32, 0x65, 0x76, 0x70, 0x6e, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0xcf, 0x04, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x6b, 0x0a, 0x04,
	0x65, 0x76, 0x70, 0x6e, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x6c, 0x32, 0x65, 0x76, 0x70, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x65, 0x76, 0x70, 0x6e, 0x1a, 0xd0, 0x03, 0x0a, 0x09, 0x65, 0x76,
	0x70, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x16, 0x76, 0x78, 0x6c, 0x61,
	0x6e, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x98, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x72, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x32,
	0x65, 0x76, 0x70, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x13, 0x76,
	0x78, 0x6c, 0x61, 0x6e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x1a, 0x97, 0x02, 0x0a, 0x1b, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x31,
	0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01,
	0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x37,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x7c, 0x0a, 0x21,
	0x6a, 0x6e, 0x70, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x32, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x65, 0x78,
	0x74, 0x12, 0x17, 0x2e, 0x4a, 0x75, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x32, 0x65, 0x76, 0x70, 0x6e, 0x52, 0x1d, 0x6a, 0x6e, 0x70,
	0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x4c, 0x32, 0x65, 0x76, 0x70, 0x6e, 0x45, 0x78, 0x74, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f,
	0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
})

var (
	file_l2ald_evpn_render_proto_rawDescOnce sync.Once
	file_l2ald_evpn_render_proto_rawDescData []byte
)

func file_l2ald_evpn_render_proto_rawDescGZIP() []byte {
	file_l2ald_evpn_render_proto_rawDescOnce.Do(func() {
		file_l2ald_evpn_render_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_l2ald_evpn_render_proto_rawDesc), len(file_l2ald_evpn_render_proto_rawDesc)))
	})
	return file_l2ald_evpn_render_proto_rawDescData
}

var file_l2ald_evpn_render_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_l2ald_evpn_render_proto_goTypes = []any{
	(*NetworkInstancesL2Evpn)(nil),                                                                            // 0: network_instances_l2evpn
	(*NetworkInstancesL2EvpnNetworkInstanceList)(nil),                                                         // 1: network_instances_l2evpn.network_instance_list
	(*NetworkInstancesL2EvpnNetworkInstanceListProtocolsType)(nil),                                            // 2: network_instances_l2evpn.network_instance_list.protocols_type
	(*NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType)(nil),                                // 3: network_instances_l2evpn.network_instance_list.protocols_type.protocol_type
	(*NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType)(nil),                        // 4: network_instances_l2evpn.network_instance_list.protocols_type.protocol_type.evpn_type
	(*NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList)(nil), // 5: network_instances_l2evpn.network_instance_list.protocols_type.protocol_type.evpn_type.vxlan_tunnel_end_point_list
	(*JuniperNetworksSensors)(nil),                                                                            // 6: JuniperNetworksSensors
}
var file_l2ald_evpn_render_proto_depIdxs = []int32{
	1, // 0: network_instances_l2evpn.network_instance:type_name -> network_instances_l2evpn.network_instance_list
	2, // 1: network_instances_l2evpn.network_instance_list.protocols:type_name -> network_instances_l2evpn.network_instance_list.protocols_type
	3, // 2: network_instances_l2evpn.network_instance_list.protocols_type.protocol:type_name -> network_instances_l2evpn.network_instance_list.protocols_type.protocol_type
	4, // 3: network_instances_l2evpn.network_instance_list.protocols_type.protocol_type.evpn:type_name -> network_instances_l2evpn.network_instance_list.protocols_type.protocol_type.evpn_type
	5, // 4: network_instances_l2evpn.network_instance_list.protocols_type.protocol_type.evpn_type.vxlan_tunnel_end_point:type_name -> network_instances_l2evpn.network_instance_list.protocols_type.protocol_type.evpn_type.vxlan_tunnel_end_point_list
	6, // 5: jnpr_network_instances_l2evpn_ext:extendee -> JuniperNetworksSensors
	0, // 6: jnpr_network_instances_l2evpn_ext:type_name -> network_instances_l2evpn
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	6, // [6:7] is the sub-list for extension type_name
	5, // [5:6] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_l2ald_evpn_render_proto_init() }
func file_l2ald_evpn_render_proto_init() {
	if File_l2ald_evpn_render_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_l2ald_evpn_render_proto_rawDesc), len(file_l2ald_evpn_render_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_l2ald_evpn_render_proto_goTypes,
		DependencyIndexes: file_l2ald_evpn_render_proto_depIdxs,
		MessageInfos:      file_l2ald_evpn_render_proto_msgTypes,
		ExtensionInfos:    file_l2ald_evpn_render_proto_extTypes,
	}.Build()
	File_l2ald_evpn_render_proto = out.File
	file_l2ald_evpn_render_proto_goTypes = nil
	file_l2ald_evpn_render_proto_depIdxs = nil
}
