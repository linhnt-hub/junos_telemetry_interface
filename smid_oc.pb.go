// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: smid_oc.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JunosSmi struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	System        *JunosSmiSystemType    `protobuf:"bytes,151,opt,name=system" json:"system,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosSmi) Reset() {
	*x = JunosSmi{}
	mi := &file_smid_oc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosSmi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosSmi) ProtoMessage() {}

func (x *JunosSmi) ProtoReflect() protoreflect.Message {
	mi := &file_smid_oc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosSmi.ProtoReflect.Descriptor instead.
func (*JunosSmi) Descriptor() ([]byte, []int) {
	return file_smid_oc_proto_rawDescGZIP(), []int{0}
}

func (x *JunosSmi) GetSystem() *JunosSmiSystemType {
	if x != nil {
		return x.System
	}
	return nil
}

type JunosSmiSystemType struct {
	state                protoimpl.MessageState                      `protogen:"open.v1"`
	SubscriberManagement *JunosSmiSystemTypeSubscriberManagementType `protobuf:"bytes,151,opt,name=subscriber_management,json=subscriberManagement" json:"subscriber_management,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *JunosSmiSystemType) Reset() {
	*x = JunosSmiSystemType{}
	mi := &file_smid_oc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosSmiSystemType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosSmiSystemType) ProtoMessage() {}

func (x *JunosSmiSystemType) ProtoReflect() protoreflect.Message {
	mi := &file_smid_oc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosSmiSystemType.ProtoReflect.Descriptor instead.
func (*JunosSmiSystemType) Descriptor() ([]byte, []int) {
	return file_smid_oc_proto_rawDescGZIP(), []int{0, 0}
}

func (x *JunosSmiSystemType) GetSubscriberManagement() *JunosSmiSystemTypeSubscriberManagementType {
	if x != nil {
		return x.SubscriberManagement
	}
	return nil
}

type JunosSmiSystemTypeSubscriberManagementType struct {
	state         protoimpl.MessageState                                   `protogen:"open.v1"`
	Infra         *JunosSmiSystemTypeSubscriberManagementTypeInfraType     `protobuf:"bytes,151,opt,name=infra" json:"infra,omitempty"`
	Chassis       []*JunosSmiSystemTypeSubscriberManagementTypeChassisList `protobuf:"bytes,152,rep,name=chassis" json:"chassis,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosSmiSystemTypeSubscriberManagementType) Reset() {
	*x = JunosSmiSystemTypeSubscriberManagementType{}
	mi := &file_smid_oc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosSmiSystemTypeSubscriberManagementType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosSmiSystemTypeSubscriberManagementType) ProtoMessage() {}

func (x *JunosSmiSystemTypeSubscriberManagementType) ProtoReflect() protoreflect.Message {
	mi := &file_smid_oc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosSmiSystemTypeSubscriberManagementType.ProtoReflect.Descriptor instead.
func (*JunosSmiSystemTypeSubscriberManagementType) Descriptor() ([]byte, []int) {
	return file_smid_oc_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *JunosSmiSystemTypeSubscriberManagementType) GetInfra() *JunosSmiSystemTypeSubscriberManagementTypeInfraType {
	if x != nil {
		return x.Infra
	}
	return nil
}

func (x *JunosSmiSystemTypeSubscriberManagementType) GetChassis() []*JunosSmiSystemTypeSubscriberManagementTypeChassisList {
	if x != nil {
		return x.Chassis
	}
	return nil
}

type JunosSmiSystemTypeSubscriberManagementTypeInfraType struct {
	state           protoimpl.MessageState                                                  `protogen:"open.v1"`
	Sdb             *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbType             `protobuf:"bytes,151,opt,name=sdb" json:"sdb,omitempty"`
	ResourceMonitor *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorType `protobuf:"bytes,152,opt,name=resource_monitor,json=resourceMonitor" json:"resource_monitor,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraType) Reset() {
	*x = JunosSmiSystemTypeSubscriberManagementTypeInfraType{}
	mi := &file_smid_oc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosSmiSystemTypeSubscriberManagementTypeInfraType) ProtoMessage() {}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraType) ProtoReflect() protoreflect.Message {
	mi := &file_smid_oc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosSmiSystemTypeSubscriberManagementTypeInfraType.ProtoReflect.Descriptor instead.
func (*JunosSmiSystemTypeSubscriberManagementTypeInfraType) Descriptor() ([]byte, []int) {
	return file_smid_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraType) GetSdb() *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbType {
	if x != nil {
		return x.Sdb
	}
	return nil
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraType) GetResourceMonitor() *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorType {
	if x != nil {
		return x.ResourceMonitor
	}
	return nil
}

type JunosSmiSystemTypeSubscriberManagementTypeChassisList struct {
	state          protoimpl.MessageState                                                   `protogen:"open.v1"`
	MemberId       *uint32                                                                  `protobuf:"varint,51,opt,name=member_id,json=memberId" json:"member_id,omitempty"`
	Role           *string                                                                  `protobuf:"bytes,52,opt,name=role" json:"role,omitempty"`
	RoutingEngines *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesType `protobuf:"bytes,151,opt,name=routing_engines,json=routingEngines" json:"routing_engines,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisList) Reset() {
	*x = JunosSmiSystemTypeSubscriberManagementTypeChassisList{}
	mi := &file_smid_oc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosSmiSystemTypeSubscriberManagementTypeChassisList) ProtoMessage() {}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisList) ProtoReflect() protoreflect.Message {
	mi := &file_smid_oc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosSmiSystemTypeSubscriberManagementTypeChassisList.ProtoReflect.Descriptor instead.
func (*JunosSmiSystemTypeSubscriberManagementTypeChassisList) Descriptor() ([]byte, []int) {
	return file_smid_oc_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisList) GetMemberId() uint32 {
	if x != nil && x.MemberId != nil {
		return *x.MemberId
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisList) GetRole() string {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return ""
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisList) GetRoutingEngines() *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesType {
	if x != nil {
		return x.RoutingEngines
	}
	return nil
}

type JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbType struct {
	state         protoimpl.MessageState                                                    `protogen:"open.v1"`
	Statistics    *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsType `protobuf:"bytes,151,opt,name=statistics" json:"statistics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbType) Reset() {
	*x = JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbType{}
	mi := &file_smid_oc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbType) ProtoMessage() {}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbType) ProtoReflect() protoreflect.Message {
	mi := &file_smid_oc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbType.ProtoReflect.Descriptor instead.
func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbType) Descriptor() ([]byte, []int) {
	return file_smid_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbType) GetStatistics() *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsType {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorType struct {
	state         protoimpl.MessageState                                                             `protogen:"open.v1"`
	Chassis       *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeChassisType `protobuf:"bytes,151,opt,name=chassis" json:"chassis,omitempty"`
	Fpcs          *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsType    `protobuf:"bytes,152,opt,name=fpcs" json:"fpcs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorType) Reset() {
	*x = JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorType{}
	mi := &file_smid_oc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorType) ProtoMessage() {}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorType) ProtoReflect() protoreflect.Message {
	mi := &file_smid_oc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorType.ProtoReflect.Descriptor instead.
func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorType) Descriptor() ([]byte, []int) {
	return file_smid_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1}
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorType) GetChassis() *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeChassisType {
	if x != nil {
		return x.Chassis
	}
	return nil
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorType) GetFpcs() *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsType {
	if x != nil {
		return x.Fpcs
	}
	return nil
}

type JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsType struct {
	state         protoimpl.MessageState                                                                  `protogen:"open.v1"`
	State         *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeStateType      `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	ClientType    *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeClientTypeType `protobuf:"bytes,152,opt,name=client_type,json=clientType" json:"client_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsType) Reset() {
	*x = JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsType{}
	mi := &file_smid_oc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsType) ProtoMessage() {}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsType) ProtoReflect() protoreflect.Message {
	mi := &file_smid_oc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsType.ProtoReflect.Descriptor instead.
func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsType) Descriptor() ([]byte, []int) {
	return file_smid_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0}
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsType) GetState() *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsType) GetClientType() *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeClientTypeType {
	if x != nil {
		return x.ClientType
	}
	return nil
}

type JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeStateType struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	InitStateCount        *uint32                `protobuf:"varint,51,opt,name=init_state_count,json=initStateCount" json:"init_state_count,omitempty"`
	ConfiguredStateCount  *uint32                `protobuf:"varint,52,opt,name=configured_state_count,json=configuredStateCount" json:"configured_state_count,omitempty"`
	ActiveStateCount      *uint32                `protobuf:"varint,53,opt,name=active_state_count,json=activeStateCount" json:"active_state_count,omitempty"`
	TerminatingStateCount *uint32                `protobuf:"varint,54,opt,name=terminating_state_count,json=terminatingStateCount" json:"terminating_state_count,omitempty"`
	TerminatedStateCount  *uint32                `protobuf:"varint,55,opt,name=terminated_state_count,json=terminatedStateCount" json:"terminated_state_count,omitempty"`
	TotalStateCount       *uint32                `protobuf:"varint,56,opt,name=total_state_count,json=totalStateCount" json:"total_state_count,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeStateType) Reset() {
	*x = JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeStateType{}
	mi := &file_smid_oc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeStateType) ProtoMessage() {
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_smid_oc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeStateType.ProtoReflect.Descriptor instead.
func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeStateType) Descriptor() ([]byte, []int) {
	return file_smid_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0}
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeStateType) GetInitStateCount() uint32 {
	if x != nil && x.InitStateCount != nil {
		return *x.InitStateCount
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeStateType) GetConfiguredStateCount() uint32 {
	if x != nil && x.ConfiguredStateCount != nil {
		return *x.ConfiguredStateCount
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeStateType) GetActiveStateCount() uint32 {
	if x != nil && x.ActiveStateCount != nil {
		return *x.ActiveStateCount
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeStateType) GetTerminatingStateCount() uint32 {
	if x != nil && x.TerminatingStateCount != nil {
		return *x.TerminatingStateCount
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeStateType) GetTerminatedStateCount() uint32 {
	if x != nil && x.TerminatedStateCount != nil {
		return *x.TerminatedStateCount
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeStateType) GetTotalStateCount() uint32 {
	if x != nil && x.TotalStateCount != nil {
		return *x.TotalStateCount
	}
	return 0
}

type JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeClientTypeType struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	DhcpClientCount   *uint32                `protobuf:"varint,61,opt,name=dhcp_client_count,json=dhcpClientCount" json:"dhcp_client_count,omitempty"`
	VlanClientCount   *uint32                `protobuf:"varint,62,opt,name=vlan_client_count,json=vlanClientCount" json:"vlan_client_count,omitempty"`
	PppClientCount    *uint32                `protobuf:"varint,63,opt,name=ppp_client_count,json=pppClientCount" json:"ppp_client_count,omitempty"`
	PppoeClientCount  *uint32                `protobuf:"varint,64,opt,name=pppoe_client_count,json=pppoeClientCount" json:"pppoe_client_count,omitempty"`
	L2TpClientCount   *uint32                `protobuf:"varint,65,opt,name=l2tp_client_count,json=l2tpClientCount" json:"l2tp_client_count,omitempty"`
	StaticClientCount *uint32                `protobuf:"varint,66,opt,name=static_client_count,json=staticClientCount" json:"static_client_count,omitempty"`
	VplsPwClientCount *uint32                `protobuf:"varint,67,opt,name=vpls_pw_client_count,json=vplsPwClientCount" json:"vpls_pw_client_count,omitempty"`
	MlpppClientCount  *uint32                `protobuf:"varint,68,opt,name=mlppp_client_count,json=mlpppClientCount" json:"mlppp_client_count,omitempty"`
	EssmClientCount   *uint32                `protobuf:"varint,69,opt,name=essm_client_count,json=essmClientCount" json:"essm_client_count,omitempty"`
	TotalClientCount  *uint32                `protobuf:"varint,70,opt,name=total_client_count,json=totalClientCount" json:"total_client_count,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeClientTypeType) Reset() {
	*x = JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeClientTypeType{}
	mi := &file_smid_oc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeClientTypeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeClientTypeType) ProtoMessage() {
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeClientTypeType) ProtoReflect() protoreflect.Message {
	mi := &file_smid_oc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeClientTypeType.ProtoReflect.Descriptor instead.
func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeClientTypeType) Descriptor() ([]byte, []int) {
	return file_smid_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 1}
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeClientTypeType) GetDhcpClientCount() uint32 {
	if x != nil && x.DhcpClientCount != nil {
		return *x.DhcpClientCount
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeClientTypeType) GetVlanClientCount() uint32 {
	if x != nil && x.VlanClientCount != nil {
		return *x.VlanClientCount
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeClientTypeType) GetPppClientCount() uint32 {
	if x != nil && x.PppClientCount != nil {
		return *x.PppClientCount
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeClientTypeType) GetPppoeClientCount() uint32 {
	if x != nil && x.PppoeClientCount != nil {
		return *x.PppoeClientCount
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeClientTypeType) GetL2TpClientCount() uint32 {
	if x != nil && x.L2TpClientCount != nil {
		return *x.L2TpClientCount
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeClientTypeType) GetStaticClientCount() uint32 {
	if x != nil && x.StaticClientCount != nil {
		return *x.StaticClientCount
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeClientTypeType) GetVplsPwClientCount() uint32 {
	if x != nil && x.VplsPwClientCount != nil {
		return *x.VplsPwClientCount
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeClientTypeType) GetMlpppClientCount() uint32 {
	if x != nil && x.MlpppClientCount != nil {
		return *x.MlpppClientCount
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeClientTypeType) GetEssmClientCount() uint32 {
	if x != nil && x.EssmClientCount != nil {
		return *x.EssmClientCount
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeClientTypeType) GetTotalClientCount() uint32 {
	if x != nil && x.TotalClientCount != nil {
		return *x.TotalClientCount
	}
	return 0
}

type JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeChassisType struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	ConfiguredSubscriberLimit *uint32                `protobuf:"varint,131,opt,name=configured_subscriber_limit,json=configuredSubscriberLimit" json:"configured_subscriber_limit,omitempty"`
	CurrentSubscriberCount    *uint32                `protobuf:"varint,132,opt,name=current_subscriber_count,json=currentSubscriberCount" json:"current_subscriber_count,omitempty"`
	SubscriberLimitExceeded   *uint32                `protobuf:"varint,201,opt,name=subscriber_limit_exceeded,json=subscriberLimitExceeded" json:"subscriber_limit_exceeded,omitempty"`
	SubscriberLimitNominal    *uint32                `protobuf:"varint,202,opt,name=subscriber_limit_nominal,json=subscriberLimitNominal" json:"subscriber_limit_nominal,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeChassisType) Reset() {
	*x = JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeChassisType{}
	mi := &file_smid_oc_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeChassisType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeChassisType) ProtoMessage() {
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeChassisType) ProtoReflect() protoreflect.Message {
	mi := &file_smid_oc_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeChassisType.ProtoReflect.Descriptor instead.
func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeChassisType) Descriptor() ([]byte, []int) {
	return file_smid_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0}
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeChassisType) GetConfiguredSubscriberLimit() uint32 {
	if x != nil && x.ConfiguredSubscriberLimit != nil {
		return *x.ConfiguredSubscriberLimit
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeChassisType) GetCurrentSubscriberCount() uint32 {
	if x != nil && x.CurrentSubscriberCount != nil {
		return *x.CurrentSubscriberCount
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeChassisType) GetSubscriberLimitExceeded() uint32 {
	if x != nil && x.SubscriberLimitExceeded != nil {
		return *x.SubscriberLimitExceeded
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeChassisType) GetSubscriberLimitNominal() uint32 {
	if x != nil && x.SubscriberLimitNominal != nil {
		return *x.SubscriberLimitNominal
	}
	return 0
}

type JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsType struct {
	state         protoimpl.MessageState                                                                   `protogen:"open.v1"`
	Fpc           []*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcList `protobuf:"bytes,151,rep,name=fpc" json:"fpc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsType) Reset() {
	*x = JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsType{}
	mi := &file_smid_oc_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsType) ProtoMessage() {
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsType) ProtoReflect() protoreflect.Message {
	mi := &file_smid_oc_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsType.ProtoReflect.Descriptor instead.
func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsType) Descriptor() ([]byte, []int) {
	return file_smid_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 1}
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsType) GetFpc() []*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcList {
	if x != nil {
		return x.Fpc
	}
	return nil
}

type JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcList struct {
	state         protoimpl.MessageState                                                                               `protogen:"open.v1"`
	Slot          *uint32                                                                                              `protobuf:"varint,51,opt,name=slot" json:"slot,omitempty"`
	Statistics    *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsType `protobuf:"bytes,151,opt,name=statistics" json:"statistics,omitempty"`
	Pics          *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsType       `protobuf:"bytes,152,opt,name=pics" json:"pics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcList) Reset() {
	*x = JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcList{}
	mi := &file_smid_oc_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcList) ProtoMessage() {
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcList) ProtoReflect() protoreflect.Message {
	mi := &file_smid_oc_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcList.ProtoReflect.Descriptor instead.
func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcList) Descriptor() ([]byte, []int) {
	return file_smid_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 1, 0}
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcList) GetSlot() uint32 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcList) GetStatistics() *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsType {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcList) GetPics() *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsType {
	if x != nil {
		return x.Pics
	}
	return nil
}

type JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsType struct {
	state                       protoimpl.MessageState                                                                                       `protogen:"open.v1"`
	HeapMemoryUsed              *uint32                                                                                                      `protobuf:"varint,81,opt,name=heap_memory_used,json=heapMemoryUsed" json:"heap_memory_used,omitempty"`
	ClientSessionDeniedCount    *uint32                                                                                                      `protobuf:"varint,82,opt,name=client_session_denied_count,json=clientSessionDeniedCount" json:"client_session_denied_count,omitempty"`
	ServiceSessionDeniedCount   *uint32                                                                                                      `protobuf:"varint,83,opt,name=service_session_denied_count,json=serviceSessionDeniedCount" json:"service_session_denied_count,omitempty"`
	RttThrottledSubCountClient  *uint32                                                                                                      `protobuf:"varint,84,opt,name=rtt_throttled_sub_count_client,json=rttThrottledSubCountClient" json:"rtt_throttled_sub_count_client,omitempty"`
	RttThrottledSubCountService *uint32                                                                                                      `protobuf:"varint,85,opt,name=rtt_throttled_sub_count_service,json=rttThrottledSubCountService" json:"rtt_throttled_sub_count_service,omitempty"`
	ConfiguredSubscriberLimit   *uint32                                                                                                      `protobuf:"varint,131,opt,name=configured_subscriber_limit,json=configuredSubscriberLimit" json:"configured_subscriber_limit,omitempty"`
	CurrentSubscriberCount      *uint32                                                                                                      `protobuf:"varint,132,opt,name=current_subscriber_count,json=currentSubscriberCount" json:"current_subscriber_count,omitempty"`
	MemHeapExceeded             *uint32                                                                                                      `protobuf:"varint,91,opt,name=mem_heap_exceeded,json=memHeapExceeded" json:"mem_heap_exceeded,omitempty"`
	MemHeapNominal              *uint32                                                                                                      `protobuf:"varint,92,opt,name=mem_heap_nominal,json=memHeapNominal" json:"mem_heap_nominal,omitempty"`
	SubscriberLimitExceeded     *uint32                                                                                                      `protobuf:"varint,201,opt,name=subscriber_limit_exceeded,json=subscriberLimitExceeded" json:"subscriber_limit_exceeded,omitempty"`
	SubscriberLimitNominal      *uint32                                                                                                      `protobuf:"varint,202,opt,name=subscriber_limit_nominal,json=subscriberLimitNominal" json:"subscriber_limit_nominal,omitempty"`
	Pfes                        *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesType `protobuf:"bytes,151,opt,name=pfes" json:"pfes,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsType) Reset() {
	*x = JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsType{}
	mi := &file_smid_oc_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsType) ProtoMessage() {
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsType) ProtoReflect() protoreflect.Message {
	mi := &file_smid_oc_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsType.ProtoReflect.Descriptor instead.
func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsType) Descriptor() ([]byte, []int) {
	return file_smid_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 1, 0, 0}
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsType) GetHeapMemoryUsed() uint32 {
	if x != nil && x.HeapMemoryUsed != nil {
		return *x.HeapMemoryUsed
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsType) GetClientSessionDeniedCount() uint32 {
	if x != nil && x.ClientSessionDeniedCount != nil {
		return *x.ClientSessionDeniedCount
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsType) GetServiceSessionDeniedCount() uint32 {
	if x != nil && x.ServiceSessionDeniedCount != nil {
		return *x.ServiceSessionDeniedCount
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsType) GetRttThrottledSubCountClient() uint32 {
	if x != nil && x.RttThrottledSubCountClient != nil {
		return *x.RttThrottledSubCountClient
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsType) GetRttThrottledSubCountService() uint32 {
	if x != nil && x.RttThrottledSubCountService != nil {
		return *x.RttThrottledSubCountService
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsType) GetConfiguredSubscriberLimit() uint32 {
	if x != nil && x.ConfiguredSubscriberLimit != nil {
		return *x.ConfiguredSubscriberLimit
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsType) GetCurrentSubscriberCount() uint32 {
	if x != nil && x.CurrentSubscriberCount != nil {
		return *x.CurrentSubscriberCount
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsType) GetMemHeapExceeded() uint32 {
	if x != nil && x.MemHeapExceeded != nil {
		return *x.MemHeapExceeded
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsType) GetMemHeapNominal() uint32 {
	if x != nil && x.MemHeapNominal != nil {
		return *x.MemHeapNominal
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsType) GetSubscriberLimitExceeded() uint32 {
	if x != nil && x.SubscriberLimitExceeded != nil {
		return *x.SubscriberLimitExceeded
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsType) GetSubscriberLimitNominal() uint32 {
	if x != nil && x.SubscriberLimitNominal != nil {
		return *x.SubscriberLimitNominal
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsType) GetPfes() *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesType {
	if x != nil {
		return x.Pfes
	}
	return nil
}

type JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsType struct {
	state         protoimpl.MessageState                                                                                  `protogen:"open.v1"`
	Pic           []*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicList `protobuf:"bytes,151,rep,name=pic" json:"pic,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsType) Reset() {
	*x = JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsType{}
	mi := &file_smid_oc_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsType) ProtoMessage() {
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsType) ProtoReflect() protoreflect.Message {
	mi := &file_smid_oc_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsType.ProtoReflect.Descriptor instead.
func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsType) Descriptor() ([]byte, []int) {
	return file_smid_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 1, 0, 1}
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsType) GetPic() []*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicList {
	if x != nil {
		return x.Pic
	}
	return nil
}

type JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesType struct {
	state         protoimpl.MessageState                                                                                                `protogen:"open.v1"`
	Pfe           []*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeList `protobuf:"bytes,151,rep,name=pfe" json:"pfe,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesType) Reset() {
	*x = JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesType{}
	mi := &file_smid_oc_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesType) ProtoMessage() {
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesType) ProtoReflect() protoreflect.Message {
	mi := &file_smid_oc_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesType.ProtoReflect.Descriptor instead.
func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesType) Descriptor() ([]byte, []int) {
	return file_smid_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 1, 0, 0, 0}
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesType) GetPfe() []*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeList {
	if x != nil {
		return x.Pfe
	}
	return nil
}

type JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeList struct {
	state                protoimpl.MessageState                                                                                                             `protogen:"open.v1"`
	PfeNo                *uint32                                                                                                                            `protobuf:"varint,51,opt,name=pfe_no,json=pfeNo" json:"pfe_no,omitempty"`
	FilterMemoryUsed     *uint32                                                                                                                            `protobuf:"varint,101,opt,name=filter_memory_used,json=filterMemoryUsed" json:"filter_memory_used,omitempty"`
	IflMemoryUsed        *uint32                                                                                                                            `protobuf:"varint,102,opt,name=ifl_memory_used,json=iflMemoryUsed" json:"ifl_memory_used,omitempty"`
	ExpansionMemoryUsed  *uint32                                                                                                                            `protobuf:"varint,103,opt,name=expansion_memory_used,json=expansionMemoryUsed" json:"expansion_memory_used,omitempty"`
	NhMemoryFree         *uint32                                                                                                                            `protobuf:"varint,104,opt,name=nh_memory_free,json=nhMemoryFree" json:"nh_memory_free,omitempty"`
	FwMemoryFree         *uint32                                                                                                                            `protobuf:"varint,105,opt,name=fw_memory_free,json=fwMemoryFree" json:"fw_memory_free,omitempty"`
	MemIflExceeded       *uint32                                                                                                                            `protobuf:"varint,111,opt,name=mem_ifl_exceeded,json=memIflExceeded" json:"mem_ifl_exceeded,omitempty"`
	MemIflNominal        *uint32                                                                                                                            `protobuf:"varint,112,opt,name=mem_ifl_nominal,json=memIflNominal" json:"mem_ifl_nominal,omitempty"`
	MemExpansionExceeded *uint32                                                                                                                            `protobuf:"varint,113,opt,name=mem_expansion_exceeded,json=memExpansionExceeded" json:"mem_expansion_exceeded,omitempty"`
	MemExpansionNominal  *uint32                                                                                                                            `protobuf:"varint,114,opt,name=mem_expansion_nominal,json=memExpansionNominal" json:"mem_expansion_nominal,omitempty"`
	SchedBlocks          *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeListSchedBlocksType `protobuf:"bytes,151,opt,name=sched_blocks,json=schedBlocks" json:"sched_blocks,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeList) Reset() {
	*x = JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeList{}
	mi := &file_smid_oc_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeList) ProtoMessage() {
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeList) ProtoReflect() protoreflect.Message {
	mi := &file_smid_oc_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeList.ProtoReflect.Descriptor instead.
func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeList) Descriptor() ([]byte, []int) {
	return file_smid_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 1, 0, 0, 0, 0}
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeList) GetPfeNo() uint32 {
	if x != nil && x.PfeNo != nil {
		return *x.PfeNo
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeList) GetFilterMemoryUsed() uint32 {
	if x != nil && x.FilterMemoryUsed != nil {
		return *x.FilterMemoryUsed
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeList) GetIflMemoryUsed() uint32 {
	if x != nil && x.IflMemoryUsed != nil {
		return *x.IflMemoryUsed
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeList) GetExpansionMemoryUsed() uint32 {
	if x != nil && x.ExpansionMemoryUsed != nil {
		return *x.ExpansionMemoryUsed
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeList) GetNhMemoryFree() uint32 {
	if x != nil && x.NhMemoryFree != nil {
		return *x.NhMemoryFree
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeList) GetFwMemoryFree() uint32 {
	if x != nil && x.FwMemoryFree != nil {
		return *x.FwMemoryFree
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeList) GetMemIflExceeded() uint32 {
	if x != nil && x.MemIflExceeded != nil {
		return *x.MemIflExceeded
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeList) GetMemIflNominal() uint32 {
	if x != nil && x.MemIflNominal != nil {
		return *x.MemIflNominal
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeList) GetMemExpansionExceeded() uint32 {
	if x != nil && x.MemExpansionExceeded != nil {
		return *x.MemExpansionExceeded
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeList) GetMemExpansionNominal() uint32 {
	if x != nil && x.MemExpansionNominal != nil {
		return *x.MemExpansionNominal
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeList) GetSchedBlocks() *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeListSchedBlocksType {
	if x != nil {
		return x.SchedBlocks
	}
	return nil
}

type JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeListSchedBlocksType struct {
	state         protoimpl.MessageState                                                                                                                             `protogen:"open.v1"`
	SchedBlock    []*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeListSchedBlocksTypeSchedBlockList `protobuf:"bytes,151,rep,name=sched_block,json=schedBlock" json:"sched_block,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeListSchedBlocksType) Reset() {
	*x = JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeListSchedBlocksType{}
	mi := &file_smid_oc_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeListSchedBlocksType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeListSchedBlocksType) ProtoMessage() {
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeListSchedBlocksType) ProtoReflect() protoreflect.Message {
	mi := &file_smid_oc_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeListSchedBlocksType.ProtoReflect.Descriptor instead.
func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeListSchedBlocksType) Descriptor() ([]byte, []int) {
	return file_smid_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0}
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeListSchedBlocksType) GetSchedBlock() []*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeListSchedBlocksTypeSchedBlockList {
	if x != nil {
		return x.SchedBlock
	}
	return nil
}

type JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeListSchedBlocksTypeSchedBlockList struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	SblockNo               *uint32                `protobuf:"varint,51,opt,name=sblock_no,json=sblockNo" json:"sblock_no,omitempty"`
	QueuesMax              *uint32                `protobuf:"varint,121,opt,name=queues_max,json=queuesMax" json:"queues_max,omitempty"`
	QueuesAllocated        *uint32                `protobuf:"varint,122,opt,name=queues_allocated,json=queuesAllocated" json:"queues_allocated,omitempty"`
	CosUtilizationExceeded *uint32                `protobuf:"varint,141,opt,name=cos_utilization_exceeded,json=cosUtilizationExceeded" json:"cos_utilization_exceeded,omitempty"`
	CosUtilizationNominal  *uint32                `protobuf:"varint,142,opt,name=cos_utilization_nominal,json=cosUtilizationNominal" json:"cos_utilization_nominal,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeListSchedBlocksTypeSchedBlockList) Reset() {
	*x = JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeListSchedBlocksTypeSchedBlockList{}
	mi := &file_smid_oc_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeListSchedBlocksTypeSchedBlockList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeListSchedBlocksTypeSchedBlockList) ProtoMessage() {
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeListSchedBlocksTypeSchedBlockList) ProtoReflect() protoreflect.Message {
	mi := &file_smid_oc_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeListSchedBlocksTypeSchedBlockList.ProtoReflect.Descriptor instead.
func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeListSchedBlocksTypeSchedBlockList) Descriptor() ([]byte, []int) {
	return file_smid_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0}
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeListSchedBlocksTypeSchedBlockList) GetSblockNo() uint32 {
	if x != nil && x.SblockNo != nil {
		return *x.SblockNo
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeListSchedBlocksTypeSchedBlockList) GetQueuesMax() uint32 {
	if x != nil && x.QueuesMax != nil {
		return *x.QueuesMax
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeListSchedBlocksTypeSchedBlockList) GetQueuesAllocated() uint32 {
	if x != nil && x.QueuesAllocated != nil {
		return *x.QueuesAllocated
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeListSchedBlocksTypeSchedBlockList) GetCosUtilizationExceeded() uint32 {
	if x != nil && x.CosUtilizationExceeded != nil {
		return *x.CosUtilizationExceeded
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeListSchedBlocksTypeSchedBlockList) GetCosUtilizationNominal() uint32 {
	if x != nil && x.CosUtilizationNominal != nil {
		return *x.CosUtilizationNominal
	}
	return 0
}

type JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicList struct {
	state                     protoimpl.MessageState                                                                                         `protogen:"open.v1"`
	PicNo                     *uint32                                                                                                        `protobuf:"varint,51,opt,name=pic_no,json=picNo" json:"pic_no,omitempty"`
	ConfiguredSubscriberLimit *uint32                                                                                                        `protobuf:"varint,131,opt,name=configured_subscriber_limit,json=configuredSubscriberLimit" json:"configured_subscriber_limit,omitempty"`
	CurrentSubscriberCount    *uint32                                                                                                        `protobuf:"varint,132,opt,name=current_subscriber_count,json=currentSubscriberCount" json:"current_subscriber_count,omitempty"`
	SubscriberLimitExceeded   *uint32                                                                                                        `protobuf:"varint,201,opt,name=subscriber_limit_exceeded,json=subscriberLimitExceeded" json:"subscriber_limit_exceeded,omitempty"`
	SubscriberLimitNominal    *uint32                                                                                                        `protobuf:"varint,202,opt,name=subscriber_limit_nominal,json=subscriberLimitNominal" json:"subscriber_limit_nominal,omitempty"`
	Ports                     *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicListPortsType `protobuf:"bytes,151,opt,name=ports" json:"ports,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicList) Reset() {
	*x = JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicList{}
	mi := &file_smid_oc_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicList) ProtoMessage() {
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicList) ProtoReflect() protoreflect.Message {
	mi := &file_smid_oc_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicList.ProtoReflect.Descriptor instead.
func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicList) Descriptor() ([]byte, []int) {
	return file_smid_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 1, 0, 1, 0}
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicList) GetPicNo() uint32 {
	if x != nil && x.PicNo != nil {
		return *x.PicNo
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicList) GetConfiguredSubscriberLimit() uint32 {
	if x != nil && x.ConfiguredSubscriberLimit != nil {
		return *x.ConfiguredSubscriberLimit
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicList) GetCurrentSubscriberCount() uint32 {
	if x != nil && x.CurrentSubscriberCount != nil {
		return *x.CurrentSubscriberCount
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicList) GetSubscriberLimitExceeded() uint32 {
	if x != nil && x.SubscriberLimitExceeded != nil {
		return *x.SubscriberLimitExceeded
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicList) GetSubscriberLimitNominal() uint32 {
	if x != nil && x.SubscriberLimitNominal != nil {
		return *x.SubscriberLimitNominal
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicList) GetPorts() *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicListPortsType {
	if x != nil {
		return x.Ports
	}
	return nil
}

type JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicListPortsType struct {
	state         protoimpl.MessageState                                                                                                   `protogen:"open.v1"`
	Port          []*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicListPortsTypePortList `protobuf:"bytes,151,rep,name=port" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicListPortsType) Reset() {
	*x = JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicListPortsType{}
	mi := &file_smid_oc_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicListPortsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicListPortsType) ProtoMessage() {
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicListPortsType) ProtoReflect() protoreflect.Message {
	mi := &file_smid_oc_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicListPortsType.ProtoReflect.Descriptor instead.
func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicListPortsType) Descriptor() ([]byte, []int) {
	return file_smid_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 1, 0, 1, 0, 0}
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicListPortsType) GetPort() []*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicListPortsTypePortList {
	if x != nil {
		return x.Port
	}
	return nil
}

type JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicListPortsTypePortList struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	PortNo                    *uint32                `protobuf:"varint,51,opt,name=port_no,json=portNo" json:"port_no,omitempty"`
	ConfiguredSubscriberLimit *uint32                `protobuf:"varint,131,opt,name=configured_subscriber_limit,json=configuredSubscriberLimit" json:"configured_subscriber_limit,omitempty"`
	CurrentSubscriberCount    *uint32                `protobuf:"varint,132,opt,name=current_subscriber_count,json=currentSubscriberCount" json:"current_subscriber_count,omitempty"`
	SubscriberLimitExceeded   *uint32                `protobuf:"varint,201,opt,name=subscriber_limit_exceeded,json=subscriberLimitExceeded" json:"subscriber_limit_exceeded,omitempty"`
	SubscriberLimitNominal    *uint32                `protobuf:"varint,202,opt,name=subscriber_limit_nominal,json=subscriberLimitNominal" json:"subscriber_limit_nominal,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicListPortsTypePortList) Reset() {
	*x = JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicListPortsTypePortList{}
	mi := &file_smid_oc_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicListPortsTypePortList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicListPortsTypePortList) ProtoMessage() {
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicListPortsTypePortList) ProtoReflect() protoreflect.Message {
	mi := &file_smid_oc_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicListPortsTypePortList.ProtoReflect.Descriptor instead.
func (*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicListPortsTypePortList) Descriptor() ([]byte, []int) {
	return file_smid_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0}
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicListPortsTypePortList) GetPortNo() uint32 {
	if x != nil && x.PortNo != nil {
		return *x.PortNo
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicListPortsTypePortList) GetConfiguredSubscriberLimit() uint32 {
	if x != nil && x.ConfiguredSubscriberLimit != nil {
		return *x.ConfiguredSubscriberLimit
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicListPortsTypePortList) GetCurrentSubscriberCount() uint32 {
	if x != nil && x.CurrentSubscriberCount != nil {
		return *x.CurrentSubscriberCount
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicListPortsTypePortList) GetSubscriberLimitExceeded() uint32 {
	if x != nil && x.SubscriberLimitExceeded != nil {
		return *x.SubscriberLimitExceeded
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicListPortsTypePortList) GetSubscriberLimitNominal() uint32 {
	if x != nil && x.SubscriberLimitNominal != nil {
		return *x.SubscriberLimitNominal
	}
	return 0
}

type JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesType struct {
	state         protoimpl.MessageState                                                                      `protogen:"open.v1"`
	RoutingEngine []*JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineList `protobuf:"bytes,151,rep,name=routing_engine,json=routingEngine" json:"routing_engine,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesType) Reset() {
	*x = JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesType{}
	mi := &file_smid_oc_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesType) ProtoMessage() {}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesType) ProtoReflect() protoreflect.Message {
	mi := &file_smid_oc_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesType.ProtoReflect.Descriptor instead.
func (*JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesType) Descriptor() ([]byte, []int) {
	return file_smid_oc_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0}
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesType) GetRoutingEngine() []*JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineList {
	if x != nil {
		return x.RoutingEngine
	}
	return nil
}

type JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineList struct {
	state         protoimpl.MessageState                                                                                     `protogen:"open.v1"`
	ReIndex       *uint32                                                                                                    `protobuf:"varint,51,opt,name=re_index,json=reIndex" json:"re_index,omitempty"`
	Role          *string                                                                                                    `protobuf:"bytes,52,opt,name=role" json:"role,omitempty"`
	DbSynced      *bool                                                                                                      `protobuf:"varint,53,opt,name=db_synced,json=dbSynced" json:"db_synced,omitempty"`
	ProcessStatus *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusType `protobuf:"bytes,151,opt,name=process_status,json=processStatus" json:"process_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineList) Reset() {
	*x = JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineList{}
	mi := &file_smid_oc_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineList) ProtoMessage() {
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineList) ProtoReflect() protoreflect.Message {
	mi := &file_smid_oc_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineList.ProtoReflect.Descriptor instead.
func (*JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineList) Descriptor() ([]byte, []int) {
	return file_smid_oc_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 0}
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineList) GetReIndex() uint32 {
	if x != nil && x.ReIndex != nil {
		return *x.ReIndex
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineList) GetRole() string {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return ""
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineList) GetDbSynced() bool {
	if x != nil && x.DbSynced != nil {
		return *x.DbSynced
	}
	return false
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineList) GetProcessStatus() *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusType {
	if x != nil {
		return x.ProcessStatus
	}
	return nil
}

type JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusType struct {
	state                         protoimpl.MessageState                                                                                                                      `protogen:"open.v1"`
	SubscriberManagementProcesses *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusTypeSubscriberManagementProcessesType `protobuf:"bytes,151,opt,name=subscriber_management_processes,json=subscriberManagementProcesses" json:"subscriber_management_processes,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusType) Reset() {
	*x = JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusType{}
	mi := &file_smid_oc_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusType) ProtoMessage() {
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusType) ProtoReflect() protoreflect.Message {
	mi := &file_smid_oc_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusType.ProtoReflect.Descriptor instead.
func (*JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusType) Descriptor() ([]byte, []int) {
	return file_smid_oc_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 0, 0}
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusType) GetSubscriberManagementProcesses() *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusTypeSubscriberManagementProcessesType {
	if x != nil {
		return x.SubscriberManagementProcesses
	}
	return nil
}

type JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusTypeSubscriberManagementProcessesType struct {
	state                       protoimpl.MessageState                                                                                                                                                       `protogen:"open.v1"`
	SubscriberManagementProcess []*JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusTypeSubscriberManagementProcessesTypeSubscriberManagementProcessList `protobuf:"bytes,151,rep,name=subscriber_management_process,json=subscriberManagementProcess" json:"subscriber_management_process,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusTypeSubscriberManagementProcessesType) Reset() {
	*x = JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusTypeSubscriberManagementProcessesType{}
	mi := &file_smid_oc_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusTypeSubscriberManagementProcessesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusTypeSubscriberManagementProcessesType) ProtoMessage() {
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusTypeSubscriberManagementProcessesType) ProtoReflect() protoreflect.Message {
	mi := &file_smid_oc_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusTypeSubscriberManagementProcessesType.ProtoReflect.Descriptor instead.
func (*JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusTypeSubscriberManagementProcessesType) Descriptor() ([]byte, []int) {
	return file_smid_oc_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 0, 0, 0}
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusTypeSubscriberManagementProcessesType) GetSubscriberManagementProcess() []*JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusTypeSubscriberManagementProcessesTypeSubscriberManagementProcessList {
	if x != nil {
		return x.SubscriberManagementProcess
	}
	return nil
}

type JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusTypeSubscriberManagementProcessesTypeSubscriberManagementProcessList struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ProcessName       *string                `protobuf:"bytes,51,opt,name=process_name,json=processName" json:"process_name,omitempty"`
	Pid               *uint64                `protobuf:"varint,52,opt,name=pid" json:"pid,omitempty"`
	Runtime           *uint64                `protobuf:"varint,53,opt,name=runtime" json:"runtime,omitempty"`
	CpuUtilization    *float64               `protobuf:"fixed64,54,opt,name=cpu_utilization,json=cpuUtilization" json:"cpu_utilization,omitempty"`
	MemoryUtilization *float64               `protobuf:"fixed64,55,opt,name=memory_utilization,json=memoryUtilization" json:"memory_utilization,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusTypeSubscriberManagementProcessesTypeSubscriberManagementProcessList) Reset() {
	*x = JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusTypeSubscriberManagementProcessesTypeSubscriberManagementProcessList{}
	mi := &file_smid_oc_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusTypeSubscriberManagementProcessesTypeSubscriberManagementProcessList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusTypeSubscriberManagementProcessesTypeSubscriberManagementProcessList) ProtoMessage() {
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusTypeSubscriberManagementProcessesTypeSubscriberManagementProcessList) ProtoReflect() protoreflect.Message {
	mi := &file_smid_oc_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusTypeSubscriberManagementProcessesTypeSubscriberManagementProcessList.ProtoReflect.Descriptor instead.
func (*JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusTypeSubscriberManagementProcessesTypeSubscriberManagementProcessList) Descriptor() ([]byte, []int) {
	return file_smid_oc_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 0, 0, 0, 0}
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusTypeSubscriberManagementProcessesTypeSubscriberManagementProcessList) GetProcessName() string {
	if x != nil && x.ProcessName != nil {
		return *x.ProcessName
	}
	return ""
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusTypeSubscriberManagementProcessesTypeSubscriberManagementProcessList) GetPid() uint64 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusTypeSubscriberManagementProcessesTypeSubscriberManagementProcessList) GetRuntime() uint64 {
	if x != nil && x.Runtime != nil {
		return *x.Runtime
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusTypeSubscriberManagementProcessesTypeSubscriberManagementProcessList) GetCpuUtilization() float64 {
	if x != nil && x.CpuUtilization != nil {
		return *x.CpuUtilization
	}
	return 0
}

func (x *JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusTypeSubscriberManagementProcessesTypeSubscriberManagementProcessList) GetMemoryUtilization() float64 {
	if x != nil && x.MemoryUtilization != nil {
		return *x.MemoryUtilization
	}
	return 0
}

var file_smid_oc_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*JunosSmi)(nil),
		Field:         70,
		Name:          "jnpr_junos_smi_ext",
		Tag:           "bytes,70,opt,name=jnpr_junos_smi_ext",
		Filename:      "smid_oc.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional junos_smi jnpr_junos_smi_ext = 70;
	E_JnprJunosSmiExt = &file_smid_oc_proto_extTypes[0]
)

var File_smid_oc_proto protoreflect.FileDescriptor

var file_smid_oc_proto_rawDesc = string([]byte{
	0x0a, 0x0d, 0x73, 0x6d, 0x69, 0x64, 0x5f, 0x6f, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x13, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xef, 0x39, 0x0a, 0x09, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x73,
	0x6d, 0x69, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x97, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x73, 0x6d, 0x69, 0x2e,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x1a, 0xb0, 0x39, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x67, 0x0a, 0x15, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x97, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x73, 0x6d, 0x69, 0x2e,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x14, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xb7, 0x38, 0x0a,
	0x1a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x05, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6a, 0x75,
	0x6e, 0x6f, 0x73, 0x5f, 0x73, 0x6d, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x12, 0x59, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x18, 0x98, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x73, 0x6d, 0x69, 0x2e, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x07, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x1a, 0xd5, 0x2b, 0x0a, 0x0a,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x03, 0x73, 0x64,
	0x62, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73,
	0x5f, 0x73, 0x6d, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x64, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x03, 0x73, 0x64, 0x62, 0x12, 0x7e, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x52, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x73, 0x6d, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x1a, 0xab, 0x09, 0x0a, 0x08, 0x73, 0x64, 0x62, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x76, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x73,
	0x6d, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x64, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0xa6, 0x08, 0x0a, 0x0f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x77, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e,
	0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x73, 0x6d, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x64, 0x62, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x66, 0x2e,
	0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x73, 0x6d, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x64, 0x62, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x1a, 0xb4, 0x02, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2c, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36,
	0x0a, 0x17, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xd7, 0x03, 0x0a, 0x10, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x76, 0x6c, 0x61, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x70, 0x70, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x70, 0x70, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2c, 0x0a, 0x12, 0x70, 0x70, 0x70, 0x6f, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x70, 0x70,
	0x6f, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x6c, 0x32, 0x74, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x32, 0x74, 0x70, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x42, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x76, 0x70, 0x6c,
	0x73, 0x5f, 0x70, 0x77, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x76, 0x70, 0x6c, 0x73, 0x50, 0x77, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x6c,
	0x70, 0x70, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x44, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x6c, 0x70, 0x70, 0x70, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x73, 0x73, 0x6d,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x45, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x73, 0x73, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x1a, 0xbe, 0x20, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x7a, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f,
	0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x73, 0x6d, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x12, 0x71, 0x0a, 0x04, 0x66, 0x70, 0x63, 0x73,
	0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f,
	0x73, 0x6d, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x66, 0x70, 0x63, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x66, 0x70, 0x63, 0x73, 0x1a, 0x82, 0x02, 0x0a, 0x0c,
	0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x1b,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x83, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x39, 0x0a,
	0x18, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x19, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x78, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x18, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x1a, 0xb0, 0x1c, 0x0a, 0x09, 0x66, 0x70, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x78,
	0x0a, 0x03, 0x66, 0x70, 0x63, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x6a,
	0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x73, 0x6d, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x66, 0x70, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x66, 0x70, 0x63, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x03, 0x66, 0x70, 0x63, 0x1a, 0xa8, 0x1b, 0x0a, 0x08, 0x66, 0x70, 0x63,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74,
	0x12, 0x96, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x75, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x73,
	0x6d, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x66, 0x70, 0x63, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x66, 0x70, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x04, 0x70, 0x69,
	0x63, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6f, 0x2e, 0x6a, 0x75, 0x6e, 0x6f,
	0x73, 0x5f, 0x73, 0x6d, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x66, 0x70,
	0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x66, 0x70, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x70, 0x69, 0x63, 0x73,
	0x1a, 0xb0, 0x10, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x68, 0x65, 0x61, 0x70, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x64, 0x12, 0x3d,
	0x0a, 0x1b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x52, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x18, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a,
	0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x53, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42,
	0x0a, 0x1e, 0x72, 0x74, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x5f,
	0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x54, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x72, 0x74, 0x74, 0x54, 0x68, 0x72, 0x6f, 0x74,
	0x74, 0x6c, 0x65, 0x64, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x44, 0x0a, 0x1f, 0x72, 0x74, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74,
	0x6c, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x72, 0x74, 0x74,
	0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x18, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x65, 0x6d, 0x5f, 0x68, 0x65, 0x61, 0x70,
	0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x6d, 0x65, 0x6d, 0x48, 0x65, 0x61, 0x70, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x5f, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x6e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x48,
	0x65, 0x61, 0x70, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x19, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x65,
	0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45,
	0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x18, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x12, 0x94, 0x01, 0x0a, 0x04, 0x70, 0x66, 0x65, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x7f, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x73, 0x6d, 0x69, 0x2e, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x66, 0x70, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x66, 0x70, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x66, 0x65, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x70, 0x66, 0x65, 0x73, 0x1a, 0x87, 0x0a, 0x0a, 0x09, 0x70, 0x66,
	0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x03, 0x70, 0x66, 0x65, 0x18,
	0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x88, 0x01, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f,
	0x73, 0x6d, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x66, 0x70, 0x63, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x66, 0x70, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x66, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x66, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x03, 0x70, 0x66, 0x65, 0x1a, 0xda, 0x08, 0x0a, 0x08, 0x70, 0x66, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x06, 0x70, 0x66, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x05, 0x70, 0x66, 0x65, 0x4e,
	0x6f, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x69, 0x66, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73,
	0x65, 0x64, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x66, 0x6c, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x78, 0x70, 0x61, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x67, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6e,
	0x68, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x68, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x68, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x46, 0x72, 0x65,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x77, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x66,
	0x72, 0x65, 0x65, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x77, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x46, 0x72, 0x65, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x5f, 0x69,
	0x66, 0x6c, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x6f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x49, 0x66, 0x6c, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x5f, 0x69, 0x66, 0x6c, 0x5f, 0x6e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x49,
	0x66, 0x6c, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x65, 0x6d,
	0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x65, 0x6d, 0x45, 0x78,
	0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12,
	0x32, 0x0a, 0x15, 0x6d, 0x65, 0x6d, 0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x6d, 0x65, 0x6d, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x12, 0xbf, 0x01, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x9a, 0x01, 0x2e, 0x6a,
	0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x73, 0x6d, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x66, 0x70, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x66, 0x70, 0x63, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x66, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x66,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x1a, 0xdb, 0x03, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xce, 0x01, 0x0a, 0x0b,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x97, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0xab, 0x01, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x73, 0x6d, 0x69, 0x2e,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x66, 0x70, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x66, 0x70, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x66, 0x65, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x66, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0xf4, 0x01, 0x0a,
	0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x09, 0x73, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x08, 0x73, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x5f,
	0x6d, 0x61, 0x78, 0x18, 0x79, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x4d, 0x61, 0x78, 0x12, 0x29, 0x0a, 0x10, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x39, 0x0a, 0x18, 0x63, 0x6f, 0x73, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x8d, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x16, 0x63, 0x6f, 0x73, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x17, 0x63, 0x6f,
	0x73, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x6f,
	0x73, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x1a, 0xad, 0x08, 0x0a, 0x09, 0x70, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x8b, 0x01, 0x0a, 0x03, 0x70, 0x69, 0x63, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x78, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x73, 0x6d, 0x69, 0x2e, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x66, 0x70, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x66,
	0x70, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x69, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x03, 0x70, 0x69, 0x63, 0x1a,
	0x91, 0x07, 0x0a, 0x08, 0x70, 0x69, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x06,
	0x70, 0x69, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40,
	0x02, 0x08, 0x01, 0x52, 0x05, 0x70, 0x69, 0x63, 0x4e, 0x6f, 0x12, 0x3f, 0x0a, 0x1b, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x19, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x18, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x19, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x18, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18,
	0xca, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x9b,
	0x01, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x83, 0x01, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x73, 0x6d, 0x69, 0x2e, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x66, 0x70, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x66,
	0x70, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x69, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0xd4, 0x03, 0x0a,
	0x0a, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x8d, 0x01, 0x2e, 0x6a,
	0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x73, 0x6d, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x66, 0x70, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x66, 0x70, 0x63, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x70, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x69,
	0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x1a, 0x9f, 0x02, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x12,
	0x3f, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x83,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x39, 0x0a, 0x18, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x84, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x19, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x17, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x18, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x1a, 0x90, 0x0b, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x08,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x7d, 0x0a, 0x0f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x18,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x73,
	0x6d, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x1a, 0xc8, 0x09, 0x0a, 0x14,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x67,
	0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x73, 0x6d, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x1a, 0x9d, 0x08, 0x0a, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x08, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x07, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x62, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x65,
	0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x62, 0x53, 0x79, 0x6e, 0x63, 0x65,
	0x64, 0x12, 0xa3, 0x01, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x6a, 0x75,
	0x6e, 0x6f, 0x73, 0x5f, 0x73, 0x6d, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x8c, 0x06, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0xea, 0x01, 0x0a, 0x1f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xa0, 0x01, 0x2e, 0x6a, 0x75,
	0x6e, 0x6f, 0x73, 0x5f, 0x73, 0x6d, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x1d, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x1a, 0x87, 0x04, 0x0a,
	0x24, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x89, 0x02, 0x0a, 0x1d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0xc3,
	0x01, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x73, 0x6d, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x1b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x1a, 0xd2, 0x01, 0x0a, 0x22, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05,
	0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x50, 0x0a, 0x12, 0x6a, 0x6e, 0x70, 0x72, 0x5f, 0x6a,
	0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x73, 0x6d, 0x69, 0x5f, 0x65, 0x78, 0x74, 0x12, 0x17, 0x2e, 0x4a,
	0x75, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6a, 0x75,
	0x6e, 0x6f, 0x73, 0x5f, 0x73, 0x6d, 0x69, 0x52, 0x0f, 0x6a, 0x6e, 0x70, 0x72, 0x4a, 0x75, 0x6e,
	0x6f, 0x73, 0x53, 0x6d, 0x69, 0x45, 0x78, 0x74, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x6a, 0x75,
	0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
})

var (
	file_smid_oc_proto_rawDescOnce sync.Once
	file_smid_oc_proto_rawDescData []byte
)

func file_smid_oc_proto_rawDescGZIP() []byte {
	file_smid_oc_proto_rawDescOnce.Do(func() {
		file_smid_oc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_smid_oc_proto_rawDesc), len(file_smid_oc_proto_rawDesc)))
	})
	return file_smid_oc_proto_rawDescData
}

var file_smid_oc_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_smid_oc_proto_goTypes = []any{
	(*JunosSmi)(nil),                                                                                                                                                                  // 0: junos_smi
	(*JunosSmiSystemType)(nil),                                                                                                                                                        // 1: junos_smi.system_type
	(*JunosSmiSystemTypeSubscriberManagementType)(nil),                                                                                                                                // 2: junos_smi.system_type.subscriber_management_type
	(*JunosSmiSystemTypeSubscriberManagementTypeInfraType)(nil),                                                                                                                       // 3: junos_smi.system_type.subscriber_management_type.infra_type
	(*JunosSmiSystemTypeSubscriberManagementTypeChassisList)(nil),                                                                                                                     // 4: junos_smi.system_type.subscriber_management_type.chassis_list
	(*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbType)(nil),                                                                                                                // 5: junos_smi.system_type.subscriber_management_type.infra_type.sdb_type
	(*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorType)(nil),                                                                                                    // 6: junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type
	(*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsType)(nil),                                                                                                  // 7: junos_smi.system_type.subscriber_management_type.infra_type.sdb_type.statistics_type
	(*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeStateType)(nil),                                                                                         // 8: junos_smi.system_type.subscriber_management_type.infra_type.sdb_type.statistics_type.state_type
	(*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeSdbTypeStatisticsTypeClientTypeType)(nil),                                                                                    // 9: junos_smi.system_type.subscriber_management_type.infra_type.sdb_type.statistics_type.client_type_type
	(*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeChassisType)(nil),                                                                                         // 10: junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.chassis_type
	(*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsType)(nil),                                                                                            // 11: junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs_type
	(*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcList)(nil),                                                                                     // 12: junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs_type.fpc_list
	(*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsType)(nil),                                                                       // 13: junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs_type.fpc_list.statistics_type
	(*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsType)(nil),                                                                             // 14: junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs_type.fpc_list.pics_type
	(*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesType)(nil),                                                               // 15: junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs_type.fpc_list.statistics_type.pfes_type
	(*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeList)(nil),                                                        // 16: junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs_type.fpc_list.statistics_type.pfes_type.pfe_list
	(*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeListSchedBlocksType)(nil),                                         // 17: junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs_type.fpc_list.statistics_type.pfes_type.pfe_list.sched_blocks_type
	(*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListStatisticsTypePfesTypePfeListSchedBlocksTypeSchedBlockList)(nil),                           // 18: junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs_type.fpc_list.statistics_type.pfes_type.pfe_list.sched_blocks_type.sched_block_list
	(*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicList)(nil),                                                                      // 19: junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs_type.fpc_list.pics_type.pic_list
	(*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicListPortsType)(nil),                                                             // 20: junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs_type.fpc_list.pics_type.pic_list.ports_type
	(*JunosSmiSystemTypeSubscriberManagementTypeInfraTypeResourceMonitorTypeFpcsTypeFpcListPicsTypePicListPortsTypePortList)(nil),                                                     // 21: junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs_type.fpc_list.pics_type.pic_list.ports_type.port_list
	(*JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesType)(nil),                                                                                                   // 22: junos_smi.system_type.subscriber_management_type.chassis_list.routing_engines_type
	(*JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineList)(nil),                                                                                  // 23: junos_smi.system_type.subscriber_management_type.chassis_list.routing_engines_type.routing_engine_list
	(*JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusType)(nil),                                                                 // 24: junos_smi.system_type.subscriber_management_type.chassis_list.routing_engines_type.routing_engine_list.process_status_type
	(*JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusTypeSubscriberManagementProcessesType)(nil),                                // 25: junos_smi.system_type.subscriber_management_type.chassis_list.routing_engines_type.routing_engine_list.process_status_type.subscriber_management_processes_type
	(*JunosSmiSystemTypeSubscriberManagementTypeChassisListRoutingEnginesTypeRoutingEngineListProcessStatusTypeSubscriberManagementProcessesTypeSubscriberManagementProcessList)(nil), // 26: junos_smi.system_type.subscriber_management_type.chassis_list.routing_engines_type.routing_engine_list.process_status_type.subscriber_management_processes_type.subscriber_management_process_list
	(*JuniperNetworksSensors)(nil), // 27: JuniperNetworksSensors
}
var file_smid_oc_proto_depIdxs = []int32{
	1,  // 0: junos_smi.system:type_name -> junos_smi.system_type
	2,  // 1: junos_smi.system_type.subscriber_management:type_name -> junos_smi.system_type.subscriber_management_type
	3,  // 2: junos_smi.system_type.subscriber_management_type.infra:type_name -> junos_smi.system_type.subscriber_management_type.infra_type
	4,  // 3: junos_smi.system_type.subscriber_management_type.chassis:type_name -> junos_smi.system_type.subscriber_management_type.chassis_list
	5,  // 4: junos_smi.system_type.subscriber_management_type.infra_type.sdb:type_name -> junos_smi.system_type.subscriber_management_type.infra_type.sdb_type
	6,  // 5: junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor:type_name -> junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type
	22, // 6: junos_smi.system_type.subscriber_management_type.chassis_list.routing_engines:type_name -> junos_smi.system_type.subscriber_management_type.chassis_list.routing_engines_type
	7,  // 7: junos_smi.system_type.subscriber_management_type.infra_type.sdb_type.statistics:type_name -> junos_smi.system_type.subscriber_management_type.infra_type.sdb_type.statistics_type
	10, // 8: junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.chassis:type_name -> junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.chassis_type
	11, // 9: junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs:type_name -> junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs_type
	8,  // 10: junos_smi.system_type.subscriber_management_type.infra_type.sdb_type.statistics_type.state:type_name -> junos_smi.system_type.subscriber_management_type.infra_type.sdb_type.statistics_type.state_type
	9,  // 11: junos_smi.system_type.subscriber_management_type.infra_type.sdb_type.statistics_type.client_type:type_name -> junos_smi.system_type.subscriber_management_type.infra_type.sdb_type.statistics_type.client_type_type
	12, // 12: junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs_type.fpc:type_name -> junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs_type.fpc_list
	13, // 13: junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs_type.fpc_list.statistics:type_name -> junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs_type.fpc_list.statistics_type
	14, // 14: junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs_type.fpc_list.pics:type_name -> junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs_type.fpc_list.pics_type
	15, // 15: junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs_type.fpc_list.statistics_type.pfes:type_name -> junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs_type.fpc_list.statistics_type.pfes_type
	19, // 16: junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs_type.fpc_list.pics_type.pic:type_name -> junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs_type.fpc_list.pics_type.pic_list
	16, // 17: junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs_type.fpc_list.statistics_type.pfes_type.pfe:type_name -> junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs_type.fpc_list.statistics_type.pfes_type.pfe_list
	17, // 18: junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs_type.fpc_list.statistics_type.pfes_type.pfe_list.sched_blocks:type_name -> junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs_type.fpc_list.statistics_type.pfes_type.pfe_list.sched_blocks_type
	18, // 19: junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs_type.fpc_list.statistics_type.pfes_type.pfe_list.sched_blocks_type.sched_block:type_name -> junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs_type.fpc_list.statistics_type.pfes_type.pfe_list.sched_blocks_type.sched_block_list
	20, // 20: junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs_type.fpc_list.pics_type.pic_list.ports:type_name -> junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs_type.fpc_list.pics_type.pic_list.ports_type
	21, // 21: junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs_type.fpc_list.pics_type.pic_list.ports_type.port:type_name -> junos_smi.system_type.subscriber_management_type.infra_type.resource_monitor_type.fpcs_type.fpc_list.pics_type.pic_list.ports_type.port_list
	23, // 22: junos_smi.system_type.subscriber_management_type.chassis_list.routing_engines_type.routing_engine:type_name -> junos_smi.system_type.subscriber_management_type.chassis_list.routing_engines_type.routing_engine_list
	24, // 23: junos_smi.system_type.subscriber_management_type.chassis_list.routing_engines_type.routing_engine_list.process_status:type_name -> junos_smi.system_type.subscriber_management_type.chassis_list.routing_engines_type.routing_engine_list.process_status_type
	25, // 24: junos_smi.system_type.subscriber_management_type.chassis_list.routing_engines_type.routing_engine_list.process_status_type.subscriber_management_processes:type_name -> junos_smi.system_type.subscriber_management_type.chassis_list.routing_engines_type.routing_engine_list.process_status_type.subscriber_management_processes_type
	26, // 25: junos_smi.system_type.subscriber_management_type.chassis_list.routing_engines_type.routing_engine_list.process_status_type.subscriber_management_processes_type.subscriber_management_process:type_name -> junos_smi.system_type.subscriber_management_type.chassis_list.routing_engines_type.routing_engine_list.process_status_type.subscriber_management_processes_type.subscriber_management_process_list
	27, // 26: jnpr_junos_smi_ext:extendee -> JuniperNetworksSensors
	0,  // 27: jnpr_junos_smi_ext:type_name -> junos_smi
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	27, // [27:28] is the sub-list for extension type_name
	26, // [26:27] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_smid_oc_proto_init() }
func file_smid_oc_proto_init() {
	if File_smid_oc_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_smid_oc_proto_rawDesc), len(file_smid_oc_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_smid_oc_proto_goTypes,
		DependencyIndexes: file_smid_oc_proto_depIdxs,
		MessageInfos:      file_smid_oc_proto_msgTypes,
		ExtensionInfos:    file_smid_oc_proto_extTypes,
	}.Build()
	File_smid_oc_proto = out.File
	file_smid_oc_proto_goTypes = nil
	file_smid_oc_proto_depIdxs = nil
}
