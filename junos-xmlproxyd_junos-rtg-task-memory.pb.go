// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: junos-xmlproxyd_junos-rtg-task-memory.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JunosTaskMemory struct {
	state                 protoimpl.MessageState                    `protogen:"open.v1"`
	TaskMemoryInformation *JunosTaskMemoryTaskMemoryInformationType `protobuf:"bytes,151,opt,name=task_memory_information,json=taskMemoryInformation" json:"task_memory_information,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *JunosTaskMemory) Reset() {
	*x = JunosTaskMemory{}
	mi := &file_junos_xmlproxyd_junos_rtg_task_memory_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosTaskMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosTaskMemory) ProtoMessage() {}

func (x *JunosTaskMemory) ProtoReflect() protoreflect.Message {
	mi := &file_junos_xmlproxyd_junos_rtg_task_memory_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosTaskMemory.ProtoReflect.Descriptor instead.
func (*JunosTaskMemory) Descriptor() ([]byte, []int) {
	return file_junos_xmlproxyd_junos_rtg_task_memory_proto_rawDescGZIP(), []int{0}
}

func (x *JunosTaskMemory) GetTaskMemoryInformation() *JunosTaskMemoryTaskMemoryInformationType {
	if x != nil {
		return x.TaskMemoryInformation
	}
	return nil
}

type JunosTaskMemoryTaskMemoryInformationType struct {
	state                       protoimpl.MessageState                                                   `protogen:"open.v1"`
	TaskMemoryOverallReport     *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportType     `protobuf:"bytes,151,opt,name=task_memory_overall_report,json=taskMemoryOverallReport" json:"task_memory_overall_report,omitempty"`
	TaskMemoryAllocatorReport   *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportType   `protobuf:"bytes,152,opt,name=task_memory_allocator_report,json=taskMemoryAllocatorReport" json:"task_memory_allocator_report,omitempty"`
	TaskMemoryMallocUsageReport *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportType `protobuf:"bytes,153,opt,name=task_memory_malloc_usage_report,json=taskMemoryMallocUsageReport" json:"task_memory_malloc_usage_report,omitempty"`
	TaskMemoryDynamicAllocs     *uint64                                                                  `protobuf:"varint,51,opt,name=task_memory_dynamic_allocs,json=taskMemoryDynamicAllocs" json:"task_memory_dynamic_allocs,omitempty"`
	TaskMemoryMaxDynamicAllocs  *uint64                                                                  `protobuf:"varint,52,opt,name=task_memory_max_dynamic_allocs,json=taskMemoryMaxDynamicAllocs" json:"task_memory_max_dynamic_allocs,omitempty"`
	TaskMemoryBssBytes          *uint64                                                                  `protobuf:"varint,53,opt,name=task_memory_bss_bytes,json=taskMemoryBssBytes" json:"task_memory_bss_bytes,omitempty"`
	TaskMemoryMaxBssBytes       *uint64                                                                  `protobuf:"varint,54,opt,name=task_memory_max_bss_bytes,json=taskMemoryMaxBssBytes" json:"task_memory_max_bss_bytes,omitempty"`
	TaskMemoryPageDataBytes     *uint64                                                                  `protobuf:"varint,55,opt,name=task_memory_page_data_bytes,json=taskMemoryPageDataBytes" json:"task_memory_page_data_bytes,omitempty"`
	TaskMemoryMaxPageDataBytes  *uint64                                                                  `protobuf:"varint,56,opt,name=task_memory_max_page_data_bytes,json=taskMemoryMaxPageDataBytes" json:"task_memory_max_page_data_bytes,omitempty"`
	TaskMemoryDirBytes          *uint64                                                                  `protobuf:"varint,57,opt,name=task_memory_dir_bytes,json=taskMemoryDirBytes" json:"task_memory_dir_bytes,omitempty"`
	TaskMemoryMaxDirBytes       *uint64                                                                  `protobuf:"varint,58,opt,name=task_memory_max_dir_bytes,json=taskMemoryMaxDirBytes" json:"task_memory_max_dir_bytes,omitempty"`
	TaskMemoryTotalBytesInUse   *uint64                                                                  `protobuf:"varint,59,opt,name=task_memory_total_bytes_in_use,json=taskMemoryTotalBytesInUse" json:"task_memory_total_bytes_in_use,omitempty"`
	TaskMemoryTotalBytesPercent *uint32                                                                  `protobuf:"varint,60,opt,name=task_memory_total_bytes_percent,json=taskMemoryTotalBytesPercent" json:"task_memory_total_bytes_percent,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *JunosTaskMemoryTaskMemoryInformationType) Reset() {
	*x = JunosTaskMemoryTaskMemoryInformationType{}
	mi := &file_junos_xmlproxyd_junos_rtg_task_memory_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosTaskMemoryTaskMemoryInformationType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosTaskMemoryTaskMemoryInformationType) ProtoMessage() {}

func (x *JunosTaskMemoryTaskMemoryInformationType) ProtoReflect() protoreflect.Message {
	mi := &file_junos_xmlproxyd_junos_rtg_task_memory_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosTaskMemoryTaskMemoryInformationType.ProtoReflect.Descriptor instead.
func (*JunosTaskMemoryTaskMemoryInformationType) Descriptor() ([]byte, []int) {
	return file_junos_xmlproxyd_junos_rtg_task_memory_proto_rawDescGZIP(), []int{0, 0}
}

func (x *JunosTaskMemoryTaskMemoryInformationType) GetTaskMemoryOverallReport() *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportType {
	if x != nil {
		return x.TaskMemoryOverallReport
	}
	return nil
}

func (x *JunosTaskMemoryTaskMemoryInformationType) GetTaskMemoryAllocatorReport() *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportType {
	if x != nil {
		return x.TaskMemoryAllocatorReport
	}
	return nil
}

func (x *JunosTaskMemoryTaskMemoryInformationType) GetTaskMemoryMallocUsageReport() *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportType {
	if x != nil {
		return x.TaskMemoryMallocUsageReport
	}
	return nil
}

func (x *JunosTaskMemoryTaskMemoryInformationType) GetTaskMemoryDynamicAllocs() uint64 {
	if x != nil && x.TaskMemoryDynamicAllocs != nil {
		return *x.TaskMemoryDynamicAllocs
	}
	return 0
}

func (x *JunosTaskMemoryTaskMemoryInformationType) GetTaskMemoryMaxDynamicAllocs() uint64 {
	if x != nil && x.TaskMemoryMaxDynamicAllocs != nil {
		return *x.TaskMemoryMaxDynamicAllocs
	}
	return 0
}

func (x *JunosTaskMemoryTaskMemoryInformationType) GetTaskMemoryBssBytes() uint64 {
	if x != nil && x.TaskMemoryBssBytes != nil {
		return *x.TaskMemoryBssBytes
	}
	return 0
}

func (x *JunosTaskMemoryTaskMemoryInformationType) GetTaskMemoryMaxBssBytes() uint64 {
	if x != nil && x.TaskMemoryMaxBssBytes != nil {
		return *x.TaskMemoryMaxBssBytes
	}
	return 0
}

func (x *JunosTaskMemoryTaskMemoryInformationType) GetTaskMemoryPageDataBytes() uint64 {
	if x != nil && x.TaskMemoryPageDataBytes != nil {
		return *x.TaskMemoryPageDataBytes
	}
	return 0
}

func (x *JunosTaskMemoryTaskMemoryInformationType) GetTaskMemoryMaxPageDataBytes() uint64 {
	if x != nil && x.TaskMemoryMaxPageDataBytes != nil {
		return *x.TaskMemoryMaxPageDataBytes
	}
	return 0
}

func (x *JunosTaskMemoryTaskMemoryInformationType) GetTaskMemoryDirBytes() uint64 {
	if x != nil && x.TaskMemoryDirBytes != nil {
		return *x.TaskMemoryDirBytes
	}
	return 0
}

func (x *JunosTaskMemoryTaskMemoryInformationType) GetTaskMemoryMaxDirBytes() uint64 {
	if x != nil && x.TaskMemoryMaxDirBytes != nil {
		return *x.TaskMemoryMaxDirBytes
	}
	return 0
}

func (x *JunosTaskMemoryTaskMemoryInformationType) GetTaskMemoryTotalBytesInUse() uint64 {
	if x != nil && x.TaskMemoryTotalBytesInUse != nil {
		return *x.TaskMemoryTotalBytesInUse
	}
	return 0
}

func (x *JunosTaskMemoryTaskMemoryInformationType) GetTaskMemoryTotalBytesPercent() uint32 {
	if x != nil && x.TaskMemoryTotalBytesPercent != nil {
		return *x.TaskMemoryTotalBytesPercent
	}
	return 0
}

type JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportType struct {
	state                    protoimpl.MessageState                                                                      `protogen:"open.v1"`
	TaskSizeBlockList        *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskSizeBlockListType   `protobuf:"bytes,151,opt,name=task_size_block_list,json=taskSizeBlockList" json:"task_size_block_list,omitempty"`
	TaskMemoryStatsList      *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskMemoryStatsListType `protobuf:"bytes,152,opt,name=task_memory_stats_list,json=taskMemoryStatsList" json:"task_memory_stats_list,omitempty"`
	TaskMemoryTotalBytes     *uint64                                                                                     `protobuf:"varint,51,opt,name=task_memory_total_bytes,json=taskMemoryTotalBytes" json:"task_memory_total_bytes,omitempty"`
	TaskMemoryTotalMaxBytes  *uint64                                                                                     `protobuf:"varint,52,opt,name=task_memory_total_max_bytes,json=taskMemoryTotalMaxBytes" json:"task_memory_total_max_bytes,omitempty"`
	TaskMemoryTotalFreeBytes *uint64                                                                                     `protobuf:"varint,53,opt,name=task_memory_total_free_bytes,json=taskMemoryTotalFreeBytes" json:"task_memory_total_free_bytes,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportType) Reset() {
	*x = JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportType{}
	mi := &file_junos_xmlproxyd_junos_rtg_task_memory_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportType) ProtoMessage() {}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportType) ProtoReflect() protoreflect.Message {
	mi := &file_junos_xmlproxyd_junos_rtg_task_memory_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportType.ProtoReflect.Descriptor instead.
func (*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportType) Descriptor() ([]byte, []int) {
	return file_junos_xmlproxyd_junos_rtg_task_memory_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportType) GetTaskSizeBlockList() *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskSizeBlockListType {
	if x != nil {
		return x.TaskSizeBlockList
	}
	return nil
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportType) GetTaskMemoryStatsList() *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskMemoryStatsListType {
	if x != nil {
		return x.TaskMemoryStatsList
	}
	return nil
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportType) GetTaskMemoryTotalBytes() uint64 {
	if x != nil && x.TaskMemoryTotalBytes != nil {
		return *x.TaskMemoryTotalBytes
	}
	return 0
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportType) GetTaskMemoryTotalMaxBytes() uint64 {
	if x != nil && x.TaskMemoryTotalMaxBytes != nil {
		return *x.TaskMemoryTotalMaxBytes
	}
	return 0
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportType) GetTaskMemoryTotalFreeBytes() uint64 {
	if x != nil && x.TaskMemoryTotalFreeBytes != nil {
		return *x.TaskMemoryTotalFreeBytes
	}
	return 0
}

type JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportType struct {
	state                   protoimpl.MessageState                                                                     `protogen:"open.v1"`
	TaskBlockList           *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskBlockListType    `protobuf:"bytes,151,opt,name=task_block_list,json=taskBlockList" json:"task_block_list,omitempty"`
	TaskLitePageList        *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskLitePageListType `protobuf:"bytes,152,opt,name=task_lite_page_list,json=taskLitePageList" json:"task_lite_page_list,omitempty"`
	TaskMemoryTotalBytes    *uint64                                                                                    `protobuf:"varint,52,opt,name=task_memory_total_bytes,json=taskMemoryTotalBytes" json:"task_memory_total_bytes,omitempty"`
	TaskMemoryTotalMaxBytes *uint64                                                                                    `protobuf:"varint,53,opt,name=task_memory_total_max_bytes,json=taskMemoryTotalMaxBytes" json:"task_memory_total_max_bytes,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportType) Reset() {
	*x = JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportType{}
	mi := &file_junos_xmlproxyd_junos_rtg_task_memory_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportType) ProtoMessage() {}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportType) ProtoReflect() protoreflect.Message {
	mi := &file_junos_xmlproxyd_junos_rtg_task_memory_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportType.ProtoReflect.Descriptor instead.
func (*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportType) Descriptor() ([]byte, []int) {
	return file_junos_xmlproxyd_junos_rtg_task_memory_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportType) GetTaskBlockList() *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskBlockListType {
	if x != nil {
		return x.TaskBlockList
	}
	return nil
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportType) GetTaskLitePageList() *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskLitePageListType {
	if x != nil {
		return x.TaskLitePageList
	}
	return nil
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportType) GetTaskMemoryTotalBytes() uint64 {
	if x != nil && x.TaskMemoryTotalBytes != nil {
		return *x.TaskMemoryTotalBytes
	}
	return 0
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportType) GetTaskMemoryTotalMaxBytes() uint64 {
	if x != nil && x.TaskMemoryTotalMaxBytes != nil {
		return *x.TaskMemoryTotalMaxBytes
	}
	return 0
}

type JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportType struct {
	state                   protoimpl.MessageState                                                                     `protogen:"open.v1"`
	TaskMallocList          *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportTypeTaskMallocListType `protobuf:"bytes,151,opt,name=task_malloc_list,json=taskMallocList" json:"task_malloc_list,omitempty"`
	TaskMemoryTotalBytes    *uint64                                                                                    `protobuf:"varint,57,opt,name=task_memory_total_bytes,json=taskMemoryTotalBytes" json:"task_memory_total_bytes,omitempty"`
	TaskMemoryTotalMaxBytes *uint64                                                                                    `protobuf:"varint,58,opt,name=task_memory_total_max_bytes,json=taskMemoryTotalMaxBytes" json:"task_memory_total_max_bytes,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportType) Reset() {
	*x = JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportType{}
	mi := &file_junos_xmlproxyd_junos_rtg_task_memory_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportType) ProtoMessage() {}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportType) ProtoReflect() protoreflect.Message {
	mi := &file_junos_xmlproxyd_junos_rtg_task_memory_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportType.ProtoReflect.Descriptor instead.
func (*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportType) Descriptor() ([]byte, []int) {
	return file_junos_xmlproxyd_junos_rtg_task_memory_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportType) GetTaskMallocList() *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportTypeTaskMallocListType {
	if x != nil {
		return x.TaskMallocList
	}
	return nil
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportType) GetTaskMemoryTotalBytes() uint64 {
	if x != nil && x.TaskMemoryTotalBytes != nil {
		return *x.TaskMemoryTotalBytes
	}
	return 0
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportType) GetTaskMemoryTotalMaxBytes() uint64 {
	if x != nil && x.TaskMemoryTotalMaxBytes != nil {
		return *x.TaskMemoryTotalMaxBytes
	}
	return 0
}

type JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskSizeBlockListType struct {
	state         protoimpl.MessageState                                                                                       `protogen:"open.v1"`
	TaskSizeBlock []*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskSizeBlockListTypeTaskSizeBlockList `protobuf:"bytes,151,rep,name=task_size_block,json=taskSizeBlock" json:"task_size_block,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskSizeBlockListType) Reset() {
	*x = JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskSizeBlockListType{}
	mi := &file_junos_xmlproxyd_junos_rtg_task_memory_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskSizeBlockListType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskSizeBlockListType) ProtoMessage() {
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskSizeBlockListType) ProtoReflect() protoreflect.Message {
	mi := &file_junos_xmlproxyd_junos_rtg_task_memory_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskSizeBlockListType.ProtoReflect.Descriptor instead.
func (*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskSizeBlockListType) Descriptor() ([]byte, []int) {
	return file_junos_xmlproxyd_junos_rtg_task_memory_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskSizeBlockListType) GetTaskSizeBlock() []*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskSizeBlockListTypeTaskSizeBlockList {
	if x != nil {
		return x.TaskSizeBlock
	}
	return nil
}

type JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskMemoryStatsListType struct {
	state           protoimpl.MessageState                                                                                           `protogen:"open.v1"`
	TaskMemoryStats []*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskMemoryStatsListTypeTaskMemoryStatsList `protobuf:"bytes,151,rep,name=task_memory_stats,json=taskMemoryStats" json:"task_memory_stats,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskMemoryStatsListType) Reset() {
	*x = JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskMemoryStatsListType{}
	mi := &file_junos_xmlproxyd_junos_rtg_task_memory_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskMemoryStatsListType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskMemoryStatsListType) ProtoMessage() {
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskMemoryStatsListType) ProtoReflect() protoreflect.Message {
	mi := &file_junos_xmlproxyd_junos_rtg_task_memory_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskMemoryStatsListType.ProtoReflect.Descriptor instead.
func (*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskMemoryStatsListType) Descriptor() ([]byte, []int) {
	return file_junos_xmlproxyd_junos_rtg_task_memory_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskMemoryStatsListType) GetTaskMemoryStats() []*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskMemoryStatsListTypeTaskMemoryStatsList {
	if x != nil {
		return x.TaskMemoryStats
	}
	return nil
}

type JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskSizeBlockListTypeTaskSizeBlockList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TsbSize       *uint32                `protobuf:"varint,51,opt,name=tsb_size,json=tsbSize" json:"tsb_size,omitempty"`
	TsbAllocBytes *uint32                `protobuf:"varint,52,opt,name=tsb_alloc_bytes,json=tsbAllocBytes" json:"tsb_alloc_bytes,omitempty"`
	TsbAllocs     *uint32                `protobuf:"varint,53,opt,name=tsb_allocs,json=tsbAllocs" json:"tsb_allocs,omitempty"`
	TsbMaxAllocs  *uint32                `protobuf:"varint,54,opt,name=tsb_max_allocs,json=tsbMaxAllocs" json:"tsb_max_allocs,omitempty"`
	TsbMaxBytes   *uint64                `protobuf:"varint,55,opt,name=tsb_max_bytes,json=tsbMaxBytes" json:"tsb_max_bytes,omitempty"`
	TsbFreeBytes  *uint64                `protobuf:"varint,56,opt,name=tsb_free_bytes,json=tsbFreeBytes" json:"tsb_free_bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskSizeBlockListTypeTaskSizeBlockList) Reset() {
	*x = JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskSizeBlockListTypeTaskSizeBlockList{}
	mi := &file_junos_xmlproxyd_junos_rtg_task_memory_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskSizeBlockListTypeTaskSizeBlockList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskSizeBlockListTypeTaskSizeBlockList) ProtoMessage() {
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskSizeBlockListTypeTaskSizeBlockList) ProtoReflect() protoreflect.Message {
	mi := &file_junos_xmlproxyd_junos_rtg_task_memory_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskSizeBlockListTypeTaskSizeBlockList.ProtoReflect.Descriptor instead.
func (*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskSizeBlockListTypeTaskSizeBlockList) Descriptor() ([]byte, []int) {
	return file_junos_xmlproxyd_junos_rtg_task_memory_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskSizeBlockListTypeTaskSizeBlockList) GetTsbSize() uint32 {
	if x != nil && x.TsbSize != nil {
		return *x.TsbSize
	}
	return 0
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskSizeBlockListTypeTaskSizeBlockList) GetTsbAllocBytes() uint32 {
	if x != nil && x.TsbAllocBytes != nil {
		return *x.TsbAllocBytes
	}
	return 0
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskSizeBlockListTypeTaskSizeBlockList) GetTsbAllocs() uint32 {
	if x != nil && x.TsbAllocs != nil {
		return *x.TsbAllocs
	}
	return 0
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskSizeBlockListTypeTaskSizeBlockList) GetTsbMaxAllocs() uint32 {
	if x != nil && x.TsbMaxAllocs != nil {
		return *x.TsbMaxAllocs
	}
	return 0
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskSizeBlockListTypeTaskSizeBlockList) GetTsbMaxBytes() uint64 {
	if x != nil && x.TsbMaxBytes != nil {
		return *x.TsbMaxBytes
	}
	return 0
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskSizeBlockListTypeTaskSizeBlockList) GetTsbFreeBytes() uint64 {
	if x != nil && x.TsbFreeBytes != nil {
		return *x.TsbFreeBytes
	}
	return 0
}

type JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskMemoryStatsListTypeTaskMemoryStatsList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TmsName       *string                `protobuf:"bytes,51,opt,name=tms_name,json=tmsName" json:"tms_name,omitempty"`
	TmsAllocs     *uint32                `protobuf:"varint,52,opt,name=tms_allocs,json=tmsAllocs" json:"tms_allocs,omitempty"`
	TmsAllocBytes *uint64                `protobuf:"varint,53,opt,name=tms_alloc_bytes,json=tmsAllocBytes" json:"tms_alloc_bytes,omitempty"`
	TmsMaxAllocs  *uint32                `protobuf:"varint,54,opt,name=tms_max_allocs,json=tmsMaxAllocs" json:"tms_max_allocs,omitempty"`
	TmsMaxBytes   *uint64                `protobuf:"varint,55,opt,name=tms_max_bytes,json=tmsMaxBytes" json:"tms_max_bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskMemoryStatsListTypeTaskMemoryStatsList) Reset() {
	*x = JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskMemoryStatsListTypeTaskMemoryStatsList{}
	mi := &file_junos_xmlproxyd_junos_rtg_task_memory_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskMemoryStatsListTypeTaskMemoryStatsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskMemoryStatsListTypeTaskMemoryStatsList) ProtoMessage() {
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskMemoryStatsListTypeTaskMemoryStatsList) ProtoReflect() protoreflect.Message {
	mi := &file_junos_xmlproxyd_junos_rtg_task_memory_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskMemoryStatsListTypeTaskMemoryStatsList.ProtoReflect.Descriptor instead.
func (*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskMemoryStatsListTypeTaskMemoryStatsList) Descriptor() ([]byte, []int) {
	return file_junos_xmlproxyd_junos_rtg_task_memory_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0}
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskMemoryStatsListTypeTaskMemoryStatsList) GetTmsName() string {
	if x != nil && x.TmsName != nil {
		return *x.TmsName
	}
	return ""
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskMemoryStatsListTypeTaskMemoryStatsList) GetTmsAllocs() uint32 {
	if x != nil && x.TmsAllocs != nil {
		return *x.TmsAllocs
	}
	return 0
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskMemoryStatsListTypeTaskMemoryStatsList) GetTmsAllocBytes() uint64 {
	if x != nil && x.TmsAllocBytes != nil {
		return *x.TmsAllocBytes
	}
	return 0
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskMemoryStatsListTypeTaskMemoryStatsList) GetTmsMaxAllocs() uint32 {
	if x != nil && x.TmsMaxAllocs != nil {
		return *x.TmsMaxAllocs
	}
	return 0
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskMemoryStatsListTypeTaskMemoryStatsList) GetTmsMaxBytes() uint64 {
	if x != nil && x.TmsMaxBytes != nil {
		return *x.TmsMaxBytes
	}
	return 0
}

type JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskBlockListType struct {
	state         protoimpl.MessageState                                                                                 `protogen:"open.v1"`
	TaskBlock     []*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskBlockListTypeTaskBlockList `protobuf:"bytes,151,rep,name=task_block,json=taskBlock" json:"task_block,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskBlockListType) Reset() {
	*x = JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskBlockListType{}
	mi := &file_junos_xmlproxyd_junos_rtg_task_memory_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskBlockListType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskBlockListType) ProtoMessage() {
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskBlockListType) ProtoReflect() protoreflect.Message {
	mi := &file_junos_xmlproxyd_junos_rtg_task_memory_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskBlockListType.ProtoReflect.Descriptor instead.
func (*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskBlockListType) Descriptor() ([]byte, []int) {
	return file_junos_xmlproxyd_junos_rtg_task_memory_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskBlockListType) GetTaskBlock() []*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskBlockListTypeTaskBlockList {
	if x != nil {
		return x.TaskBlock
	}
	return nil
}

type JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskLitePageListType struct {
	state         protoimpl.MessageState                                                                                       `protogen:"open.v1"`
	TaskLitePage  []*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskLitePageListTypeTaskLitePageList `protobuf:"bytes,151,rep,name=task_lite_page,json=taskLitePage" json:"task_lite_page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskLitePageListType) Reset() {
	*x = JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskLitePageListType{}
	mi := &file_junos_xmlproxyd_junos_rtg_task_memory_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskLitePageListType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskLitePageListType) ProtoMessage() {
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskLitePageListType) ProtoReflect() protoreflect.Message {
	mi := &file_junos_xmlproxyd_junos_rtg_task_memory_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskLitePageListType.ProtoReflect.Descriptor instead.
func (*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskLitePageListType) Descriptor() ([]byte, []int) {
	return file_junos_xmlproxyd_junos_rtg_task_memory_proto_rawDescGZIP(), []int{0, 0, 1, 1}
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskLitePageListType) GetTaskLitePage() []*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskLitePageListTypeTaskLitePageList {
	if x != nil {
		return x.TaskLitePage
	}
	return nil
}

type JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskBlockListTypeTaskBlockList struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TbName           *string                `protobuf:"bytes,51,opt,name=tb_name,json=tbName" json:"tb_name,omitempty"`
	TbSize           *uint32                `protobuf:"varint,52,opt,name=tb_size,json=tbSize" json:"tb_size,omitempty"`
	TbAllocSize      *uint32                `protobuf:"varint,53,opt,name=tb_alloc_size,json=tbAllocSize" json:"tb_alloc_size,omitempty"`
	TbAllocBlocks    *uint32                `protobuf:"varint,54,opt,name=tb_alloc_blocks,json=tbAllocBlocks" json:"tb_alloc_blocks,omitempty"`
	TbAllocBytes     *uint64                `protobuf:"varint,55,opt,name=tb_alloc_bytes,json=tbAllocBytes" json:"tb_alloc_bytes,omitempty"`
	TbMaxAllocBlocks *uint32                `protobuf:"varint,56,opt,name=tb_max_alloc_blocks,json=tbMaxAllocBlocks" json:"tb_max_alloc_blocks,omitempty"`
	TbMaxAllocBytes  *uint64                `protobuf:"varint,57,opt,name=tb_max_alloc_bytes,json=tbMaxAllocBytes" json:"tb_max_alloc_bytes,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskBlockListTypeTaskBlockList) Reset() {
	*x = JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskBlockListTypeTaskBlockList{}
	mi := &file_junos_xmlproxyd_junos_rtg_task_memory_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskBlockListTypeTaskBlockList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskBlockListTypeTaskBlockList) ProtoMessage() {
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskBlockListTypeTaskBlockList) ProtoReflect() protoreflect.Message {
	mi := &file_junos_xmlproxyd_junos_rtg_task_memory_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskBlockListTypeTaskBlockList.ProtoReflect.Descriptor instead.
func (*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskBlockListTypeTaskBlockList) Descriptor() ([]byte, []int) {
	return file_junos_xmlproxyd_junos_rtg_task_memory_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0}
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskBlockListTypeTaskBlockList) GetTbName() string {
	if x != nil && x.TbName != nil {
		return *x.TbName
	}
	return ""
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskBlockListTypeTaskBlockList) GetTbSize() uint32 {
	if x != nil && x.TbSize != nil {
		return *x.TbSize
	}
	return 0
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskBlockListTypeTaskBlockList) GetTbAllocSize() uint32 {
	if x != nil && x.TbAllocSize != nil {
		return *x.TbAllocSize
	}
	return 0
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskBlockListTypeTaskBlockList) GetTbAllocBlocks() uint32 {
	if x != nil && x.TbAllocBlocks != nil {
		return *x.TbAllocBlocks
	}
	return 0
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskBlockListTypeTaskBlockList) GetTbAllocBytes() uint64 {
	if x != nil && x.TbAllocBytes != nil {
		return *x.TbAllocBytes
	}
	return 0
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskBlockListTypeTaskBlockList) GetTbMaxAllocBlocks() uint32 {
	if x != nil && x.TbMaxAllocBlocks != nil {
		return *x.TbMaxAllocBlocks
	}
	return 0
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskBlockListTypeTaskBlockList) GetTbMaxAllocBytes() uint64 {
	if x != nil && x.TbMaxAllocBytes != nil {
		return *x.TbMaxAllocBytes
	}
	return 0
}

type JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskLitePageListTypeTaskLitePageList struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TlpName          *string                `protobuf:"bytes,51,opt,name=tlp_name,json=tlpName" json:"tlp_name,omitempty"`
	TlpAllocBytes    *uint64                `protobuf:"varint,52,opt,name=tlp_alloc_bytes,json=tlpAllocBytes" json:"tlp_alloc_bytes,omitempty"`
	TlpMaxAllocBytes *uint64                `protobuf:"varint,53,opt,name=tlp_max_alloc_bytes,json=tlpMaxAllocBytes" json:"tlp_max_alloc_bytes,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskLitePageListTypeTaskLitePageList) Reset() {
	*x = JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskLitePageListTypeTaskLitePageList{}
	mi := &file_junos_xmlproxyd_junos_rtg_task_memory_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskLitePageListTypeTaskLitePageList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskLitePageListTypeTaskLitePageList) ProtoMessage() {
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskLitePageListTypeTaskLitePageList) ProtoReflect() protoreflect.Message {
	mi := &file_junos_xmlproxyd_junos_rtg_task_memory_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskLitePageListTypeTaskLitePageList.ProtoReflect.Descriptor instead.
func (*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskLitePageListTypeTaskLitePageList) Descriptor() ([]byte, []int) {
	return file_junos_xmlproxyd_junos_rtg_task_memory_proto_rawDescGZIP(), []int{0, 0, 1, 1, 0}
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskLitePageListTypeTaskLitePageList) GetTlpName() string {
	if x != nil && x.TlpName != nil {
		return *x.TlpName
	}
	return ""
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskLitePageListTypeTaskLitePageList) GetTlpAllocBytes() uint64 {
	if x != nil && x.TlpAllocBytes != nil {
		return *x.TlpAllocBytes
	}
	return 0
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskLitePageListTypeTaskLitePageList) GetTlpMaxAllocBytes() uint64 {
	if x != nil && x.TlpMaxAllocBytes != nil {
		return *x.TlpMaxAllocBytes
	}
	return 0
}

type JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportTypeTaskMallocListType struct {
	state         protoimpl.MessageState                                                                                     `protogen:"open.v1"`
	TaskMalloc    []*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportTypeTaskMallocListTypeTaskMallocList `protobuf:"bytes,151,rep,name=task_malloc,json=taskMalloc" json:"task_malloc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportTypeTaskMallocListType) Reset() {
	*x = JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportTypeTaskMallocListType{}
	mi := &file_junos_xmlproxyd_junos_rtg_task_memory_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportTypeTaskMallocListType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportTypeTaskMallocListType) ProtoMessage() {
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportTypeTaskMallocListType) ProtoReflect() protoreflect.Message {
	mi := &file_junos_xmlproxyd_junos_rtg_task_memory_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportTypeTaskMallocListType.ProtoReflect.Descriptor instead.
func (*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportTypeTaskMallocListType) Descriptor() ([]byte, []int) {
	return file_junos_xmlproxyd_junos_rtg_task_memory_proto_rawDescGZIP(), []int{0, 0, 2, 0}
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportTypeTaskMallocListType) GetTaskMalloc() []*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportTypeTaskMallocListTypeTaskMallocList {
	if x != nil {
		return x.TaskMalloc
	}
	return nil
}

type JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportTypeTaskMallocListTypeTaskMallocList struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TmName          *string                `protobuf:"bytes,51,opt,name=tm_name,json=tmName" json:"tm_name,omitempty"`
	TmAllocs        *uint32                `protobuf:"varint,52,opt,name=tm_allocs,json=tmAllocs" json:"tm_allocs,omitempty"`
	TmAllocBytes    *uint64                `protobuf:"varint,53,opt,name=tm_alloc_bytes,json=tmAllocBytes" json:"tm_alloc_bytes,omitempty"`
	TmMaxAllocs     *uint32                `protobuf:"varint,54,opt,name=tm_max_allocs,json=tmMaxAllocs" json:"tm_max_allocs,omitempty"`
	TmMaxAllocBytes *uint64                `protobuf:"varint,55,opt,name=tm_max_alloc_bytes,json=tmMaxAllocBytes" json:"tm_max_alloc_bytes,omitempty"`
	TmFunctionCalls *uint32                `protobuf:"varint,56,opt,name=tm_function_calls,json=tmFunctionCalls" json:"tm_function_calls,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportTypeTaskMallocListTypeTaskMallocList) Reset() {
	*x = JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportTypeTaskMallocListTypeTaskMallocList{}
	mi := &file_junos_xmlproxyd_junos_rtg_task_memory_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportTypeTaskMallocListTypeTaskMallocList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportTypeTaskMallocListTypeTaskMallocList) ProtoMessage() {
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportTypeTaskMallocListTypeTaskMallocList) ProtoReflect() protoreflect.Message {
	mi := &file_junos_xmlproxyd_junos_rtg_task_memory_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportTypeTaskMallocListTypeTaskMallocList.ProtoReflect.Descriptor instead.
func (*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportTypeTaskMallocListTypeTaskMallocList) Descriptor() ([]byte, []int) {
	return file_junos_xmlproxyd_junos_rtg_task_memory_proto_rawDescGZIP(), []int{0, 0, 2, 0, 0}
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportTypeTaskMallocListTypeTaskMallocList) GetTmName() string {
	if x != nil && x.TmName != nil {
		return *x.TmName
	}
	return ""
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportTypeTaskMallocListTypeTaskMallocList) GetTmAllocs() uint32 {
	if x != nil && x.TmAllocs != nil {
		return *x.TmAllocs
	}
	return 0
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportTypeTaskMallocListTypeTaskMallocList) GetTmAllocBytes() uint64 {
	if x != nil && x.TmAllocBytes != nil {
		return *x.TmAllocBytes
	}
	return 0
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportTypeTaskMallocListTypeTaskMallocList) GetTmMaxAllocs() uint32 {
	if x != nil && x.TmMaxAllocs != nil {
		return *x.TmMaxAllocs
	}
	return 0
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportTypeTaskMallocListTypeTaskMallocList) GetTmMaxAllocBytes() uint64 {
	if x != nil && x.TmMaxAllocBytes != nil {
		return *x.TmMaxAllocBytes
	}
	return 0
}

func (x *JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportTypeTaskMallocListTypeTaskMallocList) GetTmFunctionCalls() uint32 {
	if x != nil && x.TmFunctionCalls != nil {
		return *x.TmFunctionCalls
	}
	return 0
}

var file_junos_xmlproxyd_junos_rtg_task_memory_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*JunosTaskMemory)(nil),
		Field:         47,
		Name:          "jnpr_junos_task_memory_ext",
		Tag:           "bytes,47,opt,name=jnpr_junos_task_memory_ext",
		Filename:      "junos-xmlproxyd_junos-rtg-task-memory.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional junos_task_memory jnpr_junos_task_memory_ext = 47;
	E_JnprJunosTaskMemoryExt = &file_junos_xmlproxyd_junos_rtg_task_memory_proto_extTypes[0]
)

var File_junos_xmlproxyd_junos_rtg_task_memory_proto protoreflect.FileDescriptor

var file_junos_xmlproxyd_junos_rtg_task_memory_proto_rawDesc = string([]byte{
	0x0a, 0x2b, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x2d, 0x78, 0x6d, 0x6c, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x64, 0x5f, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x2d, 0x72, 0x74, 0x67, 0x2d, 0x74, 0x61, 0x73, 0x6b,
	0x2d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x91, 0x24, 0x0a, 0x11, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x68, 0x0a, 0x17, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6a, 0x75, 0x6e,
	0x6f, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x15, 0x74, 0x61, 0x73,
	0x6b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x91, 0x23, 0x0a, 0x1c, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x1a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6a, 0x75, 0x6e, 0x6f,
	0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x17, 0x74, 0x61, 0x73, 0x6b,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x93, 0x01, 0x0a, 0x1c, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x6a, 0x75,
	0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x19,
	0x74, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x9b, 0x01, 0x0a, 0x1f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x99, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x5f, 0x6d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x1b, 0x74, 0x61, 0x73, 0x6b,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x74, 0x61, 0x73,
	0x6b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x74, 0x61,
	0x73, 0x6b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x42, 0x73, 0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x19, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62,
	0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15,
	0x74, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x42, 0x73, 0x73,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x74, 0x61, 0x73, 0x6b,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x1f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x74, 0x61,
	0x73, 0x6b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x50, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x39, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x44, 0x69, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x19, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64,
	0x69, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15,
	0x74, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x44, 0x69, 0x72,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x1e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x74,
	0x61, 0x73, 0x6b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1b, 0x74, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x1a, 0xf3,
	0x0a, 0x0a, 0x1f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x14, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x69, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x11, 0x74,
	0x61, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0xa1, 0x01, 0x0a, 0x16, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x98, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x13, 0x74, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x74, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x17, 0x74, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x4d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x1c, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66,
	0x72, 0x65, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x18, 0x74, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x46, 0x72, 0x65, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0xb7, 0x03, 0x0a, 0x19, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xa7, 0x01, 0x0a, 0x0f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x97, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x7e, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x1a, 0xef, 0x01, 0x0a, 0x14, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x08, 0x74, 0x73,
	0x62, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40,
	0x02, 0x08, 0x01, 0x52, 0x07, 0x74, 0x73, 0x62, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x74, 0x73, 0x62, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x73, 0x62, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x73, 0x62, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x73, 0x62, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x73, 0x62, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x73, 0x62,
	0x4d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x73, 0x62,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x74, 0x73, 0x62, 0x4d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x74, 0x73, 0x62, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x73, 0x62, 0x46, 0x72, 0x65, 0x65, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x1a, 0x9e, 0x03, 0x0a, 0x1b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0xb0, 0x01, 0x0a, 0x11, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x82, 0x01, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0xcb, 0x01, 0x0a, 0x16, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x08, 0x74, 0x6d, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x07, 0x74, 0x6d, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6d, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6d, 0x73, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6d, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x6d, 0x73,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6d,
	0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x73, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6d, 0x73, 0x4d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x73,
	0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6d, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6d, 0x73, 0x4d, 0x61, 0x78, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x1a, 0xea, 0x09, 0x0a, 0x21, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x0f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x97,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x66, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x74,
	0x61, 0x73, 0x6b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x9a, 0x01, 0x0a,
	0x13, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x6a, 0x75,
	0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x10, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x74,
	0x65, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x74, 0x61, 0x73, 0x6b,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x3c, 0x0a, 0x1b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x74, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0xca,
	0x03, 0x0a, 0x14, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x76, 0x2e,
	0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x1a, 0x98, 0x02, 0x0a, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x07, 0x74, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x06, 0x74, 0x62,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x62, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x62, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x74, 0x62, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x62, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x62, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x62, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x62, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x74, 0x62, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x2d, 0x0a, 0x13, 0x74, 0x62, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x62,
	0x4d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x2b,
	0x0a, 0x12, 0x74, 0x62, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x39, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x62, 0x4d, 0x61,
	0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0xd3, 0x02, 0x0a, 0x18,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x0e, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x97, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x7e, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65,
	0x1a, 0x8e, 0x01, 0x0a, 0x13, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x08, 0x74, 0x6c, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08,
	0x01, 0x52, 0x07, 0x74, 0x6c, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6c,
	0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x6c, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x74, 0x6c, 0x70, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x74, 0x6c, 0x70, 0x4d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x1a, 0xe2, 0x05, 0x0a, 0x24, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x5f, 0x6d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x10, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x39, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x14, 0x74, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17,
	0x74, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d,
	0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0xac, 0x03, 0x0a, 0x15, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x6d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x9d, 0x01, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x1a, 0xf2, 0x01, 0x0a, 0x10, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x07, 0x74, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x06,
	0x74, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6d, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x6d, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6d, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x6d, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6d, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x74, 0x6d, 0x4d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x73, 0x12, 0x2b, 0x0a,
	0x12, 0x74, 0x6d, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x6d, 0x4d, 0x61, 0x78,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6d,
	0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x3a, 0x67, 0x0a, 0x1a, 0x6a, 0x6e, 0x70, 0x72, 0x5f, 0x6a,
	0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x5f, 0x65, 0x78, 0x74, 0x12, 0x17, 0x2e, 0x4a, 0x75, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x16, 0x6a, 0x6e, 0x70, 0x72, 0x4a, 0x75, 0x6e,
	0x6f, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x45, 0x78, 0x74, 0x42,
	0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
})

var (
	file_junos_xmlproxyd_junos_rtg_task_memory_proto_rawDescOnce sync.Once
	file_junos_xmlproxyd_junos_rtg_task_memory_proto_rawDescData []byte
)

func file_junos_xmlproxyd_junos_rtg_task_memory_proto_rawDescGZIP() []byte {
	file_junos_xmlproxyd_junos_rtg_task_memory_proto_rawDescOnce.Do(func() {
		file_junos_xmlproxyd_junos_rtg_task_memory_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_junos_xmlproxyd_junos_rtg_task_memory_proto_rawDesc), len(file_junos_xmlproxyd_junos_rtg_task_memory_proto_rawDesc)))
	})
	return file_junos_xmlproxyd_junos_rtg_task_memory_proto_rawDescData
}

var file_junos_xmlproxyd_junos_rtg_task_memory_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_junos_xmlproxyd_junos_rtg_task_memory_proto_goTypes = []any{
	(*JunosTaskMemory)(nil),                                                                                               // 0: junos_task_memory
	(*JunosTaskMemoryTaskMemoryInformationType)(nil),                                                                      // 1: junos_task_memory.task_memory_information_type
	(*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportType)(nil),                                           // 2: junos_task_memory.task_memory_information_type.task_memory_overall_report_type
	(*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportType)(nil),                                         // 3: junos_task_memory.task_memory_information_type.task_memory_allocator_report_type
	(*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportType)(nil),                                       // 4: junos_task_memory.task_memory_information_type.task_memory_malloc_usage_report_type
	(*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskSizeBlockListType)(nil),                      // 5: junos_task_memory.task_memory_information_type.task_memory_overall_report_type.task_size_block_list_type
	(*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskMemoryStatsListType)(nil),                    // 6: junos_task_memory.task_memory_information_type.task_memory_overall_report_type.task_memory_stats_list_type
	(*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskSizeBlockListTypeTaskSizeBlockList)(nil),     // 7: junos_task_memory.task_memory_information_type.task_memory_overall_report_type.task_size_block_list_type.task_size_block_list
	(*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryOverallReportTypeTaskMemoryStatsListTypeTaskMemoryStatsList)(nil), // 8: junos_task_memory.task_memory_information_type.task_memory_overall_report_type.task_memory_stats_list_type.task_memory_stats_list
	(*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskBlockListType)(nil),                        // 9: junos_task_memory.task_memory_information_type.task_memory_allocator_report_type.task_block_list_type
	(*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskLitePageListType)(nil),                     // 10: junos_task_memory.task_memory_information_type.task_memory_allocator_report_type.task_lite_page_list_type
	(*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskBlockListTypeTaskBlockList)(nil),           // 11: junos_task_memory.task_memory_information_type.task_memory_allocator_report_type.task_block_list_type.task_block_list
	(*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryAllocatorReportTypeTaskLitePageListTypeTaskLitePageList)(nil),     // 12: junos_task_memory.task_memory_information_type.task_memory_allocator_report_type.task_lite_page_list_type.task_lite_page_list
	(*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportTypeTaskMallocListType)(nil),                     // 13: junos_task_memory.task_memory_information_type.task_memory_malloc_usage_report_type.task_malloc_list_type
	(*JunosTaskMemoryTaskMemoryInformationTypeTaskMemoryMallocUsageReportTypeTaskMallocListTypeTaskMallocList)(nil),       // 14: junos_task_memory.task_memory_information_type.task_memory_malloc_usage_report_type.task_malloc_list_type.task_malloc_list
	(*JuniperNetworksSensors)(nil), // 15: JuniperNetworksSensors
}
var file_junos_xmlproxyd_junos_rtg_task_memory_proto_depIdxs = []int32{
	1,  // 0: junos_task_memory.task_memory_information:type_name -> junos_task_memory.task_memory_information_type
	2,  // 1: junos_task_memory.task_memory_information_type.task_memory_overall_report:type_name -> junos_task_memory.task_memory_information_type.task_memory_overall_report_type
	3,  // 2: junos_task_memory.task_memory_information_type.task_memory_allocator_report:type_name -> junos_task_memory.task_memory_information_type.task_memory_allocator_report_type
	4,  // 3: junos_task_memory.task_memory_information_type.task_memory_malloc_usage_report:type_name -> junos_task_memory.task_memory_information_type.task_memory_malloc_usage_report_type
	5,  // 4: junos_task_memory.task_memory_information_type.task_memory_overall_report_type.task_size_block_list:type_name -> junos_task_memory.task_memory_information_type.task_memory_overall_report_type.task_size_block_list_type
	6,  // 5: junos_task_memory.task_memory_information_type.task_memory_overall_report_type.task_memory_stats_list:type_name -> junos_task_memory.task_memory_information_type.task_memory_overall_report_type.task_memory_stats_list_type
	9,  // 6: junos_task_memory.task_memory_information_type.task_memory_allocator_report_type.task_block_list:type_name -> junos_task_memory.task_memory_information_type.task_memory_allocator_report_type.task_block_list_type
	10, // 7: junos_task_memory.task_memory_information_type.task_memory_allocator_report_type.task_lite_page_list:type_name -> junos_task_memory.task_memory_information_type.task_memory_allocator_report_type.task_lite_page_list_type
	13, // 8: junos_task_memory.task_memory_information_type.task_memory_malloc_usage_report_type.task_malloc_list:type_name -> junos_task_memory.task_memory_information_type.task_memory_malloc_usage_report_type.task_malloc_list_type
	7,  // 9: junos_task_memory.task_memory_information_type.task_memory_overall_report_type.task_size_block_list_type.task_size_block:type_name -> junos_task_memory.task_memory_information_type.task_memory_overall_report_type.task_size_block_list_type.task_size_block_list
	8,  // 10: junos_task_memory.task_memory_information_type.task_memory_overall_report_type.task_memory_stats_list_type.task_memory_stats:type_name -> junos_task_memory.task_memory_information_type.task_memory_overall_report_type.task_memory_stats_list_type.task_memory_stats_list
	11, // 11: junos_task_memory.task_memory_information_type.task_memory_allocator_report_type.task_block_list_type.task_block:type_name -> junos_task_memory.task_memory_information_type.task_memory_allocator_report_type.task_block_list_type.task_block_list
	12, // 12: junos_task_memory.task_memory_information_type.task_memory_allocator_report_type.task_lite_page_list_type.task_lite_page:type_name -> junos_task_memory.task_memory_information_type.task_memory_allocator_report_type.task_lite_page_list_type.task_lite_page_list
	14, // 13: junos_task_memory.task_memory_information_type.task_memory_malloc_usage_report_type.task_malloc_list_type.task_malloc:type_name -> junos_task_memory.task_memory_information_type.task_memory_malloc_usage_report_type.task_malloc_list_type.task_malloc_list
	15, // 14: jnpr_junos_task_memory_ext:extendee -> JuniperNetworksSensors
	0,  // 15: jnpr_junos_task_memory_ext:type_name -> junos_task_memory
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	15, // [15:16] is the sub-list for extension type_name
	14, // [14:15] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_junos_xmlproxyd_junos_rtg_task_memory_proto_init() }
func file_junos_xmlproxyd_junos_rtg_task_memory_proto_init() {
	if File_junos_xmlproxyd_junos_rtg_task_memory_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_junos_xmlproxyd_junos_rtg_task_memory_proto_rawDesc), len(file_junos_xmlproxyd_junos_rtg_task_memory_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_junos_xmlproxyd_junos_rtg_task_memory_proto_goTypes,
		DependencyIndexes: file_junos_xmlproxyd_junos_rtg_task_memory_proto_depIdxs,
		MessageInfos:      file_junos_xmlproxyd_junos_rtg_task_memory_proto_msgTypes,
		ExtensionInfos:    file_junos_xmlproxyd_junos_rtg_task_memory_proto_extTypes,
	}.Build()
	File_junos_xmlproxyd_junos_rtg_task_memory_proto = out.File
	file_junos_xmlproxyd_junos_rtg_task_memory_proto_goTypes = nil
	file_junos_xmlproxyd_junos_rtg_task_memory_proto_depIdxs = nil
}
