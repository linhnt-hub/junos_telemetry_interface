// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: vrrpd_oc.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InterfacesVrrp struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Interface     []*InterfacesVrrpInterfaceList `protobuf:"bytes,151,rep,name=interface" json:"interface,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesVrrp) Reset() {
	*x = InterfacesVrrp{}
	mi := &file_vrrpd_oc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrp) ProtoMessage() {}

func (x *InterfacesVrrp) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrp.ProtoReflect.Descriptor instead.
func (*InterfacesVrrp) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0}
}

func (x *InterfacesVrrp) GetInterface() []*InterfacesVrrpInterfaceList {
	if x != nil {
		return x.Interface
	}
	return nil
}

type InterfacesVrrpInterfaceList struct {
	state         protoimpl.MessageState                        `protogen:"open.v1"`
	Name          *string                                       `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	Subinterfaces *InterfacesVrrpInterfaceListSubinterfacesType `protobuf:"bytes,151,opt,name=subinterfaces" json:"subinterfaces,omitempty"`
	RoutedVlan    *InterfacesVrrpInterfaceListRoutedVlanType    `protobuf:"bytes,152,opt,name=routed_vlan,json=routedVlan" json:"routed_vlan,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceList) Reset() {
	*x = InterfacesVrrpInterfaceList{}
	mi := &file_vrrpd_oc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceList) ProtoMessage() {}

func (x *InterfacesVrrpInterfaceList) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceList.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceList) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0}
}

func (x *InterfacesVrrpInterfaceList) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *InterfacesVrrpInterfaceList) GetSubinterfaces() *InterfacesVrrpInterfaceListSubinterfacesType {
	if x != nil {
		return x.Subinterfaces
	}
	return nil
}

func (x *InterfacesVrrpInterfaceList) GetRoutedVlan() *InterfacesVrrpInterfaceListRoutedVlanType {
	if x != nil {
		return x.RoutedVlan
	}
	return nil
}

type InterfacesVrrpInterfaceListSubinterfacesType struct {
	state         protoimpl.MessageState                                          `protogen:"open.v1"`
	Subinterface  []*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList `protobuf:"bytes,151,rep,name=subinterface" json:"subinterface,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListSubinterfacesType) Reset() {
	*x = InterfacesVrrpInterfaceListSubinterfacesType{}
	mi := &file_vrrpd_oc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListSubinterfacesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListSubinterfacesType) ProtoMessage() {}

func (x *InterfacesVrrpInterfaceListSubinterfacesType) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListSubinterfacesType.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListSubinterfacesType) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *InterfacesVrrpInterfaceListSubinterfacesType) GetSubinterface() []*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type InterfacesVrrpInterfaceListRoutedVlanType struct {
	state         protoimpl.MessageState                             `protogen:"open.v1"`
	Ipv4          *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type `protobuf:"bytes,151,opt,name=ipv4" json:"ipv4,omitempty"`
	Ipv6          *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type `protobuf:"bytes,152,opt,name=ipv6" json:"ipv6,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListRoutedVlanType) Reset() {
	*x = InterfacesVrrpInterfaceListRoutedVlanType{}
	mi := &file_vrrpd_oc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListRoutedVlanType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListRoutedVlanType) ProtoMessage() {}

func (x *InterfacesVrrpInterfaceListRoutedVlanType) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListRoutedVlanType.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListRoutedVlanType) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *InterfacesVrrpInterfaceListRoutedVlanType) GetIpv4() *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type {
	if x != nil {
		return x.Ipv4
	}
	return nil
}

func (x *InterfacesVrrpInterfaceListRoutedVlanType) GetIpv6() *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type {
	if x != nil {
		return x.Ipv6
	}
	return nil
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList struct {
	state         protoimpl.MessageState                                                `protogen:"open.v1"`
	Index         *uint32                                                               `protobuf:"varint,51,opt,name=index" json:"index,omitempty"`
	Ipv4          *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type `protobuf:"bytes,151,opt,name=ipv4" json:"ipv4,omitempty"`
	Ipv6          *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type `protobuf:"bytes,152,opt,name=ipv6" json:"ipv6,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList) Reset() {
	*x = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList{}
	mi := &file_vrrpd_oc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList) ProtoMessage() {}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList) GetIpv4() *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type {
	if x != nil {
		return x.Ipv4
	}
	return nil
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList) GetIpv6() *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type {
	if x != nil {
		return x.Ipv6
	}
	return nil
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type struct {
	state         protoimpl.MessageState                                                             `protogen:"open.v1"`
	Addresses     *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType `protobuf:"bytes,151,opt,name=addresses" json:"addresses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type) Reset() {
	*x = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type{}
	mi := &file_vrrpd_oc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type) ProtoMessage() {}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type) GetAddresses() *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type struct {
	state         protoimpl.MessageState                                                             `protogen:"open.v1"`
	Addresses     *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType `protobuf:"bytes,151,opt,name=addresses" json:"addresses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type) Reset() {
	*x = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type{}
	mi := &file_vrrpd_oc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type) ProtoMessage() {}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1}
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type) GetAddresses() *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType struct {
	state         protoimpl.MessageState                                                                          `protogen:"open.v1"`
	Address       []*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList `protobuf:"bytes,151,rep,name=address" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType) Reset() {
	*x = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType{}
	mi := &file_vrrpd_oc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType) ProtoMessage() {
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0}
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType) GetAddress() []*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList {
	if x != nil {
		return x.Address
	}
	return nil
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList struct {
	state         protoimpl.MessageState                                                                                `protogen:"open.v1"`
	Ip            *string                                                                                               `protobuf:"bytes,51,opt,name=ip" json:"ip,omitempty"`
	Vrrp          *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType `protobuf:"bytes,151,opt,name=vrrp" json:"vrrp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList) Reset() {
	*x = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList{}
	mi := &file_vrrpd_oc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList) ProtoMessage() {
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0}
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList) GetVrrp() *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType {
	if x != nil {
		return x.Vrrp
	}
	return nil
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType struct {
	state         protoimpl.MessageState                                                                                               `protogen:"open.v1"`
	VrrpGroup     []*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList `protobuf:"bytes,151,rep,name=vrrp_group,json=vrrpGroup" json:"vrrp_group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType) Reset() {
	*x = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType{}
	mi := &file_vrrpd_oc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType) ProtoMessage() {
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0}
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType) GetVrrpGroup() []*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList {
	if x != nil {
		return x.VrrpGroup
	}
	return nil
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList struct {
	state             protoimpl.MessageState                                                                                                                  `protogen:"open.v1"`
	State             *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType             `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	InterfaceTracking *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType `protobuf:"bytes,152,opt,name=interface_tracking,json=interfaceTracking" json:"interface_tracking,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) Reset() {
	*x = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList{}
	mi := &file_vrrpd_oc_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) ProtoMessage() {
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0}
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) GetState() *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) GetInterfaceTracking() *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType {
	if x != nil {
		return x.InterfaceTracking
	}
	return nil
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	VirtualRouterId       *uint32                `protobuf:"varint,62,opt,name=virtual_router_id,json=virtualRouterId" json:"virtual_router_id,omitempty"`
	VirtualAddress        []string               `protobuf:"bytes,63,rep,name=virtual_address,json=virtualAddress" json:"virtual_address,omitempty"`
	Priority              *uint32                `protobuf:"varint,64,opt,name=priority" json:"priority,omitempty"`
	Preempt               *bool                  `protobuf:"varint,65,opt,name=preempt" json:"preempt,omitempty"`
	PreemptDelay          *uint32                `protobuf:"varint,66,opt,name=preempt_delay,json=preemptDelay" json:"preempt_delay,omitempty"`
	AcceptMode            *bool                  `protobuf:"varint,67,opt,name=accept_mode,json=acceptMode" json:"accept_mode,omitempty"`
	AdvertisementInterval *uint32                `protobuf:"varint,68,opt,name=advertisement_interval,json=advertisementInterval" json:"advertisement_interval,omitempty"`
	CurrentPriority       *uint32                `protobuf:"varint,69,opt,name=current_priority,json=currentPriority" json:"current_priority,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) Reset() {
	*x = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType{}
	mi := &file_vrrpd_oc_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) ProtoMessage() {
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetVirtualRouterId() uint32 {
	if x != nil && x.VirtualRouterId != nil {
		return *x.VirtualRouterId
	}
	return 0
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetVirtualAddress() []string {
	if x != nil {
		return x.VirtualAddress
	}
	return nil
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetPreempt() bool {
	if x != nil && x.Preempt != nil {
		return *x.Preempt
	}
	return false
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetPreemptDelay() uint32 {
	if x != nil && x.PreemptDelay != nil {
		return *x.PreemptDelay
	}
	return 0
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetAcceptMode() bool {
	if x != nil && x.AcceptMode != nil {
		return *x.AcceptMode
	}
	return false
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetAdvertisementInterval() uint32 {
	if x != nil && x.AdvertisementInterval != nil {
		return *x.AdvertisementInterval
	}
	return 0
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetCurrentPriority() uint32 {
	if x != nil && x.CurrentPriority != nil {
		return *x.CurrentPriority
	}
	return 0
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType struct {
	state         protoimpl.MessageState                                                                                                                           `protogen:"open.v1"`
	State         *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) Reset() {
	*x = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType{}
	mi := &file_vrrpd_oc_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) ProtoMessage() {
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1}
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) GetState() *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TrackInterface    []string               `protobuf:"bytes,70,rep,name=track_interface,json=trackInterface" json:"track_interface,omitempty"`
	PriorityDecrement *uint32                `protobuf:"varint,71,opt,name=priority_decrement,json=priorityDecrement" json:"priority_decrement,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) Reset() {
	*x = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType{}
	mi := &file_vrrpd_oc_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) ProtoMessage() {
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0}
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) GetTrackInterface() []string {
	if x != nil {
		return x.TrackInterface
	}
	return nil
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) GetPriorityDecrement() uint32 {
	if x != nil && x.PriorityDecrement != nil {
		return *x.PriorityDecrement
	}
	return 0
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType struct {
	state         protoimpl.MessageState                                                                          `protogen:"open.v1"`
	Address       []*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList `protobuf:"bytes,151,rep,name=address" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType) Reset() {
	*x = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType{}
	mi := &file_vrrpd_oc_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType) ProtoMessage() {
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0}
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType) GetAddress() []*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList {
	if x != nil {
		return x.Address
	}
	return nil
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList struct {
	state         protoimpl.MessageState                                                                                `protogen:"open.v1"`
	Ip            *string                                                                                               `protobuf:"bytes,51,opt,name=ip" json:"ip,omitempty"`
	Vrrp          *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType `protobuf:"bytes,151,opt,name=vrrp" json:"vrrp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList) Reset() {
	*x = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList{}
	mi := &file_vrrpd_oc_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList) ProtoMessage() {
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 0}
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList) GetVrrp() *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType {
	if x != nil {
		return x.Vrrp
	}
	return nil
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType struct {
	state         protoimpl.MessageState                                                                                               `protogen:"open.v1"`
	VrrpGroup     []*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList `protobuf:"bytes,151,rep,name=vrrp_group,json=vrrpGroup" json:"vrrp_group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType) Reset() {
	*x = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType{}
	mi := &file_vrrpd_oc_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType) ProtoMessage() {
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 0, 0}
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType) GetVrrpGroup() []*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList {
	if x != nil {
		return x.VrrpGroup
	}
	return nil
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList struct {
	state             protoimpl.MessageState                                                                                                                  `protogen:"open.v1"`
	State             *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType             `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	InterfaceTracking *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType `protobuf:"bytes,152,opt,name=interface_tracking,json=interfaceTracking" json:"interface_tracking,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) Reset() {
	*x = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList{}
	mi := &file_vrrpd_oc_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) ProtoMessage() {
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 0, 0, 0}
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) GetState() *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) GetInterfaceTracking() *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType {
	if x != nil {
		return x.InterfaceTracking
	}
	return nil
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	VirtualRouterId       *uint32                `protobuf:"varint,80,opt,name=virtual_router_id,json=virtualRouterId" json:"virtual_router_id,omitempty"`
	VirtualAddress        []string               `protobuf:"bytes,81,rep,name=virtual_address,json=virtualAddress" json:"virtual_address,omitempty"`
	Priority              *uint32                `protobuf:"varint,82,opt,name=priority" json:"priority,omitempty"`
	Preempt               *bool                  `protobuf:"varint,83,opt,name=preempt" json:"preempt,omitempty"`
	PreemptDelay          *uint32                `protobuf:"varint,84,opt,name=preempt_delay,json=preemptDelay" json:"preempt_delay,omitempty"`
	AcceptMode            *bool                  `protobuf:"varint,85,opt,name=accept_mode,json=acceptMode" json:"accept_mode,omitempty"`
	AdvertisementInterval *uint32                `protobuf:"varint,86,opt,name=advertisement_interval,json=advertisementInterval" json:"advertisement_interval,omitempty"`
	CurrentPriority       *uint32                `protobuf:"varint,87,opt,name=current_priority,json=currentPriority" json:"current_priority,omitempty"`
	VirtualLinkLocal      *string                `protobuf:"bytes,88,opt,name=virtual_link_local,json=virtualLinkLocal" json:"virtual_link_local,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) Reset() {
	*x = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType{}
	mi := &file_vrrpd_oc_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) ProtoMessage() {
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 0, 0, 0, 0}
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetVirtualRouterId() uint32 {
	if x != nil && x.VirtualRouterId != nil {
		return *x.VirtualRouterId
	}
	return 0
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetVirtualAddress() []string {
	if x != nil {
		return x.VirtualAddress
	}
	return nil
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetPreempt() bool {
	if x != nil && x.Preempt != nil {
		return *x.Preempt
	}
	return false
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetPreemptDelay() uint32 {
	if x != nil && x.PreemptDelay != nil {
		return *x.PreemptDelay
	}
	return 0
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetAcceptMode() bool {
	if x != nil && x.AcceptMode != nil {
		return *x.AcceptMode
	}
	return false
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetAdvertisementInterval() uint32 {
	if x != nil && x.AdvertisementInterval != nil {
		return *x.AdvertisementInterval
	}
	return 0
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetCurrentPriority() uint32 {
	if x != nil && x.CurrentPriority != nil {
		return *x.CurrentPriority
	}
	return 0
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetVirtualLinkLocal() string {
	if x != nil && x.VirtualLinkLocal != nil {
		return *x.VirtualLinkLocal
	}
	return ""
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType struct {
	state         protoimpl.MessageState                                                                                                                           `protogen:"open.v1"`
	State         *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) Reset() {
	*x = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType{}
	mi := &file_vrrpd_oc_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) ProtoMessage() {
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 0, 0, 0, 1}
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) GetState() *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TrackInterface    []string               `protobuf:"bytes,89,rep,name=track_interface,json=trackInterface" json:"track_interface,omitempty"`
	PriorityDecrement *uint32                `protobuf:"varint,90,opt,name=priority_decrement,json=priorityDecrement" json:"priority_decrement,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) Reset() {
	*x = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType{}
	mi := &file_vrrpd_oc_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) ProtoMessage() {
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0}
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) GetTrackInterface() []string {
	if x != nil {
		return x.TrackInterface
	}
	return nil
}

func (x *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) GetPriorityDecrement() uint32 {
	if x != nil && x.PriorityDecrement != nil {
		return *x.PriorityDecrement
	}
	return 0
}

type InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type struct {
	state         protoimpl.MessageState                                          `protogen:"open.v1"`
	Addresses     *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType `protobuf:"bytes,151,opt,name=addresses" json:"addresses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type) Reset() {
	*x = InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type{}
	mi := &file_vrrpd_oc_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type) ProtoMessage() {}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type) GetAddresses() *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type struct {
	state         protoimpl.MessageState                                          `protogen:"open.v1"`
	Addresses     *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType `protobuf:"bytes,151,opt,name=addresses" json:"addresses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type) Reset() {
	*x = InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type{}
	mi := &file_vrrpd_oc_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type) ProtoMessage() {}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 1, 1}
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type) GetAddresses() *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType struct {
	state         protoimpl.MessageState                                                       `protogen:"open.v1"`
	Address       []*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList `protobuf:"bytes,151,rep,name=address" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType) Reset() {
	*x = InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType{}
	mi := &file_vrrpd_oc_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType) ProtoMessage() {}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0}
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType) GetAddress() []*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList {
	if x != nil {
		return x.Address
	}
	return nil
}

type InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList struct {
	state         protoimpl.MessageState                                                             `protogen:"open.v1"`
	Ip            *string                                                                            `protobuf:"bytes,51,opt,name=ip" json:"ip,omitempty"`
	Vrrp          *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType `protobuf:"bytes,151,opt,name=vrrp" json:"vrrp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList) Reset() {
	*x = InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList{}
	mi := &file_vrrpd_oc_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList) ProtoMessage() {}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0, 0}
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList) GetVrrp() *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType {
	if x != nil {
		return x.Vrrp
	}
	return nil
}

type InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType struct {
	state         protoimpl.MessageState                                                                            `protogen:"open.v1"`
	VrrpGroup     []*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList `protobuf:"bytes,151,rep,name=vrrp_group,json=vrrpGroup" json:"vrrp_group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType) Reset() {
	*x = InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType{}
	mi := &file_vrrpd_oc_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType) ProtoMessage() {
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0, 0, 0}
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType) GetVrrpGroup() []*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList {
	if x != nil {
		return x.VrrpGroup
	}
	return nil
}

type InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList struct {
	state             protoimpl.MessageState                                                                                               `protogen:"open.v1"`
	State             *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType             `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	InterfaceTracking *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType `protobuf:"bytes,152,opt,name=interface_tracking,json=interfaceTracking" json:"interface_tracking,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) Reset() {
	*x = InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList{}
	mi := &file_vrrpd_oc_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) ProtoMessage() {
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0, 0, 0, 0}
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) GetState() *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) GetInterfaceTracking() *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType {
	if x != nil {
		return x.InterfaceTracking
	}
	return nil
}

type InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	VirtualRouterId       *uint32                `protobuf:"varint,62,opt,name=virtual_router_id,json=virtualRouterId" json:"virtual_router_id,omitempty"`
	VirtualAddress        []string               `protobuf:"bytes,63,rep,name=virtual_address,json=virtualAddress" json:"virtual_address,omitempty"`
	Priority              *uint32                `protobuf:"varint,64,opt,name=priority" json:"priority,omitempty"`
	Preempt               *bool                  `protobuf:"varint,65,opt,name=preempt" json:"preempt,omitempty"`
	PreemptDelay          *uint32                `protobuf:"varint,66,opt,name=preempt_delay,json=preemptDelay" json:"preempt_delay,omitempty"`
	AcceptMode            *bool                  `protobuf:"varint,67,opt,name=accept_mode,json=acceptMode" json:"accept_mode,omitempty"`
	AdvertisementInterval *uint32                `protobuf:"varint,68,opt,name=advertisement_interval,json=advertisementInterval" json:"advertisement_interval,omitempty"`
	CurrentPriority       *uint32                `protobuf:"varint,69,opt,name=current_priority,json=currentPriority" json:"current_priority,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) Reset() {
	*x = InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType{}
	mi := &file_vrrpd_oc_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) ProtoMessage() {
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0, 0, 0, 0, 0}
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetVirtualRouterId() uint32 {
	if x != nil && x.VirtualRouterId != nil {
		return *x.VirtualRouterId
	}
	return 0
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetVirtualAddress() []string {
	if x != nil {
		return x.VirtualAddress
	}
	return nil
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetPreempt() bool {
	if x != nil && x.Preempt != nil {
		return *x.Preempt
	}
	return false
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetPreemptDelay() uint32 {
	if x != nil && x.PreemptDelay != nil {
		return *x.PreemptDelay
	}
	return 0
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetAcceptMode() bool {
	if x != nil && x.AcceptMode != nil {
		return *x.AcceptMode
	}
	return false
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetAdvertisementInterval() uint32 {
	if x != nil && x.AdvertisementInterval != nil {
		return *x.AdvertisementInterval
	}
	return 0
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetCurrentPriority() uint32 {
	if x != nil && x.CurrentPriority != nil {
		return *x.CurrentPriority
	}
	return 0
}

type InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType struct {
	state         protoimpl.MessageState                                                                                                        `protogen:"open.v1"`
	State         *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) Reset() {
	*x = InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType{}
	mi := &file_vrrpd_oc_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) ProtoMessage() {
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0, 0, 0, 0, 1}
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) GetState() *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TrackInterface    []string               `protobuf:"bytes,70,rep,name=track_interface,json=trackInterface" json:"track_interface,omitempty"`
	PriorityDecrement *uint32                `protobuf:"varint,71,opt,name=priority_decrement,json=priorityDecrement" json:"priority_decrement,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) Reset() {
	*x = InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType{}
	mi := &file_vrrpd_oc_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) ProtoMessage() {
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0, 0, 0, 0, 1, 0}
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) GetTrackInterface() []string {
	if x != nil {
		return x.TrackInterface
	}
	return nil
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) GetPriorityDecrement() uint32 {
	if x != nil && x.PriorityDecrement != nil {
		return *x.PriorityDecrement
	}
	return 0
}

type InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType struct {
	state         protoimpl.MessageState                                                       `protogen:"open.v1"`
	Address       []*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList `protobuf:"bytes,151,rep,name=address" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType) Reset() {
	*x = InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType{}
	mi := &file_vrrpd_oc_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType) ProtoMessage() {}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 1, 1, 0}
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType) GetAddress() []*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList {
	if x != nil {
		return x.Address
	}
	return nil
}

type InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList struct {
	state         protoimpl.MessageState                                                             `protogen:"open.v1"`
	Ip            *string                                                                            `protobuf:"bytes,51,opt,name=ip" json:"ip,omitempty"`
	Vrrp          *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType `protobuf:"bytes,151,opt,name=vrrp" json:"vrrp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList) Reset() {
	*x = InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList{}
	mi := &file_vrrpd_oc_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList) ProtoMessage() {}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 1, 1, 0, 0}
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList) GetVrrp() *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType {
	if x != nil {
		return x.Vrrp
	}
	return nil
}

type InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType struct {
	state         protoimpl.MessageState                                                                            `protogen:"open.v1"`
	VrrpGroup     []*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList `protobuf:"bytes,151,rep,name=vrrp_group,json=vrrpGroup" json:"vrrp_group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType) Reset() {
	*x = InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType{}
	mi := &file_vrrpd_oc_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType) ProtoMessage() {
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 1, 1, 0, 0, 0}
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType) GetVrrpGroup() []*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList {
	if x != nil {
		return x.VrrpGroup
	}
	return nil
}

type InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList struct {
	state             protoimpl.MessageState                                                                                               `protogen:"open.v1"`
	State             *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType             `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	InterfaceTracking *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType `protobuf:"bytes,152,opt,name=interface_tracking,json=interfaceTracking" json:"interface_tracking,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) Reset() {
	*x = InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList{}
	mi := &file_vrrpd_oc_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) ProtoMessage() {
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 1, 1, 0, 0, 0, 0}
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) GetState() *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) GetInterfaceTracking() *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType {
	if x != nil {
		return x.InterfaceTracking
	}
	return nil
}

type InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	VirtualRouterId       *uint32                `protobuf:"varint,80,opt,name=virtual_router_id,json=virtualRouterId" json:"virtual_router_id,omitempty"`
	VirtualAddress        []string               `protobuf:"bytes,81,rep,name=virtual_address,json=virtualAddress" json:"virtual_address,omitempty"`
	Priority              *uint32                `protobuf:"varint,82,opt,name=priority" json:"priority,omitempty"`
	Preempt               *bool                  `protobuf:"varint,83,opt,name=preempt" json:"preempt,omitempty"`
	PreemptDelay          *uint32                `protobuf:"varint,84,opt,name=preempt_delay,json=preemptDelay" json:"preempt_delay,omitempty"`
	AcceptMode            *bool                  `protobuf:"varint,85,opt,name=accept_mode,json=acceptMode" json:"accept_mode,omitempty"`
	AdvertisementInterval *uint32                `protobuf:"varint,86,opt,name=advertisement_interval,json=advertisementInterval" json:"advertisement_interval,omitempty"`
	CurrentPriority       *uint32                `protobuf:"varint,87,opt,name=current_priority,json=currentPriority" json:"current_priority,omitempty"`
	VirtualLinkLocal      *string                `protobuf:"bytes,88,opt,name=virtual_link_local,json=virtualLinkLocal" json:"virtual_link_local,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) Reset() {
	*x = InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType{}
	mi := &file_vrrpd_oc_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) ProtoMessage() {
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 1, 1, 0, 0, 0, 0, 0}
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetVirtualRouterId() uint32 {
	if x != nil && x.VirtualRouterId != nil {
		return *x.VirtualRouterId
	}
	return 0
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetVirtualAddress() []string {
	if x != nil {
		return x.VirtualAddress
	}
	return nil
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetPreempt() bool {
	if x != nil && x.Preempt != nil {
		return *x.Preempt
	}
	return false
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetPreemptDelay() uint32 {
	if x != nil && x.PreemptDelay != nil {
		return *x.PreemptDelay
	}
	return 0
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetAcceptMode() bool {
	if x != nil && x.AcceptMode != nil {
		return *x.AcceptMode
	}
	return false
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetAdvertisementInterval() uint32 {
	if x != nil && x.AdvertisementInterval != nil {
		return *x.AdvertisementInterval
	}
	return 0
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetCurrentPriority() uint32 {
	if x != nil && x.CurrentPriority != nil {
		return *x.CurrentPriority
	}
	return 0
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetVirtualLinkLocal() string {
	if x != nil && x.VirtualLinkLocal != nil {
		return *x.VirtualLinkLocal
	}
	return ""
}

type InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType struct {
	state         protoimpl.MessageState                                                                                                        `protogen:"open.v1"`
	State         *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) Reset() {
	*x = InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType{}
	mi := &file_vrrpd_oc_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) ProtoMessage() {
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 1, 1, 0, 0, 0, 0, 1}
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) GetState() *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TrackInterface    []string               `protobuf:"bytes,89,rep,name=track_interface,json=trackInterface" json:"track_interface,omitempty"`
	PriorityDecrement *uint32                `protobuf:"varint,90,opt,name=priority_decrement,json=priorityDecrement" json:"priority_decrement,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) Reset() {
	*x = InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType{}
	mi := &file_vrrpd_oc_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) ProtoMessage() {
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_vrrpd_oc_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType.ProtoReflect.Descriptor instead.
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) Descriptor() ([]byte, []int) {
	return file_vrrpd_oc_proto_rawDescGZIP(), []int{0, 0, 1, 1, 0, 0, 0, 0, 1, 0}
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) GetTrackInterface() []string {
	if x != nil {
		return x.TrackInterface
	}
	return nil
}

func (x *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) GetPriorityDecrement() uint32 {
	if x != nil && x.PriorityDecrement != nil {
		return *x.PriorityDecrement
	}
	return 0
}

var file_vrrpd_oc_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*InterfacesVrrp)(nil),
		Field:         71,
		Name:          "jnpr_interfaces_vrrp_ext",
		Tag:           "bytes,71,opt,name=jnpr_interfaces_vrrp_ext",
		Filename:      "vrrpd_oc.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional interfaces_vrrp jnpr_interfaces_vrrp_ext = 71;
	E_JnprInterfacesVrrpExt = &file_vrrpd_oc_proto_extTypes[0]
)

var File_vrrpd_oc_proto protoreflect.FileDescriptor

var file_vrrpd_oc_proto_rawDesc = string([]byte{
	0x0a, 0x0e, 0x76, 0x72, 0x72, 0x70, 0x64, 0x5f, 0x6f, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x13, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4, 0x3a, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x12, 0x3e, 0x0a, 0x09, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xe0, 0x39, 0x0a, 0x0e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x76, 0x72, 0x72,
	0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x52, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x6c, 0x61,
	0x6e, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64,
	0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x1a, 0xf4, 0x1d, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x69, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x97, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xf2, 0x1c, 0x0a, 0x11, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82,
	0x40, 0x02, 0x08, 0x01, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x63, 0x0a, 0x04, 0x69,
	0x70, 0x76, 0x34, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34,
	0x12, 0x63, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x76, 0x72, 0x72,
	0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x69, 0x70, 0x76, 0x36, 0x1a, 0xa2, 0x0d, 0x0a, 0x09, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x7c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x1a, 0x96, 0x0c, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xfb, 0x0a, 0x0a,
	0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01,
	0x52, 0x02, 0x69, 0x70, 0x12, 0x89, 0x01, 0x0a, 0x04, 0x76, 0x72, 0x72, 0x70, 0x18, 0x97, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x76, 0x72, 0x72, 0x70,
	0x1a, 0xc7, 0x09, 0x0a, 0x09, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xa5,
	0x01, 0x0a, 0x0a, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x97, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x84, 0x01, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x72, 0x72, 0x70,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x76, 0x72, 0x72,
	0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x91, 0x08, 0x0a, 0x0f, 0x76, 0x72, 0x72, 0x70, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xa7, 0x01, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x8f, 0x01, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0xcd, 0x01, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x98, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x9c, 0x01, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x5f, 0x76, 0x72, 0x72, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x76, 0x72, 0x72, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x1a, 0xbf, 0x02, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x3f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x18,
	0x41, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18,
	0x42, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x44,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x45, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a, 0xc1, 0x02, 0x0a, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0xbf, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0xa7, 0x01, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x72, 0x72, 0x70, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x64, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x46, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x44, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xd0, 0x0d, 0x0a, 0x09, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x7c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x1a, 0xc4, 0x0c, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x1a, 0xa9, 0x0b, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x15, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05,
	0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x02, 0x69, 0x70, 0x12, 0x89, 0x01, 0x0a, 0x04, 0x76, 0x72,
	0x72, 0x70, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x76, 0x72, 0x72, 0x70, 0x1a, 0xf5, 0x09, 0x0a, 0x09, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x0a, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x84, 0x01, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x52, 0x09, 0x76, 0x72, 0x72, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0xbf, 0x08, 0x0a, 0x0f,
	0x76, 0x72, 0x72, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0xa7, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x8f, 0x01, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x76,
	0x72, 0x72, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x72,
	0x72, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xcd, 0x01, 0x0a, 0x12, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x9c, 0x01, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x72, 0x72, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x1a, 0xed, 0x02, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x50, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x51, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65,
	0x65, 0x6d, 0x70, 0x74, 0x18, 0x53, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x65, 0x65,
	0x6d, 0x70, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x65,
	0x6d, 0x70, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x55, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x18, 0x58, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x1a, 0xc1, 0x02, 0x0a, 0x17, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xbf, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xa7, 0x01, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x72,
	0x72, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x64, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x59, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x8c, 0x1a,
	0x0a, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x4f, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x76,
	0x72, 0x72, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x69,
	0x70, 0x76, 0x34, 0x12, 0x4f, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0x98, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f,
	0x76, 0x72, 0x72, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x69, 0x70, 0x76, 0x36, 0x1a, 0x92, 0x0c, 0x0a, 0x09, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x68, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x76,
	0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x1a, 0x9a, 0x0b, 0x0a,
	0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x71, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x56, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x76,
	0x72, 0x72, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x1a, 0x94, 0x0a, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x02, 0x69, 0x70, 0x12, 0x75, 0x0a, 0x04, 0x76, 0x72,
	0x72, 0x70, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x64, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x76, 0x72, 0x72,
	0x70, 0x1a, 0xf5, 0x08, 0x0a, 0x09, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x90, 0x01, 0x0a, 0x0a, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x97,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x72,
	0x72, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x76, 0x72, 0x72, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x1a, 0xd4, 0x07, 0x0a, 0x0f, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x92, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x5f,
	0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x76, 0x72, 0x72, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xb9, 0x01, 0x0a, 0x12,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x88, 0x01, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x64, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x72, 0x72,
	0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x1a, 0xbf, 0x02, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x3f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x65, 0x6d,
	0x70, 0x74, 0x18, 0x41, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70,
	0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a, 0xad, 0x02, 0x0a, 0x17, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x93, 0x01, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x5f,
	0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x76, 0x72, 0x72, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0x64, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x18, 0x46, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x47, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x44, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xc0, 0x0c, 0x0a, 0x09, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x68, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x64, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x1a, 0xc8, 0x0b, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x71, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x76,
	0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xc2, 0x0a, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x02, 0x69, 0x70, 0x12,
	0x75, 0x0a, 0x04, 0x76, 0x72, 0x72, 0x70, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x76, 0x72, 0x72, 0x70,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x76, 0x72, 0x72, 0x70, 0x1a, 0xa3, 0x09, 0x0a, 0x09, 0x76, 0x72, 0x72, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x0a, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x70, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x64, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x72, 0x72,
	0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x76, 0x72,
	0x72, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x82, 0x08, 0x0a, 0x0f, 0x76, 0x72, 0x72, 0x70,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x92, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x72, 0x72, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0xb9, 0x01, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x88,
	0x01, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x76, 0x72, 0x72,
	0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x1a, 0xed, 0x02, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x50, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x51, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x52, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x53, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70,
	0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70,
	0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70,
	0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x55, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x16,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2c,
	0x0a, 0x12, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x18, 0x58, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x1a, 0xad, 0x02, 0x0a,
	0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x93, 0x01, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x64, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x72, 0x72,
	0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x64, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x59, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x44, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x62, 0x0a, 0x18,
	0x6a, 0x6e, 0x70, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f,
	0x76, 0x72, 0x72, 0x70, 0x5f, 0x65, 0x78, 0x74, 0x12, 0x17, 0x2e, 0x4a, 0x75, 0x6e, 0x69, 0x70,
	0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x73, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x52, 0x15, 0x6a, 0x6e, 0x70, 0x72, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x56, 0x72, 0x72, 0x70, 0x45, 0x78, 0x74,
	0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
})

var (
	file_vrrpd_oc_proto_rawDescOnce sync.Once
	file_vrrpd_oc_proto_rawDescData []byte
)

func file_vrrpd_oc_proto_rawDescGZIP() []byte {
	file_vrrpd_oc_proto_rawDescOnce.Do(func() {
		file_vrrpd_oc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_vrrpd_oc_proto_rawDesc), len(file_vrrpd_oc_proto_rawDesc)))
	})
	return file_vrrpd_oc_proto_rawDescData
}

var file_vrrpd_oc_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_vrrpd_oc_proto_goTypes = []any{
	(*InterfacesVrrp)(nil),                                                                                                                                  // 0: interfaces_vrrp
	(*InterfacesVrrpInterfaceList)(nil),                                                                                                                     // 1: interfaces_vrrp.interface_list
	(*InterfacesVrrpInterfaceListSubinterfacesType)(nil),                                                                                                    // 2: interfaces_vrrp.interface_list.subinterfaces_type
	(*InterfacesVrrpInterfaceListRoutedVlanType)(nil),                                                                                                       // 3: interfaces_vrrp.interface_list.routed_vlan_type
	(*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList)(nil),                                                                                    // 4: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list
	(*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type)(nil),                                                                            // 5: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv4_type
	(*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type)(nil),                                                                            // 6: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv6_type
	(*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType)(nil),                                                               // 7: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type
	(*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList)(nil),                                                    // 8: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type.address_list
	(*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType)(nil),                                            // 9: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type.address_list.vrrp_type
	(*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList)(nil),                               // 10: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type.address_list.vrrp_type.vrrp_group_list
	(*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType)(nil),                      // 11: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type.address_list.vrrp_type.vrrp_group_list.state_type
	(*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType)(nil),          // 12: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type.address_list.vrrp_type.vrrp_group_list.interface_tracking_type
	(*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType)(nil), // 13: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type.address_list.vrrp_type.vrrp_group_list.interface_tracking_type.state_type
	(*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType)(nil),                                                               // 14: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type
	(*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList)(nil),                                                    // 15: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type.address_list
	(*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType)(nil),                                            // 16: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type.address_list.vrrp_type
	(*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList)(nil),                               // 17: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type.address_list.vrrp_type.vrrp_group_list
	(*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType)(nil),                      // 18: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type.address_list.vrrp_type.vrrp_group_list.state_type
	(*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType)(nil),          // 19: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type.address_list.vrrp_type.vrrp_group_list.interface_tracking_type
	(*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType)(nil), // 20: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type.address_list.vrrp_type.vrrp_group_list.interface_tracking_type.state_type
	(*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type)(nil),                                                                                               // 21: interfaces_vrrp.interface_list.routed_vlan_type.ipv4_type
	(*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type)(nil),                                                                                               // 22: interfaces_vrrp.interface_list.routed_vlan_type.ipv6_type
	(*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType)(nil),                                                                                  // 23: interfaces_vrrp.interface_list.routed_vlan_type.ipv4_type.addresses_type
	(*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList)(nil),                                                                       // 24: interfaces_vrrp.interface_list.routed_vlan_type.ipv4_type.addresses_type.address_list
	(*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType)(nil),                                                               // 25: interfaces_vrrp.interface_list.routed_vlan_type.ipv4_type.addresses_type.address_list.vrrp_type
	(*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList)(nil),                                                  // 26: interfaces_vrrp.interface_list.routed_vlan_type.ipv4_type.addresses_type.address_list.vrrp_type.vrrp_group_list
	(*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType)(nil),                                         // 27: interfaces_vrrp.interface_list.routed_vlan_type.ipv4_type.addresses_type.address_list.vrrp_type.vrrp_group_list.state_type
	(*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType)(nil),                             // 28: interfaces_vrrp.interface_list.routed_vlan_type.ipv4_type.addresses_type.address_list.vrrp_type.vrrp_group_list.interface_tracking_type
	(*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType)(nil),                    // 29: interfaces_vrrp.interface_list.routed_vlan_type.ipv4_type.addresses_type.address_list.vrrp_type.vrrp_group_list.interface_tracking_type.state_type
	(*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType)(nil),                                                                                  // 30: interfaces_vrrp.interface_list.routed_vlan_type.ipv6_type.addresses_type
	(*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList)(nil),                                                                       // 31: interfaces_vrrp.interface_list.routed_vlan_type.ipv6_type.addresses_type.address_list
	(*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType)(nil),                                                               // 32: interfaces_vrrp.interface_list.routed_vlan_type.ipv6_type.addresses_type.address_list.vrrp_type
	(*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList)(nil),                                                  // 33: interfaces_vrrp.interface_list.routed_vlan_type.ipv6_type.addresses_type.address_list.vrrp_type.vrrp_group_list
	(*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType)(nil),                                         // 34: interfaces_vrrp.interface_list.routed_vlan_type.ipv6_type.addresses_type.address_list.vrrp_type.vrrp_group_list.state_type
	(*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType)(nil),                             // 35: interfaces_vrrp.interface_list.routed_vlan_type.ipv6_type.addresses_type.address_list.vrrp_type.vrrp_group_list.interface_tracking_type
	(*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType)(nil),                    // 36: interfaces_vrrp.interface_list.routed_vlan_type.ipv6_type.addresses_type.address_list.vrrp_type.vrrp_group_list.interface_tracking_type.state_type
	(*JuniperNetworksSensors)(nil), // 37: JuniperNetworksSensors
}
var file_vrrpd_oc_proto_depIdxs = []int32{
	1,  // 0: interfaces_vrrp.interface:type_name -> interfaces_vrrp.interface_list
	2,  // 1: interfaces_vrrp.interface_list.subinterfaces:type_name -> interfaces_vrrp.interface_list.subinterfaces_type
	3,  // 2: interfaces_vrrp.interface_list.routed_vlan:type_name -> interfaces_vrrp.interface_list.routed_vlan_type
	4,  // 3: interfaces_vrrp.interface_list.subinterfaces_type.subinterface:type_name -> interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list
	21, // 4: interfaces_vrrp.interface_list.routed_vlan_type.ipv4:type_name -> interfaces_vrrp.interface_list.routed_vlan_type.ipv4_type
	22, // 5: interfaces_vrrp.interface_list.routed_vlan_type.ipv6:type_name -> interfaces_vrrp.interface_list.routed_vlan_type.ipv6_type
	5,  // 6: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv4:type_name -> interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv4_type
	6,  // 7: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv6:type_name -> interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv6_type
	7,  // 8: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses:type_name -> interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type
	14, // 9: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses:type_name -> interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type
	8,  // 10: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type.address:type_name -> interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type.address_list
	9,  // 11: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type.address_list.vrrp:type_name -> interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type.address_list.vrrp_type
	10, // 12: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type.address_list.vrrp_type.vrrp_group:type_name -> interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type.address_list.vrrp_type.vrrp_group_list
	11, // 13: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type.address_list.vrrp_type.vrrp_group_list.state:type_name -> interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type.address_list.vrrp_type.vrrp_group_list.state_type
	12, // 14: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type.address_list.vrrp_type.vrrp_group_list.interface_tracking:type_name -> interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type.address_list.vrrp_type.vrrp_group_list.interface_tracking_type
	13, // 15: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type.address_list.vrrp_type.vrrp_group_list.interface_tracking_type.state:type_name -> interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type.address_list.vrrp_type.vrrp_group_list.interface_tracking_type.state_type
	15, // 16: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type.address:type_name -> interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type.address_list
	16, // 17: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type.address_list.vrrp:type_name -> interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type.address_list.vrrp_type
	17, // 18: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type.address_list.vrrp_type.vrrp_group:type_name -> interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type.address_list.vrrp_type.vrrp_group_list
	18, // 19: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type.address_list.vrrp_type.vrrp_group_list.state:type_name -> interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type.address_list.vrrp_type.vrrp_group_list.state_type
	19, // 20: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type.address_list.vrrp_type.vrrp_group_list.interface_tracking:type_name -> interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type.address_list.vrrp_type.vrrp_group_list.interface_tracking_type
	20, // 21: interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type.address_list.vrrp_type.vrrp_group_list.interface_tracking_type.state:type_name -> interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type.address_list.vrrp_type.vrrp_group_list.interface_tracking_type.state_type
	23, // 22: interfaces_vrrp.interface_list.routed_vlan_type.ipv4_type.addresses:type_name -> interfaces_vrrp.interface_list.routed_vlan_type.ipv4_type.addresses_type
	30, // 23: interfaces_vrrp.interface_list.routed_vlan_type.ipv6_type.addresses:type_name -> interfaces_vrrp.interface_list.routed_vlan_type.ipv6_type.addresses_type
	24, // 24: interfaces_vrrp.interface_list.routed_vlan_type.ipv4_type.addresses_type.address:type_name -> interfaces_vrrp.interface_list.routed_vlan_type.ipv4_type.addresses_type.address_list
	25, // 25: interfaces_vrrp.interface_list.routed_vlan_type.ipv4_type.addresses_type.address_list.vrrp:type_name -> interfaces_vrrp.interface_list.routed_vlan_type.ipv4_type.addresses_type.address_list.vrrp_type
	26, // 26: interfaces_vrrp.interface_list.routed_vlan_type.ipv4_type.addresses_type.address_list.vrrp_type.vrrp_group:type_name -> interfaces_vrrp.interface_list.routed_vlan_type.ipv4_type.addresses_type.address_list.vrrp_type.vrrp_group_list
	27, // 27: interfaces_vrrp.interface_list.routed_vlan_type.ipv4_type.addresses_type.address_list.vrrp_type.vrrp_group_list.state:type_name -> interfaces_vrrp.interface_list.routed_vlan_type.ipv4_type.addresses_type.address_list.vrrp_type.vrrp_group_list.state_type
	28, // 28: interfaces_vrrp.interface_list.routed_vlan_type.ipv4_type.addresses_type.address_list.vrrp_type.vrrp_group_list.interface_tracking:type_name -> interfaces_vrrp.interface_list.routed_vlan_type.ipv4_type.addresses_type.address_list.vrrp_type.vrrp_group_list.interface_tracking_type
	29, // 29: interfaces_vrrp.interface_list.routed_vlan_type.ipv4_type.addresses_type.address_list.vrrp_type.vrrp_group_list.interface_tracking_type.state:type_name -> interfaces_vrrp.interface_list.routed_vlan_type.ipv4_type.addresses_type.address_list.vrrp_type.vrrp_group_list.interface_tracking_type.state_type
	31, // 30: interfaces_vrrp.interface_list.routed_vlan_type.ipv6_type.addresses_type.address:type_name -> interfaces_vrrp.interface_list.routed_vlan_type.ipv6_type.addresses_type.address_list
	32, // 31: interfaces_vrrp.interface_list.routed_vlan_type.ipv6_type.addresses_type.address_list.vrrp:type_name -> interfaces_vrrp.interface_list.routed_vlan_type.ipv6_type.addresses_type.address_list.vrrp_type
	33, // 32: interfaces_vrrp.interface_list.routed_vlan_type.ipv6_type.addresses_type.address_list.vrrp_type.vrrp_group:type_name -> interfaces_vrrp.interface_list.routed_vlan_type.ipv6_type.addresses_type.address_list.vrrp_type.vrrp_group_list
	34, // 33: interfaces_vrrp.interface_list.routed_vlan_type.ipv6_type.addresses_type.address_list.vrrp_type.vrrp_group_list.state:type_name -> interfaces_vrrp.interface_list.routed_vlan_type.ipv6_type.addresses_type.address_list.vrrp_type.vrrp_group_list.state_type
	35, // 34: interfaces_vrrp.interface_list.routed_vlan_type.ipv6_type.addresses_type.address_list.vrrp_type.vrrp_group_list.interface_tracking:type_name -> interfaces_vrrp.interface_list.routed_vlan_type.ipv6_type.addresses_type.address_list.vrrp_type.vrrp_group_list.interface_tracking_type
	36, // 35: interfaces_vrrp.interface_list.routed_vlan_type.ipv6_type.addresses_type.address_list.vrrp_type.vrrp_group_list.interface_tracking_type.state:type_name -> interfaces_vrrp.interface_list.routed_vlan_type.ipv6_type.addresses_type.address_list.vrrp_type.vrrp_group_list.interface_tracking_type.state_type
	37, // 36: jnpr_interfaces_vrrp_ext:extendee -> JuniperNetworksSensors
	0,  // 37: jnpr_interfaces_vrrp_ext:type_name -> interfaces_vrrp
	38, // [38:38] is the sub-list for method output_type
	38, // [38:38] is the sub-list for method input_type
	37, // [37:38] is the sub-list for extension type_name
	36, // [36:37] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_vrrpd_oc_proto_init() }
func file_vrrpd_oc_proto_init() {
	if File_vrrpd_oc_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_vrrpd_oc_proto_rawDesc), len(file_vrrpd_oc_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   37,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_vrrpd_oc_proto_goTypes,
		DependencyIndexes: file_vrrpd_oc_proto_depIdxs,
		MessageInfos:      file_vrrpd_oc_proto_msgTypes,
		ExtensionInfos:    file_vrrpd_oc_proto_extTypes,
	}.Build()
	File_vrrpd_oc_proto = out.File
	file_vrrpd_oc_proto_goTypes = nil
	file_vrrpd_oc_proto_depIdxs = nil
}
