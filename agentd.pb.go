// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: agentd.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TelemetrySystem struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Subscriptions *TelemetrySystemSubscriptionsType `protobuf:"bytes,151,opt,name=subscriptions" json:"subscriptions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TelemetrySystem) Reset() {
	*x = TelemetrySystem{}
	mi := &file_agentd_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TelemetrySystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem) ProtoMessage() {}

func (x *TelemetrySystem) ProtoReflect() protoreflect.Message {
	mi := &file_agentd_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem.ProtoReflect.Descriptor instead.
func (*TelemetrySystem) Descriptor() ([]byte, []int) {
	return file_agentd_proto_rawDescGZIP(), []int{0}
}

func (x *TelemetrySystem) GetSubscriptions() *TelemetrySystemSubscriptionsType {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type TelemetrySystemSubscriptionsType struct {
	state         protoimpl.MessageState                       `protogen:"open.v1"`
	Dynamic       *TelemetrySystemSubscriptionsTypeDynamicType `protobuf:"bytes,151,opt,name=dynamic" json:"dynamic,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TelemetrySystemSubscriptionsType) Reset() {
	*x = TelemetrySystemSubscriptionsType{}
	mi := &file_agentd_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TelemetrySystemSubscriptionsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystemSubscriptionsType) ProtoMessage() {}

func (x *TelemetrySystemSubscriptionsType) ProtoReflect() protoreflect.Message {
	mi := &file_agentd_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystemSubscriptionsType.ProtoReflect.Descriptor instead.
func (*TelemetrySystemSubscriptionsType) Descriptor() ([]byte, []int) {
	return file_agentd_proto_rawDescGZIP(), []int{0, 0}
}

func (x *TelemetrySystemSubscriptionsType) GetDynamic() *TelemetrySystemSubscriptionsTypeDynamicType {
	if x != nil {
		return x.Dynamic
	}
	return nil
}

type TelemetrySystemSubscriptionsTypeDynamicType struct {
	state         protoimpl.MessageState                                         `protogen:"open.v1"`
	Subscription  []*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList `protobuf:"bytes,151,rep,name=subscription" json:"subscription,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TelemetrySystemSubscriptionsTypeDynamicType) Reset() {
	*x = TelemetrySystemSubscriptionsTypeDynamicType{}
	mi := &file_agentd_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TelemetrySystemSubscriptionsTypeDynamicType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystemSubscriptionsTypeDynamicType) ProtoMessage() {}

func (x *TelemetrySystemSubscriptionsTypeDynamicType) ProtoReflect() protoreflect.Message {
	mi := &file_agentd_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystemSubscriptionsTypeDynamicType.ProtoReflect.Descriptor instead.
func (*TelemetrySystemSubscriptionsTypeDynamicType) Descriptor() ([]byte, []int) {
	return file_agentd_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *TelemetrySystemSubscriptionsTypeDynamicType) GetSubscription() []*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList {
	if x != nil {
		return x.Subscription
	}
	return nil
}

type TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList struct {
	state          protoimpl.MessageState                                                      `protogen:"open.v1"`
	SubscriptionId *uint64                                                                     `protobuf:"varint,51,opt,name=subscription_id,json=subscriptionId" json:"subscription_id,omitempty"`
	State          *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType       `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	SensorPaths    *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType `protobuf:"bytes,152,opt,name=sensor_paths,json=sensorPaths" json:"sensor_paths,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList) Reset() {
	*x = TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList{}
	mi := &file_agentd_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList) ProtoMessage() {}

func (x *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList) ProtoReflect() protoreflect.Message {
	mi := &file_agentd_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList.ProtoReflect.Descriptor instead.
func (*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList) Descriptor() ([]byte, []int) {
	return file_agentd_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList) GetSubscriptionId() uint64 {
	if x != nil && x.SubscriptionId != nil {
		return *x.SubscriptionId
	}
	return 0
}

func (x *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList) GetState() *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList) GetSensorPaths() *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType {
	if x != nil {
		return x.SensorPaths
	}
	return nil
}

type TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionId    *uint64                `protobuf:"varint,51,opt,name=subscription_id,json=subscriptionId" json:"subscription_id,omitempty"`
	SampleInterval    *uint64                `protobuf:"varint,52,opt,name=sample_interval,json=sampleInterval" json:"sample_interval,omitempty"`
	HeartbeatInterval *uint64                `protobuf:"varint,53,opt,name=heartbeat_interval,json=heartbeatInterval" json:"heartbeat_interval,omitempty"`
	SuppressRedundant *bool                  `protobuf:"varint,54,opt,name=suppress_redundant,json=suppressRedundant" json:"suppress_redundant,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType) Reset() {
	*x = TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType{}
	mi := &file_agentd_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType) ProtoMessage() {}

func (x *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_agentd_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType.ProtoReflect.Descriptor instead.
func (*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType) Descriptor() ([]byte, []int) {
	return file_agentd_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType) GetSubscriptionId() uint64 {
	if x != nil && x.SubscriptionId != nil {
		return *x.SubscriptionId
	}
	return 0
}

func (x *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType) GetSampleInterval() uint64 {
	if x != nil && x.SampleInterval != nil {
		return *x.SampleInterval
	}
	return 0
}

func (x *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType) GetHeartbeatInterval() uint64 {
	if x != nil && x.HeartbeatInterval != nil {
		return *x.HeartbeatInterval
	}
	return 0
}

func (x *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType) GetSuppressRedundant() bool {
	if x != nil && x.SuppressRedundant != nil {
		return *x.SuppressRedundant
	}
	return false
}

type TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType struct {
	state         protoimpl.MessageState                                                                      `protogen:"open.v1"`
	SensorPath    []*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList `protobuf:"bytes,151,rep,name=sensor_path,json=sensorPath" json:"sensor_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType) Reset() {
	*x = TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType{}
	mi := &file_agentd_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType) ProtoMessage() {}

func (x *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType) ProtoReflect() protoreflect.Message {
	mi := &file_agentd_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType.ProtoReflect.Descriptor instead.
func (*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType) Descriptor() ([]byte, []int) {
	return file_agentd_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1}
}

func (x *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType) GetSensorPath() []*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList {
	if x != nil {
		return x.SensorPath
	}
	return nil
}

type TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList struct {
	state         protoimpl.MessageState                                                                             `protogen:"open.v1"`
	Path          *string                                                                                            `protobuf:"bytes,51,opt,name=path" json:"path,omitempty"`
	State         *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList) Reset() {
	*x = TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList{}
	mi := &file_agentd_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList) ProtoMessage() {
}

func (x *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList) ProtoReflect() protoreflect.Message {
	mi := &file_agentd_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList.ProtoReflect.Descriptor instead.
func (*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList) Descriptor() ([]byte, []int) {
	return file_agentd_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0}
}

func (x *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList) GetState() *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          *string                `protobuf:"bytes,51,opt,name=path" json:"path,omitempty"`
	ExcludeFilter *string                `protobuf:"bytes,52,opt,name=exclude_filter,json=excludeFilter" json:"exclude_filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType) Reset() {
	*x = TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType{}
	mi := &file_agentd_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType) ProtoMessage() {
}

func (x *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_agentd_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType.ProtoReflect.Descriptor instead.
func (*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType) Descriptor() ([]byte, []int) {
	return file_agentd_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 0}
}

func (x *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType) GetExcludeFilter() string {
	if x != nil && x.ExcludeFilter != nil {
		return *x.ExcludeFilter
	}
	return ""
}

var file_agentd_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*TelemetrySystem)(nil),
		Field:         31,
		Name:          "jnpr_telemetry_system_ext",
		Tag:           "bytes,31,opt,name=jnpr_telemetry_system_ext",
		Filename:      "agentd.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional telemetry_system jnpr_telemetry_system_ext = 31;
	E_JnprTelemetrySystemExt = &file_agentd_proto_extTypes[0]
)

var File_agentd_proto protoreflect.FileDescriptor

var file_agentd_proto_rawDesc = string([]byte{
	0x0a, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xcb, 0x09, 0x0a, 0x10, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x4b, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xe9, 0x08, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x07,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x1a, 0x84, 0x08, 0x0a, 0x0c, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x68, 0x0a, 0x0c, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x97, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x43, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x89, 0x07, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x65, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x79, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x68, 0x73, 0x1a, 0xbc, 0x01,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2d,
	0x0a, 0x12, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2d, 0x0a,
	0x12, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64,
	0x61, 0x6e, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x1a, 0xa2, 0x03, 0x0a,
	0x11, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x66, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x68, 0x1a, 0x81, 0x02,
	0x0a, 0x10, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x88, 0x01,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x71,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x47, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x3a, 0x65, 0x0a, 0x19, 0x6a, 0x6e, 0x70, 0x72, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x65, 0x78, 0x74, 0x12, 0x17,
	0x2e, 0x4a, 0x75, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x52, 0x16, 0x6a, 0x6e, 0x70, 0x72, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x6a, 0x75,
	0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
})

var (
	file_agentd_proto_rawDescOnce sync.Once
	file_agentd_proto_rawDescData []byte
)

func file_agentd_proto_rawDescGZIP() []byte {
	file_agentd_proto_rawDescOnce.Do(func() {
		file_agentd_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_agentd_proto_rawDesc), len(file_agentd_proto_rawDesc)))
	})
	return file_agentd_proto_rawDescData
}

var file_agentd_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_agentd_proto_goTypes = []any{
	(*TelemetrySystem)(nil),                                                                                   // 0: telemetry_system
	(*TelemetrySystemSubscriptionsType)(nil),                                                                  // 1: telemetry_system.subscriptions_type
	(*TelemetrySystemSubscriptionsTypeDynamicType)(nil),                                                       // 2: telemetry_system.subscriptions_type.dynamic_type
	(*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList)(nil),                                       // 3: telemetry_system.subscriptions_type.dynamic_type.subscription_list
	(*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType)(nil),                              // 4: telemetry_system.subscriptions_type.dynamic_type.subscription_list.state_type
	(*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType)(nil),                        // 5: telemetry_system.subscriptions_type.dynamic_type.subscription_list.sensor_paths_type
	(*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList)(nil),          // 6: telemetry_system.subscriptions_type.dynamic_type.subscription_list.sensor_paths_type.sensor_path_list
	(*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType)(nil), // 7: telemetry_system.subscriptions_type.dynamic_type.subscription_list.sensor_paths_type.sensor_path_list.state_type
	(*JuniperNetworksSensors)(nil),                                                                            // 8: JuniperNetworksSensors
}
var file_agentd_proto_depIdxs = []int32{
	1, // 0: telemetry_system.subscriptions:type_name -> telemetry_system.subscriptions_type
	2, // 1: telemetry_system.subscriptions_type.dynamic:type_name -> telemetry_system.subscriptions_type.dynamic_type
	3, // 2: telemetry_system.subscriptions_type.dynamic_type.subscription:type_name -> telemetry_system.subscriptions_type.dynamic_type.subscription_list
	4, // 3: telemetry_system.subscriptions_type.dynamic_type.subscription_list.state:type_name -> telemetry_system.subscriptions_type.dynamic_type.subscription_list.state_type
	5, // 4: telemetry_system.subscriptions_type.dynamic_type.subscription_list.sensor_paths:type_name -> telemetry_system.subscriptions_type.dynamic_type.subscription_list.sensor_paths_type
	6, // 5: telemetry_system.subscriptions_type.dynamic_type.subscription_list.sensor_paths_type.sensor_path:type_name -> telemetry_system.subscriptions_type.dynamic_type.subscription_list.sensor_paths_type.sensor_path_list
	7, // 6: telemetry_system.subscriptions_type.dynamic_type.subscription_list.sensor_paths_type.sensor_path_list.state:type_name -> telemetry_system.subscriptions_type.dynamic_type.subscription_list.sensor_paths_type.sensor_path_list.state_type
	8, // 7: jnpr_telemetry_system_ext:extendee -> JuniperNetworksSensors
	0, // 8: jnpr_telemetry_system_ext:type_name -> telemetry_system
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	8, // [8:9] is the sub-list for extension type_name
	7, // [7:8] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_agentd_proto_init() }
func file_agentd_proto_init() {
	if File_agentd_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_agentd_proto_rawDesc), len(file_agentd_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_agentd_proto_goTypes,
		DependencyIndexes: file_agentd_proto_depIdxs,
		MessageInfos:      file_agentd_proto_msgTypes,
		ExtensionInfos:    file_agentd_proto_extTypes,
	}.Build()
	File_agentd_proto = out.File
	file_agentd_proto_goTypes = nil
	file_agentd_proto_depIdxs = nil
}
