// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: rmopd_render.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Junos struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rpm           *JunosRpmType          `protobuf:"bytes,151,opt,name=rpm" json:"rpm,omitempty"`
	Twamp         *JunosTwampType        `protobuf:"bytes,152,opt,name=twamp" json:"twamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Junos) Reset() {
	*x = Junos{}
	mi := &file_rmopd_render_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Junos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Junos) ProtoMessage() {}

func (x *Junos) ProtoReflect() protoreflect.Message {
	mi := &file_rmopd_render_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Junos.ProtoReflect.Descriptor instead.
func (*Junos) Descriptor() ([]byte, []int) {
	return file_rmopd_render_proto_rawDescGZIP(), []int{0}
}

func (x *Junos) GetRpm() *JunosRpmType {
	if x != nil {
		return x.Rpm
	}
	return nil
}

func (x *Junos) GetTwamp() *JunosTwampType {
	if x != nil {
		return x.Twamp
	}
	return nil
}

type JunosRpmType struct {
	state          protoimpl.MessageState          `protogen:"open.v1"`
	ProbeResults   *JunosRpmTypeProbeResultsType   `protobuf:"bytes,151,opt,name=probe_results,json=probeResults" json:"probe_results,omitempty"`
	HistoryResults *JunosRpmTypeHistoryResultsType `protobuf:"bytes,152,opt,name=history_results,json=historyResults" json:"history_results,omitempty"`
	Server         *JunosRpmTypeServerType         `protobuf:"bytes,153,opt,name=server" json:"server,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *JunosRpmType) Reset() {
	*x = JunosRpmType{}
	mi := &file_rmopd_render_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosRpmType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosRpmType) ProtoMessage() {}

func (x *JunosRpmType) ProtoReflect() protoreflect.Message {
	mi := &file_rmopd_render_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosRpmType.ProtoReflect.Descriptor instead.
func (*JunosRpmType) Descriptor() ([]byte, []int) {
	return file_rmopd_render_proto_rawDescGZIP(), []int{0, 0}
}

func (x *JunosRpmType) GetProbeResults() *JunosRpmTypeProbeResultsType {
	if x != nil {
		return x.ProbeResults
	}
	return nil
}

func (x *JunosRpmType) GetHistoryResults() *JunosRpmTypeHistoryResultsType {
	if x != nil {
		return x.HistoryResults
	}
	return nil
}

func (x *JunosRpmType) GetServer() *JunosRpmTypeServerType {
	if x != nil {
		return x.Server
	}
	return nil
}

type JunosTwampType struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Server        *JunosTwampTypeServerType `protobuf:"bytes,151,opt,name=server" json:"server,omitempty"`
	Client        *JunosTwampTypeClientType `protobuf:"bytes,152,opt,name=client" json:"client,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosTwampType) Reset() {
	*x = JunosTwampType{}
	mi := &file_rmopd_render_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosTwampType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosTwampType) ProtoMessage() {}

func (x *JunosTwampType) ProtoReflect() protoreflect.Message {
	mi := &file_rmopd_render_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosTwampType.ProtoReflect.Descriptor instead.
func (*JunosTwampType) Descriptor() ([]byte, []int) {
	return file_rmopd_render_proto_rawDescGZIP(), []int{0, 1}
}

func (x *JunosTwampType) GetServer() *JunosTwampTypeServerType {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *JunosTwampType) GetClient() *JunosTwampTypeClientType {
	if x != nil {
		return x.Client
	}
	return nil
}

type JunosRpmTypeProbeResultsType struct {
	state            protoimpl.MessageState                              `protogen:"open.v1"`
	ProbeTestResults []*JunosRpmTypeProbeResultsTypeProbeTestResultsList `protobuf:"bytes,151,rep,name=probe_test_results,json=probeTestResults" json:"probe_test_results,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *JunosRpmTypeProbeResultsType) Reset() {
	*x = JunosRpmTypeProbeResultsType{}
	mi := &file_rmopd_render_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosRpmTypeProbeResultsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosRpmTypeProbeResultsType) ProtoMessage() {}

func (x *JunosRpmTypeProbeResultsType) ProtoReflect() protoreflect.Message {
	mi := &file_rmopd_render_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosRpmTypeProbeResultsType.ProtoReflect.Descriptor instead.
func (*JunosRpmTypeProbeResultsType) Descriptor() ([]byte, []int) {
	return file_rmopd_render_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *JunosRpmTypeProbeResultsType) GetProbeTestResults() []*JunosRpmTypeProbeResultsTypeProbeTestResultsList {
	if x != nil {
		return x.ProbeTestResults
	}
	return nil
}

type JunosRpmTypeHistoryResultsType struct {
	state              protoimpl.MessageState                                  `protogen:"open.v1"`
	HistoryTestResults []*JunosRpmTypeHistoryResultsTypeHistoryTestResultsList `protobuf:"bytes,151,rep,name=history_test_results,json=historyTestResults" json:"history_test_results,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *JunosRpmTypeHistoryResultsType) Reset() {
	*x = JunosRpmTypeHistoryResultsType{}
	mi := &file_rmopd_render_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosRpmTypeHistoryResultsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosRpmTypeHistoryResultsType) ProtoMessage() {}

func (x *JunosRpmTypeHistoryResultsType) ProtoReflect() protoreflect.Message {
	mi := &file_rmopd_render_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosRpmTypeHistoryResultsType.ProtoReflect.Descriptor instead.
func (*JunosRpmTypeHistoryResultsType) Descriptor() ([]byte, []int) {
	return file_rmopd_render_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *JunosRpmTypeHistoryResultsType) GetHistoryTestResults() []*JunosRpmTypeHistoryResultsTypeHistoryTestResultsList {
	if x != nil {
		return x.HistoryTestResults
	}
	return nil
}

type JunosRpmTypeServerType struct {
	state         protoimpl.MessageState                     `protogen:"open.v1"`
	ActiveServers []*JunosRpmTypeServerTypeActiveServersList `protobuf:"bytes,151,rep,name=active_servers,json=activeServers" json:"active_servers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosRpmTypeServerType) Reset() {
	*x = JunosRpmTypeServerType{}
	mi := &file_rmopd_render_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosRpmTypeServerType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosRpmTypeServerType) ProtoMessage() {}

func (x *JunosRpmTypeServerType) ProtoReflect() protoreflect.Message {
	mi := &file_rmopd_render_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosRpmTypeServerType.ProtoReflect.Descriptor instead.
func (*JunosRpmTypeServerType) Descriptor() ([]byte, []int) {
	return file_rmopd_render_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *JunosRpmTypeServerType) GetActiveServers() []*JunosRpmTypeServerTypeActiveServersList {
	if x != nil {
		return x.ActiveServers
	}
	return nil
}

type JunosRpmTypeProbeResultsTypeProbeTestResultsList struct {
	state                   protoimpl.MessageState                                                         `protogen:"open.v1"`
	Owner                   *string                                                                        `protobuf:"bytes,51,opt,name=owner" json:"owner,omitempty"`
	TestName                *string                                                                        `protobuf:"bytes,52,opt,name=test_name,json=testName" json:"test_name,omitempty"`
	TargetAddress           *string                                                                        `protobuf:"bytes,53,opt,name=target_address,json=targetAddress" json:"target_address,omitempty"`
	TargetUrl               *string                                                                        `protobuf:"bytes,54,opt,name=target_url,json=targetUrl" json:"target_url,omitempty"`
	SourceAddress           *string                                                                        `protobuf:"bytes,55,opt,name=source_address,json=sourceAddress" json:"source_address,omitempty"`
	DestinationInterface    *string                                                                        `protobuf:"bytes,56,opt,name=destination_interface,json=destinationInterface" json:"destination_interface,omitempty"`
	ProbeType               *string                                                                        `protobuf:"bytes,57,opt,name=probe_type,json=probeType" json:"probe_type,omitempty"`
	IcmpId                  *uint32                                                                        `protobuf:"varint,58,opt,name=icmp_id,json=icmpId" json:"icmp_id,omitempty"`
	TestSize                *uint32                                                                        `protobuf:"varint,59,opt,name=test_size,json=testSize" json:"test_size,omitempty"`
	HttpStatus              *uint32                                                                        `protobuf:"varint,60,opt,name=http_status,json=httpStatus" json:"http_status,omitempty"`
	RoutingInstanceName     *string                                                                        `protobuf:"bytes,61,opt,name=routing_instance_name,json=routingInstanceName" json:"routing_instance_name,omitempty"`
	RttThresh               *uint32                                                                        `protobuf:"varint,62,opt,name=rtt_thresh,json=rttThresh" json:"rtt_thresh,omitempty"`
	RttJitterThresh         *uint32                                                                        `protobuf:"varint,63,opt,name=rtt_jitter_thresh,json=rttJitterThresh" json:"rtt_jitter_thresh,omitempty"`
	RttStddevThresh         *uint32                                                                        `protobuf:"varint,64,opt,name=rtt_stddev_thresh,json=rttStddevThresh" json:"rtt_stddev_thresh,omitempty"`
	IgrThresh               *uint32                                                                        `protobuf:"varint,65,opt,name=igr_thresh,json=igrThresh" json:"igr_thresh,omitempty"`
	IgrJitterThresh         *uint32                                                                        `protobuf:"varint,66,opt,name=igr_jitter_thresh,json=igrJitterThresh" json:"igr_jitter_thresh,omitempty"`
	IgrStddevThresh         *uint32                                                                        `protobuf:"varint,67,opt,name=igr_stddev_thresh,json=igrStddevThresh" json:"igr_stddev_thresh,omitempty"`
	EgrThresh               *uint32                                                                        `protobuf:"varint,68,opt,name=egr_thresh,json=egrThresh" json:"egr_thresh,omitempty"`
	EgrJitterThresh         *uint32                                                                        `protobuf:"varint,69,opt,name=egr_jitter_thresh,json=egrJitterThresh" json:"egr_jitter_thresh,omitempty"`
	EgrStddevThresh         *uint32                                                                        `protobuf:"varint,70,opt,name=egr_stddev_thresh,json=egrStddevThresh" json:"egr_stddev_thresh,omitempty"`
	ProbeTestsHwTsErr       *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType         `protobuf:"bytes,151,opt,name=probe_tests_hw_ts_err,json=probeTestsHwTsErr" json:"probe_tests_hw_ts_err,omitempty"`
	ProbeSingleResults      *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType        `protobuf:"bytes,152,opt,name=probe_single_results,json=probeSingleResults" json:"probe_single_results,omitempty"`
	ProbeTestGenericResults []*JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList `protobuf:"bytes,153,rep,name=probe_test_generic_results,json=probeTestGenericResults" json:"probe_test_generic_results,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsList) Reset() {
	*x = JunosRpmTypeProbeResultsTypeProbeTestResultsList{}
	mi := &file_rmopd_render_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosRpmTypeProbeResultsTypeProbeTestResultsList) ProtoMessage() {}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsList) ProtoReflect() protoreflect.Message {
	mi := &file_rmopd_render_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosRpmTypeProbeResultsTypeProbeTestResultsList.ProtoReflect.Descriptor instead.
func (*JunosRpmTypeProbeResultsTypeProbeTestResultsList) Descriptor() ([]byte, []int) {
	return file_rmopd_render_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetTestName() string {
	if x != nil && x.TestName != nil {
		return *x.TestName
	}
	return ""
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetTargetAddress() string {
	if x != nil && x.TargetAddress != nil {
		return *x.TargetAddress
	}
	return ""
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetTargetUrl() string {
	if x != nil && x.TargetUrl != nil {
		return *x.TargetUrl
	}
	return ""
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetSourceAddress() string {
	if x != nil && x.SourceAddress != nil {
		return *x.SourceAddress
	}
	return ""
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetDestinationInterface() string {
	if x != nil && x.DestinationInterface != nil {
		return *x.DestinationInterface
	}
	return ""
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetProbeType() string {
	if x != nil && x.ProbeType != nil {
		return *x.ProbeType
	}
	return ""
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetIcmpId() uint32 {
	if x != nil && x.IcmpId != nil {
		return *x.IcmpId
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetTestSize() uint32 {
	if x != nil && x.TestSize != nil {
		return *x.TestSize
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetHttpStatus() uint32 {
	if x != nil && x.HttpStatus != nil {
		return *x.HttpStatus
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetRoutingInstanceName() string {
	if x != nil && x.RoutingInstanceName != nil {
		return *x.RoutingInstanceName
	}
	return ""
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetRttThresh() uint32 {
	if x != nil && x.RttThresh != nil {
		return *x.RttThresh
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetRttJitterThresh() uint32 {
	if x != nil && x.RttJitterThresh != nil {
		return *x.RttJitterThresh
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetRttStddevThresh() uint32 {
	if x != nil && x.RttStddevThresh != nil {
		return *x.RttStddevThresh
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetIgrThresh() uint32 {
	if x != nil && x.IgrThresh != nil {
		return *x.IgrThresh
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetIgrJitterThresh() uint32 {
	if x != nil && x.IgrJitterThresh != nil {
		return *x.IgrJitterThresh
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetIgrStddevThresh() uint32 {
	if x != nil && x.IgrStddevThresh != nil {
		return *x.IgrStddevThresh
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetEgrThresh() uint32 {
	if x != nil && x.EgrThresh != nil {
		return *x.EgrThresh
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetEgrJitterThresh() uint32 {
	if x != nil && x.EgrJitterThresh != nil {
		return *x.EgrJitterThresh
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetEgrStddevThresh() uint32 {
	if x != nil && x.EgrStddevThresh != nil {
		return *x.EgrStddevThresh
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetProbeTestsHwTsErr() *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType {
	if x != nil {
		return x.ProbeTestsHwTsErr
	}
	return nil
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetProbeSingleResults() *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType {
	if x != nil {
		return x.ProbeSingleResults
	}
	return nil
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetProbeTestGenericResults() []*JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList {
	if x != nil {
		return x.ProbeTestGenericResults
	}
	return nil
}

type JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	InvalidClientRecvTsCntr    *uint32                `protobuf:"varint,51,opt,name=invalid_client_recv_ts_cntr,json=invalidClientRecvTsCntr" json:"invalid_client_recv_ts_cntr,omitempty"`
	InvalidClientNotsCntr      *uint32                `protobuf:"varint,52,opt,name=invalid_client_nots_cntr,json=invalidClientNotsCntr" json:"invalid_client_nots_cntr,omitempty"`
	InvalidServerSendTsCntr    *uint32                `protobuf:"varint,53,opt,name=invalid_server_send_ts_cntr,json=invalidServerSendTsCntr" json:"invalid_server_send_ts_cntr,omitempty"`
	InvalidServerSpentTimeCntr *uint32                `protobuf:"varint,54,opt,name=invalid_server_spent_time_cntr,json=invalidServerSpentTimeCntr" json:"invalid_server_spent_time_cntr,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType) Reset() {
	*x = JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType{}
	mi := &file_rmopd_render_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType) ProtoMessage() {}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType) ProtoReflect() protoreflect.Message {
	mi := &file_rmopd_render_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType.ProtoReflect.Descriptor instead.
func (*JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType) Descriptor() ([]byte, []int) {
	return file_rmopd_render_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType) GetInvalidClientRecvTsCntr() uint32 {
	if x != nil && x.InvalidClientRecvTsCntr != nil {
		return *x.InvalidClientRecvTsCntr
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType) GetInvalidClientNotsCntr() uint32 {
	if x != nil && x.InvalidClientNotsCntr != nil {
		return *x.InvalidClientNotsCntr
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType) GetInvalidServerSendTsCntr() uint32 {
	if x != nil && x.InvalidServerSendTsCntr != nil {
		return *x.InvalidServerSendTsCntr
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType) GetInvalidServerSpentTimeCntr() uint32 {
	if x != nil && x.InvalidServerSpentTimeCntr != nil {
		return *x.InvalidServerSpentTimeCntr
	}
	return 0
}

type JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	ProbeTime                   *string                `protobuf:"bytes,51,opt,name=probe_time,json=probeTime" json:"probe_time,omitempty"`
	ProbeSentTime               *string                `protobuf:"bytes,52,opt,name=probe_sent_time,json=probeSentTime" json:"probe_sent_time,omitempty"`
	ProbeStatus                 *string                `protobuf:"bytes,53,opt,name=probe_status,json=probeStatus" json:"probe_status,omitempty"`
	HardwareTimestampStatus     *string                `protobuf:"bytes,54,opt,name=hardware_timestamp_status,json=hardwareTimestampStatus" json:"hardware_timestamp_status,omitempty"`
	Rtt                         *uint32                `protobuf:"varint,55,opt,name=rtt" json:"rtt,omitempty"`
	Egress                      *uint32                `protobuf:"varint,56,opt,name=egress" json:"egress,omitempty"`
	Ingress                     *uint32                `protobuf:"varint,57,opt,name=ingress" json:"ingress,omitempty"`
	EgressJitter                *int32                 `protobuf:"varint,58,opt,name=egress_jitter,json=egressJitter" json:"egress_jitter,omitempty"`
	IngressJitter               *int32                 `protobuf:"varint,59,opt,name=ingress_jitter,json=ingressJitter" json:"ingress_jitter,omitempty"`
	RoundTripJitter             *int32                 `protobuf:"varint,60,opt,name=round_trip_jitter,json=roundTripJitter" json:"round_trip_jitter,omitempty"`
	EgressInterarrivalJitter    *int32                 `protobuf:"varint,61,opt,name=egress_interarrival_jitter,json=egressInterarrivalJitter" json:"egress_interarrival_jitter,omitempty"`
	IngressInterarrivalJitter   *int32                 `protobuf:"varint,62,opt,name=ingress_interarrival_jitter,json=ingressInterarrivalJitter" json:"ingress_interarrival_jitter,omitempty"`
	RoundTripInterarrivalJitter *int32                 `protobuf:"varint,63,opt,name=round_trip_interarrival_jitter,json=roundTripInterarrivalJitter" json:"round_trip_interarrival_jitter,omitempty"`
	HttpStatus                  *uint32                `protobuf:"varint,64,opt,name=http_status,json=httpStatus" json:"http_status,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) Reset() {
	*x = JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType{}
	mi := &file_rmopd_render_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) ProtoMessage() {}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) ProtoReflect() protoreflect.Message {
	mi := &file_rmopd_render_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType.ProtoReflect.Descriptor instead.
func (*JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) Descriptor() ([]byte, []int) {
	return file_rmopd_render_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1}
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) GetProbeTime() string {
	if x != nil && x.ProbeTime != nil {
		return *x.ProbeTime
	}
	return ""
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) GetProbeSentTime() string {
	if x != nil && x.ProbeSentTime != nil {
		return *x.ProbeSentTime
	}
	return ""
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) GetProbeStatus() string {
	if x != nil && x.ProbeStatus != nil {
		return *x.ProbeStatus
	}
	return ""
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) GetHardwareTimestampStatus() string {
	if x != nil && x.HardwareTimestampStatus != nil {
		return *x.HardwareTimestampStatus
	}
	return ""
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) GetRtt() uint32 {
	if x != nil && x.Rtt != nil {
		return *x.Rtt
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) GetEgress() uint32 {
	if x != nil && x.Egress != nil {
		return *x.Egress
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) GetIngress() uint32 {
	if x != nil && x.Ingress != nil {
		return *x.Ingress
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) GetEgressJitter() int32 {
	if x != nil && x.EgressJitter != nil {
		return *x.EgressJitter
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) GetIngressJitter() int32 {
	if x != nil && x.IngressJitter != nil {
		return *x.IngressJitter
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) GetRoundTripJitter() int32 {
	if x != nil && x.RoundTripJitter != nil {
		return *x.RoundTripJitter
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) GetEgressInterarrivalJitter() int32 {
	if x != nil && x.EgressInterarrivalJitter != nil {
		return *x.EgressInterarrivalJitter
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) GetIngressInterarrivalJitter() int32 {
	if x != nil && x.IngressInterarrivalJitter != nil {
		return *x.IngressInterarrivalJitter
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) GetRoundTripInterarrivalJitter() int32 {
	if x != nil && x.RoundTripInterarrivalJitter != nil {
		return *x.RoundTripInterarrivalJitter
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) GetHttpStatus() uint32 {
	if x != nil && x.HttpStatus != nil {
		return *x.HttpStatus
	}
	return 0
}

type JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList struct {
	state                        protoimpl.MessageState                                                                                         `protogen:"open.v1"`
	ResultsScope                 *string                                                                                                        `protobuf:"bytes,51,opt,name=results_scope,json=resultsScope" json:"results_scope,omitempty"`
	ProbesSent                   *uint32                                                                                                        `protobuf:"varint,52,opt,name=probes_sent,json=probesSent" json:"probes_sent,omitempty"`
	ProbeResponses               *uint32                                                                                                        `protobuf:"varint,53,opt,name=probe_responses,json=probeResponses" json:"probe_responses,omitempty"`
	LossPercentage               *uint32                                                                                                        `protobuf:"varint,54,opt,name=loss_percentage,json=lossPercentage" json:"loss_percentage,omitempty"`
	LastTestTime                 *string                                                                                                        `protobuf:"bytes,55,opt,name=last_test_time,json=lastTestTime" json:"last_test_time,omitempty"`
	ProbeTestGenericMeasurements []*JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList `protobuf:"bytes,151,rep,name=probe_test_generic_measurements,json=probeTestGenericMeasurements" json:"probe_test_generic_measurements,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList) Reset() {
	*x = JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList{}
	mi := &file_rmopd_render_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList) ProtoMessage() {}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList) ProtoReflect() protoreflect.Message {
	mi := &file_rmopd_render_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList.ProtoReflect.Descriptor instead.
func (*JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList) Descriptor() ([]byte, []int) {
	return file_rmopd_render_proto_rawDescGZIP(), []int{0, 0, 0, 0, 2}
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList) GetResultsScope() string {
	if x != nil && x.ResultsScope != nil {
		return *x.ResultsScope
	}
	return ""
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList) GetProbesSent() uint32 {
	if x != nil && x.ProbesSent != nil {
		return *x.ProbesSent
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList) GetProbeResponses() uint32 {
	if x != nil && x.ProbeResponses != nil {
		return *x.ProbeResponses
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList) GetLossPercentage() uint32 {
	if x != nil && x.LossPercentage != nil {
		return *x.LossPercentage
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList) GetLastTestTime() string {
	if x != nil && x.LastTestTime != nil {
		return *x.LastTestTime
	}
	return ""
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList) GetProbeTestGenericMeasurements() []*JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList {
	if x != nil {
		return x.ProbeTestGenericMeasurements
	}
	return nil
}

type JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	ProbeMeasurementType *string                `protobuf:"bytes,51,opt,name=probe_measurement_type,json=probeMeasurementType" json:"probe_measurement_type,omitempty"`
	Samples              *uint32                `protobuf:"varint,52,opt,name=samples" json:"samples,omitempty"`
	MinDelay             *uint32                `protobuf:"varint,53,opt,name=min_delay,json=minDelay" json:"min_delay,omitempty"`
	MaxDelay             *uint32                `protobuf:"varint,54,opt,name=max_delay,json=maxDelay" json:"max_delay,omitempty"`
	AvgDelay             *uint32                `protobuf:"varint,55,opt,name=avg_delay,json=avgDelay" json:"avg_delay,omitempty"`
	JitterDelay          *uint32                `protobuf:"varint,56,opt,name=jitter_delay,json=jitterDelay" json:"jitter_delay,omitempty"`
	StddevDelay          *uint64                `protobuf:"varint,57,opt,name=stddev_delay,json=stddevDelay" json:"stddev_delay,omitempty"`
	SumDelay             *uint64                `protobuf:"varint,58,opt,name=sum_delay,json=sumDelay" json:"sum_delay,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) Reset() {
	*x = JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList{}
	mi := &file_rmopd_render_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) ProtoMessage() {
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) ProtoReflect() protoreflect.Message {
	mi := &file_rmopd_render_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList.ProtoReflect.Descriptor instead.
func (*JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) Descriptor() ([]byte, []int) {
	return file_rmopd_render_proto_rawDescGZIP(), []int{0, 0, 0, 0, 2, 0}
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) GetProbeMeasurementType() string {
	if x != nil && x.ProbeMeasurementType != nil {
		return *x.ProbeMeasurementType
	}
	return ""
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) GetSamples() uint32 {
	if x != nil && x.Samples != nil {
		return *x.Samples
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) GetMinDelay() uint32 {
	if x != nil && x.MinDelay != nil {
		return *x.MinDelay
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) GetMaxDelay() uint32 {
	if x != nil && x.MaxDelay != nil {
		return *x.MaxDelay
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) GetAvgDelay() uint32 {
	if x != nil && x.AvgDelay != nil {
		return *x.AvgDelay
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) GetJitterDelay() uint32 {
	if x != nil && x.JitterDelay != nil {
		return *x.JitterDelay
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) GetStddevDelay() uint64 {
	if x != nil && x.StddevDelay != nil {
		return *x.StddevDelay
	}
	return 0
}

func (x *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) GetSumDelay() uint64 {
	if x != nil && x.SumDelay != nil {
		return *x.SumDelay
	}
	return 0
}

type JunosRpmTypeHistoryResultsTypeHistoryTestResultsList struct {
	state                    protoimpl.MessageState                                                              `protogen:"open.v1"`
	HistorySingleTestResults []*JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList `protobuf:"bytes,151,rep,name=history_single_test_results,json=historySingleTestResults" json:"history_single_test_results,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsList) Reset() {
	*x = JunosRpmTypeHistoryResultsTypeHistoryTestResultsList{}
	mi := &file_rmopd_render_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosRpmTypeHistoryResultsTypeHistoryTestResultsList) ProtoMessage() {}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsList) ProtoReflect() protoreflect.Message {
	mi := &file_rmopd_render_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosRpmTypeHistoryResultsTypeHistoryTestResultsList.ProtoReflect.Descriptor instead.
func (*JunosRpmTypeHistoryResultsTypeHistoryTestResultsList) Descriptor() ([]byte, []int) {
	return file_rmopd_render_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsList) GetHistorySingleTestResults() []*JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList {
	if x != nil {
		return x.HistorySingleTestResults
	}
	return nil
}

type JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList struct {
	state                protoimpl.MessageState                                                                                  `protogen:"open.v1"`
	Owner                *string                                                                                                 `protobuf:"bytes,51,opt,name=owner" json:"owner,omitempty"`
	TestName             *string                                                                                                 `protobuf:"bytes,52,opt,name=test_name,json=testName" json:"test_name,omitempty"`
	TargetAddress        *string                                                                                                 `protobuf:"bytes,53,opt,name=target_address,json=targetAddress" json:"target_address,omitempty"`
	TargetUrl            *string                                                                                                 `protobuf:"bytes,54,opt,name=target_url,json=targetUrl" json:"target_url,omitempty"`
	SourceAddress        *string                                                                                                 `protobuf:"bytes,55,opt,name=source_address,json=sourceAddress" json:"source_address,omitempty"`
	DestinationInterface *string                                                                                                 `protobuf:"bytes,56,opt,name=destination_interface,json=destinationInterface" json:"destination_interface,omitempty"`
	ProbeType            *string                                                                                                 `protobuf:"bytes,57,opt,name=probe_type,json=probeType" json:"probe_type,omitempty"`
	IcmpId               *uint32                                                                                                 `protobuf:"varint,58,opt,name=icmp_id,json=icmpId" json:"icmp_id,omitempty"`
	TestSize             *uint32                                                                                                 `protobuf:"varint,59,opt,name=test_size,json=testSize" json:"test_size,omitempty"`
	HttpStatus           *uint32                                                                                                 `protobuf:"varint,60,opt,name=http_status,json=httpStatus" json:"http_status,omitempty"`
	RoutingInstanceName  *string                                                                                                 `protobuf:"bytes,61,opt,name=routing_instance_name,json=routingInstanceName" json:"routing_instance_name,omitempty"`
	RttThresh            *uint32                                                                                                 `protobuf:"varint,62,opt,name=rtt_thresh,json=rttThresh" json:"rtt_thresh,omitempty"`
	RttJitterThresh      *uint32                                                                                                 `protobuf:"varint,63,opt,name=rtt_jitter_thresh,json=rttJitterThresh" json:"rtt_jitter_thresh,omitempty"`
	RttStddevThresh      *uint32                                                                                                 `protobuf:"varint,64,opt,name=rtt_stddev_thresh,json=rttStddevThresh" json:"rtt_stddev_thresh,omitempty"`
	IgrThresh            *uint32                                                                                                 `protobuf:"varint,65,opt,name=igr_thresh,json=igrThresh" json:"igr_thresh,omitempty"`
	IgrJitterThresh      *uint32                                                                                                 `protobuf:"varint,66,opt,name=igr_jitter_thresh,json=igrJitterThresh" json:"igr_jitter_thresh,omitempty"`
	IgrStddevThresh      *uint32                                                                                                 `protobuf:"varint,67,opt,name=igr_stddev_thresh,json=igrStddevThresh" json:"igr_stddev_thresh,omitempty"`
	EgrThresh            *uint32                                                                                                 `protobuf:"varint,68,opt,name=egr_thresh,json=egrThresh" json:"egr_thresh,omitempty"`
	EgrJitterThresh      *uint32                                                                                                 `protobuf:"varint,69,opt,name=egr_jitter_thresh,json=egrJitterThresh" json:"egr_jitter_thresh,omitempty"`
	EgrStddevThresh      *uint32                                                                                                 `protobuf:"varint,70,opt,name=egr_stddev_thresh,json=egrStddevThresh" json:"egr_stddev_thresh,omitempty"`
	ProbeSingleResults   *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType `protobuf:"bytes,151,opt,name=probe_single_results,json=probeSingleResults" json:"probe_single_results,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) Reset() {
	*x = JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList{}
	mi := &file_rmopd_render_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) ProtoMessage() {
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) ProtoReflect() protoreflect.Message {
	mi := &file_rmopd_render_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList.ProtoReflect.Descriptor instead.
func (*JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) Descriptor() ([]byte, []int) {
	return file_rmopd_render_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0}
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetTestName() string {
	if x != nil && x.TestName != nil {
		return *x.TestName
	}
	return ""
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetTargetAddress() string {
	if x != nil && x.TargetAddress != nil {
		return *x.TargetAddress
	}
	return ""
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetTargetUrl() string {
	if x != nil && x.TargetUrl != nil {
		return *x.TargetUrl
	}
	return ""
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetSourceAddress() string {
	if x != nil && x.SourceAddress != nil {
		return *x.SourceAddress
	}
	return ""
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetDestinationInterface() string {
	if x != nil && x.DestinationInterface != nil {
		return *x.DestinationInterface
	}
	return ""
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetProbeType() string {
	if x != nil && x.ProbeType != nil {
		return *x.ProbeType
	}
	return ""
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetIcmpId() uint32 {
	if x != nil && x.IcmpId != nil {
		return *x.IcmpId
	}
	return 0
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetTestSize() uint32 {
	if x != nil && x.TestSize != nil {
		return *x.TestSize
	}
	return 0
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetHttpStatus() uint32 {
	if x != nil && x.HttpStatus != nil {
		return *x.HttpStatus
	}
	return 0
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetRoutingInstanceName() string {
	if x != nil && x.RoutingInstanceName != nil {
		return *x.RoutingInstanceName
	}
	return ""
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetRttThresh() uint32 {
	if x != nil && x.RttThresh != nil {
		return *x.RttThresh
	}
	return 0
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetRttJitterThresh() uint32 {
	if x != nil && x.RttJitterThresh != nil {
		return *x.RttJitterThresh
	}
	return 0
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetRttStddevThresh() uint32 {
	if x != nil && x.RttStddevThresh != nil {
		return *x.RttStddevThresh
	}
	return 0
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetIgrThresh() uint32 {
	if x != nil && x.IgrThresh != nil {
		return *x.IgrThresh
	}
	return 0
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetIgrJitterThresh() uint32 {
	if x != nil && x.IgrJitterThresh != nil {
		return *x.IgrJitterThresh
	}
	return 0
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetIgrStddevThresh() uint32 {
	if x != nil && x.IgrStddevThresh != nil {
		return *x.IgrStddevThresh
	}
	return 0
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetEgrThresh() uint32 {
	if x != nil && x.EgrThresh != nil {
		return *x.EgrThresh
	}
	return 0
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetEgrJitterThresh() uint32 {
	if x != nil && x.EgrJitterThresh != nil {
		return *x.EgrJitterThresh
	}
	return 0
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetEgrStddevThresh() uint32 {
	if x != nil && x.EgrStddevThresh != nil {
		return *x.EgrStddevThresh
	}
	return 0
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetProbeSingleResults() *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType {
	if x != nil {
		return x.ProbeSingleResults
	}
	return nil
}

type JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	ProbeTime                   *string                `protobuf:"bytes,51,opt,name=probe_time,json=probeTime" json:"probe_time,omitempty"`
	ProbeSentTime               *string                `protobuf:"bytes,52,opt,name=probe_sent_time,json=probeSentTime" json:"probe_sent_time,omitempty"`
	ProbeStatus                 *string                `protobuf:"bytes,53,opt,name=probe_status,json=probeStatus" json:"probe_status,omitempty"`
	HardwareTimestampStatus     *string                `protobuf:"bytes,54,opt,name=hardware_timestamp_status,json=hardwareTimestampStatus" json:"hardware_timestamp_status,omitempty"`
	Rtt                         *uint32                `protobuf:"varint,55,opt,name=rtt" json:"rtt,omitempty"`
	Egress                      *uint32                `protobuf:"varint,56,opt,name=egress" json:"egress,omitempty"`
	Ingress                     *uint32                `protobuf:"varint,57,opt,name=ingress" json:"ingress,omitempty"`
	EgressJitter                *int32                 `protobuf:"varint,58,opt,name=egress_jitter,json=egressJitter" json:"egress_jitter,omitempty"`
	IngressJitter               *int32                 `protobuf:"varint,59,opt,name=ingress_jitter,json=ingressJitter" json:"ingress_jitter,omitempty"`
	RoundTripJitter             *int32                 `protobuf:"varint,60,opt,name=round_trip_jitter,json=roundTripJitter" json:"round_trip_jitter,omitempty"`
	EgressInterarrivalJitter    *int32                 `protobuf:"varint,61,opt,name=egress_interarrival_jitter,json=egressInterarrivalJitter" json:"egress_interarrival_jitter,omitempty"`
	IngressInterarrivalJitter   *int32                 `protobuf:"varint,62,opt,name=ingress_interarrival_jitter,json=ingressInterarrivalJitter" json:"ingress_interarrival_jitter,omitempty"`
	RoundTripInterarrivalJitter *int32                 `protobuf:"varint,63,opt,name=round_trip_interarrival_jitter,json=roundTripInterarrivalJitter" json:"round_trip_interarrival_jitter,omitempty"`
	HttpStatus                  *uint32                `protobuf:"varint,64,opt,name=http_status,json=httpStatus" json:"http_status,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) Reset() {
	*x = JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType{}
	mi := &file_rmopd_render_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) ProtoMessage() {
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) ProtoReflect() protoreflect.Message {
	mi := &file_rmopd_render_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType.ProtoReflect.Descriptor instead.
func (*JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) Descriptor() ([]byte, []int) {
	return file_rmopd_render_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0, 0}
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetProbeTime() string {
	if x != nil && x.ProbeTime != nil {
		return *x.ProbeTime
	}
	return ""
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetProbeSentTime() string {
	if x != nil && x.ProbeSentTime != nil {
		return *x.ProbeSentTime
	}
	return ""
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetProbeStatus() string {
	if x != nil && x.ProbeStatus != nil {
		return *x.ProbeStatus
	}
	return ""
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetHardwareTimestampStatus() string {
	if x != nil && x.HardwareTimestampStatus != nil {
		return *x.HardwareTimestampStatus
	}
	return ""
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetRtt() uint32 {
	if x != nil && x.Rtt != nil {
		return *x.Rtt
	}
	return 0
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetEgress() uint32 {
	if x != nil && x.Egress != nil {
		return *x.Egress
	}
	return 0
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetIngress() uint32 {
	if x != nil && x.Ingress != nil {
		return *x.Ingress
	}
	return 0
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetEgressJitter() int32 {
	if x != nil && x.EgressJitter != nil {
		return *x.EgressJitter
	}
	return 0
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetIngressJitter() int32 {
	if x != nil && x.IngressJitter != nil {
		return *x.IngressJitter
	}
	return 0
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetRoundTripJitter() int32 {
	if x != nil && x.RoundTripJitter != nil {
		return *x.RoundTripJitter
	}
	return 0
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetEgressInterarrivalJitter() int32 {
	if x != nil && x.EgressInterarrivalJitter != nil {
		return *x.EgressInterarrivalJitter
	}
	return 0
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetIngressInterarrivalJitter() int32 {
	if x != nil && x.IngressInterarrivalJitter != nil {
		return *x.IngressInterarrivalJitter
	}
	return 0
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetRoundTripInterarrivalJitter() int32 {
	if x != nil && x.RoundTripInterarrivalJitter != nil {
		return *x.RoundTripInterarrivalJitter
	}
	return 0
}

func (x *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetHttpStatus() uint32 {
	if x != nil && x.HttpStatus != nil {
		return *x.HttpStatus
	}
	return 0
}

type JunosRpmTypeServerTypeActiveServersList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Protocol      *string                `protobuf:"bytes,51,opt,name=protocol" json:"protocol,omitempty"`
	Port          *uint32                `protobuf:"varint,52,opt,name=port" json:"port,omitempty"`
	DstInterface  *string                `protobuf:"bytes,53,opt,name=dst_interface,json=dstInterface" json:"dst_interface,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosRpmTypeServerTypeActiveServersList) Reset() {
	*x = JunosRpmTypeServerTypeActiveServersList{}
	mi := &file_rmopd_render_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosRpmTypeServerTypeActiveServersList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosRpmTypeServerTypeActiveServersList) ProtoMessage() {}

func (x *JunosRpmTypeServerTypeActiveServersList) ProtoReflect() protoreflect.Message {
	mi := &file_rmopd_render_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosRpmTypeServerTypeActiveServersList.ProtoReflect.Descriptor instead.
func (*JunosRpmTypeServerTypeActiveServersList) Descriptor() ([]byte, []int) {
	return file_rmopd_render_proto_rawDescGZIP(), []int{0, 0, 2, 0}
}

func (x *JunosRpmTypeServerTypeActiveServersList) GetProtocol() string {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return ""
}

func (x *JunosRpmTypeServerTypeActiveServersList) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *JunosRpmTypeServerTypeActiveServersList) GetDstInterface() string {
	if x != nil && x.DstInterface != nil {
		return *x.DstInterface
	}
	return ""
}

type JunosTwampTypeServerType struct {
	state             protoimpl.MessageState                           `protogen:"open.v1"`
	ControlConnection []*JunosTwampTypeServerTypeControlConnectionList `protobuf:"bytes,151,rep,name=control_connection,json=controlConnection" json:"control_connection,omitempty"`
	TestSession       []*JunosTwampTypeServerTypeTestSessionList       `protobuf:"bytes,152,rep,name=test_session,json=testSession" json:"test_session,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *JunosTwampTypeServerType) Reset() {
	*x = JunosTwampTypeServerType{}
	mi := &file_rmopd_render_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosTwampTypeServerType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosTwampTypeServerType) ProtoMessage() {}

func (x *JunosTwampTypeServerType) ProtoReflect() protoreflect.Message {
	mi := &file_rmopd_render_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosTwampTypeServerType.ProtoReflect.Descriptor instead.
func (*JunosTwampTypeServerType) Descriptor() ([]byte, []int) {
	return file_rmopd_render_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *JunosTwampTypeServerType) GetControlConnection() []*JunosTwampTypeServerTypeControlConnectionList {
	if x != nil {
		return x.ControlConnection
	}
	return nil
}

func (x *JunosTwampTypeServerType) GetTestSession() []*JunosTwampTypeServerTypeTestSessionList {
	if x != nil {
		return x.TestSession
	}
	return nil
}

type JunosTwampTypeClientType struct {
	state              protoimpl.MessageState                            `protogen:"open.v1"`
	ControlConnection  []*JunosTwampTypeClientTypeControlConnectionList  `protobuf:"bytes,151,rep,name=control_connection,json=controlConnection" json:"control_connection,omitempty"`
	TestSession        []*JunosTwampTypeClientTypeTestSessionList        `protobuf:"bytes,152,rep,name=test_session,json=testSession" json:"test_session,omitempty"`
	ProbeTestResults   []*JunosTwampTypeClientTypeProbeTestResultsList   `protobuf:"bytes,153,rep,name=probe_test_results,json=probeTestResults" json:"probe_test_results,omitempty"`
	HistoryTestResults []*JunosTwampTypeClientTypeHistoryTestResultsList `protobuf:"bytes,154,rep,name=history_test_results,json=historyTestResults" json:"history_test_results,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *JunosTwampTypeClientType) Reset() {
	*x = JunosTwampTypeClientType{}
	mi := &file_rmopd_render_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosTwampTypeClientType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosTwampTypeClientType) ProtoMessage() {}

func (x *JunosTwampTypeClientType) ProtoReflect() protoreflect.Message {
	mi := &file_rmopd_render_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosTwampTypeClientType.ProtoReflect.Descriptor instead.
func (*JunosTwampTypeClientType) Descriptor() ([]byte, []int) {
	return file_rmopd_render_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *JunosTwampTypeClientType) GetControlConnection() []*JunosTwampTypeClientTypeControlConnectionList {
	if x != nil {
		return x.ControlConnection
	}
	return nil
}

func (x *JunosTwampTypeClientType) GetTestSession() []*JunosTwampTypeClientTypeTestSessionList {
	if x != nil {
		return x.TestSession
	}
	return nil
}

func (x *JunosTwampTypeClientType) GetProbeTestResults() []*JunosTwampTypeClientTypeProbeTestResultsList {
	if x != nil {
		return x.ProbeTestResults
	}
	return nil
}

func (x *JunosTwampTypeClientType) GetHistoryTestResults() []*JunosTwampTypeClientTypeHistoryTestResultsList {
	if x != nil {
		return x.HistoryTestResults
	}
	return nil
}

type JunosTwampTypeServerTypeControlConnectionList struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ConnectionId       *uint32                `protobuf:"varint,51,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	ClientAddress      *string                `protobuf:"bytes,52,opt,name=client_address,json=clientAddress" json:"client_address,omitempty"`
	ClientPort         *uint32                `protobuf:"varint,53,opt,name=client_port,json=clientPort" json:"client_port,omitempty"`
	ServerAddress      *string                `protobuf:"bytes,54,opt,name=server_address,json=serverAddress" json:"server_address,omitempty"`
	ServerPort         *uint32                `protobuf:"varint,55,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	SessionCount       *uint32                `protobuf:"varint,56,opt,name=session_count,json=sessionCount" json:"session_count,omitempty"`
	AuthenticationMode *string                `protobuf:"bytes,57,opt,name=authentication_mode,json=authenticationMode" json:"authentication_mode,omitempty"`
	SessionState       *string                `protobuf:"bytes,58,opt,name=session_state,json=sessionState" json:"session_state,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *JunosTwampTypeServerTypeControlConnectionList) Reset() {
	*x = JunosTwampTypeServerTypeControlConnectionList{}
	mi := &file_rmopd_render_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosTwampTypeServerTypeControlConnectionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosTwampTypeServerTypeControlConnectionList) ProtoMessage() {}

func (x *JunosTwampTypeServerTypeControlConnectionList) ProtoReflect() protoreflect.Message {
	mi := &file_rmopd_render_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosTwampTypeServerTypeControlConnectionList.ProtoReflect.Descriptor instead.
func (*JunosTwampTypeServerTypeControlConnectionList) Descriptor() ([]byte, []int) {
	return file_rmopd_render_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

func (x *JunosTwampTypeServerTypeControlConnectionList) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *JunosTwampTypeServerTypeControlConnectionList) GetClientAddress() string {
	if x != nil && x.ClientAddress != nil {
		return *x.ClientAddress
	}
	return ""
}

func (x *JunosTwampTypeServerTypeControlConnectionList) GetClientPort() uint32 {
	if x != nil && x.ClientPort != nil {
		return *x.ClientPort
	}
	return 0
}

func (x *JunosTwampTypeServerTypeControlConnectionList) GetServerAddress() string {
	if x != nil && x.ServerAddress != nil {
		return *x.ServerAddress
	}
	return ""
}

func (x *JunosTwampTypeServerTypeControlConnectionList) GetServerPort() uint32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

func (x *JunosTwampTypeServerTypeControlConnectionList) GetSessionCount() uint32 {
	if x != nil && x.SessionCount != nil {
		return *x.SessionCount
	}
	return 0
}

func (x *JunosTwampTypeServerTypeControlConnectionList) GetAuthenticationMode() string {
	if x != nil && x.AuthenticationMode != nil {
		return *x.AuthenticationMode
	}
	return ""
}

func (x *JunosTwampTypeServerTypeControlConnectionList) GetSessionState() string {
	if x != nil && x.SessionState != nil {
		return *x.SessionState
	}
	return ""
}

type JunosTwampTypeServerTypeTestSessionList struct {
	state           protoimpl.MessageState                                        `protogen:"open.v1"`
	ConnectionId    *uint32                                                       `protobuf:"varint,51,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	TestSessionInfo []*JunosTwampTypeServerTypeTestSessionListTestSessionInfoList `protobuf:"bytes,151,rep,name=test_session_info,json=testSessionInfo" json:"test_session_info,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *JunosTwampTypeServerTypeTestSessionList) Reset() {
	*x = JunosTwampTypeServerTypeTestSessionList{}
	mi := &file_rmopd_render_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosTwampTypeServerTypeTestSessionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosTwampTypeServerTypeTestSessionList) ProtoMessage() {}

func (x *JunosTwampTypeServerTypeTestSessionList) ProtoReflect() protoreflect.Message {
	mi := &file_rmopd_render_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosTwampTypeServerTypeTestSessionList.ProtoReflect.Descriptor instead.
func (*JunosTwampTypeServerTypeTestSessionList) Descriptor() ([]byte, []int) {
	return file_rmopd_render_proto_rawDescGZIP(), []int{0, 1, 0, 1}
}

func (x *JunosTwampTypeServerTypeTestSessionList) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *JunosTwampTypeServerTypeTestSessionList) GetTestSessionInfo() []*JunosTwampTypeServerTypeTestSessionListTestSessionInfoList {
	if x != nil {
		return x.TestSessionInfo
	}
	return nil
}

type JunosTwampTypeServerTypeTestSessionListTestSessionInfoList struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TestId           *uint32                `protobuf:"varint,51,opt,name=test_id,json=testId" json:"test_id,omitempty"`
	SenderAddress    *string                `protobuf:"bytes,52,opt,name=sender_address,json=senderAddress" json:"sender_address,omitempty"`
	SenderPort       *uint32                `protobuf:"varint,53,opt,name=sender_port,json=senderPort" json:"sender_port,omitempty"`
	ReflectorAddress *string                `protobuf:"bytes,54,opt,name=reflector_address,json=reflectorAddress" json:"reflector_address,omitempty"`
	ReflectorPort    *uint32                `protobuf:"varint,55,opt,name=reflector_port,json=reflectorPort" json:"reflector_port,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *JunosTwampTypeServerTypeTestSessionListTestSessionInfoList) Reset() {
	*x = JunosTwampTypeServerTypeTestSessionListTestSessionInfoList{}
	mi := &file_rmopd_render_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosTwampTypeServerTypeTestSessionListTestSessionInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosTwampTypeServerTypeTestSessionListTestSessionInfoList) ProtoMessage() {}

func (x *JunosTwampTypeServerTypeTestSessionListTestSessionInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_rmopd_render_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosTwampTypeServerTypeTestSessionListTestSessionInfoList.ProtoReflect.Descriptor instead.
func (*JunosTwampTypeServerTypeTestSessionListTestSessionInfoList) Descriptor() ([]byte, []int) {
	return file_rmopd_render_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0}
}

func (x *JunosTwampTypeServerTypeTestSessionListTestSessionInfoList) GetTestId() uint32 {
	if x != nil && x.TestId != nil {
		return *x.TestId
	}
	return 0
}

func (x *JunosTwampTypeServerTypeTestSessionListTestSessionInfoList) GetSenderAddress() string {
	if x != nil && x.SenderAddress != nil {
		return *x.SenderAddress
	}
	return ""
}

func (x *JunosTwampTypeServerTypeTestSessionListTestSessionInfoList) GetSenderPort() uint32 {
	if x != nil && x.SenderPort != nil {
		return *x.SenderPort
	}
	return 0
}

func (x *JunosTwampTypeServerTypeTestSessionListTestSessionInfoList) GetReflectorAddress() string {
	if x != nil && x.ReflectorAddress != nil {
		return *x.ReflectorAddress
	}
	return ""
}

func (x *JunosTwampTypeServerTypeTestSessionListTestSessionInfoList) GetReflectorPort() uint32 {
	if x != nil && x.ReflectorPort != nil {
		return *x.ReflectorPort
	}
	return 0
}

type JunosTwampTypeClientTypeControlConnectionList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ControlName   *string                `protobuf:"bytes,51,opt,name=control_name,json=controlName" json:"control_name,omitempty"`
	ClientAddress *string                `protobuf:"bytes,52,opt,name=client_address,json=clientAddress" json:"client_address,omitempty"`
	ClientPort    *uint32                `protobuf:"varint,53,opt,name=client_port,json=clientPort" json:"client_port,omitempty"`
	ServerAddress *string                `protobuf:"bytes,54,opt,name=server_address,json=serverAddress" json:"server_address,omitempty"`
	ServerPort    *uint32                `protobuf:"varint,55,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	SessionCount  *uint32                `protobuf:"varint,56,opt,name=session_count,json=sessionCount" json:"session_count,omitempty"`
	AuthMode      *string                `protobuf:"bytes,57,opt,name=auth_mode,json=authMode" json:"auth_mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosTwampTypeClientTypeControlConnectionList) Reset() {
	*x = JunosTwampTypeClientTypeControlConnectionList{}
	mi := &file_rmopd_render_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosTwampTypeClientTypeControlConnectionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosTwampTypeClientTypeControlConnectionList) ProtoMessage() {}

func (x *JunosTwampTypeClientTypeControlConnectionList) ProtoReflect() protoreflect.Message {
	mi := &file_rmopd_render_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosTwampTypeClientTypeControlConnectionList.ProtoReflect.Descriptor instead.
func (*JunosTwampTypeClientTypeControlConnectionList) Descriptor() ([]byte, []int) {
	return file_rmopd_render_proto_rawDescGZIP(), []int{0, 1, 1, 0}
}

func (x *JunosTwampTypeClientTypeControlConnectionList) GetControlName() string {
	if x != nil && x.ControlName != nil {
		return *x.ControlName
	}
	return ""
}

func (x *JunosTwampTypeClientTypeControlConnectionList) GetClientAddress() string {
	if x != nil && x.ClientAddress != nil {
		return *x.ClientAddress
	}
	return ""
}

func (x *JunosTwampTypeClientTypeControlConnectionList) GetClientPort() uint32 {
	if x != nil && x.ClientPort != nil {
		return *x.ClientPort
	}
	return 0
}

func (x *JunosTwampTypeClientTypeControlConnectionList) GetServerAddress() string {
	if x != nil && x.ServerAddress != nil {
		return *x.ServerAddress
	}
	return ""
}

func (x *JunosTwampTypeClientTypeControlConnectionList) GetServerPort() uint32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

func (x *JunosTwampTypeClientTypeControlConnectionList) GetSessionCount() uint32 {
	if x != nil && x.SessionCount != nil {
		return *x.SessionCount
	}
	return 0
}

func (x *JunosTwampTypeClientTypeControlConnectionList) GetAuthMode() string {
	if x != nil && x.AuthMode != nil {
		return *x.AuthMode
	}
	return ""
}

type JunosTwampTypeClientTypeTestSessionList struct {
	state           protoimpl.MessageState                                        `protogen:"open.v1"`
	ControlName     *string                                                       `protobuf:"bytes,51,opt,name=control_name,json=controlName" json:"control_name,omitempty"`
	ClientAddress   *string                                                       `protobuf:"bytes,52,opt,name=client_address,json=clientAddress" json:"client_address,omitempty"`
	ClientPort      *uint32                                                       `protobuf:"varint,53,opt,name=client_port,json=clientPort" json:"client_port,omitempty"`
	ServerAddress   *string                                                       `protobuf:"bytes,54,opt,name=server_address,json=serverAddress" json:"server_address,omitempty"`
	ServerPort      *uint32                                                       `protobuf:"varint,55,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	SessionCount    *uint32                                                       `protobuf:"varint,56,opt,name=session_count,json=sessionCount" json:"session_count,omitempty"`
	AuthMode        *string                                                       `protobuf:"bytes,57,opt,name=auth_mode,json=authMode" json:"auth_mode,omitempty"`
	TestSessionInfo []*JunosTwampTypeClientTypeTestSessionListTestSessionInfoList `protobuf:"bytes,151,rep,name=test_session_info,json=testSessionInfo" json:"test_session_info,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *JunosTwampTypeClientTypeTestSessionList) Reset() {
	*x = JunosTwampTypeClientTypeTestSessionList{}
	mi := &file_rmopd_render_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosTwampTypeClientTypeTestSessionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosTwampTypeClientTypeTestSessionList) ProtoMessage() {}

func (x *JunosTwampTypeClientTypeTestSessionList) ProtoReflect() protoreflect.Message {
	mi := &file_rmopd_render_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosTwampTypeClientTypeTestSessionList.ProtoReflect.Descriptor instead.
func (*JunosTwampTypeClientTypeTestSessionList) Descriptor() ([]byte, []int) {
	return file_rmopd_render_proto_rawDescGZIP(), []int{0, 1, 1, 1}
}

func (x *JunosTwampTypeClientTypeTestSessionList) GetControlName() string {
	if x != nil && x.ControlName != nil {
		return *x.ControlName
	}
	return ""
}

func (x *JunosTwampTypeClientTypeTestSessionList) GetClientAddress() string {
	if x != nil && x.ClientAddress != nil {
		return *x.ClientAddress
	}
	return ""
}

func (x *JunosTwampTypeClientTypeTestSessionList) GetClientPort() uint32 {
	if x != nil && x.ClientPort != nil {
		return *x.ClientPort
	}
	return 0
}

func (x *JunosTwampTypeClientTypeTestSessionList) GetServerAddress() string {
	if x != nil && x.ServerAddress != nil {
		return *x.ServerAddress
	}
	return ""
}

func (x *JunosTwampTypeClientTypeTestSessionList) GetServerPort() uint32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

func (x *JunosTwampTypeClientTypeTestSessionList) GetSessionCount() uint32 {
	if x != nil && x.SessionCount != nil {
		return *x.SessionCount
	}
	return 0
}

func (x *JunosTwampTypeClientTypeTestSessionList) GetAuthMode() string {
	if x != nil && x.AuthMode != nil {
		return *x.AuthMode
	}
	return ""
}

func (x *JunosTwampTypeClientTypeTestSessionList) GetTestSessionInfo() []*JunosTwampTypeClientTypeTestSessionListTestSessionInfoList {
	if x != nil {
		return x.TestSessionInfo
	}
	return nil
}

type JunosTwampTypeClientTypeProbeTestResultsList struct {
	state                   protoimpl.MessageState                                                     `protogen:"open.v1"`
	Owner                   *string                                                                    `protobuf:"bytes,51,opt,name=owner" json:"owner,omitempty"`
	TestName                *string                                                                    `protobuf:"bytes,52,opt,name=test_name,json=testName" json:"test_name,omitempty"`
	DestinationInterface    *string                                                                    `protobuf:"bytes,53,opt,name=destination_interface,json=destinationInterface" json:"destination_interface,omitempty"`
	TestSize                *uint32                                                                    `protobuf:"varint,54,opt,name=test_size,json=testSize" json:"test_size,omitempty"`
	ClientAddress           *string                                                                    `protobuf:"bytes,55,opt,name=client_address,json=clientAddress" json:"client_address,omitempty"`
	ClientPort              *uint32                                                                    `protobuf:"varint,56,opt,name=client_port,json=clientPort" json:"client_port,omitempty"`
	SenderAddress           *string                                                                    `protobuf:"bytes,57,opt,name=sender_address,json=senderAddress" json:"sender_address,omitempty"`
	SenderPort              *uint32                                                                    `protobuf:"varint,58,opt,name=sender_port,json=senderPort" json:"sender_port,omitempty"`
	ReflectorAddress        *string                                                                    `protobuf:"bytes,59,opt,name=reflector_address,json=reflectorAddress" json:"reflector_address,omitempty"`
	ReflectorPort           *uint32                                                                    `protobuf:"varint,60,opt,name=reflector_port,json=reflectorPort" json:"reflector_port,omitempty"`
	ServerAddress           *string                                                                    `protobuf:"bytes,61,opt,name=server_address,json=serverAddress" json:"server_address,omitempty"`
	ServerPort              *uint32                                                                    `protobuf:"varint,62,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	LossThreshTotal         *uint32                                                                    `protobuf:"varint,63,opt,name=loss_thresh_total,json=lossThreshTotal" json:"loss_thresh_total,omitempty"`
	LossThreshSucc          *uint32                                                                    `protobuf:"varint,64,opt,name=loss_thresh_succ,json=lossThreshSucc" json:"loss_thresh_succ,omitempty"`
	RttThresh               *uint32                                                                    `protobuf:"varint,65,opt,name=rtt_thresh,json=rttThresh" json:"rtt_thresh,omitempty"`
	RttJitterThresh         *uint32                                                                    `protobuf:"varint,66,opt,name=rtt_jitter_thresh,json=rttJitterThresh" json:"rtt_jitter_thresh,omitempty"`
	RttStddevThresh         *uint32                                                                    `protobuf:"varint,67,opt,name=rtt_stddev_thresh,json=rttStddevThresh" json:"rtt_stddev_thresh,omitempty"`
	IgrThresh               *uint32                                                                    `protobuf:"varint,68,opt,name=igr_thresh,json=igrThresh" json:"igr_thresh,omitempty"`
	IgrJitterThresh         *uint32                                                                    `protobuf:"varint,69,opt,name=igr_jitter_thresh,json=igrJitterThresh" json:"igr_jitter_thresh,omitempty"`
	IgrStddevThresh         *uint32                                                                    `protobuf:"varint,70,opt,name=igr_stddev_thresh,json=igrStddevThresh" json:"igr_stddev_thresh,omitempty"`
	EgrThresh               *uint32                                                                    `protobuf:"varint,71,opt,name=egr_thresh,json=egrThresh" json:"egr_thresh,omitempty"`
	EgrJitterThresh         *uint32                                                                    `protobuf:"varint,72,opt,name=egr_jitter_thresh,json=egrJitterThresh" json:"egr_jitter_thresh,omitempty"`
	EgrStddevThresh         *uint32                                                                    `protobuf:"varint,73,opt,name=egr_stddev_thresh,json=egrStddevThresh" json:"egr_stddev_thresh,omitempty"`
	RoutingInstanceName     *string                                                                    `protobuf:"bytes,74,opt,name=routing_instance_name,json=routingInstanceName" json:"routing_instance_name,omitempty"`
	ProbeTestsHwTsErr       *JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType         `protobuf:"bytes,151,opt,name=probe_tests_hw_ts_err,json=probeTestsHwTsErr" json:"probe_tests_hw_ts_err,omitempty"`
	ProbeSingleResults      *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType        `protobuf:"bytes,152,opt,name=probe_single_results,json=probeSingleResults" json:"probe_single_results,omitempty"`
	ProbeTestGenericResults []*JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList `protobuf:"bytes,153,rep,name=probe_test_generic_results,json=probeTestGenericResults" json:"probe_test_generic_results,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *JunosTwampTypeClientTypeProbeTestResultsList) Reset() {
	*x = JunosTwampTypeClientTypeProbeTestResultsList{}
	mi := &file_rmopd_render_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosTwampTypeClientTypeProbeTestResultsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosTwampTypeClientTypeProbeTestResultsList) ProtoMessage() {}

func (x *JunosTwampTypeClientTypeProbeTestResultsList) ProtoReflect() protoreflect.Message {
	mi := &file_rmopd_render_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosTwampTypeClientTypeProbeTestResultsList.ProtoReflect.Descriptor instead.
func (*JunosTwampTypeClientTypeProbeTestResultsList) Descriptor() ([]byte, []int) {
	return file_rmopd_render_proto_rawDescGZIP(), []int{0, 1, 1, 2}
}

func (x *JunosTwampTypeClientTypeProbeTestResultsList) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *JunosTwampTypeClientTypeProbeTestResultsList) GetTestName() string {
	if x != nil && x.TestName != nil {
		return *x.TestName
	}
	return ""
}

func (x *JunosTwampTypeClientTypeProbeTestResultsList) GetDestinationInterface() string {
	if x != nil && x.DestinationInterface != nil {
		return *x.DestinationInterface
	}
	return ""
}

func (x *JunosTwampTypeClientTypeProbeTestResultsList) GetTestSize() uint32 {
	if x != nil && x.TestSize != nil {
		return *x.TestSize
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsList) GetClientAddress() string {
	if x != nil && x.ClientAddress != nil {
		return *x.ClientAddress
	}
	return ""
}

func (x *JunosTwampTypeClientTypeProbeTestResultsList) GetClientPort() uint32 {
	if x != nil && x.ClientPort != nil {
		return *x.ClientPort
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsList) GetSenderAddress() string {
	if x != nil && x.SenderAddress != nil {
		return *x.SenderAddress
	}
	return ""
}

func (x *JunosTwampTypeClientTypeProbeTestResultsList) GetSenderPort() uint32 {
	if x != nil && x.SenderPort != nil {
		return *x.SenderPort
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsList) GetReflectorAddress() string {
	if x != nil && x.ReflectorAddress != nil {
		return *x.ReflectorAddress
	}
	return ""
}

func (x *JunosTwampTypeClientTypeProbeTestResultsList) GetReflectorPort() uint32 {
	if x != nil && x.ReflectorPort != nil {
		return *x.ReflectorPort
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsList) GetServerAddress() string {
	if x != nil && x.ServerAddress != nil {
		return *x.ServerAddress
	}
	return ""
}

func (x *JunosTwampTypeClientTypeProbeTestResultsList) GetServerPort() uint32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsList) GetLossThreshTotal() uint32 {
	if x != nil && x.LossThreshTotal != nil {
		return *x.LossThreshTotal
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsList) GetLossThreshSucc() uint32 {
	if x != nil && x.LossThreshSucc != nil {
		return *x.LossThreshSucc
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsList) GetRttThresh() uint32 {
	if x != nil && x.RttThresh != nil {
		return *x.RttThresh
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsList) GetRttJitterThresh() uint32 {
	if x != nil && x.RttJitterThresh != nil {
		return *x.RttJitterThresh
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsList) GetRttStddevThresh() uint32 {
	if x != nil && x.RttStddevThresh != nil {
		return *x.RttStddevThresh
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsList) GetIgrThresh() uint32 {
	if x != nil && x.IgrThresh != nil {
		return *x.IgrThresh
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsList) GetIgrJitterThresh() uint32 {
	if x != nil && x.IgrJitterThresh != nil {
		return *x.IgrJitterThresh
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsList) GetIgrStddevThresh() uint32 {
	if x != nil && x.IgrStddevThresh != nil {
		return *x.IgrStddevThresh
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsList) GetEgrThresh() uint32 {
	if x != nil && x.EgrThresh != nil {
		return *x.EgrThresh
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsList) GetEgrJitterThresh() uint32 {
	if x != nil && x.EgrJitterThresh != nil {
		return *x.EgrJitterThresh
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsList) GetEgrStddevThresh() uint32 {
	if x != nil && x.EgrStddevThresh != nil {
		return *x.EgrStddevThresh
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsList) GetRoutingInstanceName() string {
	if x != nil && x.RoutingInstanceName != nil {
		return *x.RoutingInstanceName
	}
	return ""
}

func (x *JunosTwampTypeClientTypeProbeTestResultsList) GetProbeTestsHwTsErr() *JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType {
	if x != nil {
		return x.ProbeTestsHwTsErr
	}
	return nil
}

func (x *JunosTwampTypeClientTypeProbeTestResultsList) GetProbeSingleResults() *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType {
	if x != nil {
		return x.ProbeSingleResults
	}
	return nil
}

func (x *JunosTwampTypeClientTypeProbeTestResultsList) GetProbeTestGenericResults() []*JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList {
	if x != nil {
		return x.ProbeTestGenericResults
	}
	return nil
}

type JunosTwampTypeClientTypeHistoryTestResultsList struct {
	state                    protoimpl.MessageState                                                        `protogen:"open.v1"`
	HistorySingleTestResults []*JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList `protobuf:"bytes,151,rep,name=history_single_test_results,json=historySingleTestResults" json:"history_single_test_results,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsList) Reset() {
	*x = JunosTwampTypeClientTypeHistoryTestResultsList{}
	mi := &file_rmopd_render_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosTwampTypeClientTypeHistoryTestResultsList) ProtoMessage() {}

func (x *JunosTwampTypeClientTypeHistoryTestResultsList) ProtoReflect() protoreflect.Message {
	mi := &file_rmopd_render_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosTwampTypeClientTypeHistoryTestResultsList.ProtoReflect.Descriptor instead.
func (*JunosTwampTypeClientTypeHistoryTestResultsList) Descriptor() ([]byte, []int) {
	return file_rmopd_render_proto_rawDescGZIP(), []int{0, 1, 1, 3}
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsList) GetHistorySingleTestResults() []*JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList {
	if x != nil {
		return x.HistorySingleTestResults
	}
	return nil
}

type JunosTwampTypeClientTypeTestSessionListTestSessionInfoList struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SessionName      *string                `protobuf:"bytes,51,opt,name=session_name,json=sessionName" json:"session_name,omitempty"`
	SenderAddress    *string                `protobuf:"bytes,52,opt,name=sender_address,json=senderAddress" json:"sender_address,omitempty"`
	SenderPort       *uint32                `protobuf:"varint,53,opt,name=sender_port,json=senderPort" json:"sender_port,omitempty"`
	ReflectorAddress *string                `protobuf:"bytes,54,opt,name=reflector_address,json=reflectorAddress" json:"reflector_address,omitempty"`
	ReflectorPort    *uint32                `protobuf:"varint,55,opt,name=reflector_port,json=reflectorPort" json:"reflector_port,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *JunosTwampTypeClientTypeTestSessionListTestSessionInfoList) Reset() {
	*x = JunosTwampTypeClientTypeTestSessionListTestSessionInfoList{}
	mi := &file_rmopd_render_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosTwampTypeClientTypeTestSessionListTestSessionInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosTwampTypeClientTypeTestSessionListTestSessionInfoList) ProtoMessage() {}

func (x *JunosTwampTypeClientTypeTestSessionListTestSessionInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_rmopd_render_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosTwampTypeClientTypeTestSessionListTestSessionInfoList.ProtoReflect.Descriptor instead.
func (*JunosTwampTypeClientTypeTestSessionListTestSessionInfoList) Descriptor() ([]byte, []int) {
	return file_rmopd_render_proto_rawDescGZIP(), []int{0, 1, 1, 1, 0}
}

func (x *JunosTwampTypeClientTypeTestSessionListTestSessionInfoList) GetSessionName() string {
	if x != nil && x.SessionName != nil {
		return *x.SessionName
	}
	return ""
}

func (x *JunosTwampTypeClientTypeTestSessionListTestSessionInfoList) GetSenderAddress() string {
	if x != nil && x.SenderAddress != nil {
		return *x.SenderAddress
	}
	return ""
}

func (x *JunosTwampTypeClientTypeTestSessionListTestSessionInfoList) GetSenderPort() uint32 {
	if x != nil && x.SenderPort != nil {
		return *x.SenderPort
	}
	return 0
}

func (x *JunosTwampTypeClientTypeTestSessionListTestSessionInfoList) GetReflectorAddress() string {
	if x != nil && x.ReflectorAddress != nil {
		return *x.ReflectorAddress
	}
	return ""
}

func (x *JunosTwampTypeClientTypeTestSessionListTestSessionInfoList) GetReflectorPort() uint32 {
	if x != nil && x.ReflectorPort != nil {
		return *x.ReflectorPort
	}
	return 0
}

type JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	InvalidClientRecvTsCntr    *uint32                `protobuf:"varint,51,opt,name=invalid_client_recv_ts_cntr,json=invalidClientRecvTsCntr" json:"invalid_client_recv_ts_cntr,omitempty"`
	InvalidClientNotsCntr      *uint32                `protobuf:"varint,52,opt,name=invalid_client_nots_cntr,json=invalidClientNotsCntr" json:"invalid_client_nots_cntr,omitempty"`
	InvalidServerSendTsCntr    *uint32                `protobuf:"varint,53,opt,name=invalid_server_send_ts_cntr,json=invalidServerSendTsCntr" json:"invalid_server_send_ts_cntr,omitempty"`
	InvalidServerSpentTimeCntr *uint32                `protobuf:"varint,54,opt,name=invalid_server_spent_time_cntr,json=invalidServerSpentTimeCntr" json:"invalid_server_spent_time_cntr,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType) Reset() {
	*x = JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType{}
	mi := &file_rmopd_render_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType) ProtoMessage() {}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType) ProtoReflect() protoreflect.Message {
	mi := &file_rmopd_render_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType.ProtoReflect.Descriptor instead.
func (*JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType) Descriptor() ([]byte, []int) {
	return file_rmopd_render_proto_rawDescGZIP(), []int{0, 1, 1, 2, 0}
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType) GetInvalidClientRecvTsCntr() uint32 {
	if x != nil && x.InvalidClientRecvTsCntr != nil {
		return *x.InvalidClientRecvTsCntr
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType) GetInvalidClientNotsCntr() uint32 {
	if x != nil && x.InvalidClientNotsCntr != nil {
		return *x.InvalidClientNotsCntr
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType) GetInvalidServerSendTsCntr() uint32 {
	if x != nil && x.InvalidServerSendTsCntr != nil {
		return *x.InvalidServerSendTsCntr
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType) GetInvalidServerSpentTimeCntr() uint32 {
	if x != nil && x.InvalidServerSpentTimeCntr != nil {
		return *x.InvalidServerSpentTimeCntr
	}
	return 0
}

type JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	ProbeTime                   *string                `protobuf:"bytes,51,opt,name=probe_time,json=probeTime" json:"probe_time,omitempty"`
	ProbeSentTime               *string                `protobuf:"bytes,52,opt,name=probe_sent_time,json=probeSentTime" json:"probe_sent_time,omitempty"`
	ProbeStatus                 *string                `protobuf:"bytes,53,opt,name=probe_status,json=probeStatus" json:"probe_status,omitempty"`
	HardwareTimestampStatus     *string                `protobuf:"bytes,54,opt,name=hardware_timestamp_status,json=hardwareTimestampStatus" json:"hardware_timestamp_status,omitempty"`
	Rtt                         *uint32                `protobuf:"varint,55,opt,name=rtt" json:"rtt,omitempty"`
	Egress                      *uint32                `protobuf:"varint,56,opt,name=egress" json:"egress,omitempty"`
	Ingress                     *uint32                `protobuf:"varint,57,opt,name=ingress" json:"ingress,omitempty"`
	EgressJitter                *int32                 `protobuf:"varint,58,opt,name=egress_jitter,json=egressJitter" json:"egress_jitter,omitempty"`
	IngressJitter               *int32                 `protobuf:"varint,59,opt,name=ingress_jitter,json=ingressJitter" json:"ingress_jitter,omitempty"`
	RoundTripJitter             *int32                 `protobuf:"varint,60,opt,name=round_trip_jitter,json=roundTripJitter" json:"round_trip_jitter,omitempty"`
	EgressInterarrivalJitter    *int32                 `protobuf:"varint,61,opt,name=egress_interarrival_jitter,json=egressInterarrivalJitter" json:"egress_interarrival_jitter,omitempty"`
	IngressInterarrivalJitter   *int32                 `protobuf:"varint,62,opt,name=ingress_interarrival_jitter,json=ingressInterarrivalJitter" json:"ingress_interarrival_jitter,omitempty"`
	RoundTripInterarrivalJitter *int32                 `protobuf:"varint,63,opt,name=round_trip_interarrival_jitter,json=roundTripInterarrivalJitter" json:"round_trip_interarrival_jitter,omitempty"`
	HttpStatus                  *uint32                `protobuf:"varint,64,opt,name=http_status,json=httpStatus" json:"http_status,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) Reset() {
	*x = JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType{}
	mi := &file_rmopd_render_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) ProtoMessage() {}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) ProtoReflect() protoreflect.Message {
	mi := &file_rmopd_render_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType.ProtoReflect.Descriptor instead.
func (*JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) Descriptor() ([]byte, []int) {
	return file_rmopd_render_proto_rawDescGZIP(), []int{0, 1, 1, 2, 1}
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) GetProbeTime() string {
	if x != nil && x.ProbeTime != nil {
		return *x.ProbeTime
	}
	return ""
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) GetProbeSentTime() string {
	if x != nil && x.ProbeSentTime != nil {
		return *x.ProbeSentTime
	}
	return ""
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) GetProbeStatus() string {
	if x != nil && x.ProbeStatus != nil {
		return *x.ProbeStatus
	}
	return ""
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) GetHardwareTimestampStatus() string {
	if x != nil && x.HardwareTimestampStatus != nil {
		return *x.HardwareTimestampStatus
	}
	return ""
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) GetRtt() uint32 {
	if x != nil && x.Rtt != nil {
		return *x.Rtt
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) GetEgress() uint32 {
	if x != nil && x.Egress != nil {
		return *x.Egress
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) GetIngress() uint32 {
	if x != nil && x.Ingress != nil {
		return *x.Ingress
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) GetEgressJitter() int32 {
	if x != nil && x.EgressJitter != nil {
		return *x.EgressJitter
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) GetIngressJitter() int32 {
	if x != nil && x.IngressJitter != nil {
		return *x.IngressJitter
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) GetRoundTripJitter() int32 {
	if x != nil && x.RoundTripJitter != nil {
		return *x.RoundTripJitter
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) GetEgressInterarrivalJitter() int32 {
	if x != nil && x.EgressInterarrivalJitter != nil {
		return *x.EgressInterarrivalJitter
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) GetIngressInterarrivalJitter() int32 {
	if x != nil && x.IngressInterarrivalJitter != nil {
		return *x.IngressInterarrivalJitter
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) GetRoundTripInterarrivalJitter() int32 {
	if x != nil && x.RoundTripInterarrivalJitter != nil {
		return *x.RoundTripInterarrivalJitter
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) GetHttpStatus() uint32 {
	if x != nil && x.HttpStatus != nil {
		return *x.HttpStatus
	}
	return 0
}

type JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList struct {
	state                        protoimpl.MessageState                                                                                     `protogen:"open.v1"`
	ResultsScope                 *string                                                                                                    `protobuf:"bytes,51,opt,name=results_scope,json=resultsScope" json:"results_scope,omitempty"`
	ProbesSent                   *uint32                                                                                                    `protobuf:"varint,52,opt,name=probes_sent,json=probesSent" json:"probes_sent,omitempty"`
	ProbeResponses               *uint32                                                                                                    `protobuf:"varint,53,opt,name=probe_responses,json=probeResponses" json:"probe_responses,omitempty"`
	LossPercentage               *uint32                                                                                                    `protobuf:"varint,54,opt,name=loss_percentage,json=lossPercentage" json:"loss_percentage,omitempty"`
	LastTestTime                 *string                                                                                                    `protobuf:"bytes,55,opt,name=last_test_time,json=lastTestTime" json:"last_test_time,omitempty"`
	ProbeTestGenericMeasurements []*JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList `protobuf:"bytes,151,rep,name=probe_test_generic_measurements,json=probeTestGenericMeasurements" json:"probe_test_generic_measurements,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList) Reset() {
	*x = JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList{}
	mi := &file_rmopd_render_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList) ProtoMessage() {}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList) ProtoReflect() protoreflect.Message {
	mi := &file_rmopd_render_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList.ProtoReflect.Descriptor instead.
func (*JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList) Descriptor() ([]byte, []int) {
	return file_rmopd_render_proto_rawDescGZIP(), []int{0, 1, 1, 2, 2}
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList) GetResultsScope() string {
	if x != nil && x.ResultsScope != nil {
		return *x.ResultsScope
	}
	return ""
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList) GetProbesSent() uint32 {
	if x != nil && x.ProbesSent != nil {
		return *x.ProbesSent
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList) GetProbeResponses() uint32 {
	if x != nil && x.ProbeResponses != nil {
		return *x.ProbeResponses
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList) GetLossPercentage() uint32 {
	if x != nil && x.LossPercentage != nil {
		return *x.LossPercentage
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList) GetLastTestTime() string {
	if x != nil && x.LastTestTime != nil {
		return *x.LastTestTime
	}
	return ""
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList) GetProbeTestGenericMeasurements() []*JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList {
	if x != nil {
		return x.ProbeTestGenericMeasurements
	}
	return nil
}

type JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	ProbeMeasurementType *string                `protobuf:"bytes,51,opt,name=probe_measurement_type,json=probeMeasurementType" json:"probe_measurement_type,omitempty"`
	Samples              *uint32                `protobuf:"varint,52,opt,name=samples" json:"samples,omitempty"`
	MinDelay             *uint32                `protobuf:"varint,53,opt,name=min_delay,json=minDelay" json:"min_delay,omitempty"`
	MaxDelay             *uint32                `protobuf:"varint,54,opt,name=max_delay,json=maxDelay" json:"max_delay,omitempty"`
	AvgDelay             *uint32                `protobuf:"varint,55,opt,name=avg_delay,json=avgDelay" json:"avg_delay,omitempty"`
	JitterDelay          *uint32                `protobuf:"varint,56,opt,name=jitter_delay,json=jitterDelay" json:"jitter_delay,omitempty"`
	StddevDelay          *uint64                `protobuf:"varint,57,opt,name=stddev_delay,json=stddevDelay" json:"stddev_delay,omitempty"`
	SumDelay             *uint64                `protobuf:"varint,58,opt,name=sum_delay,json=sumDelay" json:"sum_delay,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) Reset() {
	*x = JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList{}
	mi := &file_rmopd_render_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) ProtoMessage() {
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) ProtoReflect() protoreflect.Message {
	mi := &file_rmopd_render_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList.ProtoReflect.Descriptor instead.
func (*JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) Descriptor() ([]byte, []int) {
	return file_rmopd_render_proto_rawDescGZIP(), []int{0, 1, 1, 2, 2, 0}
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) GetProbeMeasurementType() string {
	if x != nil && x.ProbeMeasurementType != nil {
		return *x.ProbeMeasurementType
	}
	return ""
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) GetSamples() uint32 {
	if x != nil && x.Samples != nil {
		return *x.Samples
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) GetMinDelay() uint32 {
	if x != nil && x.MinDelay != nil {
		return *x.MinDelay
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) GetMaxDelay() uint32 {
	if x != nil && x.MaxDelay != nil {
		return *x.MaxDelay
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) GetAvgDelay() uint32 {
	if x != nil && x.AvgDelay != nil {
		return *x.AvgDelay
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) GetJitterDelay() uint32 {
	if x != nil && x.JitterDelay != nil {
		return *x.JitterDelay
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) GetStddevDelay() uint64 {
	if x != nil && x.StddevDelay != nil {
		return *x.StddevDelay
	}
	return 0
}

func (x *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) GetSumDelay() uint64 {
	if x != nil && x.SumDelay != nil {
		return *x.SumDelay
	}
	return 0
}

type JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList struct {
	state                protoimpl.MessageState                                                                            `protogen:"open.v1"`
	Owner                *string                                                                                           `protobuf:"bytes,51,opt,name=owner" json:"owner,omitempty"`
	TestName             *string                                                                                           `protobuf:"bytes,52,opt,name=test_name,json=testName" json:"test_name,omitempty"`
	DestinationInterface *string                                                                                           `protobuf:"bytes,53,opt,name=destination_interface,json=destinationInterface" json:"destination_interface,omitempty"`
	TestSize             *uint32                                                                                           `protobuf:"varint,54,opt,name=test_size,json=testSize" json:"test_size,omitempty"`
	ClientAddress        *string                                                                                           `protobuf:"bytes,55,opt,name=client_address,json=clientAddress" json:"client_address,omitempty"`
	ClientPort           *uint32                                                                                           `protobuf:"varint,56,opt,name=client_port,json=clientPort" json:"client_port,omitempty"`
	SenderAddress        *string                                                                                           `protobuf:"bytes,57,opt,name=sender_address,json=senderAddress" json:"sender_address,omitempty"`
	SenderPort           *uint32                                                                                           `protobuf:"varint,58,opt,name=sender_port,json=senderPort" json:"sender_port,omitempty"`
	ReflectorAddress     *string                                                                                           `protobuf:"bytes,59,opt,name=reflector_address,json=reflectorAddress" json:"reflector_address,omitempty"`
	ReflectorPort        *uint32                                                                                           `protobuf:"varint,60,opt,name=reflector_port,json=reflectorPort" json:"reflector_port,omitempty"`
	ServerAddress        *string                                                                                           `protobuf:"bytes,61,opt,name=server_address,json=serverAddress" json:"server_address,omitempty"`
	ServerPort           *uint32                                                                                           `protobuf:"varint,62,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	LossThreshTotal      *uint32                                                                                           `protobuf:"varint,63,opt,name=loss_thresh_total,json=lossThreshTotal" json:"loss_thresh_total,omitempty"`
	LossThreshSucc       *uint32                                                                                           `protobuf:"varint,64,opt,name=loss_thresh_succ,json=lossThreshSucc" json:"loss_thresh_succ,omitempty"`
	RttThresh            *uint32                                                                                           `protobuf:"varint,65,opt,name=rtt_thresh,json=rttThresh" json:"rtt_thresh,omitempty"`
	RttJitterThresh      *uint32                                                                                           `protobuf:"varint,66,opt,name=rtt_jitter_thresh,json=rttJitterThresh" json:"rtt_jitter_thresh,omitempty"`
	RttStddevThresh      *uint32                                                                                           `protobuf:"varint,67,opt,name=rtt_stddev_thresh,json=rttStddevThresh" json:"rtt_stddev_thresh,omitempty"`
	IgrThresh            *uint32                                                                                           `protobuf:"varint,68,opt,name=igr_thresh,json=igrThresh" json:"igr_thresh,omitempty"`
	IgrJitterThresh      *uint32                                                                                           `protobuf:"varint,69,opt,name=igr_jitter_thresh,json=igrJitterThresh" json:"igr_jitter_thresh,omitempty"`
	IgrStddevThresh      *uint32                                                                                           `protobuf:"varint,70,opt,name=igr_stddev_thresh,json=igrStddevThresh" json:"igr_stddev_thresh,omitempty"`
	EgrThresh            *uint32                                                                                           `protobuf:"varint,71,opt,name=egr_thresh,json=egrThresh" json:"egr_thresh,omitempty"`
	EgrJitterThresh      *uint32                                                                                           `protobuf:"varint,72,opt,name=egr_jitter_thresh,json=egrJitterThresh" json:"egr_jitter_thresh,omitempty"`
	EgrStddevThresh      *uint32                                                                                           `protobuf:"varint,73,opt,name=egr_stddev_thresh,json=egrStddevThresh" json:"egr_stddev_thresh,omitempty"`
	RoutingInstanceName  *string                                                                                           `protobuf:"bytes,74,opt,name=routing_instance_name,json=routingInstanceName" json:"routing_instance_name,omitempty"`
	ProbeSingleResults   *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType `protobuf:"bytes,151,opt,name=probe_single_results,json=probeSingleResults" json:"probe_single_results,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) Reset() {
	*x = JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList{}
	mi := &file_rmopd_render_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) ProtoMessage() {}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) ProtoReflect() protoreflect.Message {
	mi := &file_rmopd_render_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList.ProtoReflect.Descriptor instead.
func (*JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) Descriptor() ([]byte, []int) {
	return file_rmopd_render_proto_rawDescGZIP(), []int{0, 1, 1, 3, 0}
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetTestName() string {
	if x != nil && x.TestName != nil {
		return *x.TestName
	}
	return ""
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetDestinationInterface() string {
	if x != nil && x.DestinationInterface != nil {
		return *x.DestinationInterface
	}
	return ""
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetTestSize() uint32 {
	if x != nil && x.TestSize != nil {
		return *x.TestSize
	}
	return 0
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetClientAddress() string {
	if x != nil && x.ClientAddress != nil {
		return *x.ClientAddress
	}
	return ""
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetClientPort() uint32 {
	if x != nil && x.ClientPort != nil {
		return *x.ClientPort
	}
	return 0
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetSenderAddress() string {
	if x != nil && x.SenderAddress != nil {
		return *x.SenderAddress
	}
	return ""
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetSenderPort() uint32 {
	if x != nil && x.SenderPort != nil {
		return *x.SenderPort
	}
	return 0
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetReflectorAddress() string {
	if x != nil && x.ReflectorAddress != nil {
		return *x.ReflectorAddress
	}
	return ""
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetReflectorPort() uint32 {
	if x != nil && x.ReflectorPort != nil {
		return *x.ReflectorPort
	}
	return 0
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetServerAddress() string {
	if x != nil && x.ServerAddress != nil {
		return *x.ServerAddress
	}
	return ""
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetServerPort() uint32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetLossThreshTotal() uint32 {
	if x != nil && x.LossThreshTotal != nil {
		return *x.LossThreshTotal
	}
	return 0
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetLossThreshSucc() uint32 {
	if x != nil && x.LossThreshSucc != nil {
		return *x.LossThreshSucc
	}
	return 0
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetRttThresh() uint32 {
	if x != nil && x.RttThresh != nil {
		return *x.RttThresh
	}
	return 0
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetRttJitterThresh() uint32 {
	if x != nil && x.RttJitterThresh != nil {
		return *x.RttJitterThresh
	}
	return 0
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetRttStddevThresh() uint32 {
	if x != nil && x.RttStddevThresh != nil {
		return *x.RttStddevThresh
	}
	return 0
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetIgrThresh() uint32 {
	if x != nil && x.IgrThresh != nil {
		return *x.IgrThresh
	}
	return 0
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetIgrJitterThresh() uint32 {
	if x != nil && x.IgrJitterThresh != nil {
		return *x.IgrJitterThresh
	}
	return 0
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetIgrStddevThresh() uint32 {
	if x != nil && x.IgrStddevThresh != nil {
		return *x.IgrStddevThresh
	}
	return 0
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetEgrThresh() uint32 {
	if x != nil && x.EgrThresh != nil {
		return *x.EgrThresh
	}
	return 0
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetEgrJitterThresh() uint32 {
	if x != nil && x.EgrJitterThresh != nil {
		return *x.EgrJitterThresh
	}
	return 0
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetEgrStddevThresh() uint32 {
	if x != nil && x.EgrStddevThresh != nil {
		return *x.EgrStddevThresh
	}
	return 0
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetRoutingInstanceName() string {
	if x != nil && x.RoutingInstanceName != nil {
		return *x.RoutingInstanceName
	}
	return ""
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetProbeSingleResults() *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType {
	if x != nil {
		return x.ProbeSingleResults
	}
	return nil
}

type JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	ProbeTime                   *string                `protobuf:"bytes,51,opt,name=probe_time,json=probeTime" json:"probe_time,omitempty"`
	ProbeSentTime               *string                `protobuf:"bytes,52,opt,name=probe_sent_time,json=probeSentTime" json:"probe_sent_time,omitempty"`
	ProbeStatus                 *string                `protobuf:"bytes,53,opt,name=probe_status,json=probeStatus" json:"probe_status,omitempty"`
	HardwareTimestampStatus     *string                `protobuf:"bytes,54,opt,name=hardware_timestamp_status,json=hardwareTimestampStatus" json:"hardware_timestamp_status,omitempty"`
	Rtt                         *uint32                `protobuf:"varint,55,opt,name=rtt" json:"rtt,omitempty"`
	Egress                      *uint32                `protobuf:"varint,56,opt,name=egress" json:"egress,omitempty"`
	Ingress                     *uint32                `protobuf:"varint,57,opt,name=ingress" json:"ingress,omitempty"`
	EgressJitter                *int32                 `protobuf:"varint,58,opt,name=egress_jitter,json=egressJitter" json:"egress_jitter,omitempty"`
	IngressJitter               *int32                 `protobuf:"varint,59,opt,name=ingress_jitter,json=ingressJitter" json:"ingress_jitter,omitempty"`
	RoundTripJitter             *int32                 `protobuf:"varint,60,opt,name=round_trip_jitter,json=roundTripJitter" json:"round_trip_jitter,omitempty"`
	EgressInterarrivalJitter    *int32                 `protobuf:"varint,61,opt,name=egress_interarrival_jitter,json=egressInterarrivalJitter" json:"egress_interarrival_jitter,omitempty"`
	IngressInterarrivalJitter   *int32                 `protobuf:"varint,62,opt,name=ingress_interarrival_jitter,json=ingressInterarrivalJitter" json:"ingress_interarrival_jitter,omitempty"`
	RoundTripInterarrivalJitter *int32                 `protobuf:"varint,63,opt,name=round_trip_interarrival_jitter,json=roundTripInterarrivalJitter" json:"round_trip_interarrival_jitter,omitempty"`
	HttpStatus                  *uint32                `protobuf:"varint,64,opt,name=http_status,json=httpStatus" json:"http_status,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) Reset() {
	*x = JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType{}
	mi := &file_rmopd_render_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) ProtoMessage() {
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) ProtoReflect() protoreflect.Message {
	mi := &file_rmopd_render_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType.ProtoReflect.Descriptor instead.
func (*JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) Descriptor() ([]byte, []int) {
	return file_rmopd_render_proto_rawDescGZIP(), []int{0, 1, 1, 3, 0, 0}
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetProbeTime() string {
	if x != nil && x.ProbeTime != nil {
		return *x.ProbeTime
	}
	return ""
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetProbeSentTime() string {
	if x != nil && x.ProbeSentTime != nil {
		return *x.ProbeSentTime
	}
	return ""
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetProbeStatus() string {
	if x != nil && x.ProbeStatus != nil {
		return *x.ProbeStatus
	}
	return ""
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetHardwareTimestampStatus() string {
	if x != nil && x.HardwareTimestampStatus != nil {
		return *x.HardwareTimestampStatus
	}
	return ""
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetRtt() uint32 {
	if x != nil && x.Rtt != nil {
		return *x.Rtt
	}
	return 0
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetEgress() uint32 {
	if x != nil && x.Egress != nil {
		return *x.Egress
	}
	return 0
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetIngress() uint32 {
	if x != nil && x.Ingress != nil {
		return *x.Ingress
	}
	return 0
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetEgressJitter() int32 {
	if x != nil && x.EgressJitter != nil {
		return *x.EgressJitter
	}
	return 0
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetIngressJitter() int32 {
	if x != nil && x.IngressJitter != nil {
		return *x.IngressJitter
	}
	return 0
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetRoundTripJitter() int32 {
	if x != nil && x.RoundTripJitter != nil {
		return *x.RoundTripJitter
	}
	return 0
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetEgressInterarrivalJitter() int32 {
	if x != nil && x.EgressInterarrivalJitter != nil {
		return *x.EgressInterarrivalJitter
	}
	return 0
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetIngressInterarrivalJitter() int32 {
	if x != nil && x.IngressInterarrivalJitter != nil {
		return *x.IngressInterarrivalJitter
	}
	return 0
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetRoundTripInterarrivalJitter() int32 {
	if x != nil && x.RoundTripInterarrivalJitter != nil {
		return *x.RoundTripInterarrivalJitter
	}
	return 0
}

func (x *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetHttpStatus() uint32 {
	if x != nil && x.HttpStatus != nil {
		return *x.HttpStatus
	}
	return 0
}

var file_rmopd_render_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*Junos)(nil),
		Field:         74,
		Name:          "jnpr_junos_ext",
		Tag:           "bytes,74,opt,name=jnpr_junos_ext",
		Filename:      "rmopd_render.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional junos jnpr_junos_ext = 74;
	E_JnprJunosExt = &file_rmopd_render_proto_extTypes[0]
)

var File_rmopd_render_proto protoreflect.FileDescriptor

var file_rmopd_render_proto_rawDesc = string([]byte{
	0x0a, 0x12, 0x72, 0x6d, 0x6f, 0x70, 0x64, 0x5f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x74, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9f, 0x63, 0x0a, 0x05, 0x6a, 0x75,
	0x6e, 0x6f, 0x73, 0x12, 0x22, 0x0a, 0x03, 0x72, 0x70, 0x6d, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x6d, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x03, 0x72, 0x70, 0x6d, 0x12, 0x28, 0x0a, 0x05, 0x74, 0x77, 0x61, 0x6d, 0x70,
	0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x2e,
	0x74, 0x77, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x77, 0x61, 0x6d,
	0x70, 0x1a, 0xb2, 0x29, 0x0a, 0x08, 0x72, 0x70, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x48,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x2e, 0x72,
	0x70, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x0f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x6e, 0x6f,
	0x73, 0x2e, 0x72, 0x70, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x98,
	0x17, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x69, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x97, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x10,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x1a, 0x96, 0x16, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x15,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x3a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x69, 0x63, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x65,
	0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x68, 0x74, 0x74,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x74, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x72, 0x74, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x74,
	0x74, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x74, 0x74, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x74, 0x74, 0x5f, 0x73, 0x74,
	0x64, 0x64, 0x65, 0x76, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x18, 0x40, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x72, 0x74, 0x74, 0x53, 0x74, 0x64, 0x64, 0x65, 0x76, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x67, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x18, 0x41, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x67, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x67, 0x72, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x67,
	0x72, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x12, 0x2a, 0x0a,
	0x11, 0x69, 0x67, 0x72, 0x5f, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x67, 0x72, 0x53, 0x74, 0x64,
	0x64, 0x65, 0x76, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x67, 0x72,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65,
	0x67, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x67, 0x72, 0x5f,
	0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x18, 0x45, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x67, 0x72, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x67, 0x72, 0x5f, 0x73, 0x74, 0x64, 0x64,
	0x65, 0x76, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x65, 0x67, 0x72, 0x53, 0x74, 0x64, 0x64, 0x65, 0x76, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x12, 0x88, 0x01, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x5f, 0x68, 0x77, 0x5f, 0x74, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x55, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x6d, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x68, 0x77, 0x5f, 0x74, 0x73, 0x5f,
	0x65, 0x72, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x73, 0x48, 0x77, 0x54, 0x73, 0x45, 0x72, 0x72, 0x12, 0x87, 0x01, 0x0a, 0x14,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6a, 0x75,
	0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x73, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x99, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x6a, 0x75,
	0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x1a, 0x95, 0x02, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x5f, 0x68, 0x77, 0x5f, 0x74, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x3c, 0x0a, 0x1b, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x74, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x72, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x76, 0x54, 0x73, 0x43, 0x6e, 0x74, 0x72, 0x12, 0x37, 0x0a,
	0x18, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x6f, 0x74, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x72, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x74, 0x73, 0x43, 0x6e, 0x74, 0x72, 0x12, 0x3c, 0x0a, 0x1b, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x73,
	0x5f, 0x63, 0x6e, 0x74, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x73,
	0x43, 0x6e, 0x74, 0x72, 0x12, 0x42, 0x0a, 0x1e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x63, 0x6e, 0x74, 0x72, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x43, 0x6e, 0x74, 0x72, 0x1a, 0xe1, 0x04, 0x0a, 0x19, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x73,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3a, 0x0a, 0x19, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x36, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x17, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x74, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x72, 0x74, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4a,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72,
	0x69, 0x70, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x1a, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f,
	0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c,
	0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x1b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x6a,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c,
	0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x1e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x74, 0x72, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61,
	0x6c, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x69, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x72,
	0x72, 0x69, 0x76, 0x61, 0x6c, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xea, 0x05, 0x0a,
	0x1f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x6c, 0x6f, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0xc7, 0x01, 0x0a, 0x1f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x7f, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x6d, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x1c, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x65, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a,
	0xb7, 0x02, 0x0a, 0x24, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52,
	0x14, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x67,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76,
	0x67, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6a, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x64,
	0x64, 0x65, 0x76, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x39, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x75, 0x6d, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x73, 0x75, 0x6d, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x1a, 0xe5, 0x0e, 0x0a, 0x14, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x71, 0x0a, 0x14, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x6d, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x12, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xd9, 0x0d, 0x0a, 0x19, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x9f, 0x01, 0x0a, 0x1b, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x6a, 0x75, 0x6e,
	0x6f, 0x73, 0x2e, 0x72, 0x70, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x18, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x99, 0x0c, 0x0a, 0x20, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x39, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x69, 0x63, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x74, 0x74,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72,
	0x74, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x74, 0x74, 0x5f,
	0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x18, 0x3f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x74, 0x74, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x74, 0x74, 0x5f, 0x73, 0x74, 0x64, 0x64,
	0x65, 0x76, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x72, 0x74, 0x74, 0x53, 0x74, 0x64, 0x64, 0x65, 0x76, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x67, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x18, 0x41,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x67, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x12,
	0x2a, 0x0a, 0x11, 0x69, 0x67, 0x72, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x67, 0x72, 0x4a,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x69,
	0x67, 0x72, 0x5f, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x18, 0x43, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x67, 0x72, 0x53, 0x74, 0x64, 0x64, 0x65,
	0x76, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x67, 0x72, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x67, 0x72,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x67, 0x72, 0x5f, 0x6a, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x18, 0x45, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x65, 0x67, 0x72, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x67, 0x72, 0x5f, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65,
	0x67, 0x72, 0x53, 0x74, 0x64, 0x64, 0x65, 0x76, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x12, 0xac,
	0x01, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x79,
	0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xe1, 0x04,
	0x0a, 0x19, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x74, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x72, 0x74, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x38, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4a, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x69, 0x70, 0x5f,
	0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x54, 0x72, 0x69, 0x70, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a,
	0x1a, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x72, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x3d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x18, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x72,
	0x72, 0x69, 0x76, 0x61, 0x6c, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x1b, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x72, 0x72, 0x69,
	0x76, 0x61, 0x6c, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x19, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x72,
	0x72, 0x69, 0x76, 0x61, 0x6c, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x1e, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x3f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x1b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x69, 0x70, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x1a, 0xd2, 0x01, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x57, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6a, 0x75, 0x6e,
	0x6f, 0x73, 0x2e, 0x72, 0x70, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x1a, 0x6a, 0x0a, 0x13, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x73, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0x92, 0x39, 0x0a, 0x0a, 0x74, 0x77, 0x61, 0x6d, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x2e, 0x74,
	0x77, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x36, 0x0a,
	0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x2e, 0x74, 0x77, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x06, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0xaa, 0x07, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x65, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x97, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x2e, 0x74, 0x77, 0x61, 0x6d, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0c,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x98, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x2e, 0x74, 0x77, 0x61, 0x6d,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x1a, 0xd0, 0x02, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f,
	0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x8b, 0x03, 0x0a, 0x11, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x73, 0x0a, 0x11, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x97, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x2e, 0x74, 0x77, 0x61, 0x6d, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x74, 0x65, 0x73, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0xd4, 0x01, 0x0a, 0x16,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x06,
	0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2b,
	0x0a, 0x11, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x66, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f,
	0x72, 0x74, 0x1a, 0xe6, 0x30, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x65, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x2e, 0x74, 0x77, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0c, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x98, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x2e, 0x74, 0x77, 0x61, 0x6d, 0x70, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x64,
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x99, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6a, 0x75,
	0x6e, 0x6f, 0x73, 0x2e, 0x74, 0x77, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x6a, 0x0a, 0x14, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x9a, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x2e, 0x74, 0x77, 0x61, 0x6d,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x12, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x1a, 0x95, 0x02, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x75, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x1a, 0xe5, 0x04, 0x0a, 0x11, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x28,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x73, 0x0a, 0x11, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x2e, 0x74,
	0x77, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0f,
	0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a,
	0xde, 0x01, 0x0a, 0x16, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0c, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x0a, 0x11,
	0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x66,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x72, 0x74,
	0x1a, 0xbe, 0x17, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x33, 0x0a, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x39, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65,
	0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x3e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x6f, 0x73, 0x73, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x73,
	0x73, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x18, 0x40, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x6f, 0x73, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x53,
	0x75, 0x63, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x74, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x74, 0x74, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x74, 0x74, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72,
	0x74, 0x74, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x12, 0x2a,
	0x0a, 0x11, 0x72, 0x74, 0x74, 0x5f, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x74, 0x74, 0x53, 0x74,
	0x64, 0x64, 0x65, 0x76, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x67,
	0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x69, 0x67, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x67, 0x72,
	0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x18, 0x45,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x67, 0x72, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x67, 0x72, 0x5f, 0x73, 0x74, 0x64,
	0x64, 0x65, 0x76, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x69, 0x67, 0x72, 0x53, 0x74, 0x64, 0x64, 0x65, 0x76, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x67, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x18,
	0x47, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x67, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x12, 0x2a, 0x0a, 0x11, 0x65, 0x67, 0x72, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x67, 0x72,
	0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x11,
	0x65, 0x67, 0x72, 0x5f, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x67, 0x72, 0x53, 0x74, 0x64, 0x64,
	0x65, 0x76, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x83, 0x01, 0x0a,
	0x15, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x68, 0x77, 0x5f,
	0x74, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e,
	0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x2e, 0x74, 0x77, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x5f, 0x68, 0x77, 0x5f, 0x74, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x11, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x48, 0x77, 0x54, 0x73, 0x45,
	0x72, 0x72, 0x12, 0x82, 0x01, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x73, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x2e, 0x74, 0x77, 0x61, 0x6d, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f,
	0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x93, 0x01, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x99, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e,
	0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x2e, 0x74, 0x77, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x65, 0x73, 0x74, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x95, 0x02,
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x68, 0x77,
	0x5f, 0x74, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x1b,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x63, 0x76, 0x5f, 0x74, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x17, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x63, 0x76, 0x54, 0x73, 0x43, 0x6e, 0x74, 0x72, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74,
	0x73, 0x5f, 0x63, 0x6e, 0x74, 0x72, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x73, 0x43,
	0x6e, 0x74, 0x72, 0x12, 0x3c, 0x0a, 0x1b, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x73, 0x5f, 0x63, 0x6e,
	0x74, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x73, 0x43, 0x6e, 0x74,
	0x72, 0x12, 0x42, 0x0a, 0x1e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63,
	0x6e, 0x74, 0x72, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x43, 0x6e, 0x74, 0x72, 0x1a, 0xe1, 0x04, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f,
	0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a,
	0x19, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x74, 0x74,
	0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x72, 0x74, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4a, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6a, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x69, 0x70, 0x4a,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x1a, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x6a, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x4a, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x1b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x6a, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x4a, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x1e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x69,
	0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x6a,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x54, 0x72, 0x69, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x72, 0x72, 0x69, 0x76,
	0x61, 0x6c, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x68,
	0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xe5, 0x05, 0x0a, 0x1f, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x6f,
	0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x37,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0xc2, 0x01, 0x0a, 0x1f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x7a, 0x2e,
	0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x2e, 0x74, 0x77, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x1c, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0xb7, 0x02, 0x0a, 0x24, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x3b, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x37,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x67, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x5f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x18, 0x39, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x6d, 0x5f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x6d, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x1a, 0x87, 0x0f, 0x0a, 0x19, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x98, 0x01, 0x0a, 0x1b, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x2e, 0x74,
	0x77, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x52, 0x18, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xce, 0x0d, 0x0a, 0x20, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x3e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x6f, 0x73,
	0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x10,
	0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x73, 0x75, 0x63, 0x63,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x6f, 0x73, 0x73, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x53, 0x75, 0x63, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x74, 0x74, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x74, 0x74, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x74, 0x74, 0x5f, 0x6a, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x72, 0x74, 0x74, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x74, 0x74, 0x5f, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x74,
	0x74, 0x53, 0x74, 0x64, 0x64, 0x65, 0x76, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x67, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x18, 0x44, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x69, 0x67, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x11,
	0x69, 0x67, 0x72, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x67, 0x72, 0x4a, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x67, 0x72, 0x5f,
	0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x67, 0x72, 0x53, 0x74, 0x64, 0x64, 0x65, 0x76, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x67, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x67, 0x72, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x67, 0x72, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x65, 0x67, 0x72, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x12,
	0x2a, 0x0a, 0x11, 0x65, 0x67, 0x72, 0x5f, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x67, 0x72, 0x53,
	0x74, 0x64, 0x64, 0x65, 0x76, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x12, 0x32, 0x0a, 0x15, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0xa5, 0x01, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x72, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x2e, 0x74, 0x77, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f,
	0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xe1, 0x04, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x73, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x3a, 0x0a, 0x19, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x74, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x72, 0x74, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x18, 0x3a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4a, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x69,
	0x70, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x1a, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x6a,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x4a,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x1b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x6a, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x4a,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x1e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74,
	0x72, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c,
	0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x69, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x72, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x74,
	0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x68, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x45, 0x0a, 0x0e, 0x6a,
	0x6e, 0x70, 0x72, 0x5f, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x12, 0x17, 0x2e,
	0x4a, 0x75, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x6a,
	0x75, 0x6e, 0x6f, 0x73, 0x52, 0x0c, 0x6a, 0x6e, 0x70, 0x72, 0x4a, 0x75, 0x6e, 0x6f, 0x73, 0x45,
	0x78, 0x74, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65,
})

var (
	file_rmopd_render_proto_rawDescOnce sync.Once
	file_rmopd_render_proto_rawDescData []byte
)

func file_rmopd_render_proto_rawDescGZIP() []byte {
	file_rmopd_render_proto_rawDescOnce.Do(func() {
		file_rmopd_render_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_rmopd_render_proto_rawDesc), len(file_rmopd_render_proto_rawDesc)))
	})
	return file_rmopd_render_proto_rawDescData
}

var file_rmopd_render_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_rmopd_render_proto_goTypes = []any{
	(*Junos)(nil),                                            // 0: junos
	(*JunosRpmType)(nil),                                     // 1: junos.rpm_type
	(*JunosTwampType)(nil),                                   // 2: junos.twamp_type
	(*JunosRpmTypeProbeResultsType)(nil),                     // 3: junos.rpm_type.probe_results_type
	(*JunosRpmTypeHistoryResultsType)(nil),                   // 4: junos.rpm_type.history_results_type
	(*JunosRpmTypeServerType)(nil),                           // 5: junos.rpm_type.server_type
	(*JunosRpmTypeProbeResultsTypeProbeTestResultsList)(nil), // 6: junos.rpm_type.probe_results_type.probe_test_results_list
	(*JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType)(nil),                                       // 7: junos.rpm_type.probe_results_type.probe_test_results_list.probe_tests_hw_ts_err_type
	(*JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType)(nil),                                      // 8: junos.rpm_type.probe_results_type.probe_test_results_list.probe_single_results_type
	(*JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList)(nil),                                 // 9: junos.rpm_type.probe_results_type.probe_test_results_list.probe_test_generic_results_list
	(*JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList)(nil), // 10: junos.rpm_type.probe_results_type.probe_test_results_list.probe_test_generic_results_list.probe_test_generic_measurements_list
	(*JunosRpmTypeHistoryResultsTypeHistoryTestResultsList)(nil),                                                        // 11: junos.rpm_type.history_results_type.history_test_results_list
	(*JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList)(nil),                            // 12: junos.rpm_type.history_results_type.history_test_results_list.history_single_test_results_list
	(*JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType)(nil),      // 13: junos.rpm_type.history_results_type.history_test_results_list.history_single_test_results_list.probe_single_results_type
	(*JunosRpmTypeServerTypeActiveServersList)(nil),                                                                     // 14: junos.rpm_type.server_type.active_servers_list
	(*JunosTwampTypeServerType)(nil),                                                                                    // 15: junos.twamp_type.server_type
	(*JunosTwampTypeClientType)(nil),                                                                                    // 16: junos.twamp_type.client_type
	(*JunosTwampTypeServerTypeControlConnectionList)(nil),                                                               // 17: junos.twamp_type.server_type.control_connection_list
	(*JunosTwampTypeServerTypeTestSessionList)(nil),                                                                     // 18: junos.twamp_type.server_type.test_session_list
	(*JunosTwampTypeServerTypeTestSessionListTestSessionInfoList)(nil),                                                  // 19: junos.twamp_type.server_type.test_session_list.test_session_info_list
	(*JunosTwampTypeClientTypeControlConnectionList)(nil),                                                               // 20: junos.twamp_type.client_type.control_connection_list
	(*JunosTwampTypeClientTypeTestSessionList)(nil),                                                                     // 21: junos.twamp_type.client_type.test_session_list
	(*JunosTwampTypeClientTypeProbeTestResultsList)(nil),                                                                // 22: junos.twamp_type.client_type.probe_test_results_list
	(*JunosTwampTypeClientTypeHistoryTestResultsList)(nil),                                                              // 23: junos.twamp_type.client_type.history_test_results_list
	(*JunosTwampTypeClientTypeTestSessionListTestSessionInfoList)(nil),                                                  // 24: junos.twamp_type.client_type.test_session_list.test_session_info_list
	(*JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType)(nil),                                           // 25: junos.twamp_type.client_type.probe_test_results_list.probe_tests_hw_ts_err_type
	(*JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType)(nil),                                          // 26: junos.twamp_type.client_type.probe_test_results_list.probe_single_results_type
	(*JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList)(nil),                                     // 27: junos.twamp_type.client_type.probe_test_results_list.probe_test_generic_results_list
	(*JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList)(nil),     // 28: junos.twamp_type.client_type.probe_test_results_list.probe_test_generic_results_list.probe_test_generic_measurements_list
	(*JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList)(nil),                                  // 29: junos.twamp_type.client_type.history_test_results_list.history_single_test_results_list
	(*JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType)(nil),            // 30: junos.twamp_type.client_type.history_test_results_list.history_single_test_results_list.probe_single_results_type
	(*JuniperNetworksSensors)(nil),                                                                                      // 31: JuniperNetworksSensors
}
var file_rmopd_render_proto_depIdxs = []int32{
	1,  // 0: junos.rpm:type_name -> junos.rpm_type
	2,  // 1: junos.twamp:type_name -> junos.twamp_type
	3,  // 2: junos.rpm_type.probe_results:type_name -> junos.rpm_type.probe_results_type
	4,  // 3: junos.rpm_type.history_results:type_name -> junos.rpm_type.history_results_type
	5,  // 4: junos.rpm_type.server:type_name -> junos.rpm_type.server_type
	15, // 5: junos.twamp_type.server:type_name -> junos.twamp_type.server_type
	16, // 6: junos.twamp_type.client:type_name -> junos.twamp_type.client_type
	6,  // 7: junos.rpm_type.probe_results_type.probe_test_results:type_name -> junos.rpm_type.probe_results_type.probe_test_results_list
	11, // 8: junos.rpm_type.history_results_type.history_test_results:type_name -> junos.rpm_type.history_results_type.history_test_results_list
	14, // 9: junos.rpm_type.server_type.active_servers:type_name -> junos.rpm_type.server_type.active_servers_list
	7,  // 10: junos.rpm_type.probe_results_type.probe_test_results_list.probe_tests_hw_ts_err:type_name -> junos.rpm_type.probe_results_type.probe_test_results_list.probe_tests_hw_ts_err_type
	8,  // 11: junos.rpm_type.probe_results_type.probe_test_results_list.probe_single_results:type_name -> junos.rpm_type.probe_results_type.probe_test_results_list.probe_single_results_type
	9,  // 12: junos.rpm_type.probe_results_type.probe_test_results_list.probe_test_generic_results:type_name -> junos.rpm_type.probe_results_type.probe_test_results_list.probe_test_generic_results_list
	10, // 13: junos.rpm_type.probe_results_type.probe_test_results_list.probe_test_generic_results_list.probe_test_generic_measurements:type_name -> junos.rpm_type.probe_results_type.probe_test_results_list.probe_test_generic_results_list.probe_test_generic_measurements_list
	12, // 14: junos.rpm_type.history_results_type.history_test_results_list.history_single_test_results:type_name -> junos.rpm_type.history_results_type.history_test_results_list.history_single_test_results_list
	13, // 15: junos.rpm_type.history_results_type.history_test_results_list.history_single_test_results_list.probe_single_results:type_name -> junos.rpm_type.history_results_type.history_test_results_list.history_single_test_results_list.probe_single_results_type
	17, // 16: junos.twamp_type.server_type.control_connection:type_name -> junos.twamp_type.server_type.control_connection_list
	18, // 17: junos.twamp_type.server_type.test_session:type_name -> junos.twamp_type.server_type.test_session_list
	20, // 18: junos.twamp_type.client_type.control_connection:type_name -> junos.twamp_type.client_type.control_connection_list
	21, // 19: junos.twamp_type.client_type.test_session:type_name -> junos.twamp_type.client_type.test_session_list
	22, // 20: junos.twamp_type.client_type.probe_test_results:type_name -> junos.twamp_type.client_type.probe_test_results_list
	23, // 21: junos.twamp_type.client_type.history_test_results:type_name -> junos.twamp_type.client_type.history_test_results_list
	19, // 22: junos.twamp_type.server_type.test_session_list.test_session_info:type_name -> junos.twamp_type.server_type.test_session_list.test_session_info_list
	24, // 23: junos.twamp_type.client_type.test_session_list.test_session_info:type_name -> junos.twamp_type.client_type.test_session_list.test_session_info_list
	25, // 24: junos.twamp_type.client_type.probe_test_results_list.probe_tests_hw_ts_err:type_name -> junos.twamp_type.client_type.probe_test_results_list.probe_tests_hw_ts_err_type
	26, // 25: junos.twamp_type.client_type.probe_test_results_list.probe_single_results:type_name -> junos.twamp_type.client_type.probe_test_results_list.probe_single_results_type
	27, // 26: junos.twamp_type.client_type.probe_test_results_list.probe_test_generic_results:type_name -> junos.twamp_type.client_type.probe_test_results_list.probe_test_generic_results_list
	29, // 27: junos.twamp_type.client_type.history_test_results_list.history_single_test_results:type_name -> junos.twamp_type.client_type.history_test_results_list.history_single_test_results_list
	28, // 28: junos.twamp_type.client_type.probe_test_results_list.probe_test_generic_results_list.probe_test_generic_measurements:type_name -> junos.twamp_type.client_type.probe_test_results_list.probe_test_generic_results_list.probe_test_generic_measurements_list
	30, // 29: junos.twamp_type.client_type.history_test_results_list.history_single_test_results_list.probe_single_results:type_name -> junos.twamp_type.client_type.history_test_results_list.history_single_test_results_list.probe_single_results_type
	31, // 30: jnpr_junos_ext:extendee -> JuniperNetworksSensors
	0,  // 31: jnpr_junos_ext:type_name -> junos
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	31, // [31:32] is the sub-list for extension type_name
	30, // [30:31] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_rmopd_render_proto_init() }
func file_rmopd_render_proto_init() {
	if File_rmopd_render_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_rmopd_render_proto_rawDesc), len(file_rmopd_render_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_rmopd_render_proto_goTypes,
		DependencyIndexes: file_rmopd_render_proto_depIdxs,
		MessageInfos:      file_rmopd_render_proto_msgTypes,
		ExtensionInfos:    file_rmopd_render_proto_extTypes,
	}.Build()
	File_rmopd_render_proto = out.File
	file_rmopd_render_proto_goTypes = nil
	file_rmopd_render_proto_depIdxs = nil
}
