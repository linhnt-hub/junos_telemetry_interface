// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: bbe-smgd_sub_mgmt_network_stats_oc.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JunosNetworkStats struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	System        *JunosNetworkStatsSystemType `protobuf:"bytes,151,opt,name=system" json:"system,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosNetworkStats) Reset() {
	*x = JunosNetworkStats{}
	mi := &file_bbe_smgd_sub_mgmt_network_stats_oc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosNetworkStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosNetworkStats) ProtoMessage() {}

func (x *JunosNetworkStats) ProtoReflect() protoreflect.Message {
	mi := &file_bbe_smgd_sub_mgmt_network_stats_oc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosNetworkStats.ProtoReflect.Descriptor instead.
func (*JunosNetworkStats) Descriptor() ([]byte, []int) {
	return file_bbe_smgd_sub_mgmt_network_stats_oc_proto_rawDescGZIP(), []int{0}
}

func (x *JunosNetworkStats) GetSystem() *JunosNetworkStatsSystemType {
	if x != nil {
		return x.System
	}
	return nil
}

type JunosNetworkStatsSystemType struct {
	state                protoimpl.MessageState                               `protogen:"open.v1"`
	SubscriberManagement *JunosNetworkStatsSystemTypeSubscriberManagementType `protobuf:"bytes,151,opt,name=subscriber_management,json=subscriberManagement" json:"subscriber_management,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *JunosNetworkStatsSystemType) Reset() {
	*x = JunosNetworkStatsSystemType{}
	mi := &file_bbe_smgd_sub_mgmt_network_stats_oc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosNetworkStatsSystemType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosNetworkStatsSystemType) ProtoMessage() {}

func (x *JunosNetworkStatsSystemType) ProtoReflect() protoreflect.Message {
	mi := &file_bbe_smgd_sub_mgmt_network_stats_oc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosNetworkStatsSystemType.ProtoReflect.Descriptor instead.
func (*JunosNetworkStatsSystemType) Descriptor() ([]byte, []int) {
	return file_bbe_smgd_sub_mgmt_network_stats_oc_proto_rawDescGZIP(), []int{0, 0}
}

func (x *JunosNetworkStatsSystemType) GetSubscriberManagement() *JunosNetworkStatsSystemTypeSubscriberManagementType {
	if x != nil {
		return x.SubscriberManagement
	}
	return nil
}

type JunosNetworkStatsSystemTypeSubscriberManagementType struct {
	state         protoimpl.MessageState                                          `protogen:"open.v1"`
	Uplanes       *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesType `protobuf:"bytes,151,opt,name=uplanes" json:"uplanes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementType) Reset() {
	*x = JunosNetworkStatsSystemTypeSubscriberManagementType{}
	mi := &file_bbe_smgd_sub_mgmt_network_stats_oc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosNetworkStatsSystemTypeSubscriberManagementType) ProtoMessage() {}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementType) ProtoReflect() protoreflect.Message {
	mi := &file_bbe_smgd_sub_mgmt_network_stats_oc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosNetworkStatsSystemTypeSubscriberManagementType.ProtoReflect.Descriptor instead.
func (*JunosNetworkStatsSystemTypeSubscriberManagementType) Descriptor() ([]byte, []int) {
	return file_bbe_smgd_sub_mgmt_network_stats_oc_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementType) GetUplanes() *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesType {
	if x != nil {
		return x.Uplanes
	}
	return nil
}

type JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesType struct {
	state         protoimpl.MessageState                                                      `protogen:"open.v1"`
	Uplane        []*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneList `protobuf:"bytes,151,rep,name=uplane" json:"uplane,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesType) Reset() {
	*x = JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesType{}
	mi := &file_bbe_smgd_sub_mgmt_network_stats_oc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesType) ProtoMessage() {}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesType) ProtoReflect() protoreflect.Message {
	mi := &file_bbe_smgd_sub_mgmt_network_stats_oc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesType.ProtoReflect.Descriptor instead.
func (*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesType) Descriptor() ([]byte, []int) {
	return file_bbe_smgd_sub_mgmt_network_stats_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesType) GetUplane() []*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneList {
	if x != nil {
		return x.Uplane
	}
	return nil
}

type JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneList struct {
	state         protoimpl.MessageState                                                             `protogen:"open.v1"`
	UplaneId      *uint32                                                                            `protobuf:"varint,51,opt,name=uplane_id,json=uplaneId" json:"uplane_id,omitempty"`
	Infra         *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraType `protobuf:"bytes,151,opt,name=infra" json:"infra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneList) Reset() {
	*x = JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneList{}
	mi := &file_bbe_smgd_sub_mgmt_network_stats_oc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneList) ProtoMessage() {}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneList) ProtoReflect() protoreflect.Message {
	mi := &file_bbe_smgd_sub_mgmt_network_stats_oc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneList.ProtoReflect.Descriptor instead.
func (*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneList) Descriptor() ([]byte, []int) {
	return file_bbe_smgd_sub_mgmt_network_stats_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneList) GetUplaneId() uint32 {
	if x != nil && x.UplaneId != nil {
		return *x.UplaneId
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneList) GetInfra() *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraType {
	if x != nil {
		return x.Infra
	}
	return nil
}

type JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraType struct {
	state         protoimpl.MessageState                                                                        `protogen:"open.v1"`
	Network       *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkType `protobuf:"bytes,151,opt,name=network" json:"network,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraType) Reset() {
	*x = JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraType{}
	mi := &file_bbe_smgd_sub_mgmt_network_stats_oc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraType) ProtoMessage() {
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraType) ProtoReflect() protoreflect.Message {
	mi := &file_bbe_smgd_sub_mgmt_network_stats_oc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraType.ProtoReflect.Descriptor instead.
func (*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraType) Descriptor() ([]byte, []int) {
	return file_bbe_smgd_sub_mgmt_network_stats_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0}
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraType) GetNetwork() *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkType {
	if x != nil {
		return x.Network
	}
	return nil
}

type JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkType struct {
	state         protoimpl.MessageState                                                                                 `protogen:"open.v1"`
	Io            *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType    `protobuf:"bytes,151,opt,name=io" json:"io,omitempty"`
	Dhcp          *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDhcpType  `protobuf:"bytes,152,opt,name=dhcp" json:"dhcp,omitempty"`
	Ppp           *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType   `protobuf:"bytes,153,opt,name=ppp" json:"ppp,omitempty"`
	Pppoe         *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppoeType `protobuf:"bytes,154,opt,name=pppoe" json:"pppoe,omitempty"`
	Dvlan         *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDvlanType `protobuf:"bytes,156,opt,name=dvlan" json:"dvlan,omitempty"`
	L2Tp          *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType  `protobuf:"bytes,155,opt,name=l2tp" json:"l2tp,omitempty"`
	Hag           *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType   `protobuf:"bytes,157,opt,name=hag" json:"hag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkType) Reset() {
	*x = JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkType{}
	mi := &file_bbe_smgd_sub_mgmt_network_stats_oc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkType) ProtoMessage() {
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkType) ProtoReflect() protoreflect.Message {
	mi := &file_bbe_smgd_sub_mgmt_network_stats_oc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkType.ProtoReflect.Descriptor instead.
func (*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkType) Descriptor() ([]byte, []int) {
	return file_bbe_smgd_sub_mgmt_network_stats_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0}
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkType) GetIo() *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType {
	if x != nil {
		return x.Io
	}
	return nil
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkType) GetDhcp() *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDhcpType {
	if x != nil {
		return x.Dhcp
	}
	return nil
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkType) GetPpp() *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType {
	if x != nil {
		return x.Ppp
	}
	return nil
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkType) GetPppoe() *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppoeType {
	if x != nil {
		return x.Pppoe
	}
	return nil
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkType) GetDvlan() *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDvlanType {
	if x != nil {
		return x.Dvlan
	}
	return nil
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkType) GetL2Tp() *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType {
	if x != nil {
		return x.L2Tp
	}
	return nil
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkType) GetHag() *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType {
	if x != nil {
		return x.Hag
	}
	return nil
}

type JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType struct {
	state                            protoimpl.MessageState `protogen:"open.v1"`
	L2RxPacketsCnt                   *uint64                `protobuf:"varint,51,opt,name=l2_rx_packets_cnt,json=l2RxPacketsCnt" json:"l2_rx_packets_cnt,omitempty"`
	L2RxPacketsFailed                *uint64                `protobuf:"varint,52,opt,name=l2_rx_packets_failed,json=l2RxPacketsFailed" json:"l2_rx_packets_failed,omitempty"`
	L2RxMalformedCnt                 *uint64                `protobuf:"varint,53,opt,name=l2_rx_malformed_cnt,json=l2RxMalformedCnt" json:"l2_rx_malformed_cnt,omitempty"`
	L2RxIfdInvalid                   *uint64                `protobuf:"varint,54,opt,name=l2_rx_ifd_invalid,json=l2RxIfdInvalid" json:"l2_rx_ifd_invalid,omitempty"`
	L2RxIflInvalid                   *uint64                `protobuf:"varint,55,opt,name=l2_rx_ifl_invalid,json=l2RxIflInvalid" json:"l2_rx_ifl_invalid,omitempty"`
	L2RxNoIffCnt                     *uint64                `protobuf:"varint,56,opt,name=l2_rx_no_iff_cnt,json=l2RxNoIffCnt" json:"l2_rx_no_iff_cnt,omitempty"`
	L2RxIfCreateFailed               *uint64                `protobuf:"varint,57,opt,name=l2_rx_if_create_failed,json=l2RxIfCreateFailed" json:"l2_rx_if_create_failed,omitempty"`
	L2BbeIoRcvL3UnknownAddressFamily *uint64                `protobuf:"varint,58,opt,name=l2_bbe_io_rcv_l3_unknown_address_family,json=l2BbeIoRcvL3UnknownAddressFamily" json:"l2_bbe_io_rcv_l3_unknown_address_family,omitempty"`
	L2RxUnsupportedInetProtocol      *uint64                `protobuf:"varint,59,opt,name=l2_rx_unsupported_inet_protocol,json=l2RxUnsupportedInetProtocol" json:"l2_rx_unsupported_inet_protocol,omitempty"`
	L2RxUnsupportedInet6Protocol     *uint64                `protobuf:"varint,60,opt,name=l2_rx_unsupported_inet6_protocol,json=l2RxUnsupportedInet6Protocol" json:"l2_rx_unsupported_inet6_protocol,omitempty"`
	L2RxUnsupportedUdpProtocol       *uint64                `protobuf:"varint,61,opt,name=l2_rx_unsupported_udp_protocol,json=l2RxUnsupportedUdpProtocol" json:"l2_rx_unsupported_udp_protocol,omitempty"`
	L2RxUnsupportedPuntAf            *uint64                `protobuf:"varint,62,opt,name=l2_rx_unsupported_punt_af,json=l2RxUnsupportedPuntAf" json:"l2_rx_unsupported_punt_af,omitempty"`
	L2RxV4DataPathPuntPkt            *uint64                `protobuf:"varint,63,opt,name=l2_rx_v4_data_path_punt_pkt,json=l2RxV4DataPathPuntPkt" json:"l2_rx_v4_data_path_punt_pkt,omitempty"`
	L2RxV4DataPathPuntPktDrop        *uint64                `protobuf:"varint,64,opt,name=l2_rx_v4_data_path_punt_pkt_drop,json=l2RxV4DataPathPuntPktDrop" json:"l2_rx_v4_data_path_punt_pkt_drop,omitempty"`
	L2RxV6DataPathPuntPkt            *uint64                `protobuf:"varint,65,opt,name=l2_rx_v6_data_path_punt_pkt,json=l2RxV6DataPathPuntPkt" json:"l2_rx_v6_data_path_punt_pkt,omitempty"`
	L2RxV6DataPathPuntPktDrop        *uint64                `protobuf:"varint,66,opt,name=l2_rx_v6_data_path_punt_pkt_drop,json=l2RxV6DataPathPuntPktDrop" json:"l2_rx_v6_data_path_punt_pkt_drop,omitempty"`
	L2TxPacketsCnt                   *uint64                `protobuf:"varint,67,opt,name=l2_tx_packets_cnt,json=l2TxPacketsCnt" json:"l2_tx_packets_cnt,omitempty"`
	L2TxMalformedCnt                 *uint64                `protobuf:"varint,68,opt,name=l2_tx_malformed_cnt,json=l2TxMalformedCnt" json:"l2_tx_malformed_cnt,omitempty"`
	L2TxNoIfdCnt                     *uint64                `protobuf:"varint,69,opt,name=l2_tx_no_ifd_cnt,json=l2TxNoIfdCnt" json:"l2_tx_no_ifd_cnt,omitempty"`
	L2TxIflInvalid                   *uint64                `protobuf:"varint,70,opt,name=l2_tx_ifl_invalid,json=l2TxIflInvalid" json:"l2_tx_ifl_invalid,omitempty"`
	L2BbeIoSendTxFailed              *uint64                `protobuf:"varint,71,opt,name=l2_bbe_io_send_tx_failed,json=l2BbeIoSendTxFailed" json:"l2_bbe_io_send_tx_failed,omitempty"`
	L2BbeIoSendTxFailedPartial       *uint64                `protobuf:"varint,72,opt,name=l2_bbe_io_send_tx_failed_partial,json=l2BbeIoSendTxFailedPartial" json:"l2_bbe_io_send_tx_failed_partial,omitempty"`
	L2TxV4OutErrorLocalIntf          *uint64                `protobuf:"varint,73,opt,name=l2_tx_v4_out_error_local_intf,json=l2TxV4OutErrorLocalIntf" json:"l2_tx_v4_out_error_local_intf,omitempty"`
	L2TxV6OutErrorLocalIntf          *uint64                `protobuf:"varint,74,opt,name=l2_tx_v6_out_error_local_intf,json=l2TxV6OutErrorLocalIntf" json:"l2_tx_v6_out_error_local_intf,omitempty"`
	L3RxPacketCnt                    *uint64                `protobuf:"varint,75,opt,name=l3_rx_packet_cnt,json=l3RxPacketCnt" json:"l3_rx_packet_cnt,omitempty"`
	L3RxUnsupportedProtocol          *uint64                `protobuf:"varint,76,opt,name=l3_rx_unsupported_protocol,json=l3RxUnsupportedProtocol" json:"l3_rx_unsupported_protocol,omitempty"`
	L3TxPacketCnt                    *uint64                `protobuf:"varint,77,opt,name=l3_tx_packet_cnt,json=l3TxPacketCnt" json:"l3_tx_packet_cnt,omitempty"`
	L3TxSendFailed                   *uint64                `protobuf:"varint,78,opt,name=l3_tx_send_failed,json=l3TxSendFailed" json:"l3_tx_send_failed,omitempty"`
	L3TxV4KernelForward              *uint64                `protobuf:"varint,79,opt,name=l3_tx_v4_kernel_forward,json=l3TxV4KernelForward" json:"l3_tx_v4_kernel_forward,omitempty"`
	L3TxV4KernelForwardDrops         *uint64                `protobuf:"varint,80,opt,name=l3_tx_v4_kernel_forward_drops,json=l3TxV4KernelForwardDrops" json:"l3_tx_v4_kernel_forward_drops,omitempty"`
	L3TxV6KernelForward              *uint64                `protobuf:"varint,81,opt,name=l3_tx_v6_kernel_forward,json=l3TxV6KernelForward" json:"l3_tx_v6_kernel_forward,omitempty"`
	L3TxV6KernelForwardDrops         *uint64                `protobuf:"varint,82,opt,name=l3_tx_v6_kernel_forward_drops,json=l3TxV6KernelForwardDrops" json:"l3_tx_v6_kernel_forward_drops,omitempty"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) Reset() {
	*x = JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType{}
	mi := &file_bbe_smgd_sub_mgmt_network_stats_oc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) ProtoMessage() {
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) ProtoReflect() protoreflect.Message {
	mi := &file_bbe_smgd_sub_mgmt_network_stats_oc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType.ProtoReflect.Descriptor instead.
func (*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) Descriptor() ([]byte, []int) {
	return file_bbe_smgd_sub_mgmt_network_stats_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0}
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) GetL2RxPacketsCnt() uint64 {
	if x != nil && x.L2RxPacketsCnt != nil {
		return *x.L2RxPacketsCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) GetL2RxPacketsFailed() uint64 {
	if x != nil && x.L2RxPacketsFailed != nil {
		return *x.L2RxPacketsFailed
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) GetL2RxMalformedCnt() uint64 {
	if x != nil && x.L2RxMalformedCnt != nil {
		return *x.L2RxMalformedCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) GetL2RxIfdInvalid() uint64 {
	if x != nil && x.L2RxIfdInvalid != nil {
		return *x.L2RxIfdInvalid
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) GetL2RxIflInvalid() uint64 {
	if x != nil && x.L2RxIflInvalid != nil {
		return *x.L2RxIflInvalid
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) GetL2RxNoIffCnt() uint64 {
	if x != nil && x.L2RxNoIffCnt != nil {
		return *x.L2RxNoIffCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) GetL2RxIfCreateFailed() uint64 {
	if x != nil && x.L2RxIfCreateFailed != nil {
		return *x.L2RxIfCreateFailed
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) GetL2BbeIoRcvL3UnknownAddressFamily() uint64 {
	if x != nil && x.L2BbeIoRcvL3UnknownAddressFamily != nil {
		return *x.L2BbeIoRcvL3UnknownAddressFamily
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) GetL2RxUnsupportedInetProtocol() uint64 {
	if x != nil && x.L2RxUnsupportedInetProtocol != nil {
		return *x.L2RxUnsupportedInetProtocol
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) GetL2RxUnsupportedInet6Protocol() uint64 {
	if x != nil && x.L2RxUnsupportedInet6Protocol != nil {
		return *x.L2RxUnsupportedInet6Protocol
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) GetL2RxUnsupportedUdpProtocol() uint64 {
	if x != nil && x.L2RxUnsupportedUdpProtocol != nil {
		return *x.L2RxUnsupportedUdpProtocol
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) GetL2RxUnsupportedPuntAf() uint64 {
	if x != nil && x.L2RxUnsupportedPuntAf != nil {
		return *x.L2RxUnsupportedPuntAf
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) GetL2RxV4DataPathPuntPkt() uint64 {
	if x != nil && x.L2RxV4DataPathPuntPkt != nil {
		return *x.L2RxV4DataPathPuntPkt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) GetL2RxV4DataPathPuntPktDrop() uint64 {
	if x != nil && x.L2RxV4DataPathPuntPktDrop != nil {
		return *x.L2RxV4DataPathPuntPktDrop
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) GetL2RxV6DataPathPuntPkt() uint64 {
	if x != nil && x.L2RxV6DataPathPuntPkt != nil {
		return *x.L2RxV6DataPathPuntPkt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) GetL2RxV6DataPathPuntPktDrop() uint64 {
	if x != nil && x.L2RxV6DataPathPuntPktDrop != nil {
		return *x.L2RxV6DataPathPuntPktDrop
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) GetL2TxPacketsCnt() uint64 {
	if x != nil && x.L2TxPacketsCnt != nil {
		return *x.L2TxPacketsCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) GetL2TxMalformedCnt() uint64 {
	if x != nil && x.L2TxMalformedCnt != nil {
		return *x.L2TxMalformedCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) GetL2TxNoIfdCnt() uint64 {
	if x != nil && x.L2TxNoIfdCnt != nil {
		return *x.L2TxNoIfdCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) GetL2TxIflInvalid() uint64 {
	if x != nil && x.L2TxIflInvalid != nil {
		return *x.L2TxIflInvalid
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) GetL2BbeIoSendTxFailed() uint64 {
	if x != nil && x.L2BbeIoSendTxFailed != nil {
		return *x.L2BbeIoSendTxFailed
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) GetL2BbeIoSendTxFailedPartial() uint64 {
	if x != nil && x.L2BbeIoSendTxFailedPartial != nil {
		return *x.L2BbeIoSendTxFailedPartial
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) GetL2TxV4OutErrorLocalIntf() uint64 {
	if x != nil && x.L2TxV4OutErrorLocalIntf != nil {
		return *x.L2TxV4OutErrorLocalIntf
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) GetL2TxV6OutErrorLocalIntf() uint64 {
	if x != nil && x.L2TxV6OutErrorLocalIntf != nil {
		return *x.L2TxV6OutErrorLocalIntf
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) GetL3RxPacketCnt() uint64 {
	if x != nil && x.L3RxPacketCnt != nil {
		return *x.L3RxPacketCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) GetL3RxUnsupportedProtocol() uint64 {
	if x != nil && x.L3RxUnsupportedProtocol != nil {
		return *x.L3RxUnsupportedProtocol
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) GetL3TxPacketCnt() uint64 {
	if x != nil && x.L3TxPacketCnt != nil {
		return *x.L3TxPacketCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) GetL3TxSendFailed() uint64 {
	if x != nil && x.L3TxSendFailed != nil {
		return *x.L3TxSendFailed
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) GetL3TxV4KernelForward() uint64 {
	if x != nil && x.L3TxV4KernelForward != nil {
		return *x.L3TxV4KernelForward
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) GetL3TxV4KernelForwardDrops() uint64 {
	if x != nil && x.L3TxV4KernelForwardDrops != nil {
		return *x.L3TxV4KernelForwardDrops
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) GetL3TxV6KernelForward() uint64 {
	if x != nil && x.L3TxV6KernelForward != nil {
		return *x.L3TxV6KernelForward
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType) GetL3TxV6KernelForwardDrops() uint64 {
	if x != nil && x.L3TxV6KernelForwardDrops != nil {
		return *x.L3TxV6KernelForwardDrops
	}
	return 0
}

type JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDhcpType struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	RxPacketCnt         *uint64                `protobuf:"varint,51,opt,name=rx_packet_cnt,json=rxPacketCnt" json:"rx_packet_cnt,omitempty"`
	EraDrops            *uint64                `protobuf:"varint,52,opt,name=era_drops,json=eraDrops" json:"era_drops,omitempty"`
	RxNoConnection      *uint64                `protobuf:"varint,53,opt,name=rx_no_connection,json=rxNoConnection" json:"rx_no_connection,omitempty"`
	RxMalformedCnt      *uint64                `protobuf:"varint,54,opt,name=rx_malformed_cnt,json=rxMalformedCnt" json:"rx_malformed_cnt,omitempty"`
	RxNoIfCnt           *uint64                `protobuf:"varint,55,opt,name=rx_no_if_cnt,json=rxNoIfCnt" json:"rx_no_if_cnt,omitempty"`
	RxIflInvalid        *uint64                `protobuf:"varint,56,opt,name=rx_ifl_invalid,json=rxIflInvalid" json:"rx_ifl_invalid,omitempty"`
	RxSendFailed        *uint64                `protobuf:"varint,57,opt,name=rx_send_failed,json=rxSendFailed" json:"rx_send_failed,omitempty"`
	TxPacketCnt         *uint64                `protobuf:"varint,58,opt,name=tx_packet_cnt,json=txPacketCnt" json:"tx_packet_cnt,omitempty"`
	PacketsTransmitted  *uint64                `protobuf:"varint,59,opt,name=packets_transmitted,json=packetsTransmitted" json:"packets_transmitted,omitempty"`
	TxMalformedCnt      *uint64                `protobuf:"varint,60,opt,name=tx_malformed_cnt,json=txMalformedCnt" json:"tx_malformed_cnt,omitempty"`
	TxNullPkt           *uint64                `protobuf:"varint,61,opt,name=tx_null_pkt,json=txNullPkt" json:"tx_null_pkt,omitempty"`
	TxNoIfCnt           *uint64                `protobuf:"varint,62,opt,name=tx_no_if_cnt,json=txNoIfCnt" json:"tx_no_if_cnt,omitempty"`
	TxNoIffCnt          *uint64                `protobuf:"varint,63,opt,name=tx_no_iff_cnt,json=txNoIffCnt" json:"tx_no_iff_cnt,omitempty"`
	TxNoRttCnt          *uint64                `protobuf:"varint,64,opt,name=tx_no_rtt_cnt,json=txNoRttCnt" json:"tx_no_rtt_cnt,omitempty"`
	TxArpFailed         *uint64                `protobuf:"varint,65,opt,name=tx_arp_failed,json=txArpFailed" json:"tx_arp_failed,omitempty"`
	TxIfInvalid         *uint64                `protobuf:"varint,66,opt,name=tx_if_invalid,json=txIfInvalid" json:"tx_if_invalid,omitempty"`
	TxSendFailed        *uint64                `protobuf:"varint,67,opt,name=tx_send_failed,json=txSendFailed" json:"tx_send_failed,omitempty"`
	RxWhileNotConnected *uint64                `protobuf:"varint,68,opt,name=rx_while_not_connected,json=rxWhileNotConnected" json:"rx_while_not_connected,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDhcpType) Reset() {
	*x = JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDhcpType{}
	mi := &file_bbe_smgd_sub_mgmt_network_stats_oc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDhcpType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDhcpType) ProtoMessage() {
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDhcpType) ProtoReflect() protoreflect.Message {
	mi := &file_bbe_smgd_sub_mgmt_network_stats_oc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDhcpType.ProtoReflect.Descriptor instead.
func (*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDhcpType) Descriptor() ([]byte, []int) {
	return file_bbe_smgd_sub_mgmt_network_stats_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 1}
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDhcpType) GetRxPacketCnt() uint64 {
	if x != nil && x.RxPacketCnt != nil {
		return *x.RxPacketCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDhcpType) GetEraDrops() uint64 {
	if x != nil && x.EraDrops != nil {
		return *x.EraDrops
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDhcpType) GetRxNoConnection() uint64 {
	if x != nil && x.RxNoConnection != nil {
		return *x.RxNoConnection
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDhcpType) GetRxMalformedCnt() uint64 {
	if x != nil && x.RxMalformedCnt != nil {
		return *x.RxMalformedCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDhcpType) GetRxNoIfCnt() uint64 {
	if x != nil && x.RxNoIfCnt != nil {
		return *x.RxNoIfCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDhcpType) GetRxIflInvalid() uint64 {
	if x != nil && x.RxIflInvalid != nil {
		return *x.RxIflInvalid
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDhcpType) GetRxSendFailed() uint64 {
	if x != nil && x.RxSendFailed != nil {
		return *x.RxSendFailed
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDhcpType) GetTxPacketCnt() uint64 {
	if x != nil && x.TxPacketCnt != nil {
		return *x.TxPacketCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDhcpType) GetPacketsTransmitted() uint64 {
	if x != nil && x.PacketsTransmitted != nil {
		return *x.PacketsTransmitted
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDhcpType) GetTxMalformedCnt() uint64 {
	if x != nil && x.TxMalformedCnt != nil {
		return *x.TxMalformedCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDhcpType) GetTxNullPkt() uint64 {
	if x != nil && x.TxNullPkt != nil {
		return *x.TxNullPkt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDhcpType) GetTxNoIfCnt() uint64 {
	if x != nil && x.TxNoIfCnt != nil {
		return *x.TxNoIfCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDhcpType) GetTxNoIffCnt() uint64 {
	if x != nil && x.TxNoIffCnt != nil {
		return *x.TxNoIffCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDhcpType) GetTxNoRttCnt() uint64 {
	if x != nil && x.TxNoRttCnt != nil {
		return *x.TxNoRttCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDhcpType) GetTxArpFailed() uint64 {
	if x != nil && x.TxArpFailed != nil {
		return *x.TxArpFailed
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDhcpType) GetTxIfInvalid() uint64 {
	if x != nil && x.TxIfInvalid != nil {
		return *x.TxIfInvalid
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDhcpType) GetTxSendFailed() uint64 {
	if x != nil && x.TxSendFailed != nil {
		return *x.TxSendFailed
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDhcpType) GetRxWhileNotConnected() uint64 {
	if x != nil && x.RxWhileNotConnected != nil {
		return *x.RxWhileNotConnected
	}
	return 0
}

type JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	RxNetworkPktCnt     *uint64                `protobuf:"varint,51,opt,name=rx_network_pkt_cnt,json=rxNetworkPktCnt" json:"rx_network_pkt_cnt,omitempty"`
	RxPluginPktCnt      *uint64                `protobuf:"varint,52,opt,name=rx_plugin_pkt_cnt,json=rxPluginPktCnt" json:"rx_plugin_pkt_cnt,omitempty"`
	RxLcpConfReqCnt     *uint64                `protobuf:"varint,53,opt,name=rx_lcp_conf_req_cnt,json=rxLcpConfReqCnt" json:"rx_lcp_conf_req_cnt,omitempty"`
	RxLcpConfAckCnt     *uint64                `protobuf:"varint,54,opt,name=rx_lcp_conf_ack_cnt,json=rxLcpConfAckCnt" json:"rx_lcp_conf_ack_cnt,omitempty"`
	RxLcpConfNackCnt    *uint64                `protobuf:"varint,55,opt,name=rx_lcp_conf_nack_cnt,json=rxLcpConfNackCnt" json:"rx_lcp_conf_nack_cnt,omitempty"`
	RxLcpConfRejCnt     *uint64                `protobuf:"varint,56,opt,name=rx_lcp_conf_rej_cnt,json=rxLcpConfRejCnt" json:"rx_lcp_conf_rej_cnt,omitempty"`
	RxLcpTermReqCnt     *uint64                `protobuf:"varint,57,opt,name=rx_lcp_term_req_cnt,json=rxLcpTermReqCnt" json:"rx_lcp_term_req_cnt,omitempty"`
	RxLcpTermAckCnt     *uint64                `protobuf:"varint,58,opt,name=rx_lcp_term_ack_cnt,json=rxLcpTermAckCnt" json:"rx_lcp_term_ack_cnt,omitempty"`
	RxLcpCodeRejCnt     *uint64                `protobuf:"varint,59,opt,name=rx_lcp_code_rej_cnt,json=rxLcpCodeRejCnt" json:"rx_lcp_code_rej_cnt,omitempty"`
	RxLcpProtocolRejCnt *uint64                `protobuf:"varint,60,opt,name=rx_lcp_protocol_rej_cnt,json=rxLcpProtocolRejCnt" json:"rx_lcp_protocol_rej_cnt,omitempty"`
	RxLcpEchoReqCnt     *uint64                `protobuf:"varint,61,opt,name=rx_lcp_echo_req_cnt,json=rxLcpEchoReqCnt" json:"rx_lcp_echo_req_cnt,omitempty"`
	RxLcpEchoReplyCnt   *uint64                `protobuf:"varint,62,opt,name=rx_lcp_echo_reply_cnt,json=rxLcpEchoReplyCnt" json:"rx_lcp_echo_reply_cnt,omitempty"`
	RxLcpDiscardReqCnt  *uint64                `protobuf:"varint,63,opt,name=rx_lcp_discard_req_cnt,json=rxLcpDiscardReqCnt" json:"rx_lcp_discard_req_cnt,omitempty"`
	RxPapReqCnt         *uint64                `protobuf:"varint,64,opt,name=rx_pap_req_cnt,json=rxPapReqCnt" json:"rx_pap_req_cnt,omitempty"`
	RxPapAckCnt         *uint64                `protobuf:"varint,65,opt,name=rx_pap_ack_cnt,json=rxPapAckCnt" json:"rx_pap_ack_cnt,omitempty"`
	RxPapNackCnt        *uint64                `protobuf:"varint,66,opt,name=rx_pap_nack_cnt,json=rxPapNackCnt" json:"rx_pap_nack_cnt,omitempty"`
	RxChapChallengeCnt  *uint64                `protobuf:"varint,67,opt,name=rx_chap_challenge_cnt,json=rxChapChallengeCnt" json:"rx_chap_challenge_cnt,omitempty"`
	RxChapRespCnt       *uint64                `protobuf:"varint,68,opt,name=rx_chap_resp_cnt,json=rxChapRespCnt" json:"rx_chap_resp_cnt,omitempty"`
	RxChapSuccessCnt    *uint64                `protobuf:"varint,69,opt,name=rx_chap_success_cnt,json=rxChapSuccessCnt" json:"rx_chap_success_cnt,omitempty"`
	RxChapFailureCnt    *uint64                `protobuf:"varint,70,opt,name=rx_chap_failure_cnt,json=rxChapFailureCnt" json:"rx_chap_failure_cnt,omitempty"`
	RxIpcpReqCnt        *uint64                `protobuf:"varint,71,opt,name=rx_ipcp_req_cnt,json=rxIpcpReqCnt" json:"rx_ipcp_req_cnt,omitempty"`
	RxIpcpAckCnt        *uint64                `protobuf:"varint,72,opt,name=rx_ipcp_ack_cnt,json=rxIpcpAckCnt" json:"rx_ipcp_ack_cnt,omitempty"`
	RxIpcpNackCnt       *uint64                `protobuf:"varint,73,opt,name=rx_ipcp_nack_cnt,json=rxIpcpNackCnt" json:"rx_ipcp_nack_cnt,omitempty"`
	RxIpv6CpReqCnt      *uint64                `protobuf:"varint,74,opt,name=rx_ipv6cp_req_cnt,json=rxIpv6cpReqCnt" json:"rx_ipv6cp_req_cnt,omitempty"`
	RxIpv6CpAckCnt      *uint64                `protobuf:"varint,75,opt,name=rx_ipv6cp_ack_cnt,json=rxIpv6cpAckCnt" json:"rx_ipv6cp_ack_cnt,omitempty"`
	RxIpv6CpNackCnt     *uint64                `protobuf:"varint,76,opt,name=rx_ipv6cp_nack_cnt,json=rxIpv6cpNackCnt" json:"rx_ipv6cp_nack_cnt,omitempty"`
	RxMalformedCnt      *uint64                `protobuf:"varint,77,opt,name=rx_malformed_cnt,json=rxMalformedCnt" json:"rx_malformed_cnt,omitempty"`
	RxNoIfCnt           *uint64                `protobuf:"varint,78,opt,name=rx_no_if_cnt,json=rxNoIfCnt" json:"rx_no_if_cnt,omitempty"`
	RxUnsupported       *uint64                `protobuf:"varint,79,opt,name=rx_unsupported,json=rxUnsupported" json:"rx_unsupported,omitempty"`
	TxCnt               *uint64                `protobuf:"varint,80,opt,name=tx_cnt,json=txCnt" json:"tx_cnt,omitempty"`
	TxLcpConfReqCnt     *uint64                `protobuf:"varint,81,opt,name=tx_lcp_conf_req_cnt,json=txLcpConfReqCnt" json:"tx_lcp_conf_req_cnt,omitempty"`
	TxLcpConfAckCnt     *uint64                `protobuf:"varint,82,opt,name=tx_lcp_conf_ack_cnt,json=txLcpConfAckCnt" json:"tx_lcp_conf_ack_cnt,omitempty"`
	TxLcpConfNackCnt    *uint64                `protobuf:"varint,83,opt,name=tx_lcp_conf_nack_cnt,json=txLcpConfNackCnt" json:"tx_lcp_conf_nack_cnt,omitempty"`
	TxLcpConfRejCnt     *uint64                `protobuf:"varint,84,opt,name=tx_lcp_conf_rej_cnt,json=txLcpConfRejCnt" json:"tx_lcp_conf_rej_cnt,omitempty"`
	TxLcpEchoReqCnt     *uint64                `protobuf:"varint,85,opt,name=tx_lcp_echo_req_cnt,json=txLcpEchoReqCnt" json:"tx_lcp_echo_req_cnt,omitempty"`
	TxLcpEchoReplyCnt   *uint64                `protobuf:"varint,86,opt,name=tx_lcp_echo_reply_cnt,json=txLcpEchoReplyCnt" json:"tx_lcp_echo_reply_cnt,omitempty"`
	TxLcpDiscardReqCnt  *uint64                `protobuf:"varint,87,opt,name=tx_lcp_discard_req_cnt,json=txLcpDiscardReqCnt" json:"tx_lcp_discard_req_cnt,omitempty"`
	TxLcpTermReqCnt     *uint64                `protobuf:"varint,88,opt,name=tx_lcp_term_req_cnt,json=txLcpTermReqCnt" json:"tx_lcp_term_req_cnt,omitempty"`
	TxLcpTermAckCnt     *uint64                `protobuf:"varint,89,opt,name=tx_lcp_term_ack_cnt,json=txLcpTermAckCnt" json:"tx_lcp_term_ack_cnt,omitempty"`
	TxPapReqCnt         *uint64                `protobuf:"varint,90,opt,name=tx_pap_req_cnt,json=txPapReqCnt" json:"tx_pap_req_cnt,omitempty"`
	TxPapAckCnt         *uint64                `protobuf:"varint,91,opt,name=tx_pap_ack_cnt,json=txPapAckCnt" json:"tx_pap_ack_cnt,omitempty"`
	TxPapNackCnt        *uint64                `protobuf:"varint,92,opt,name=tx_pap_nack_cnt,json=txPapNackCnt" json:"tx_pap_nack_cnt,omitempty"`
	TxChapChallengeCnt  *uint64                `protobuf:"varint,93,opt,name=tx_chap_challenge_cnt,json=txChapChallengeCnt" json:"tx_chap_challenge_cnt,omitempty"`
	TxChapRespCnt       *uint64                `protobuf:"varint,94,opt,name=tx_chap_resp_cnt,json=txChapRespCnt" json:"tx_chap_resp_cnt,omitempty"`
	TxChapSuccessCnt    *uint64                `protobuf:"varint,95,opt,name=tx_chap_success_cnt,json=txChapSuccessCnt" json:"tx_chap_success_cnt,omitempty"`
	TxChapFailureCnt    *uint64                `protobuf:"varint,96,opt,name=tx_chap_failure_cnt,json=txChapFailureCnt" json:"tx_chap_failure_cnt,omitempty"`
	TxIpcpReqCnt        *uint64                `protobuf:"varint,97,opt,name=tx_ipcp_req_cnt,json=txIpcpReqCnt" json:"tx_ipcp_req_cnt,omitempty"`
	TxIpcpAckCnt        *uint64                `protobuf:"varint,98,opt,name=tx_ipcp_ack_cnt,json=txIpcpAckCnt" json:"tx_ipcp_ack_cnt,omitempty"`
	TxIpcpNackCnt       *uint64                `protobuf:"varint,99,opt,name=tx_ipcp_nack_cnt,json=txIpcpNackCnt" json:"tx_ipcp_nack_cnt,omitempty"`
	TxIpv6CpReqCnt      *uint64                `protobuf:"varint,100,opt,name=tx_ipv6cp_req_cnt,json=txIpv6cpReqCnt" json:"tx_ipv6cp_req_cnt,omitempty"`
	TxIpv6CpAckCnt      *uint64                `protobuf:"varint,101,opt,name=tx_ipv6cp_ack_cnt,json=txIpv6cpAckCnt" json:"tx_ipv6cp_ack_cnt,omitempty"`
	TxIpv6CpNackCnt     *uint64                `protobuf:"varint,102,opt,name=tx_ipv6cp_nack_cnt,json=txIpv6cpNackCnt" json:"tx_ipv6cp_nack_cnt,omitempty"`
	TxUnknownPktCnt     *uint64                `protobuf:"varint,103,opt,name=tx_unknown_pkt_cnt,json=txUnknownPktCnt" json:"tx_unknown_pkt_cnt,omitempty"`
	TxSendFailed        *uint64                `protobuf:"varint,104,opt,name=tx_send_failed,json=txSendFailed" json:"tx_send_failed,omitempty"`
	TxMalformedCnt      *uint64                `protobuf:"varint,105,opt,name=tx_malformed_cnt,json=txMalformedCnt" json:"tx_malformed_cnt,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) Reset() {
	*x = JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType{}
	mi := &file_bbe_smgd_sub_mgmt_network_stats_oc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) ProtoMessage() {
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) ProtoReflect() protoreflect.Message {
	mi := &file_bbe_smgd_sub_mgmt_network_stats_oc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType.ProtoReflect.Descriptor instead.
func (*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) Descriptor() ([]byte, []int) {
	return file_bbe_smgd_sub_mgmt_network_stats_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 2}
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetRxNetworkPktCnt() uint64 {
	if x != nil && x.RxNetworkPktCnt != nil {
		return *x.RxNetworkPktCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetRxPluginPktCnt() uint64 {
	if x != nil && x.RxPluginPktCnt != nil {
		return *x.RxPluginPktCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetRxLcpConfReqCnt() uint64 {
	if x != nil && x.RxLcpConfReqCnt != nil {
		return *x.RxLcpConfReqCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetRxLcpConfAckCnt() uint64 {
	if x != nil && x.RxLcpConfAckCnt != nil {
		return *x.RxLcpConfAckCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetRxLcpConfNackCnt() uint64 {
	if x != nil && x.RxLcpConfNackCnt != nil {
		return *x.RxLcpConfNackCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetRxLcpConfRejCnt() uint64 {
	if x != nil && x.RxLcpConfRejCnt != nil {
		return *x.RxLcpConfRejCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetRxLcpTermReqCnt() uint64 {
	if x != nil && x.RxLcpTermReqCnt != nil {
		return *x.RxLcpTermReqCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetRxLcpTermAckCnt() uint64 {
	if x != nil && x.RxLcpTermAckCnt != nil {
		return *x.RxLcpTermAckCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetRxLcpCodeRejCnt() uint64 {
	if x != nil && x.RxLcpCodeRejCnt != nil {
		return *x.RxLcpCodeRejCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetRxLcpProtocolRejCnt() uint64 {
	if x != nil && x.RxLcpProtocolRejCnt != nil {
		return *x.RxLcpProtocolRejCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetRxLcpEchoReqCnt() uint64 {
	if x != nil && x.RxLcpEchoReqCnt != nil {
		return *x.RxLcpEchoReqCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetRxLcpEchoReplyCnt() uint64 {
	if x != nil && x.RxLcpEchoReplyCnt != nil {
		return *x.RxLcpEchoReplyCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetRxLcpDiscardReqCnt() uint64 {
	if x != nil && x.RxLcpDiscardReqCnt != nil {
		return *x.RxLcpDiscardReqCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetRxPapReqCnt() uint64 {
	if x != nil && x.RxPapReqCnt != nil {
		return *x.RxPapReqCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetRxPapAckCnt() uint64 {
	if x != nil && x.RxPapAckCnt != nil {
		return *x.RxPapAckCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetRxPapNackCnt() uint64 {
	if x != nil && x.RxPapNackCnt != nil {
		return *x.RxPapNackCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetRxChapChallengeCnt() uint64 {
	if x != nil && x.RxChapChallengeCnt != nil {
		return *x.RxChapChallengeCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetRxChapRespCnt() uint64 {
	if x != nil && x.RxChapRespCnt != nil {
		return *x.RxChapRespCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetRxChapSuccessCnt() uint64 {
	if x != nil && x.RxChapSuccessCnt != nil {
		return *x.RxChapSuccessCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetRxChapFailureCnt() uint64 {
	if x != nil && x.RxChapFailureCnt != nil {
		return *x.RxChapFailureCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetRxIpcpReqCnt() uint64 {
	if x != nil && x.RxIpcpReqCnt != nil {
		return *x.RxIpcpReqCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetRxIpcpAckCnt() uint64 {
	if x != nil && x.RxIpcpAckCnt != nil {
		return *x.RxIpcpAckCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetRxIpcpNackCnt() uint64 {
	if x != nil && x.RxIpcpNackCnt != nil {
		return *x.RxIpcpNackCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetRxIpv6CpReqCnt() uint64 {
	if x != nil && x.RxIpv6CpReqCnt != nil {
		return *x.RxIpv6CpReqCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetRxIpv6CpAckCnt() uint64 {
	if x != nil && x.RxIpv6CpAckCnt != nil {
		return *x.RxIpv6CpAckCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetRxIpv6CpNackCnt() uint64 {
	if x != nil && x.RxIpv6CpNackCnt != nil {
		return *x.RxIpv6CpNackCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetRxMalformedCnt() uint64 {
	if x != nil && x.RxMalformedCnt != nil {
		return *x.RxMalformedCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetRxNoIfCnt() uint64 {
	if x != nil && x.RxNoIfCnt != nil {
		return *x.RxNoIfCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetRxUnsupported() uint64 {
	if x != nil && x.RxUnsupported != nil {
		return *x.RxUnsupported
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetTxCnt() uint64 {
	if x != nil && x.TxCnt != nil {
		return *x.TxCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetTxLcpConfReqCnt() uint64 {
	if x != nil && x.TxLcpConfReqCnt != nil {
		return *x.TxLcpConfReqCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetTxLcpConfAckCnt() uint64 {
	if x != nil && x.TxLcpConfAckCnt != nil {
		return *x.TxLcpConfAckCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetTxLcpConfNackCnt() uint64 {
	if x != nil && x.TxLcpConfNackCnt != nil {
		return *x.TxLcpConfNackCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetTxLcpConfRejCnt() uint64 {
	if x != nil && x.TxLcpConfRejCnt != nil {
		return *x.TxLcpConfRejCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetTxLcpEchoReqCnt() uint64 {
	if x != nil && x.TxLcpEchoReqCnt != nil {
		return *x.TxLcpEchoReqCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetTxLcpEchoReplyCnt() uint64 {
	if x != nil && x.TxLcpEchoReplyCnt != nil {
		return *x.TxLcpEchoReplyCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetTxLcpDiscardReqCnt() uint64 {
	if x != nil && x.TxLcpDiscardReqCnt != nil {
		return *x.TxLcpDiscardReqCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetTxLcpTermReqCnt() uint64 {
	if x != nil && x.TxLcpTermReqCnt != nil {
		return *x.TxLcpTermReqCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetTxLcpTermAckCnt() uint64 {
	if x != nil && x.TxLcpTermAckCnt != nil {
		return *x.TxLcpTermAckCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetTxPapReqCnt() uint64 {
	if x != nil && x.TxPapReqCnt != nil {
		return *x.TxPapReqCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetTxPapAckCnt() uint64 {
	if x != nil && x.TxPapAckCnt != nil {
		return *x.TxPapAckCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetTxPapNackCnt() uint64 {
	if x != nil && x.TxPapNackCnt != nil {
		return *x.TxPapNackCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetTxChapChallengeCnt() uint64 {
	if x != nil && x.TxChapChallengeCnt != nil {
		return *x.TxChapChallengeCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetTxChapRespCnt() uint64 {
	if x != nil && x.TxChapRespCnt != nil {
		return *x.TxChapRespCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetTxChapSuccessCnt() uint64 {
	if x != nil && x.TxChapSuccessCnt != nil {
		return *x.TxChapSuccessCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetTxChapFailureCnt() uint64 {
	if x != nil && x.TxChapFailureCnt != nil {
		return *x.TxChapFailureCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetTxIpcpReqCnt() uint64 {
	if x != nil && x.TxIpcpReqCnt != nil {
		return *x.TxIpcpReqCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetTxIpcpAckCnt() uint64 {
	if x != nil && x.TxIpcpAckCnt != nil {
		return *x.TxIpcpAckCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetTxIpcpNackCnt() uint64 {
	if x != nil && x.TxIpcpNackCnt != nil {
		return *x.TxIpcpNackCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetTxIpv6CpReqCnt() uint64 {
	if x != nil && x.TxIpv6CpReqCnt != nil {
		return *x.TxIpv6CpReqCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetTxIpv6CpAckCnt() uint64 {
	if x != nil && x.TxIpv6CpAckCnt != nil {
		return *x.TxIpv6CpAckCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetTxIpv6CpNackCnt() uint64 {
	if x != nil && x.TxIpv6CpNackCnt != nil {
		return *x.TxIpv6CpNackCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetTxUnknownPktCnt() uint64 {
	if x != nil && x.TxUnknownPktCnt != nil {
		return *x.TxUnknownPktCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetTxSendFailed() uint64 {
	if x != nil && x.TxSendFailed != nil {
		return *x.TxSendFailed
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType) GetTxMalformedCnt() uint64 {
	if x != nil && x.TxMalformedCnt != nil {
		return *x.TxMalformedCnt
	}
	return 0
}

type JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppoeType struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	RxCnt             *uint64                `protobuf:"varint,51,opt,name=rx_cnt,json=rxCnt" json:"rx_cnt,omitempty"`
	RxPadiCnt         *uint64                `protobuf:"varint,52,opt,name=rx_padi_cnt,json=rxPadiCnt" json:"rx_padi_cnt,omitempty"`
	RxPadrCnt         *uint64                `protobuf:"varint,53,opt,name=rx_padr_cnt,json=rxPadrCnt" json:"rx_padr_cnt,omitempty"`
	RxPppCnt          *uint64                `protobuf:"varint,54,opt,name=rx_ppp_cnt,json=rxPppCnt" json:"rx_ppp_cnt,omitempty"`
	RxMalformedCnt    *uint64                `protobuf:"varint,55,opt,name=rx_malformed_cnt,json=rxMalformedCnt" json:"rx_malformed_cnt,omitempty"`
	RxNoIfCnt         *uint64                `protobuf:"varint,56,opt,name=rx_no_if_cnt,json=rxNoIfCnt" json:"rx_no_if_cnt,omitempty"`
	RxUnsupported     *uint64                `protobuf:"varint,57,opt,name=rx_unsupported,json=rxUnsupported" json:"rx_unsupported,omitempty"`
	RxPadiEraDiscards *uint64                `protobuf:"varint,58,opt,name=rx_padi_era_discards,json=rxPadiEraDiscards" json:"rx_padi_era_discards,omitempty"`
	TxCnt             *uint64                `protobuf:"varint,59,opt,name=tx_cnt,json=txCnt" json:"tx_cnt,omitempty"`
	TxSendFailed      *uint64                `protobuf:"varint,60,opt,name=tx_send_failed,json=txSendFailed" json:"tx_send_failed,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppoeType) Reset() {
	*x = JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppoeType{}
	mi := &file_bbe_smgd_sub_mgmt_network_stats_oc_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppoeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppoeType) ProtoMessage() {
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppoeType) ProtoReflect() protoreflect.Message {
	mi := &file_bbe_smgd_sub_mgmt_network_stats_oc_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppoeType.ProtoReflect.Descriptor instead.
func (*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppoeType) Descriptor() ([]byte, []int) {
	return file_bbe_smgd_sub_mgmt_network_stats_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 3}
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppoeType) GetRxCnt() uint64 {
	if x != nil && x.RxCnt != nil {
		return *x.RxCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppoeType) GetRxPadiCnt() uint64 {
	if x != nil && x.RxPadiCnt != nil {
		return *x.RxPadiCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppoeType) GetRxPadrCnt() uint64 {
	if x != nil && x.RxPadrCnt != nil {
		return *x.RxPadrCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppoeType) GetRxPppCnt() uint64 {
	if x != nil && x.RxPppCnt != nil {
		return *x.RxPppCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppoeType) GetRxMalformedCnt() uint64 {
	if x != nil && x.RxMalformedCnt != nil {
		return *x.RxMalformedCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppoeType) GetRxNoIfCnt() uint64 {
	if x != nil && x.RxNoIfCnt != nil {
		return *x.RxNoIfCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppoeType) GetRxUnsupported() uint64 {
	if x != nil && x.RxUnsupported != nil {
		return *x.RxUnsupported
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppoeType) GetRxPadiEraDiscards() uint64 {
	if x != nil && x.RxPadiEraDiscards != nil {
		return *x.RxPadiEraDiscards
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppoeType) GetTxCnt() uint64 {
	if x != nil && x.TxCnt != nil {
		return *x.TxCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppoeType) GetTxSendFailed() uint64 {
	if x != nil && x.TxSendFailed != nil {
		return *x.TxSendFailed
	}
	return 0
}

type JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDvlanType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RxPacketCnt   *uint64                `protobuf:"varint,51,opt,name=rx_packet_cnt,json=rxPacketCnt" json:"rx_packet_cnt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDvlanType) Reset() {
	*x = JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDvlanType{}
	mi := &file_bbe_smgd_sub_mgmt_network_stats_oc_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDvlanType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDvlanType) ProtoMessage() {
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDvlanType) ProtoReflect() protoreflect.Message {
	mi := &file_bbe_smgd_sub_mgmt_network_stats_oc_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDvlanType.ProtoReflect.Descriptor instead.
func (*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDvlanType) Descriptor() ([]byte, []int) {
	return file_bbe_smgd_sub_mgmt_network_stats_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 4}
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDvlanType) GetRxPacketCnt() uint64 {
	if x != nil && x.RxPacketCnt != nil {
		return *x.RxPacketCnt
	}
	return 0
}

type JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	RxCnt                   *uint64                `protobuf:"varint,51,opt,name=rx_cnt,json=rxCnt" json:"rx_cnt,omitempty"`
	RxPktCnt                *uint64                `protobuf:"varint,52,opt,name=rx_pkt_cnt,json=rxPktCnt" json:"rx_pkt_cnt,omitempty"`
	PppRxPktCnt             *uint64                `protobuf:"varint,53,opt,name=ppp_rx_pkt_cnt,json=pppRxPktCnt" json:"ppp_rx_pkt_cnt,omitempty"`
	TxPktCnt                *uint64                `protobuf:"varint,54,opt,name=tx_pkt_cnt,json=txPktCnt" json:"tx_pkt_cnt,omitempty"`
	PppRxLcpConfReqCount    *uint64                `protobuf:"varint,55,opt,name=ppp_rx_lcp_conf_req_count,json=pppRxLcpConfReqCount" json:"ppp_rx_lcp_conf_req_count,omitempty"`
	PppRxLcpConfAckCount    *uint64                `protobuf:"varint,56,opt,name=ppp_rx_lcp_conf_ack_count,json=pppRxLcpConfAckCount" json:"ppp_rx_lcp_conf_ack_count,omitempty"`
	PppRxLcpConfNackCount   *uint64                `protobuf:"varint,57,opt,name=ppp_rx_lcp_conf_nack_count,json=pppRxLcpConfNackCount" json:"ppp_rx_lcp_conf_nack_count,omitempty"`
	PppRxLcpTermReqCount    *uint64                `protobuf:"varint,58,opt,name=ppp_rx_lcp_term_req_count,json=pppRxLcpTermReqCount" json:"ppp_rx_lcp_term_req_count,omitempty"`
	PppRxLcpTermAckCount    *uint64                `protobuf:"varint,59,opt,name=ppp_rx_lcp_term_ack_count,json=pppRxLcpTermAckCount" json:"ppp_rx_lcp_term_ack_count,omitempty"`
	PppRxLcpEchoReqCount    *uint64                `protobuf:"varint,60,opt,name=ppp_rx_lcp_echo_req_count,json=pppRxLcpEchoReqCount" json:"ppp_rx_lcp_echo_req_count,omitempty"`
	PppRxLcpEchoRespCount   *uint64                `protobuf:"varint,61,opt,name=ppp_rx_lcp_echo_resp_count,json=pppRxLcpEchoRespCount" json:"ppp_rx_lcp_echo_resp_count,omitempty"`
	PppRxPapReqCount        *uint64                `protobuf:"varint,62,opt,name=ppp_rx_pap_req_count,json=pppRxPapReqCount" json:"ppp_rx_pap_req_count,omitempty"`
	PppRxPapAckCount        *uint64                `protobuf:"varint,63,opt,name=ppp_rx_pap_ack_count,json=pppRxPapAckCount" json:"ppp_rx_pap_ack_count,omitempty"`
	PppRxPapNackCount       *uint64                `protobuf:"varint,64,opt,name=ppp_rx_pap_nack_count,json=pppRxPapNackCount" json:"ppp_rx_pap_nack_count,omitempty"`
	PppRxChapChallengeCount *uint64                `protobuf:"varint,65,opt,name=ppp_rx_chap_challenge_count,json=pppRxChapChallengeCount" json:"ppp_rx_chap_challenge_count,omitempty"`
	PppRxChapRespCount      *uint64                `protobuf:"varint,66,opt,name=ppp_rx_chap_resp_count,json=pppRxChapRespCount" json:"ppp_rx_chap_resp_count,omitempty"`
	PppRxChapSuccessCount   *uint64                `protobuf:"varint,67,opt,name=ppp_rx_chap_success_count,json=pppRxChapSuccessCount" json:"ppp_rx_chap_success_count,omitempty"`
	PppRxChapFailCount      *uint64                `protobuf:"varint,68,opt,name=ppp_rx_chap_fail_count,json=pppRxChapFailCount" json:"ppp_rx_chap_fail_count,omitempty"`
	PppRxIpcpConfReqCount   *uint64                `protobuf:"varint,69,opt,name=ppp_rx_ipcp_conf_req_count,json=pppRxIpcpConfReqCount" json:"ppp_rx_ipcp_conf_req_count,omitempty"`
	PppRxIpcpConfAckCount   *uint64                `protobuf:"varint,70,opt,name=ppp_rx_ipcp_conf_ack_count,json=pppRxIpcpConfAckCount" json:"ppp_rx_ipcp_conf_ack_count,omitempty"`
	PppRxIpcpConfNackCount  *uint64                `protobuf:"varint,71,opt,name=ppp_rx_ipcp_conf_nack_count,json=pppRxIpcpConfNackCount" json:"ppp_rx_ipcp_conf_nack_count,omitempty"`
	RxMalformedCnt          *uint64                `protobuf:"varint,72,opt,name=rx_malformed_cnt,json=rxMalformedCnt" json:"rx_malformed_cnt,omitempty"`
	PppRxUnknownProtocol    *uint64                `protobuf:"varint,73,opt,name=ppp_rx_unknown_protocol,json=pppRxUnknownProtocol" json:"ppp_rx_unknown_protocol,omitempty"`
	RxMsgCnt                *uint64                `protobuf:"varint,74,opt,name=rx_msg_cnt,json=rxMsgCnt" json:"rx_msg_cnt,omitempty"`
	RxMsgProcessdCnt        *uint64                `protobuf:"varint,75,opt,name=rx_msg_processd_cnt,json=rxMsgProcessdCnt" json:"rx_msg_processd_cnt,omitempty"`
	RxMsgErr                *uint64                `protobuf:"varint,76,opt,name=rx_msg_err,json=rxMsgErr" json:"rx_msg_err,omitempty"`
	RxInvalidMsgCnt         *uint64                `protobuf:"varint,77,opt,name=rx_invalid_msg_cnt,json=rxInvalidMsgCnt" json:"rx_invalid_msg_cnt,omitempty"`
	TxCnt                   *uint64                `protobuf:"varint,78,opt,name=tx_cnt,json=txCnt" json:"tx_cnt,omitempty"`
	PppTxLcpConfReqCount    *uint64                `protobuf:"varint,79,opt,name=ppp_tx_lcp_conf_req_count,json=pppTxLcpConfReqCount" json:"ppp_tx_lcp_conf_req_count,omitempty"`
	PppTxLcpConfAckCount    *uint64                `protobuf:"varint,80,opt,name=ppp_tx_lcp_conf_ack_count,json=pppTxLcpConfAckCount" json:"ppp_tx_lcp_conf_ack_count,omitempty"`
	PppTxLcpConfNackCount   *uint64                `protobuf:"varint,81,opt,name=ppp_tx_lcp_conf_nack_count,json=pppTxLcpConfNackCount" json:"ppp_tx_lcp_conf_nack_count,omitempty"`
	PppTxLcpEchoReqCount    *uint64                `protobuf:"varint,82,opt,name=ppp_tx_lcp_echo_req_count,json=pppTxLcpEchoReqCount" json:"ppp_tx_lcp_echo_req_count,omitempty"`
	PppTxLcpEchoRespCount   *uint64                `protobuf:"varint,83,opt,name=ppp_tx_lcp_echo_resp_count,json=pppTxLcpEchoRespCount" json:"ppp_tx_lcp_echo_resp_count,omitempty"`
	PppTxLcpTermReqCount    *uint64                `protobuf:"varint,84,opt,name=ppp_tx_lcp_term_req_count,json=pppTxLcpTermReqCount" json:"ppp_tx_lcp_term_req_count,omitempty"`
	PppTxLcpTermAckCount    *uint64                `protobuf:"varint,85,opt,name=ppp_tx_lcp_term_ack_count,json=pppTxLcpTermAckCount" json:"ppp_tx_lcp_term_ack_count,omitempty"`
	PppTxPapReqCount        *uint64                `protobuf:"varint,86,opt,name=ppp_tx_pap_req_count,json=pppTxPapReqCount" json:"ppp_tx_pap_req_count,omitempty"`
	PppTxPapAckCount        *uint64                `protobuf:"varint,87,opt,name=ppp_tx_pap_ack_count,json=pppTxPapAckCount" json:"ppp_tx_pap_ack_count,omitempty"`
	PppTxPapNackCount       *uint64                `protobuf:"varint,88,opt,name=ppp_tx_pap_nack_count,json=pppTxPapNackCount" json:"ppp_tx_pap_nack_count,omitempty"`
	PppTxChapChallengeCount *uint64                `protobuf:"varint,89,opt,name=ppp_tx_chap_challenge_count,json=pppTxChapChallengeCount" json:"ppp_tx_chap_challenge_count,omitempty"`
	PppTxChapRespCount      *uint64                `protobuf:"varint,90,opt,name=ppp_tx_chap_resp_count,json=pppTxChapRespCount" json:"ppp_tx_chap_resp_count,omitempty"`
	PppTxChapSuccessCount   *uint64                `protobuf:"varint,91,opt,name=ppp_tx_chap_success_count,json=pppTxChapSuccessCount" json:"ppp_tx_chap_success_count,omitempty"`
	PppTxChapFailCount      *uint64                `protobuf:"varint,92,opt,name=ppp_tx_chap_fail_count,json=pppTxChapFailCount" json:"ppp_tx_chap_fail_count,omitempty"`
	PppTxIpcpConfReqCount   *uint64                `protobuf:"varint,93,opt,name=ppp_tx_ipcp_conf_req_count,json=pppTxIpcpConfReqCount" json:"ppp_tx_ipcp_conf_req_count,omitempty"`
	PppTxIpcpConfAckCount   *uint64                `protobuf:"varint,94,opt,name=ppp_tx_ipcp_conf_ack_count,json=pppTxIpcpConfAckCount" json:"ppp_tx_ipcp_conf_ack_count,omitempty"`
	PppTxIpcpConfNackCount  *uint64                `protobuf:"varint,95,opt,name=ppp_tx_ipcp_conf_nack_count,json=pppTxIpcpConfNackCount" json:"ppp_tx_ipcp_conf_nack_count,omitempty"`
	PppTxUnknownProtocol    *uint64                `protobuf:"varint,96,opt,name=ppp_tx_unknown_protocol,json=pppTxUnknownProtocol" json:"ppp_tx_unknown_protocol,omitempty"`
	TxPktSendFailed         *uint64                `protobuf:"varint,97,opt,name=tx_pkt_send_failed,json=txPktSendFailed" json:"tx_pkt_send_failed,omitempty"`
	TxPktErr                *uint64                `protobuf:"varint,98,opt,name=tx_pkt_err,json=txPktErr" json:"tx_pkt_err,omitempty"`
	TxMsgCnt                *uint64                `protobuf:"varint,99,opt,name=tx_msg_cnt,json=txMsgCnt" json:"tx_msg_cnt,omitempty"`
	TxMsgErr                *uint64                `protobuf:"varint,100,opt,name=tx_msg_err,json=txMsgErr" json:"tx_msg_err,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) Reset() {
	*x = JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType{}
	mi := &file_bbe_smgd_sub_mgmt_network_stats_oc_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) ProtoMessage() {
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) ProtoReflect() protoreflect.Message {
	mi := &file_bbe_smgd_sub_mgmt_network_stats_oc_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType.ProtoReflect.Descriptor instead.
func (*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) Descriptor() ([]byte, []int) {
	return file_bbe_smgd_sub_mgmt_network_stats_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 5}
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetRxCnt() uint64 {
	if x != nil && x.RxCnt != nil {
		return *x.RxCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetRxPktCnt() uint64 {
	if x != nil && x.RxPktCnt != nil {
		return *x.RxPktCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppRxPktCnt() uint64 {
	if x != nil && x.PppRxPktCnt != nil {
		return *x.PppRxPktCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetTxPktCnt() uint64 {
	if x != nil && x.TxPktCnt != nil {
		return *x.TxPktCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppRxLcpConfReqCount() uint64 {
	if x != nil && x.PppRxLcpConfReqCount != nil {
		return *x.PppRxLcpConfReqCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppRxLcpConfAckCount() uint64 {
	if x != nil && x.PppRxLcpConfAckCount != nil {
		return *x.PppRxLcpConfAckCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppRxLcpConfNackCount() uint64 {
	if x != nil && x.PppRxLcpConfNackCount != nil {
		return *x.PppRxLcpConfNackCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppRxLcpTermReqCount() uint64 {
	if x != nil && x.PppRxLcpTermReqCount != nil {
		return *x.PppRxLcpTermReqCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppRxLcpTermAckCount() uint64 {
	if x != nil && x.PppRxLcpTermAckCount != nil {
		return *x.PppRxLcpTermAckCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppRxLcpEchoReqCount() uint64 {
	if x != nil && x.PppRxLcpEchoReqCount != nil {
		return *x.PppRxLcpEchoReqCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppRxLcpEchoRespCount() uint64 {
	if x != nil && x.PppRxLcpEchoRespCount != nil {
		return *x.PppRxLcpEchoRespCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppRxPapReqCount() uint64 {
	if x != nil && x.PppRxPapReqCount != nil {
		return *x.PppRxPapReqCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppRxPapAckCount() uint64 {
	if x != nil && x.PppRxPapAckCount != nil {
		return *x.PppRxPapAckCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppRxPapNackCount() uint64 {
	if x != nil && x.PppRxPapNackCount != nil {
		return *x.PppRxPapNackCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppRxChapChallengeCount() uint64 {
	if x != nil && x.PppRxChapChallengeCount != nil {
		return *x.PppRxChapChallengeCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppRxChapRespCount() uint64 {
	if x != nil && x.PppRxChapRespCount != nil {
		return *x.PppRxChapRespCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppRxChapSuccessCount() uint64 {
	if x != nil && x.PppRxChapSuccessCount != nil {
		return *x.PppRxChapSuccessCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppRxChapFailCount() uint64 {
	if x != nil && x.PppRxChapFailCount != nil {
		return *x.PppRxChapFailCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppRxIpcpConfReqCount() uint64 {
	if x != nil && x.PppRxIpcpConfReqCount != nil {
		return *x.PppRxIpcpConfReqCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppRxIpcpConfAckCount() uint64 {
	if x != nil && x.PppRxIpcpConfAckCount != nil {
		return *x.PppRxIpcpConfAckCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppRxIpcpConfNackCount() uint64 {
	if x != nil && x.PppRxIpcpConfNackCount != nil {
		return *x.PppRxIpcpConfNackCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetRxMalformedCnt() uint64 {
	if x != nil && x.RxMalformedCnt != nil {
		return *x.RxMalformedCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppRxUnknownProtocol() uint64 {
	if x != nil && x.PppRxUnknownProtocol != nil {
		return *x.PppRxUnknownProtocol
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetRxMsgCnt() uint64 {
	if x != nil && x.RxMsgCnt != nil {
		return *x.RxMsgCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetRxMsgProcessdCnt() uint64 {
	if x != nil && x.RxMsgProcessdCnt != nil {
		return *x.RxMsgProcessdCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetRxMsgErr() uint64 {
	if x != nil && x.RxMsgErr != nil {
		return *x.RxMsgErr
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetRxInvalidMsgCnt() uint64 {
	if x != nil && x.RxInvalidMsgCnt != nil {
		return *x.RxInvalidMsgCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetTxCnt() uint64 {
	if x != nil && x.TxCnt != nil {
		return *x.TxCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppTxLcpConfReqCount() uint64 {
	if x != nil && x.PppTxLcpConfReqCount != nil {
		return *x.PppTxLcpConfReqCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppTxLcpConfAckCount() uint64 {
	if x != nil && x.PppTxLcpConfAckCount != nil {
		return *x.PppTxLcpConfAckCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppTxLcpConfNackCount() uint64 {
	if x != nil && x.PppTxLcpConfNackCount != nil {
		return *x.PppTxLcpConfNackCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppTxLcpEchoReqCount() uint64 {
	if x != nil && x.PppTxLcpEchoReqCount != nil {
		return *x.PppTxLcpEchoReqCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppTxLcpEchoRespCount() uint64 {
	if x != nil && x.PppTxLcpEchoRespCount != nil {
		return *x.PppTxLcpEchoRespCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppTxLcpTermReqCount() uint64 {
	if x != nil && x.PppTxLcpTermReqCount != nil {
		return *x.PppTxLcpTermReqCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppTxLcpTermAckCount() uint64 {
	if x != nil && x.PppTxLcpTermAckCount != nil {
		return *x.PppTxLcpTermAckCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppTxPapReqCount() uint64 {
	if x != nil && x.PppTxPapReqCount != nil {
		return *x.PppTxPapReqCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppTxPapAckCount() uint64 {
	if x != nil && x.PppTxPapAckCount != nil {
		return *x.PppTxPapAckCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppTxPapNackCount() uint64 {
	if x != nil && x.PppTxPapNackCount != nil {
		return *x.PppTxPapNackCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppTxChapChallengeCount() uint64 {
	if x != nil && x.PppTxChapChallengeCount != nil {
		return *x.PppTxChapChallengeCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppTxChapRespCount() uint64 {
	if x != nil && x.PppTxChapRespCount != nil {
		return *x.PppTxChapRespCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppTxChapSuccessCount() uint64 {
	if x != nil && x.PppTxChapSuccessCount != nil {
		return *x.PppTxChapSuccessCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppTxChapFailCount() uint64 {
	if x != nil && x.PppTxChapFailCount != nil {
		return *x.PppTxChapFailCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppTxIpcpConfReqCount() uint64 {
	if x != nil && x.PppTxIpcpConfReqCount != nil {
		return *x.PppTxIpcpConfReqCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppTxIpcpConfAckCount() uint64 {
	if x != nil && x.PppTxIpcpConfAckCount != nil {
		return *x.PppTxIpcpConfAckCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppTxIpcpConfNackCount() uint64 {
	if x != nil && x.PppTxIpcpConfNackCount != nil {
		return *x.PppTxIpcpConfNackCount
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetPppTxUnknownProtocol() uint64 {
	if x != nil && x.PppTxUnknownProtocol != nil {
		return *x.PppTxUnknownProtocol
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetTxPktSendFailed() uint64 {
	if x != nil && x.TxPktSendFailed != nil {
		return *x.TxPktSendFailed
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetTxPktErr() uint64 {
	if x != nil && x.TxPktErr != nil {
		return *x.TxPktErr
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetTxMsgCnt() uint64 {
	if x != nil && x.TxMsgCnt != nil {
		return *x.TxMsgCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType) GetTxMsgErr() uint64 {
	if x != nil && x.TxMsgErr != nil {
		return *x.TxMsgErr
	}
	return 0
}

type JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	RxNetworkPktCnt          *uint64                `protobuf:"varint,51,opt,name=rx_network_pkt_cnt,json=rxNetworkPktCnt" json:"rx_network_pkt_cnt,omitempty"`
	RxMalformedPktCnt        *uint64                `protobuf:"varint,52,opt,name=rx_malformed_pkt_cnt,json=rxMalformedPktCnt" json:"rx_malformed_pkt_cnt,omitempty"`
	RxNoIfPktCnt             *uint64                `protobuf:"varint,53,opt,name=rx_no_if_pkt_cnt,json=rxNoIfPktCnt" json:"rx_no_if_pkt_cnt,omitempty"`
	RxSendSucceededPktCnt    *uint64                `protobuf:"varint,54,opt,name=rx_send_succeeded_pkt_cnt,json=rxSendSucceededPktCnt" json:"rx_send_succeeded_pkt_cnt,omitempty"`
	RxSendFailedPktCnt       *uint64                `protobuf:"varint,55,opt,name=rx_send_failed_pkt_cnt,json=rxSendFailedPktCnt" json:"rx_send_failed_pkt_cnt,omitempty"`
	RxUnsupportedPktCnt      *uint64                `protobuf:"varint,56,opt,name=rx_unsupported_pkt_cnt,json=rxUnsupportedPktCnt" json:"rx_unsupported_pkt_cnt,omitempty"`
	RxSetupRequestCnt        *uint64                `protobuf:"varint,57,opt,name=rx_setup_request_cnt,json=rxSetupRequestCnt" json:"rx_setup_request_cnt,omitempty"`
	RxHelloPktCnt            *uint64                `protobuf:"varint,58,opt,name=rx_hello_pkt_cnt,json=rxHelloPktCnt" json:"rx_hello_pkt_cnt,omitempty"`
	RxTearDownPktCnt         *uint64                `protobuf:"varint,59,opt,name=rx_tear_down_pkt_cnt,json=rxTearDownPktCnt" json:"rx_tear_down_pkt_cnt,omitempty"`
	RxNotifyPktCnt           *uint64                `protobuf:"varint,60,opt,name=rx_notify_pkt_cnt,json=rxNotifyPktCnt" json:"rx_notify_pkt_cnt,omitempty"`
	TxNetworkPktCnt          *uint64                `protobuf:"varint,61,opt,name=tx_network_pkt_cnt,json=txNetworkPktCnt" json:"tx_network_pkt_cnt,omitempty"`
	TxNullPktCnt             *uint64                `protobuf:"varint,62,opt,name=tx_null_pkt_cnt,json=txNullPktCnt" json:"tx_null_pkt_cnt,omitempty"`
	TxNoIfPktCnt             *uint64                `protobuf:"varint,63,opt,name=tx_no_if_pkt_cnt,json=txNoIfPktCnt" json:"tx_no_if_pkt_cnt,omitempty"`
	TxSendSucceededPktCnt    *uint64                `protobuf:"varint,64,opt,name=tx_send_succeeded_pkt_cnt,json=txSendSucceededPktCnt" json:"tx_send_succeeded_pkt_cnt,omitempty"`
	TxSendFailedPktCnt       *uint64                `protobuf:"varint,65,opt,name=tx_send_failed_pkt_cnt,json=txSendFailedPktCnt" json:"tx_send_failed_pkt_cnt,omitempty"`
	TxSetupRequestPktCnt     *uint64                `protobuf:"varint,66,opt,name=tx_setup_request_pkt_cnt,json=txSetupRequestPktCnt" json:"tx_setup_request_pkt_cnt,omitempty"`
	TxSetupAcceptPktCnt      *uint64                `protobuf:"varint,67,opt,name=tx_setup_accept_pkt_cnt,json=txSetupAcceptPktCnt" json:"tx_setup_accept_pkt_cnt,omitempty"`
	TxSetupDenyPktCnt        *uint64                `protobuf:"varint,68,opt,name=tx_setup_deny_pkt_cnt,json=txSetupDenyPktCnt" json:"tx_setup_deny_pkt_cnt,omitempty"`
	TxHelloPktCnt            *uint64                `protobuf:"varint,69,opt,name=tx_hello_pkt_cnt,json=txHelloPktCnt" json:"tx_hello_pkt_cnt,omitempty"`
	TxTearDownPktCnt         *uint64                `protobuf:"varint,70,opt,name=tx_tear_down_pkt_cnt,json=txTearDownPktCnt" json:"tx_tear_down_pkt_cnt,omitempty"`
	TxNotifyPktCnt           *uint64                `protobuf:"varint,71,opt,name=tx_notify_pkt_cnt,json=txNotifyPktCnt" json:"tx_notify_pkt_cnt,omitempty"`
	InflightHagSessionsCnt   *uint64                `protobuf:"varint,72,opt,name=inflight_hag_sessions_cnt,json=inflightHagSessionsCnt" json:"inflight_hag_sessions_cnt,omitempty"`
	SuccessfulHagSessionsCnt *uint64                `protobuf:"varint,73,opt,name=successful_hag_sessions_cnt,json=successfulHagSessionsCnt" json:"successful_hag_sessions_cnt,omitempty"`
	FailedHagSessionsCnt     *uint64                `protobuf:"varint,74,opt,name=failed_hag_sessions_cnt,json=failedHagSessionsCnt" json:"failed_hag_sessions_cnt,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType) Reset() {
	*x = JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType{}
	mi := &file_bbe_smgd_sub_mgmt_network_stats_oc_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType) ProtoMessage() {
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType) ProtoReflect() protoreflect.Message {
	mi := &file_bbe_smgd_sub_mgmt_network_stats_oc_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType.ProtoReflect.Descriptor instead.
func (*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType) Descriptor() ([]byte, []int) {
	return file_bbe_smgd_sub_mgmt_network_stats_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 6}
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType) GetRxNetworkPktCnt() uint64 {
	if x != nil && x.RxNetworkPktCnt != nil {
		return *x.RxNetworkPktCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType) GetRxMalformedPktCnt() uint64 {
	if x != nil && x.RxMalformedPktCnt != nil {
		return *x.RxMalformedPktCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType) GetRxNoIfPktCnt() uint64 {
	if x != nil && x.RxNoIfPktCnt != nil {
		return *x.RxNoIfPktCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType) GetRxSendSucceededPktCnt() uint64 {
	if x != nil && x.RxSendSucceededPktCnt != nil {
		return *x.RxSendSucceededPktCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType) GetRxSendFailedPktCnt() uint64 {
	if x != nil && x.RxSendFailedPktCnt != nil {
		return *x.RxSendFailedPktCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType) GetRxUnsupportedPktCnt() uint64 {
	if x != nil && x.RxUnsupportedPktCnt != nil {
		return *x.RxUnsupportedPktCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType) GetRxSetupRequestCnt() uint64 {
	if x != nil && x.RxSetupRequestCnt != nil {
		return *x.RxSetupRequestCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType) GetRxHelloPktCnt() uint64 {
	if x != nil && x.RxHelloPktCnt != nil {
		return *x.RxHelloPktCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType) GetRxTearDownPktCnt() uint64 {
	if x != nil && x.RxTearDownPktCnt != nil {
		return *x.RxTearDownPktCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType) GetRxNotifyPktCnt() uint64 {
	if x != nil && x.RxNotifyPktCnt != nil {
		return *x.RxNotifyPktCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType) GetTxNetworkPktCnt() uint64 {
	if x != nil && x.TxNetworkPktCnt != nil {
		return *x.TxNetworkPktCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType) GetTxNullPktCnt() uint64 {
	if x != nil && x.TxNullPktCnt != nil {
		return *x.TxNullPktCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType) GetTxNoIfPktCnt() uint64 {
	if x != nil && x.TxNoIfPktCnt != nil {
		return *x.TxNoIfPktCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType) GetTxSendSucceededPktCnt() uint64 {
	if x != nil && x.TxSendSucceededPktCnt != nil {
		return *x.TxSendSucceededPktCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType) GetTxSendFailedPktCnt() uint64 {
	if x != nil && x.TxSendFailedPktCnt != nil {
		return *x.TxSendFailedPktCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType) GetTxSetupRequestPktCnt() uint64 {
	if x != nil && x.TxSetupRequestPktCnt != nil {
		return *x.TxSetupRequestPktCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType) GetTxSetupAcceptPktCnt() uint64 {
	if x != nil && x.TxSetupAcceptPktCnt != nil {
		return *x.TxSetupAcceptPktCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType) GetTxSetupDenyPktCnt() uint64 {
	if x != nil && x.TxSetupDenyPktCnt != nil {
		return *x.TxSetupDenyPktCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType) GetTxHelloPktCnt() uint64 {
	if x != nil && x.TxHelloPktCnt != nil {
		return *x.TxHelloPktCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType) GetTxTearDownPktCnt() uint64 {
	if x != nil && x.TxTearDownPktCnt != nil {
		return *x.TxTearDownPktCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType) GetTxNotifyPktCnt() uint64 {
	if x != nil && x.TxNotifyPktCnt != nil {
		return *x.TxNotifyPktCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType) GetInflightHagSessionsCnt() uint64 {
	if x != nil && x.InflightHagSessionsCnt != nil {
		return *x.InflightHagSessionsCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType) GetSuccessfulHagSessionsCnt() uint64 {
	if x != nil && x.SuccessfulHagSessionsCnt != nil {
		return *x.SuccessfulHagSessionsCnt
	}
	return 0
}

func (x *JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType) GetFailedHagSessionsCnt() uint64 {
	if x != nil && x.FailedHagSessionsCnt != nil {
		return *x.FailedHagSessionsCnt
	}
	return 0
}

var file_bbe_smgd_sub_mgmt_network_stats_oc_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*JunosNetworkStats)(nil),
		Field:         39,
		Name:          "jnpr_junos_network_stats_ext",
		Tag:           "bytes,39,opt,name=jnpr_junos_network_stats_ext",
		Filename:      "bbe-smgd_sub_mgmt_network_stats_oc.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional junos_network_stats jnpr_junos_network_stats_ext = 39;
	E_JnprJunosNetworkStatsExt = &file_bbe_smgd_sub_mgmt_network_stats_oc_proto_extTypes[0]
)

var File_bbe_smgd_sub_mgmt_network_stats_oc_proto protoreflect.FileDescriptor

var file_bbe_smgd_sub_mgmt_network_stats_oc_proto_rawDesc = string([]byte{
	0x0a, 0x28, 0x62, 0x62, 0x65, 0x2d, 0x73, 0x6d, 0x67, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x6d,
	0x67, 0x6d, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x5f, 0x6f, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xaf, 0x54, 0x0a, 0x13, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x1a, 0xdc, 0x53, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x71, 0x0a, 0x15, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x14, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xd9, 0x52, 0x0a, 0x1a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x63, 0x0a, 0x07, 0x75, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x18,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x75, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x75, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x1a, 0xd5, 0x51, 0x0a, 0x0c, 0x75, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x6d, 0x0a, 0x06, 0x75, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6a, 0x75,
	0x6e, 0x6f, 0x73, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x06, 0x75, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x1a, 0xd5, 0x50, 0x0a, 0x0b, 0x75, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x09, 0x75, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40,
	0x02, 0x08, 0x01, 0x52, 0x08, 0x75, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x76, 0x0a,
	0x05, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e,
	0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x1a, 0xa9, 0x4f, 0x0a, 0x0a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6c, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x75, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x1a, 0x90,
	0x4e, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x85, 0x01, 0x0a, 0x02, 0x69, 0x6f, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x74, 0x2e,
	0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6f, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x02, 0x69, 0x6f, 0x12, 0x8b, 0x01, 0x0a, 0x04, 0x64, 0x68, 0x63, 0x70,
	0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x76, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x75, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x64, 0x68, 0x63, 0x70, 0x12, 0x88, 0x01, 0x0a, 0x03, 0x70, 0x70, 0x70, 0x18, 0x99, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x75, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x75, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x70, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x03, 0x70, 0x70, 0x70,
	0x12, 0x8e, 0x01, 0x0a, 0x05, 0x70, 0x70, 0x70, 0x6f, 0x65, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x77, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x70, 0x70, 0x6f, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x70, 0x70, 0x70, 0x6f,
	0x65, 0x12, 0x8e, 0x01, 0x0a, 0x05, 0x64, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x9c, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x77, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x75, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x64, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x64, 0x76, 0x6c,
	0x61, 0x6e, 0x12, 0x8b, 0x01, 0x0a, 0x04, 0x6c, 0x32, 0x74, 0x70, 0x18, 0x9b, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x76, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x75, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6c, 0x32, 0x74, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6c, 0x32, 0x74, 0x70,
	0x12, 0x88, 0x01, 0x0a, 0x03, 0x68, 0x61, 0x67, 0x18, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x75, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x68, 0x61,
	0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x03, 0x68, 0x61, 0x67, 0x1a, 0xf9, 0x0d, 0x0a, 0x07,
	0x69, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x6c, 0x32, 0x5f, 0x72, 0x78,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x6c, 0x32, 0x52, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x43,
	0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x32, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x11, 0x6c, 0x32, 0x52, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x6c, 0x32, 0x5f, 0x72, 0x78, 0x5f, 0x6d, 0x61, 0x6c,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x6c, 0x32, 0x52, 0x78, 0x4d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x43,
	0x6e, 0x74, 0x12, 0x29, 0x0a, 0x11, 0x6c, 0x32, 0x5f, 0x72, 0x78, 0x5f, 0x69, 0x66, 0x64, 0x5f,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6c,
	0x32, 0x52, 0x78, 0x49, 0x66, 0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x29, 0x0a,
	0x11, 0x6c, 0x32, 0x5f, 0x72, 0x78, 0x5f, 0x69, 0x66, 0x6c, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6c, 0x32, 0x52, 0x78, 0x49, 0x66,
	0x6c, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x10, 0x6c, 0x32, 0x5f, 0x72,
	0x78, 0x5f, 0x6e, 0x6f, 0x5f, 0x69, 0x66, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x38, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x6c, 0x32, 0x52, 0x78, 0x4e, 0x6f, 0x49, 0x66, 0x66, 0x43, 0x6e, 0x74,
	0x12, 0x32, 0x0a, 0x16, 0x6c, 0x32, 0x5f, 0x72, 0x78, 0x5f, 0x69, 0x66, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x12, 0x6c, 0x32, 0x52, 0x78, 0x49, 0x66, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x27, 0x6c, 0x32, 0x5f, 0x62, 0x62, 0x65, 0x5f, 0x69,
	0x6f, 0x5f, 0x72, 0x63, 0x76, 0x5f, 0x6c, 0x33, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18,
	0x3a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x20, 0x6c, 0x32, 0x42, 0x62, 0x65, 0x49, 0x6f, 0x52, 0x63,
	0x76, 0x4c, 0x33, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x44, 0x0a, 0x1f, 0x6c, 0x32, 0x5f, 0x72, 0x78,
	0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x65,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x1b, 0x6c, 0x32, 0x52, 0x78, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x49, 0x6e, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x46, 0x0a,
	0x20, 0x6c, 0x32, 0x5f, 0x72, 0x78, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x65, 0x74, 0x36, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1c, 0x6c, 0x32, 0x52, 0x78, 0x55, 0x6e, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x65, 0x74, 0x36, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x42, 0x0a, 0x1e, 0x6c, 0x32, 0x5f, 0x72, 0x78, 0x5f, 0x75,
	0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x6c,
	0x32, 0x52, 0x78, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x55, 0x64,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x38, 0x0a, 0x19, 0x6c, 0x32, 0x5f,
	0x72, 0x78, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x70,
	0x75, 0x6e, 0x74, 0x5f, 0x61, 0x66, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6c, 0x32,
	0x52, 0x78, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x50, 0x75, 0x6e,
	0x74, 0x41, 0x66, 0x12, 0x3a, 0x0a, 0x1b, 0x6c, 0x32, 0x5f, 0x72, 0x78, 0x5f, 0x76, 0x34, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x75, 0x6e, 0x74, 0x5f, 0x70,
	0x6b, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6c, 0x32, 0x52, 0x78, 0x56, 0x34,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74, 0x68, 0x50, 0x75, 0x6e, 0x74, 0x50, 0x6b, 0x74, 0x12,
	0x43, 0x0a, 0x20, 0x6c, 0x32, 0x5f, 0x72, 0x78, 0x5f, 0x76, 0x34, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x64,
	0x72, 0x6f, 0x70, 0x18, 0x40, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x6c, 0x32, 0x52, 0x78, 0x56,
	0x34, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74, 0x68, 0x50, 0x75, 0x6e, 0x74, 0x50, 0x6b, 0x74,
	0x44, 0x72, 0x6f, 0x70, 0x12, 0x3a, 0x0a, 0x1b, 0x6c, 0x32, 0x5f, 0x72, 0x78, 0x5f, 0x76, 0x36,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x75, 0x6e, 0x74, 0x5f,
	0x70, 0x6b, 0x74, 0x18, 0x41, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6c, 0x32, 0x52, 0x78, 0x56,
	0x36, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74, 0x68, 0x50, 0x75, 0x6e, 0x74, 0x50, 0x6b, 0x74,
	0x12, 0x43, 0x0a, 0x20, 0x6c, 0x32, 0x5f, 0x72, 0x78, 0x5f, 0x76, 0x36, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x5f,
	0x64, 0x72, 0x6f, 0x70, 0x18, 0x42, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x6c, 0x32, 0x52, 0x78,
	0x56, 0x36, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74, 0x68, 0x50, 0x75, 0x6e, 0x74, 0x50, 0x6b,
	0x74, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x29, 0x0a, 0x11, 0x6c, 0x32, 0x5f, 0x74, 0x78, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x43, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x6c, 0x32, 0x54, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x43, 0x6e, 0x74,
	0x12, 0x2d, 0x0a, 0x13, 0x6c, 0x32, 0x5f, 0x74, 0x78, 0x5f, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x64, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x44, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6c,
	0x32, 0x54, 0x78, 0x4d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x43, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x10, 0x6c, 0x32, 0x5f, 0x74, 0x78, 0x5f, 0x6e, 0x6f, 0x5f, 0x69, 0x66, 0x64, 0x5f,
	0x63, 0x6e, 0x74, 0x18, 0x45, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6c, 0x32, 0x54, 0x78, 0x4e,
	0x6f, 0x49, 0x66, 0x64, 0x43, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x11, 0x6c, 0x32, 0x5f, 0x74, 0x78,
	0x5f, 0x69, 0x66, 0x6c, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x6c, 0x32, 0x54, 0x78, 0x49, 0x66, 0x6c, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x12, 0x35, 0x0a, 0x18, 0x6c, 0x32, 0x5f, 0x62, 0x62, 0x65, 0x5f, 0x69, 0x6f, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x78, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x47,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6c, 0x32, 0x42, 0x62, 0x65, 0x49, 0x6f, 0x53, 0x65, 0x6e,
	0x64, 0x54, 0x78, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x20, 0x6c, 0x32, 0x5f,
	0x62, 0x62, 0x65, 0x5f, 0x69, 0x6f, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x78, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x48, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x1a, 0x6c, 0x32, 0x42, 0x62, 0x65, 0x49, 0x6f, 0x53, 0x65, 0x6e, 0x64,
	0x54, 0x78, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12,
	0x3e, 0x0a, 0x1d, 0x6c, 0x32, 0x5f, 0x74, 0x78, 0x5f, 0x76, 0x34, 0x5f, 0x6f, 0x75, 0x74, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x66,
	0x18, 0x49, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x6c, 0x32, 0x54, 0x78, 0x56, 0x34, 0x4f, 0x75,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x66, 0x12,
	0x3e, 0x0a, 0x1d, 0x6c, 0x32, 0x5f, 0x74, 0x78, 0x5f, 0x76, 0x36, 0x5f, 0x6f, 0x75, 0x74, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x66,
	0x18, 0x4a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x6c, 0x32, 0x54, 0x78, 0x56, 0x36, 0x4f, 0x75,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x66, 0x12,
	0x27, 0x0a, 0x10, 0x6c, 0x33, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x63, 0x6e, 0x74, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6c, 0x33, 0x52, 0x78, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x6c, 0x33, 0x5f, 0x72,
	0x78, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x6c, 0x33,
	0x52, 0x78, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x27, 0x0a, 0x10, 0x6c, 0x33, 0x5f, 0x74, 0x78, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x6c, 0x33, 0x54, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x29,
	0x0a, 0x11, 0x6c, 0x33, 0x5f, 0x74, 0x78, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6c, 0x33, 0x54, 0x78, 0x53,
	0x65, 0x6e, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x17, 0x6c, 0x33, 0x5f,
	0x74, 0x78, 0x5f, 0x76, 0x34, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6c, 0x33, 0x54, 0x78,
	0x56, 0x34, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x3f, 0x0a, 0x1d, 0x6c, 0x33, 0x5f, 0x74, 0x78, 0x5f, 0x76, 0x34, 0x5f, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73,
	0x18, 0x50, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x6c, 0x33, 0x54, 0x78, 0x56, 0x34, 0x4b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x73,
	0x12, 0x34, 0x0a, 0x17, 0x6c, 0x33, 0x5f, 0x74, 0x78, 0x5f, 0x76, 0x36, 0x5f, 0x6b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x51, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x13, 0x6c, 0x33, 0x54, 0x78, 0x56, 0x36, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x3f, 0x0a, 0x1d, 0x6c, 0x33, 0x5f, 0x74, 0x78, 0x5f,
	0x76, 0x36, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x52, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x6c,
	0x33, 0x54, 0x78, 0x56, 0x36, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x1a, 0xb6, 0x05, 0x0a, 0x09, 0x64, 0x68, 0x63, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x78,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x61,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x65, 0x72,
	0x61, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x78, 0x5f, 0x6e, 0x6f, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x72, 0x78, 0x4e, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x10, 0x72, 0x78, 0x5f, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64,
	0x5f, 0x63, 0x6e, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x78, 0x4d, 0x61,
	0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x43, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0c, 0x72, 0x78,
	0x5f, 0x6e, 0x6f, 0x5f, 0x69, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x72, 0x78, 0x4e, 0x6f, 0x49, 0x66, 0x43, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x72,
	0x78, 0x5f, 0x69, 0x66, 0x6c, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x38, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x78, 0x49, 0x66, 0x6c, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x78, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x78, 0x53, 0x65, 0x6e,
	0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x78, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x74, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x74, 0x78, 0x5f, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x63, 0x6e, 0x74,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x78, 0x4d, 0x61, 0x6c, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x64, 0x43, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x78, 0x5f, 0x6e, 0x75, 0x6c,
	0x6c, 0x5f, 0x70, 0x6b, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x78, 0x4e,
	0x75, 0x6c, 0x6c, 0x50, 0x6b, 0x74, 0x12, 0x1f, 0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x6e, 0x6f, 0x5f,
	0x69, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x78,
	0x4e, 0x6f, 0x49, 0x66, 0x43, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0d, 0x74, 0x78, 0x5f, 0x6e, 0x6f,
	0x5f, 0x69, 0x66, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x74, 0x78, 0x4e, 0x6f, 0x49, 0x66, 0x66, 0x43, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0d, 0x74, 0x78,
	0x5f, 0x6e, 0x6f, 0x5f, 0x72, 0x74, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x40, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x74, 0x78, 0x4e, 0x6f, 0x52, 0x74, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0d, 0x74, 0x78, 0x5f, 0x61, 0x72, 0x70, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x41,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x78, 0x41, 0x72, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x78, 0x5f, 0x69, 0x66, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x42, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x78, 0x49, 0x66, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x78, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x43, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74,
	0x78, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x72,
	0x78, 0x5f, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x44, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x72, 0x78, 0x57,
	0x68, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x1a, 0xea, 0x12, 0x0a, 0x08, 0x70, 0x70, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a,
	0x12, 0x72, 0x78, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x6b, 0x74, 0x5f,
	0x63, 0x6e, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x78, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6b, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x11, 0x72, 0x78,
	0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x78, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50,
	0x6b, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x13, 0x72, 0x78, 0x5f, 0x6c, 0x63, 0x70, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x72, 0x78, 0x4c, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71,
	0x43, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x13, 0x72, 0x78, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x72, 0x78, 0x4c, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x41, 0x63, 0x6b, 0x43, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x14, 0x72, 0x78, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x5f, 0x6e, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x72, 0x78, 0x4c, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x4e, 0x61, 0x63, 0x6b, 0x43, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x13, 0x72, 0x78, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x5f, 0x72, 0x65, 0x6a, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x72, 0x78, 0x4c, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x6a, 0x43, 0x6e, 0x74, 0x12,
	0x2c, 0x0a, 0x13, 0x72, 0x78, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x72,
	0x65, 0x71, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x78,
	0x4c, 0x63, 0x70, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x43, 0x6e, 0x74, 0x12, 0x2c, 0x0a,
	0x13, 0x72, 0x78, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x61, 0x63, 0x6b,
	0x5f, 0x63, 0x6e, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x78, 0x4c, 0x63,
	0x70, 0x54, 0x65, 0x72, 0x6d, 0x41, 0x63, 0x6b, 0x43, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x13, 0x72,
	0x78, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x6a, 0x5f, 0x63,
	0x6e, 0x74, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x78, 0x4c, 0x63, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x6a, 0x43, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x17, 0x72, 0x78, 0x5f,
	0x6c, 0x63, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x6a,
	0x5f, 0x63, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x72, 0x78, 0x4c, 0x63,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x65, 0x6a, 0x43, 0x6e, 0x74, 0x12,
	0x2c, 0x0a, 0x13, 0x72, 0x78, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x72,
	0x65, 0x71, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x78,
	0x4c, 0x63, 0x70, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x43, 0x6e, 0x74, 0x12, 0x30, 0x0a,
	0x15, 0x72, 0x78, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x78,
	0x4c, 0x63, 0x70, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6e, 0x74, 0x12,
	0x32, 0x0a, 0x16, 0x72, 0x78, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x12, 0x72, 0x78, 0x4c, 0x63, 0x70, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x43, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0e, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x70, 0x5f, 0x72, 0x65,
	0x71, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x40, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x78, 0x50,
	0x61, 0x70, 0x52, 0x65, 0x71, 0x43, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0e, 0x72, 0x78, 0x5f, 0x70,
	0x61, 0x70, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x41, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x72, 0x78, 0x50, 0x61, 0x70, 0x41, 0x63, 0x6b, 0x43, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0f, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6e, 0x74,
	0x18, 0x42, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x78, 0x50, 0x61, 0x70, 0x4e, 0x61, 0x63,
	0x6b, 0x43, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x5f,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x43, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x12, 0x72, 0x78, 0x43, 0x68, 0x61, 0x70, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x43, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x10, 0x72, 0x78, 0x5f, 0x63, 0x68,
	0x61, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x44, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x72, 0x78, 0x43, 0x68, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x43, 0x6e, 0x74,
	0x12, 0x2d, 0x0a, 0x13, 0x72, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x5f, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x45, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x72,
	0x78, 0x43, 0x68, 0x61, 0x70, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6e, 0x74, 0x12,
	0x2d, 0x0a, 0x13, 0x72, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x72, 0x78,
	0x43, 0x68, 0x61, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x0f, 0x72, 0x78, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x63, 0x6e,
	0x74, 0x18, 0x47, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x78, 0x49, 0x70, 0x63, 0x70, 0x52,
	0x65, 0x71, 0x43, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0f, 0x72, 0x78, 0x5f, 0x69, 0x70, 0x63, 0x70,
	0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x48, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x72, 0x78, 0x49, 0x70, 0x63, 0x70, 0x41, 0x63, 0x6b, 0x43, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x10,
	0x72, 0x78, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x6e, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6e, 0x74,
	0x18, 0x49, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x78, 0x49, 0x70, 0x63, 0x70, 0x4e, 0x61,
	0x63, 0x6b, 0x43, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x11, 0x72, 0x78, 0x5f, 0x69, 0x70, 0x76, 0x36,
	0x63, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x72, 0x78, 0x49, 0x70, 0x76, 0x36, 0x63, 0x70, 0x52, 0x65, 0x71, 0x43, 0x6e, 0x74,
	0x12, 0x29, 0x0a, 0x11, 0x72, 0x78, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x63, 0x70, 0x5f, 0x61, 0x63,
	0x6b, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x78, 0x49,
	0x70, 0x76, 0x36, 0x63, 0x70, 0x41, 0x63, 0x6b, 0x43, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x72,
	0x78, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x63, 0x70, 0x5f, 0x6e, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6e,
	0x74, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x78, 0x49, 0x70, 0x76, 0x36, 0x63,
	0x70, 0x4e, 0x61, 0x63, 0x6b, 0x43, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x78, 0x5f, 0x6d,
	0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x4d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x72, 0x78, 0x4d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x43,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0c, 0x72, 0x78, 0x5f, 0x6e, 0x6f, 0x5f, 0x69, 0x66, 0x5f, 0x63,
	0x6e, 0x74, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x78, 0x4e, 0x6f, 0x49, 0x66,
	0x43, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x78, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x78, 0x55,
	0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78,
	0x5f, 0x63, 0x6e, 0x74, 0x18, 0x50, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x78, 0x43, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x13, 0x74, 0x78, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x5f, 0x72, 0x65, 0x71, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x51, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x74, 0x78, 0x4c, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71, 0x43, 0x6e, 0x74, 0x12,
	0x2c, 0x0a, 0x13, 0x74, 0x78, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x61,
	0x63, 0x6b, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x52, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x78,
	0x4c, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x41, 0x63, 0x6b, 0x43, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x14, 0x74, 0x78, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x6e, 0x61, 0x63,
	0x6b, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x53, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x78, 0x4c,
	0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x4e, 0x61, 0x63, 0x6b, 0x43, 0x6e, 0x74, 0x12, 0x2c, 0x0a,
	0x13, 0x74, 0x78, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x72, 0x65, 0x6a,
	0x5f, 0x63, 0x6e, 0x74, 0x18, 0x54, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x78, 0x4c, 0x63,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x6a, 0x43, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x13, 0x74,
	0x78, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x63,
	0x6e, 0x74, 0x18, 0x55, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x78, 0x4c, 0x63, 0x70, 0x45,
	0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x43, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x15, 0x74, 0x78, 0x5f,
	0x6c, 0x63, 0x70, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x63,
	0x6e, 0x74, 0x18, 0x56, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74, 0x78, 0x4c, 0x63, 0x70, 0x45,
	0x63, 0x68, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x16, 0x74,
	0x78, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65,
	0x71, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x57, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x78, 0x4c,
	0x63, 0x70, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x43, 0x6e, 0x74, 0x12,
	0x2c, 0x0a, 0x13, 0x74, 0x78, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x72,
	0x65, 0x71, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x58, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x78,
	0x4c, 0x63, 0x70, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x43, 0x6e, 0x74, 0x12, 0x2c, 0x0a,
	0x13, 0x74, 0x78, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x61, 0x63, 0x6b,
	0x5f, 0x63, 0x6e, 0x74, 0x18, 0x59, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x78, 0x4c, 0x63,
	0x70, 0x54, 0x65, 0x72, 0x6d, 0x41, 0x63, 0x6b, 0x43, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0e, 0x74,
	0x78, 0x5f, 0x70, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x5a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x78, 0x50, 0x61, 0x70, 0x52, 0x65, 0x71, 0x43, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0e, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x70, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x63,
	0x6e, 0x74, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x78, 0x50, 0x61, 0x70, 0x41,
	0x63, 0x6b, 0x43, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0f, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x70, 0x5f,
	0x6e, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x74, 0x78, 0x50, 0x61, 0x70, 0x4e, 0x61, 0x63, 0x6b, 0x43, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15,
	0x74, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x78, 0x43,
	0x68, 0x61, 0x70, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x10, 0x74, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f,
	0x63, 0x6e, 0x74, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x78, 0x43, 0x68, 0x61,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x43, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x74, 0x78, 0x5f, 0x63,
	0x68, 0x61, 0x70, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18,
	0x5f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x78, 0x43, 0x68, 0x61, 0x70, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x43, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x74, 0x78, 0x5f, 0x63, 0x68,
	0x61, 0x70, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x60,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x78, 0x43, 0x68, 0x61, 0x70, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x43, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0f, 0x74, 0x78, 0x5f, 0x69, 0x70, 0x63,
	0x70, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x61, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x74, 0x78, 0x49, 0x70, 0x63, 0x70, 0x52, 0x65, 0x71, 0x43, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0f, 0x74, 0x78, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6e, 0x74,
	0x18, 0x62, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x78, 0x49, 0x70, 0x63, 0x70, 0x41, 0x63,
	0x6b, 0x43, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x10, 0x74, 0x78, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f,
	0x6e, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x63, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x74, 0x78, 0x49, 0x70, 0x63, 0x70, 0x4e, 0x61, 0x63, 0x6b, 0x43, 0x6e, 0x74, 0x12, 0x29, 0x0a,
	0x11, 0x74, 0x78, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x63, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x63,
	0x6e, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x78, 0x49, 0x70, 0x76, 0x36,
	0x63, 0x70, 0x52, 0x65, 0x71, 0x43, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x11, 0x74, 0x78, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x63, 0x70, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x78, 0x49, 0x70, 0x76, 0x36, 0x63, 0x70, 0x41, 0x63, 0x6b,
	0x43, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x74, 0x78, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x63, 0x70,
	0x5f, 0x6e, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x74, 0x78, 0x49, 0x70, 0x76, 0x36, 0x63, 0x70, 0x4e, 0x61, 0x63, 0x6b, 0x43, 0x6e, 0x74,
	0x12, 0x2b, 0x0a, 0x12, 0x74, 0x78, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x70,
	0x6b, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x78,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x6b, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x74, 0x78, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18,
	0x68, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x78, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x78, 0x5f, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x64, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x69, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74,
	0x78, 0x4d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x43, 0x6e, 0x74, 0x1a, 0xe1, 0x02,
	0x0a, 0x0a, 0x70, 0x70, 0x70, 0x6f, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x72, 0x78, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x78,
	0x43, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x64, 0x69, 0x5f, 0x63,
	0x6e, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x78, 0x50, 0x61, 0x64, 0x69,
	0x43, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x64, 0x72, 0x5f, 0x63,
	0x6e, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x78, 0x50, 0x61, 0x64, 0x72,
	0x43, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x70, 0x70, 0x70, 0x5f, 0x63, 0x6e,
	0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x78, 0x50, 0x70, 0x70, 0x43, 0x6e,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x78, 0x5f, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x64, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x78, 0x4d,
	0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x43, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0c, 0x72,
	0x78, 0x5f, 0x6e, 0x6f, 0x5f, 0x69, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x72, 0x78, 0x4e, 0x6f, 0x49, 0x66, 0x43, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x78, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x78, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x64, 0x69, 0x5f, 0x65,
	0x72, 0x61, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x3a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x72, 0x78, 0x50, 0x61, 0x64, 0x69, 0x45, 0x72, 0x61, 0x44, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x3b,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x78, 0x43, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x74,
	0x78, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x78, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x1a, 0x30, 0x0a, 0x0a, 0x64, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6e, 0x74,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x43, 0x6e, 0x74, 0x1a, 0xc1, 0x13, 0x0a, 0x09, 0x6c, 0x32, 0x74, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x78, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x72, 0x78, 0x43, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x70,
	0x6b, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x78,
	0x50, 0x6b, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0e, 0x70, 0x70, 0x70, 0x5f, 0x72, 0x78,
	0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x70, 0x70, 0x70, 0x52, 0x78, 0x50, 0x6b, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x74,
	0x78, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x74, 0x78, 0x50, 0x6b, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x19, 0x70, 0x70, 0x70,
	0x5f, 0x72, 0x78, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x72, 0x65, 0x71,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x70, 0x70,
	0x70, 0x52, 0x78, 0x4c, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x37, 0x0a, 0x19, 0x70, 0x70, 0x70, 0x5f, 0x72, 0x78, 0x5f, 0x6c, 0x63, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x70, 0x70, 0x70, 0x52, 0x78, 0x4c, 0x63, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x41, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x1a, 0x70,
	0x70, 0x70, 0x5f, 0x72, 0x78, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x6e,
	0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x15, 0x70, 0x70, 0x70, 0x52, 0x78, 0x4c, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x4e, 0x61, 0x63,
	0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x19, 0x70, 0x70, 0x70, 0x5f, 0x72, 0x78,
	0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x70, 0x70, 0x70, 0x52, 0x78,
	0x4c, 0x63, 0x70, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x37, 0x0a, 0x19, 0x70, 0x70, 0x70, 0x5f, 0x72, 0x78, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x74, 0x65,
	0x72, 0x6d, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x14, 0x70, 0x70, 0x70, 0x52, 0x78, 0x4c, 0x63, 0x70, 0x54, 0x65, 0x72, 0x6d,
	0x41, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x19, 0x70, 0x70, 0x70, 0x5f,
	0x72, 0x78, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x70, 0x70, 0x70,
	0x52, 0x78, 0x4c, 0x63, 0x70, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x39, 0x0a, 0x1a, 0x70, 0x70, 0x70, 0x5f, 0x72, 0x78, 0x5f, 0x6c, 0x63, 0x70, 0x5f,
	0x65, 0x63, 0x68, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x70, 0x70, 0x70, 0x52, 0x78, 0x4c, 0x63, 0x70, 0x45,
	0x63, 0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x14,
	0x70, 0x70, 0x70, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x70, 0x70, 0x52,
	0x78, 0x50, 0x61, 0x70, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x14,
	0x70, 0x70, 0x70, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x70, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x70, 0x70, 0x52,
	0x78, 0x50, 0x61, 0x70, 0x41, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x15,
	0x70, 0x70, 0x70, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x63, 0x6b, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x40, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x70, 0x70, 0x70,
	0x52, 0x78, 0x50, 0x61, 0x70, 0x4e, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c,
	0x0a, 0x1b, 0x70, 0x70, 0x70, 0x5f, 0x72, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x5f, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x41, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x17, 0x70, 0x70, 0x70, 0x52, 0x78, 0x43, 0x68, 0x61, 0x70, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x16,
	0x70, 0x70, 0x70, 0x5f, 0x72, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x42, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x70, 0x70,
	0x70, 0x52, 0x78, 0x43, 0x68, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x38, 0x0a, 0x19, 0x70, 0x70, 0x70, 0x5f, 0x72, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x5f,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x43, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x15, 0x70, 0x70, 0x70, 0x52, 0x78, 0x43, 0x68, 0x61, 0x70, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x16, 0x70, 0x70,
	0x70, 0x5f, 0x72, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x44, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x70, 0x70, 0x70, 0x52,
	0x78, 0x43, 0x68, 0x61, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39,
	0x0a, 0x1a, 0x70, 0x70, 0x70, 0x5f, 0x72, 0x78, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x45, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x15, 0x70, 0x70, 0x70, 0x52, 0x78, 0x49, 0x70, 0x63, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x1a, 0x70, 0x70, 0x70,
	0x5f, 0x72, 0x78, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x61, 0x63,
	0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x70,
	0x70, 0x70, 0x52, 0x78, 0x49, 0x70, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x41, 0x63, 0x6b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x1b, 0x70, 0x70, 0x70, 0x5f, 0x72, 0x78, 0x5f, 0x69,
	0x70, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x6e, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x47, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x70, 0x70, 0x70, 0x52, 0x78,
	0x49, 0x70, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x4e, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x78, 0x5f, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x64, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x48, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x78, 0x4d,
	0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x43, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x70,
	0x70, 0x70, 0x5f, 0x72, 0x78, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x49, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x70, 0x70,
	0x70, 0x52, 0x78, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6e, 0x74,
	0x18, 0x4a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x78, 0x4d, 0x73, 0x67, 0x43, 0x6e, 0x74,
	0x12, 0x2d, 0x0a, 0x13, 0x72, 0x78, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x64, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x72,
	0x78, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x64, 0x43, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x18, 0x4c, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x78, 0x4d, 0x73, 0x67, 0x45, 0x72, 0x72, 0x12, 0x2b, 0x0a,
	0x12, 0x72, 0x78, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x63, 0x6e, 0x74, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x78, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x4d, 0x73, 0x67, 0x43, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78,
	0x5f, 0x63, 0x6e, 0x74, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x78, 0x43, 0x6e,
	0x74, 0x12, 0x37, 0x0a, 0x19, 0x70, 0x70, 0x70, 0x5f, 0x74, 0x78, 0x5f, 0x6c, 0x63, 0x70, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x4f,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x70, 0x70, 0x70, 0x54, 0x78, 0x4c, 0x63, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x19, 0x70, 0x70,
	0x70, 0x5f, 0x74, 0x78, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x61, 0x63,
	0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x50, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x70,
	0x70, 0x70, 0x54, 0x78, 0x4c, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x41, 0x63, 0x6b, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x1a, 0x70, 0x70, 0x70, 0x5f, 0x74, 0x78, 0x5f, 0x6c, 0x63,
	0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x6e, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x51, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x70, 0x70, 0x70, 0x54, 0x78, 0x4c, 0x63,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x4e, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37,
	0x0a, 0x19, 0x70, 0x70, 0x70, 0x5f, 0x74, 0x78, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x65, 0x63, 0x68,
	0x6f, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x52, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x14, 0x70, 0x70, 0x70, 0x54, 0x78, 0x4c, 0x63, 0x70, 0x45, 0x63, 0x68, 0x6f, 0x52,
	0x65, 0x71, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x1a, 0x70, 0x70, 0x70, 0x5f, 0x74,
	0x78, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x53, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x70, 0x70, 0x70,
	0x54, 0x78, 0x4c, 0x63, 0x70, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x37, 0x0a, 0x19, 0x70, 0x70, 0x70, 0x5f, 0x74, 0x78, 0x5f, 0x6c, 0x63, 0x70,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x54, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x70, 0x70, 0x70, 0x54, 0x78, 0x4c, 0x63, 0x70, 0x54,
	0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x19, 0x70,
	0x70, 0x70, 0x5f, 0x74, 0x78, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x61,
	0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x55, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14,
	0x70, 0x70, 0x70, 0x54, 0x78, 0x4c, 0x63, 0x70, 0x54, 0x65, 0x72, 0x6d, 0x41, 0x63, 0x6b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x14, 0x70, 0x70, 0x70, 0x5f, 0x74, 0x78, 0x5f, 0x70,
	0x61, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x56, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x70, 0x70, 0x70, 0x54, 0x78, 0x50, 0x61, 0x70, 0x52, 0x65, 0x71, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x14, 0x70, 0x70, 0x70, 0x5f, 0x74, 0x78, 0x5f, 0x70,
	0x61, 0x70, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x57, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x70, 0x70, 0x70, 0x54, 0x78, 0x50, 0x61, 0x70, 0x41, 0x63, 0x6b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x15, 0x70, 0x70, 0x70, 0x5f, 0x74, 0x78, 0x5f, 0x70,
	0x61, 0x70, 0x5f, 0x6e, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x58, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x11, 0x70, 0x70, 0x70, 0x54, 0x78, 0x50, 0x61, 0x70, 0x4e, 0x61, 0x63,
	0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x1b, 0x70, 0x70, 0x70, 0x5f, 0x74, 0x78,
	0x5f, 0x63, 0x68, 0x61, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x59, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x70, 0x70, 0x70,
	0x54, 0x78, 0x43, 0x68, 0x61, 0x70, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x16, 0x70, 0x70, 0x70, 0x5f, 0x74, 0x78, 0x5f, 0x63,
	0x68, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x5a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x70, 0x70, 0x70, 0x54, 0x78, 0x43, 0x68, 0x61, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x19, 0x70, 0x70, 0x70, 0x5f,
	0x74, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x70, 0x70, 0x70,
	0x54, 0x78, 0x43, 0x68, 0x61, 0x70, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x32, 0x0a, 0x16, 0x70, 0x70, 0x70, 0x5f, 0x74, 0x78, 0x5f, 0x63, 0x68, 0x61,
	0x70, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x5c, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x12, 0x70, 0x70, 0x70, 0x54, 0x78, 0x43, 0x68, 0x61, 0x70, 0x46, 0x61, 0x69,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x1a, 0x70, 0x70, 0x70, 0x5f, 0x74, 0x78,
	0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x70, 0x70, 0x70, 0x54,
	0x78, 0x49, 0x70, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x39, 0x0a, 0x1a, 0x70, 0x70, 0x70, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x70, 0x63, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x5e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x70, 0x70, 0x70, 0x54, 0x78, 0x49, 0x70, 0x63, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x41, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x1b,
	0x70, 0x70, 0x70, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x5f, 0x6e, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x5f, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x16, 0x70, 0x70, 0x70, 0x54, 0x78, 0x49, 0x70, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x4e, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x70, 0x70,
	0x5f, 0x74, 0x78, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x60, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x70, 0x70, 0x70, 0x54,
	0x78, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x2b, 0x0a, 0x12, 0x74, 0x78, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x61, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x78,
	0x50, 0x6b, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x1c, 0x0a,
	0x0a, 0x74, 0x78, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x18, 0x62, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x74, 0x78, 0x50, 0x6b, 0x74, 0x45, 0x72, 0x72, 0x12, 0x1c, 0x0a, 0x0a, 0x74,
	0x78, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x63, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x74, 0x78, 0x4d, 0x73, 0x67, 0x43, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x78, 0x5f,
	0x6d, 0x73, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74,
	0x78, 0x4d, 0x73, 0x67, 0x45, 0x72, 0x72, 0x1a, 0xa7, 0x09, 0x0a, 0x08, 0x68, 0x61, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x72, 0x78, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x72, 0x78, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6b, 0x74, 0x43, 0x6e,
	0x74, 0x12, 0x2f, 0x0a, 0x14, 0x72, 0x78, 0x5f, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x64, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x72, 0x78, 0x4d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x43,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x10, 0x72, 0x78, 0x5f, 0x6e, 0x6f, 0x5f, 0x69, 0x66, 0x5f, 0x70,
	0x6b, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x78,
	0x4e, 0x6f, 0x49, 0x66, 0x50, 0x6b, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x19, 0x72, 0x78,
	0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x5f,
	0x70, 0x6b, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x72,
	0x78, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x50, 0x6b,
	0x74, 0x43, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x16, 0x72, 0x78, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x37,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x72, 0x78, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x50, 0x6b, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x78, 0x5f, 0x75,
	0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x63,
	0x6e, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x72, 0x78, 0x55, 0x6e, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x2f, 0x0a,
	0x14, 0x72, 0x78, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x78, 0x53,
	0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x27,
	0x0a, 0x10, 0x72, 0x78, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x63,
	0x6e, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x78, 0x48, 0x65, 0x6c, 0x6c,
	0x6f, 0x50, 0x6b, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x14, 0x72, 0x78, 0x5f, 0x74, 0x65,
	0x61, 0x72, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18,
	0x3b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x72, 0x78, 0x54, 0x65, 0x61, 0x72, 0x44, 0x6f, 0x77,
	0x6e, 0x50, 0x6b, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x11, 0x72, 0x78, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x72, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x6b, 0x74, 0x43,
	0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x74, 0x78, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x74, 0x78, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6b, 0x74, 0x43, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x0f, 0x74, 0x78, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x63,
	0x6e, 0x74, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x78, 0x4e, 0x75, 0x6c, 0x6c,
	0x50, 0x6b, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x10, 0x74, 0x78, 0x5f, 0x6e, 0x6f, 0x5f,
	0x69, 0x66, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x74, 0x78, 0x4e, 0x6f, 0x49, 0x66, 0x50, 0x6b, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x38,
	0x0a, 0x19, 0x74, 0x78, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x40, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x15, 0x74, 0x78, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x50, 0x6b, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x16, 0x74, 0x78, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x63,
	0x6e, 0x74, 0x18, 0x41, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x78, 0x53, 0x65, 0x6e, 0x64,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x18,
	0x74, 0x78, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x42, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14,
	0x74, 0x78, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6b,
	0x74, 0x43, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x17, 0x74, 0x78, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18,
	0x43, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x74, 0x78, 0x53, 0x65, 0x74, 0x75, 0x70, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x50, 0x6b, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x15, 0x74, 0x78,
	0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x6e, 0x79, 0x5f, 0x70, 0x6b, 0x74, 0x5f,
	0x63, 0x6e, 0x74, 0x18, 0x44, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74, 0x78, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x44, 0x65, 0x6e, 0x79, 0x50, 0x6b, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x10,
	0x74, 0x78, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x63, 0x6e, 0x74,
	0x18, 0x45, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x78, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x50,
	0x6b, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x14, 0x74, 0x78, 0x5f, 0x74, 0x65, 0x61, 0x72,
	0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x78, 0x54, 0x65, 0x61, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x50,
	0x6b, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x11, 0x74, 0x78, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x47, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x74, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x6b, 0x74, 0x43, 0x6e, 0x74,
	0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x68, 0x61, 0x67,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x48, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x16, 0x69, 0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x48, 0x61, 0x67,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x5f, 0x68, 0x61, 0x67, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x49, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x18, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x48, 0x61, 0x67, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x48, 0x61, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6e,
	0x74, 0x3a, 0x6d, 0x0a, 0x1c, 0x6a, 0x6e, 0x70, 0x72, 0x5f, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x65, 0x78,
	0x74, 0x12, 0x17, 0x2e, 0x4a, 0x75, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x52, 0x18, 0x6a, 0x6e, 0x70, 0x72, 0x4a, 0x75, 0x6e, 0x6f,
	0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x78, 0x74,
	0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
})

var (
	file_bbe_smgd_sub_mgmt_network_stats_oc_proto_rawDescOnce sync.Once
	file_bbe_smgd_sub_mgmt_network_stats_oc_proto_rawDescData []byte
)

func file_bbe_smgd_sub_mgmt_network_stats_oc_proto_rawDescGZIP() []byte {
	file_bbe_smgd_sub_mgmt_network_stats_oc_proto_rawDescOnce.Do(func() {
		file_bbe_smgd_sub_mgmt_network_stats_oc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_bbe_smgd_sub_mgmt_network_stats_oc_proto_rawDesc), len(file_bbe_smgd_sub_mgmt_network_stats_oc_proto_rawDesc)))
	})
	return file_bbe_smgd_sub_mgmt_network_stats_oc_proto_rawDescData
}

var file_bbe_smgd_sub_mgmt_network_stats_oc_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_bbe_smgd_sub_mgmt_network_stats_oc_proto_goTypes = []any{
	(*JunosNetworkStats)(nil),                                                                                     // 0: junos_network_stats
	(*JunosNetworkStatsSystemType)(nil),                                                                           // 1: junos_network_stats.system_type
	(*JunosNetworkStatsSystemTypeSubscriberManagementType)(nil),                                                   // 2: junos_network_stats.system_type.subscriber_management_type
	(*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesType)(nil),                                        // 3: junos_network_stats.system_type.subscriber_management_type.uplanes_type
	(*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneList)(nil),                              // 4: junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list
	(*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraType)(nil),                     // 5: junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type
	(*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkType)(nil),          // 6: junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type
	(*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeIoType)(nil),    // 7: junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.io_type
	(*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDhcpType)(nil),  // 8: junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.dhcp_type
	(*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppType)(nil),   // 9: junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.ppp_type
	(*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypePppoeType)(nil), // 10: junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.pppoe_type
	(*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeDvlanType)(nil), // 11: junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.dvlan_type
	(*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeL2TpType)(nil),  // 12: junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.l2tp_type
	(*JunosNetworkStatsSystemTypeSubscriberManagementTypeUplanesTypeUplaneListInfraTypeNetworkTypeHagType)(nil),   // 13: junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.hag_type
	(*JuniperNetworksSensors)(nil), // 14: JuniperNetworksSensors
}
var file_bbe_smgd_sub_mgmt_network_stats_oc_proto_depIdxs = []int32{
	1,  // 0: junos_network_stats.system:type_name -> junos_network_stats.system_type
	2,  // 1: junos_network_stats.system_type.subscriber_management:type_name -> junos_network_stats.system_type.subscriber_management_type
	3,  // 2: junos_network_stats.system_type.subscriber_management_type.uplanes:type_name -> junos_network_stats.system_type.subscriber_management_type.uplanes_type
	4,  // 3: junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane:type_name -> junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list
	5,  // 4: junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra:type_name -> junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type
	6,  // 5: junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network:type_name -> junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type
	7,  // 6: junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.io:type_name -> junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.io_type
	8,  // 7: junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.dhcp:type_name -> junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.dhcp_type
	9,  // 8: junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.ppp:type_name -> junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.ppp_type
	10, // 9: junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.pppoe:type_name -> junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.pppoe_type
	11, // 10: junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.dvlan:type_name -> junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.dvlan_type
	12, // 11: junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.l2tp:type_name -> junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.l2tp_type
	13, // 12: junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.hag:type_name -> junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.hag_type
	14, // 13: jnpr_junos_network_stats_ext:extendee -> JuniperNetworksSensors
	0,  // 14: jnpr_junos_network_stats_ext:type_name -> junos_network_stats
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	14, // [14:15] is the sub-list for extension type_name
	13, // [13:14] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_bbe_smgd_sub_mgmt_network_stats_oc_proto_init() }
func file_bbe_smgd_sub_mgmt_network_stats_oc_proto_init() {
	if File_bbe_smgd_sub_mgmt_network_stats_oc_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_bbe_smgd_sub_mgmt_network_stats_oc_proto_rawDesc), len(file_bbe_smgd_sub_mgmt_network_stats_oc_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_bbe_smgd_sub_mgmt_network_stats_oc_proto_goTypes,
		DependencyIndexes: file_bbe_smgd_sub_mgmt_network_stats_oc_proto_depIdxs,
		MessageInfos:      file_bbe_smgd_sub_mgmt_network_stats_oc_proto_msgTypes,
		ExtensionInfos:    file_bbe_smgd_sub_mgmt_network_stats_oc_proto_extTypes,
	}.Build()
	File_bbe_smgd_sub_mgmt_network_stats_oc_proto = out.File
	file_bbe_smgd_sub_mgmt_network_stats_oc_proto_goTypes = nil
	file_bbe_smgd_sub_mgmt_network_stats_oc_proto_depIdxs = nil
}
