// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: sr_te_ip_stats.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Top-level message
type SrTeIpStats struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of SR TE stats per IP and Color records
	TeIpStats     []*SegmentRoutingTeIpRecord `protobuf:"bytes,1,rep,name=te_ip_stats,json=teIpStats" json:"te_ip_stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SrTeIpStats) Reset() {
	*x = SrTeIpStats{}
	mi := &file_sr_te_ip_stats_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SrTeIpStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrTeIpStats) ProtoMessage() {}

func (x *SrTeIpStats) ProtoReflect() protoreflect.Message {
	mi := &file_sr_te_ip_stats_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrTeIpStats.ProtoReflect.Descriptor instead.
func (*SrTeIpStats) Descriptor() ([]byte, []int) {
	return file_sr_te_ip_stats_proto_rawDescGZIP(), []int{0}
}

func (x *SrTeIpStats) GetTeIpStats() []*SegmentRoutingTeIpRecord {
	if x != nil {
		return x.TeIpStats
	}
	return nil
}

// SR TE BSID statistics record
type SegmentRoutingTeIpRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Ip prefix of endpoint
	ToIpPrefix *string `protobuf:"bytes,2,req,name=to_ip_prefix,json=toIpPrefix" json:"to_ip_prefix,omitempty"`
	// Policy color value
	ColorIdentifier *uint32 `protobuf:"varint,3,opt,name=color_identifier,json=colorIdentifier" json:"color_identifier,omitempty"`
	// Instance Identifier for cases when RPD creates multiple instances
	InstanceIdentifier *uint32 `protobuf:"varint,4,opt,name=instance_identifier,json=instanceIdentifier" json:"instance_identifier,omitempty"`
	// Name of the counter. This is useful when an SR label has multiple counters.
	// For some scenarios like routing restart, it is possible that a new counter is
	// created in the hardware.
	CounterName *string `protobuf:"bytes,5,opt,name=counter_name,json=counterName" json:"counter_name,omitempty"`
	// Statistics
	Stats         *SegmentRoutingTeIpStats `protobuf:"bytes,6,opt,name=stats" json:"stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SegmentRoutingTeIpRecord) Reset() {
	*x = SegmentRoutingTeIpRecord{}
	mi := &file_sr_te_ip_stats_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SegmentRoutingTeIpRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentRoutingTeIpRecord) ProtoMessage() {}

func (x *SegmentRoutingTeIpRecord) ProtoReflect() protoreflect.Message {
	mi := &file_sr_te_ip_stats_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentRoutingTeIpRecord.ProtoReflect.Descriptor instead.
func (*SegmentRoutingTeIpRecord) Descriptor() ([]byte, []int) {
	return file_sr_te_ip_stats_proto_rawDescGZIP(), []int{1}
}

func (x *SegmentRoutingTeIpRecord) GetToIpPrefix() string {
	if x != nil && x.ToIpPrefix != nil {
		return *x.ToIpPrefix
	}
	return ""
}

func (x *SegmentRoutingTeIpRecord) GetColorIdentifier() uint32 {
	if x != nil && x.ColorIdentifier != nil {
		return *x.ColorIdentifier
	}
	return 0
}

func (x *SegmentRoutingTeIpRecord) GetInstanceIdentifier() uint32 {
	if x != nil && x.InstanceIdentifier != nil {
		return *x.InstanceIdentifier
	}
	return 0
}

func (x *SegmentRoutingTeIpRecord) GetCounterName() string {
	if x != nil && x.CounterName != nil {
		return *x.CounterName
	}
	return ""
}

func (x *SegmentRoutingTeIpRecord) GetStats() *SegmentRoutingTeIpStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type SegmentRoutingTeIpStats struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Packet and Byte statistics
	Packets *uint64 `protobuf:"varint,1,opt,name=packets" json:"packets,omitempty"`
	Bytes   *uint64 `protobuf:"varint,2,opt,name=bytes" json:"bytes,omitempty"`
	// Rates of the above counters
	PacketRate    *uint64 `protobuf:"varint,3,opt,name=packet_rate,json=packetRate" json:"packet_rate,omitempty"`
	ByteRate      *uint64 `protobuf:"varint,4,opt,name=byte_rate,json=byteRate" json:"byte_rate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SegmentRoutingTeIpStats) Reset() {
	*x = SegmentRoutingTeIpStats{}
	mi := &file_sr_te_ip_stats_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SegmentRoutingTeIpStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentRoutingTeIpStats) ProtoMessage() {}

func (x *SegmentRoutingTeIpStats) ProtoReflect() protoreflect.Message {
	mi := &file_sr_te_ip_stats_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentRoutingTeIpStats.ProtoReflect.Descriptor instead.
func (*SegmentRoutingTeIpStats) Descriptor() ([]byte, []int) {
	return file_sr_te_ip_stats_proto_rawDescGZIP(), []int{2}
}

func (x *SegmentRoutingTeIpStats) GetPackets() uint64 {
	if x != nil && x.Packets != nil {
		return *x.Packets
	}
	return 0
}

func (x *SegmentRoutingTeIpStats) GetBytes() uint64 {
	if x != nil && x.Bytes != nil {
		return *x.Bytes
	}
	return 0
}

func (x *SegmentRoutingTeIpStats) GetPacketRate() uint64 {
	if x != nil && x.PacketRate != nil {
		return *x.PacketRate
	}
	return 0
}

func (x *SegmentRoutingTeIpStats) GetByteRate() uint64 {
	if x != nil && x.ByteRate != nil {
		return *x.ByteRate
	}
	return 0
}

var file_sr_te_ip_stats_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*SrTeIpStats)(nil),
		Field:         25,
		Name:          "jnpr_sr_te_ip_stats_ext",
		Tag:           "bytes,25,opt,name=jnpr_sr_te_ip_stats_ext",
		Filename:      "sr_te_ip_stats.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional SrTeIpStats jnpr_sr_te_ip_stats_ext = 25;
	E_JnprSrTeIpStatsExt = &file_sr_te_ip_stats_proto_extTypes[0]
)

var File_sr_te_ip_stats_proto protoreflect.FileDescriptor

var file_sr_te_ip_stats_proto_rawDesc = string([]byte{
	0x0a, 0x14, 0x73, 0x72, 0x5f, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x74, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x48, 0x0a, 0x0b, 0x53,
	0x72, 0x54, 0x65, 0x49, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0b, 0x74, 0x65,
	0x5f, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x54, 0x65, 0x49, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x09, 0x74, 0x65, 0x49, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x87, 0x02, 0x0a, 0x18, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x49, 0x70, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x27, 0x0a, 0x0c, 0x74, 0x6f, 0x5f, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52,
	0x0a, 0x74, 0x6f, 0x49, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x30, 0x0a, 0x10, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x0f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x36, 0x0a,
	0x13, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08,
	0x01, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02,
	0x08, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54,
	0x65, 0x49, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22,
	0xa3, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x54, 0x65, 0x49, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x07, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40,
	0x02, 0x18, 0x01, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x05,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02,
	0x18, 0x01, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0b, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05,
	0x82, 0x40, 0x02, 0x20, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x20, 0x01, 0x52, 0x08, 0x62, 0x79, 0x74,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x3a, 0x5a, 0x0a, 0x17, 0x6a, 0x6e, 0x70, 0x72, 0x5f, 0x73, 0x72,
	0x5f, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x74,
	0x12, 0x17, 0x2e, 0x4a, 0x75, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x53, 0x72, 0x54, 0x65, 0x49, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x12, 0x6a,
	0x6e, 0x70, 0x72, 0x53, 0x72, 0x54, 0x65, 0x49, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x78,
	0x74, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
})

var (
	file_sr_te_ip_stats_proto_rawDescOnce sync.Once
	file_sr_te_ip_stats_proto_rawDescData []byte
)

func file_sr_te_ip_stats_proto_rawDescGZIP() []byte {
	file_sr_te_ip_stats_proto_rawDescOnce.Do(func() {
		file_sr_te_ip_stats_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sr_te_ip_stats_proto_rawDesc), len(file_sr_te_ip_stats_proto_rawDesc)))
	})
	return file_sr_te_ip_stats_proto_rawDescData
}

var file_sr_te_ip_stats_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_sr_te_ip_stats_proto_goTypes = []any{
	(*SrTeIpStats)(nil),              // 0: SrTeIpStats
	(*SegmentRoutingTeIpRecord)(nil), // 1: SegmentRoutingTeIpRecord
	(*SegmentRoutingTeIpStats)(nil),  // 2: SegmentRoutingTeIpStats
	(*JuniperNetworksSensors)(nil),   // 3: JuniperNetworksSensors
}
var file_sr_te_ip_stats_proto_depIdxs = []int32{
	1, // 0: SrTeIpStats.te_ip_stats:type_name -> SegmentRoutingTeIpRecord
	2, // 1: SegmentRoutingTeIpRecord.stats:type_name -> SegmentRoutingTeIpStats
	3, // 2: jnpr_sr_te_ip_stats_ext:extendee -> JuniperNetworksSensors
	0, // 3: jnpr_sr_te_ip_stats_ext:type_name -> SrTeIpStats
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	3, // [3:4] is the sub-list for extension type_name
	2, // [2:3] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_sr_te_ip_stats_proto_init() }
func file_sr_te_ip_stats_proto_init() {
	if File_sr_te_ip_stats_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sr_te_ip_stats_proto_rawDesc), len(file_sr_te_ip_stats_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_sr_te_ip_stats_proto_goTypes,
		DependencyIndexes: file_sr_te_ip_stats_proto_depIdxs,
		MessageInfos:      file_sr_te_ip_stats_proto_msgTypes,
		ExtensionInfos:    file_sr_te_ip_stats_proto_extTypes,
	}.Build()
	File_sr_te_ip_stats_proto = out.File
	file_sr_te_ip_stats_proto_goTypes = nil
	file_sr_te_ip_stats_proto_depIdxs = nil
}
