// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: kmd_render.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JunosKeyManagement struct {
	state                   protoimpl.MessageState                         `protogen:"open.v1"`
	IkeSecurityAssociations *JunosKeyManagementIkeSecurityAssociationsType `protobuf:"bytes,151,opt,name=ike_security_associations,json=ikeSecurityAssociations" json:"ike_security_associations,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *JunosKeyManagement) Reset() {
	*x = JunosKeyManagement{}
	mi := &file_kmd_render_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKeyManagement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKeyManagement) ProtoMessage() {}

func (x *JunosKeyManagement) ProtoReflect() protoreflect.Message {
	mi := &file_kmd_render_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKeyManagement.ProtoReflect.Descriptor instead.
func (*JunosKeyManagement) Descriptor() ([]byte, []int) {
	return file_kmd_render_proto_rawDescGZIP(), []int{0}
}

func (x *JunosKeyManagement) GetIkeSecurityAssociations() *JunosKeyManagementIkeSecurityAssociationsType {
	if x != nil {
		return x.IkeSecurityAssociations
	}
	return nil
}

type JunosKeyManagementIkeSecurityAssociationsType struct {
	state                  protoimpl.MessageState                                                     `protogen:"open.v1"`
	IkeSecurityAssociation []*JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList `protobuf:"bytes,151,rep,name=ike_security_association,json=ikeSecurityAssociation" json:"ike_security_association,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *JunosKeyManagementIkeSecurityAssociationsType) Reset() {
	*x = JunosKeyManagementIkeSecurityAssociationsType{}
	mi := &file_kmd_render_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKeyManagementIkeSecurityAssociationsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKeyManagementIkeSecurityAssociationsType) ProtoMessage() {}

func (x *JunosKeyManagementIkeSecurityAssociationsType) ProtoReflect() protoreflect.Message {
	mi := &file_kmd_render_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKeyManagementIkeSecurityAssociationsType.ProtoReflect.Descriptor instead.
func (*JunosKeyManagementIkeSecurityAssociationsType) Descriptor() ([]byte, []int) {
	return file_kmd_render_proto_rawDescGZIP(), []int{0, 0}
}

func (x *JunosKeyManagementIkeSecurityAssociationsType) GetIkeSecurityAssociation() []*JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList {
	if x != nil {
		return x.IkeSecurityAssociation
	}
	return nil
}

type JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	RemoteIp                       *string                `protobuf:"bytes,51,opt,name=remote_ip,json=remoteIp" json:"remote_ip,omitempty"`
	LocalIp                        *string                `protobuf:"bytes,52,opt,name=local_ip,json=localIp" json:"local_ip,omitempty"`
	NumberIpsecSaCreated           *uint32                `protobuf:"varint,53,opt,name=number_ipsec_sa_created,json=numberIpsecSaCreated" json:"number_ipsec_sa_created,omitempty"`
	NumberIpsecSaDeleted           *uint32                `protobuf:"varint,54,opt,name=number_ipsec_sa_deleted,json=numberIpsecSaDeleted" json:"number_ipsec_sa_deleted,omitempty"`
	NumberIpsecSaRekey             *uint32                `protobuf:"varint,55,opt,name=number_ipsec_sa_rekey,json=numberIpsecSaRekey" json:"number_ipsec_sa_rekey,omitempty"`
	ExchangeType                   *string                `protobuf:"bytes,56,opt,name=exchange_type,json=exchangeType" json:"exchange_type,omitempty"`
	InBytes                        *uint32                `protobuf:"varint,57,opt,name=in_bytes,json=inBytes" json:"in_bytes,omitempty"`
	InPackets                      *uint32                `protobuf:"varint,58,opt,name=in_packets,json=inPackets" json:"in_packets,omitempty"`
	OutBytes                       *uint32                `protobuf:"varint,59,opt,name=out_bytes,json=outBytes" json:"out_bytes,omitempty"`
	OutPackets                     *uint32                `protobuf:"varint,60,opt,name=out_packets,json=outPackets" json:"out_packets,omitempty"`
	DeletePayloadReceived          *uint32                `protobuf:"varint,61,opt,name=delete_payload_received,json=deletePayloadReceived" json:"delete_payload_received,omitempty"`
	DeletePayloadTransmitted       *uint32                `protobuf:"varint,62,opt,name=delete_payload_transmitted,json=deletePayloadTransmitted" json:"delete_payload_transmitted,omitempty"`
	DpdRequestPayloadReceived      *uint32                `protobuf:"varint,63,opt,name=dpd_request_payload_received,json=dpdRequestPayloadReceived" json:"dpd_request_payload_received,omitempty"`
	DpdRequestPayloadTransmitted   *uint32                `protobuf:"varint,64,opt,name=dpd_request_payload_transmitted,json=dpdRequestPayloadTransmitted" json:"dpd_request_payload_transmitted,omitempty"`
	DpdResponsePayloadReceived     *uint32                `protobuf:"varint,65,opt,name=dpd_response_payload_received,json=dpdResponsePayloadReceived" json:"dpd_response_payload_received,omitempty"`
	DpdResponsePayloadTransmitted  *uint32                `protobuf:"varint,66,opt,name=dpd_response_payload_transmitted,json=dpdResponsePayloadTransmitted" json:"dpd_response_payload_transmitted,omitempty"`
	DpdResponsePayloadMissed       *uint32                `protobuf:"varint,67,opt,name=dpd_response_payload_missed,json=dpdResponsePayloadMissed" json:"dpd_response_payload_missed,omitempty"`
	DpdResponsePayloadMaximumDelay *uint32                `protobuf:"varint,68,opt,name=dpd_response_payload_maximum_delay,json=dpdResponsePayloadMaximumDelay" json:"dpd_response_payload_maximum_delay,omitempty"`
	DpdResponseSeqPayloadMissed    *uint32                `protobuf:"varint,69,opt,name=dpd_response_seq_payload_missed,json=dpdResponseSeqPayloadMissed" json:"dpd_response_seq_payload_missed,omitempty"`
	InvalidSpiNotifyReceived       *uint32                `protobuf:"varint,70,opt,name=invalid_spi_notify_received,json=invalidSpiNotifyReceived" json:"invalid_spi_notify_received,omitempty"`
	InvalidSpiNotifyTransmitted    *uint32                `protobuf:"varint,71,opt,name=invalid_spi_notify_transmitted,json=invalidSpiNotifyTransmitted" json:"invalid_spi_notify_transmitted,omitempty"`
	RoutingInstance                *string                `protobuf:"bytes,72,opt,name=routing_instance,json=routingInstance" json:"routing_instance,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList) Reset() {
	*x = JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList{}
	mi := &file_kmd_render_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList) ProtoMessage() {}

func (x *JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList) ProtoReflect() protoreflect.Message {
	mi := &file_kmd_render_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList.ProtoReflect.Descriptor instead.
func (*JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList) Descriptor() ([]byte, []int) {
	return file_kmd_render_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList) GetRemoteIp() string {
	if x != nil && x.RemoteIp != nil {
		return *x.RemoteIp
	}
	return ""
}

func (x *JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList) GetLocalIp() string {
	if x != nil && x.LocalIp != nil {
		return *x.LocalIp
	}
	return ""
}

func (x *JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList) GetNumberIpsecSaCreated() uint32 {
	if x != nil && x.NumberIpsecSaCreated != nil {
		return *x.NumberIpsecSaCreated
	}
	return 0
}

func (x *JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList) GetNumberIpsecSaDeleted() uint32 {
	if x != nil && x.NumberIpsecSaDeleted != nil {
		return *x.NumberIpsecSaDeleted
	}
	return 0
}

func (x *JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList) GetNumberIpsecSaRekey() uint32 {
	if x != nil && x.NumberIpsecSaRekey != nil {
		return *x.NumberIpsecSaRekey
	}
	return 0
}

func (x *JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList) GetExchangeType() string {
	if x != nil && x.ExchangeType != nil {
		return *x.ExchangeType
	}
	return ""
}

func (x *JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList) GetInBytes() uint32 {
	if x != nil && x.InBytes != nil {
		return *x.InBytes
	}
	return 0
}

func (x *JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList) GetInPackets() uint32 {
	if x != nil && x.InPackets != nil {
		return *x.InPackets
	}
	return 0
}

func (x *JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList) GetOutBytes() uint32 {
	if x != nil && x.OutBytes != nil {
		return *x.OutBytes
	}
	return 0
}

func (x *JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList) GetOutPackets() uint32 {
	if x != nil && x.OutPackets != nil {
		return *x.OutPackets
	}
	return 0
}

func (x *JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList) GetDeletePayloadReceived() uint32 {
	if x != nil && x.DeletePayloadReceived != nil {
		return *x.DeletePayloadReceived
	}
	return 0
}

func (x *JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList) GetDeletePayloadTransmitted() uint32 {
	if x != nil && x.DeletePayloadTransmitted != nil {
		return *x.DeletePayloadTransmitted
	}
	return 0
}

func (x *JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList) GetDpdRequestPayloadReceived() uint32 {
	if x != nil && x.DpdRequestPayloadReceived != nil {
		return *x.DpdRequestPayloadReceived
	}
	return 0
}

func (x *JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList) GetDpdRequestPayloadTransmitted() uint32 {
	if x != nil && x.DpdRequestPayloadTransmitted != nil {
		return *x.DpdRequestPayloadTransmitted
	}
	return 0
}

func (x *JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList) GetDpdResponsePayloadReceived() uint32 {
	if x != nil && x.DpdResponsePayloadReceived != nil {
		return *x.DpdResponsePayloadReceived
	}
	return 0
}

func (x *JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList) GetDpdResponsePayloadTransmitted() uint32 {
	if x != nil && x.DpdResponsePayloadTransmitted != nil {
		return *x.DpdResponsePayloadTransmitted
	}
	return 0
}

func (x *JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList) GetDpdResponsePayloadMissed() uint32 {
	if x != nil && x.DpdResponsePayloadMissed != nil {
		return *x.DpdResponsePayloadMissed
	}
	return 0
}

func (x *JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList) GetDpdResponsePayloadMaximumDelay() uint32 {
	if x != nil && x.DpdResponsePayloadMaximumDelay != nil {
		return *x.DpdResponsePayloadMaximumDelay
	}
	return 0
}

func (x *JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList) GetDpdResponseSeqPayloadMissed() uint32 {
	if x != nil && x.DpdResponseSeqPayloadMissed != nil {
		return *x.DpdResponseSeqPayloadMissed
	}
	return 0
}

func (x *JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList) GetInvalidSpiNotifyReceived() uint32 {
	if x != nil && x.InvalidSpiNotifyReceived != nil {
		return *x.InvalidSpiNotifyReceived
	}
	return 0
}

func (x *JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList) GetInvalidSpiNotifyTransmitted() uint32 {
	if x != nil && x.InvalidSpiNotifyTransmitted != nil {
		return *x.InvalidSpiNotifyTransmitted
	}
	return 0
}

func (x *JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList) GetRoutingInstance() string {
	if x != nil && x.RoutingInstance != nil {
		return *x.RoutingInstance
	}
	return ""
}

var file_kmd_render_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*JunosKeyManagement)(nil),
		Field:         48,
		Name:          "jnpr_junos_key_management_ext",
		Tag:           "bytes,48,opt,name=jnpr_junos_key_management_ext",
		Filename:      "kmd_render.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional junos_key_management jnpr_junos_key_management_ext = 48;
	E_JnprJunosKeyManagementExt = &file_kmd_render_proto_extTypes[0]
)

var File_kmd_render_proto protoreflect.FileDescriptor

var file_kmd_render_proto_rawDesc = string([]byte{
	0x0a, 0x10, 0x6b, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x13, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x6f,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xde, 0x0b, 0x0a, 0x14, 0x6a, 0x75, 0x6e, 0x6f,
	0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x71, 0x0a, 0x19, 0x69, 0x6b, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x97, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x69, 0x6b, 0x65, 0x5f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x17, 0x69, 0x6b, 0x65, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0xd2, 0x0a, 0x0a, 0x1e, 0x69, 0x6b, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x18, 0x69, 0x6b, 0x65, 0x5f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6a, 0x75, 0x6e,
	0x6f, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x69, 0x6b, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x69, 0x6b, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x16,
	0x69, 0x6b, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x9f, 0x09, 0x0a, 0x1d, 0x69, 0x6b, 0x65, 0x5f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x49, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69,
	0x70, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70,
	0x12, 0x35, 0x0a, 0x17, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x73, 0x65, 0x63,
	0x5f, 0x73, 0x61, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x73, 0x61, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x31,
	0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x73,
	0x61, 0x5f, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x52, 0x65, 0x6b, 0x65,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x6e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x3b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x36,
	0x0a, 0x17, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x64, 0x70, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x64, 0x70, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x1f, 0x64, 0x70, 0x64, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c,
	0x64, 0x70, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x1d,
	0x64, 0x70, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x41, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1a, 0x64, 0x70, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x47, 0x0a, 0x20, 0x64, 0x70, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x64, 0x70, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x64, 0x70, 0x64, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x64,
	0x70, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x22, 0x64, 0x70, 0x64, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x44, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1e, 0x64, 0x70, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x12, 0x44, 0x0a, 0x1f, 0x64, 0x70, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x64, 0x70,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x71, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x73, 0x70, 0x69, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x70, 0x69, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x73, 0x70, 0x69, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1b, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x70, 0x69, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0x70, 0x0a, 0x1d, 0x6a, 0x6e, 0x70, 0x72,
	0x5f, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x12, 0x17, 0x2e, 0x4a, 0x75, 0x6e, 0x69,
	0x70, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x19, 0x6a, 0x6e, 0x70, 0x72, 0x4a, 0x75, 0x6e, 0x6f, 0x73, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f,
	0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
})

var (
	file_kmd_render_proto_rawDescOnce sync.Once
	file_kmd_render_proto_rawDescData []byte
)

func file_kmd_render_proto_rawDescGZIP() []byte {
	file_kmd_render_proto_rawDescOnce.Do(func() {
		file_kmd_render_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kmd_render_proto_rawDesc), len(file_kmd_render_proto_rawDesc)))
	})
	return file_kmd_render_proto_rawDescData
}

var file_kmd_render_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_kmd_render_proto_goTypes = []any{
	(*JunosKeyManagement)(nil),                                                      // 0: junos_key_management
	(*JunosKeyManagementIkeSecurityAssociationsType)(nil),                           // 1: junos_key_management.ike_security_associations_type
	(*JunosKeyManagementIkeSecurityAssociationsTypeIkeSecurityAssociationList)(nil), // 2: junos_key_management.ike_security_associations_type.ike_security_association_list
	(*JuniperNetworksSensors)(nil),                                                  // 3: JuniperNetworksSensors
}
var file_kmd_render_proto_depIdxs = []int32{
	1, // 0: junos_key_management.ike_security_associations:type_name -> junos_key_management.ike_security_associations_type
	2, // 1: junos_key_management.ike_security_associations_type.ike_security_association:type_name -> junos_key_management.ike_security_associations_type.ike_security_association_list
	3, // 2: jnpr_junos_key_management_ext:extendee -> JuniperNetworksSensors
	0, // 3: jnpr_junos_key_management_ext:type_name -> junos_key_management
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	3, // [3:4] is the sub-list for extension type_name
	2, // [2:3] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_kmd_render_proto_init() }
func file_kmd_render_proto_init() {
	if File_kmd_render_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kmd_render_proto_rawDesc), len(file_kmd_render_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_kmd_render_proto_goTypes,
		DependencyIndexes: file_kmd_render_proto_depIdxs,
		MessageInfos:      file_kmd_render_proto_msgTypes,
		ExtensionInfos:    file_kmd_render_proto_extTypes,
	}.Build()
	File_kmd_render_proto = out.File
	file_kmd_render_proto_goTypes = nil
	file_kmd_render_proto_depIdxs = nil
}
