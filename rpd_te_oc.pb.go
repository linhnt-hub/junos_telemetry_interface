// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: rpd_te_oc.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NetworkInstancesTe struct {
	state           protoimpl.MessageState                   `protogen:"open.v1"`
	NetworkInstance []*NetworkInstancesTeNetworkInstanceList `protobuf:"bytes,151,rep,name=network_instance,json=networkInstance" json:"network_instance,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkInstancesTe) Reset() {
	*x = NetworkInstancesTe{}
	mi := &file_rpd_te_oc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTe) ProtoMessage() {}

func (x *NetworkInstancesTe) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTe.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTe) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0}
}

func (x *NetworkInstancesTe) GetNetworkInstance() []*NetworkInstancesTeNetworkInstanceList {
	if x != nil {
		return x.NetworkInstance
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceList struct {
	state         protoimpl.MessageState                         `protogen:"open.v1"`
	Name          *string                                        `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	Mpls          *NetworkInstancesTeNetworkInstanceListMplsType `protobuf:"bytes,151,opt,name=mpls" json:"mpls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceList) Reset() {
	*x = NetworkInstancesTeNetworkInstanceList{}
	mi := &file_rpd_te_oc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceList) ProtoMessage() {}

func (x *NetworkInstancesTeNetworkInstanceList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceList) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0}
}

func (x *NetworkInstancesTeNetworkInstanceList) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceList) GetMpls() *NetworkInstancesTeNetworkInstanceListMplsType {
	if x != nil {
		return x.Mpls
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsType struct {
	state                 protoimpl.MessageState                                                  `protogen:"open.v1"`
	TeGlobalAttributes    *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesType    `protobuf:"bytes,151,opt,name=te_global_attributes,json=teGlobalAttributes" json:"te_global_attributes,omitempty"`
	TeInterfaceAttributes *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesType `protobuf:"bytes,152,opt,name=te_interface_attributes,json=teInterfaceAttributes" json:"te_interface_attributes,omitempty"`
	Lsps                  *NetworkInstancesTeNetworkInstanceListMplsTypeLspsType                  `protobuf:"bytes,153,opt,name=lsps" json:"lsps,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsType{}
	mi := &file_rpd_te_oc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsType) ProtoMessage() {}

func (x *NetworkInstancesTeNetworkInstanceListMplsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsType) GetTeGlobalAttributes() *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesType {
	if x != nil {
		return x.TeGlobalAttributes
	}
	return nil
}

func (x *NetworkInstancesTeNetworkInstanceListMplsType) GetTeInterfaceAttributes() *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesType {
	if x != nil {
		return x.TeInterfaceAttributes
	}
	return nil
}

func (x *NetworkInstancesTeNetworkInstanceListMplsType) GetLsps() *NetworkInstancesTeNetworkInstanceListMplsTypeLspsType {
	if x != nil {
		return x.Lsps
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesType struct {
	state           protoimpl.MessageState                                                                  `protogen:"open.v1"`
	Srlgs           *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsType           `protobuf:"bytes,151,opt,name=srlgs" json:"srlgs,omitempty"`
	MplsAdminGroups *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsType `protobuf:"bytes,152,opt,name=mpls_admin_groups,json=mplsAdminGroups" json:"mpls_admin_groups,omitempty"`
	TeLspTimers     *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeTeLspTimersType     `protobuf:"bytes,153,opt,name=te_lsp_timers,json=teLspTimers" json:"te_lsp_timers,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesType{}
	mi := &file_rpd_te_oc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesType) ProtoMessage() {}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesType) GetSrlgs() *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsType {
	if x != nil {
		return x.Srlgs
	}
	return nil
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesType) GetMplsAdminGroups() *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsType {
	if x != nil {
		return x.MplsAdminGroups
	}
	return nil
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesType) GetTeLspTimers() *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeTeLspTimersType {
	if x != nil {
		return x.TeLspTimers
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesType struct {
	state         protoimpl.MessageState                                                                 `protogen:"open.v1"`
	Interface     []*NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceList `protobuf:"bytes,151,rep,name=interface" json:"interface,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesType{}
	mi := &file_rpd_te_oc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesType) ProtoMessage() {}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesType) GetInterface() []*NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceList {
	if x != nil {
		return x.Interface
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsType struct {
	state           protoimpl.MessageState                                                    `protogen:"open.v1"`
	ConstrainedPath *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathType `protobuf:"bytes,151,opt,name=constrained_path,json=constrainedPath" json:"constrained_path,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsType{}
	mi := &file_rpd_te_oc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsType) ProtoMessage() {}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsType) GetConstrainedPath() *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathType {
	if x != nil {
		return x.ConstrainedPath
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsType struct {
	state         protoimpl.MessageState                                                                  `protogen:"open.v1"`
	Srlg          []*NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsTypeSrlgList `protobuf:"bytes,151,rep,name=srlg" json:"srlg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsType{}
	mi := &file_rpd_te_oc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsType) ProtoMessage() {}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsType) GetSrlg() []*NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsTypeSrlgList {
	if x != nil {
		return x.Srlg
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsType struct {
	state         protoimpl.MessageState                                                                                  `protogen:"open.v1"`
	AdminGroup    []*NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsTypeAdminGroupList `protobuf:"bytes,151,rep,name=admin_group,json=adminGroup" json:"admin_group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsType{}
	mi := &file_rpd_te_oc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsType) GetAdminGroup() []*NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsTypeAdminGroupList {
	if x != nil {
		return x.AdminGroup
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeTeLspTimersType struct {
	state         protoimpl.MessageState                                                                       `protogen:"open.v1"`
	State         *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeTeLspTimersTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeTeLspTimersType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeTeLspTimersType{}
	mi := &file_rpd_te_oc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeTeLspTimersType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeTeLspTimersType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeTeLspTimersType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeTeLspTimersType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeTeLspTimersType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 2}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeTeLspTimersType) GetState() *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeTeLspTimersTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsTypeSrlgList struct {
	state         protoimpl.MessageState                                                                         `protogen:"open.v1"`
	Name          *string                                                                                        `protobuf:"bytes,52,opt,name=name" json:"name,omitempty"`
	State         *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsTypeSrlgListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsTypeSrlgList) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsTypeSrlgList{}
	mi := &file_rpd_te_oc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsTypeSrlgList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsTypeSrlgList) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsTypeSrlgList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsTypeSrlgList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsTypeSrlgList) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsTypeSrlgList) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsTypeSrlgList) GetState() *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsTypeSrlgListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsTypeSrlgListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	Value         *uint32                `protobuf:"varint,52,opt,name=value" json:"value,omitempty"`
	Cost          *uint32                `protobuf:"varint,53,opt,name=cost" json:"cost,omitempty"`
	FloodingType  *string                `protobuf:"bytes,54,opt,name=flooding_type,json=floodingType" json:"flooding_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsTypeSrlgListStateType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsTypeSrlgListStateType{}
	mi := &file_rpd_te_oc_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsTypeSrlgListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsTypeSrlgListStateType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsTypeSrlgListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsTypeSrlgListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsTypeSrlgListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsTypeSrlgListStateType) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsTypeSrlgListStateType) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsTypeSrlgListStateType) GetCost() uint32 {
	if x != nil && x.Cost != nil {
		return *x.Cost
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsTypeSrlgListStateType) GetFloodingType() string {
	if x != nil && x.FloodingType != nil {
		return *x.FloodingType
	}
	return ""
}

type NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsTypeAdminGroupList struct {
	state          protoimpl.MessageState                                                                                         `protogen:"open.v1"`
	AdminGroupName *string                                                                                                        `protobuf:"bytes,52,opt,name=admin_group_name,json=adminGroupName" json:"admin_group_name,omitempty"`
	State          *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsTypeAdminGroupListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsTypeAdminGroupList) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsTypeAdminGroupList{}
	mi := &file_rpd_te_oc_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsTypeAdminGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsTypeAdminGroupList) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsTypeAdminGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsTypeAdminGroupList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsTypeAdminGroupList) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsTypeAdminGroupList) GetAdminGroupName() string {
	if x != nil && x.AdminGroupName != nil {
		return *x.AdminGroupName
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsTypeAdminGroupList) GetState() *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsTypeAdminGroupListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsTypeAdminGroupListStateType struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AdminGroupName *string                `protobuf:"bytes,51,opt,name=admin_group_name,json=adminGroupName" json:"admin_group_name,omitempty"`
	BitPosition    *uint32                `protobuf:"varint,52,opt,name=bit_position,json=bitPosition" json:"bit_position,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsTypeAdminGroupListStateType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsTypeAdminGroupListStateType{}
	mi := &file_rpd_te_oc_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsTypeAdminGroupListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsTypeAdminGroupListStateType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsTypeAdminGroupListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsTypeAdminGroupListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsTypeAdminGroupListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsTypeAdminGroupListStateType) GetAdminGroupName() string {
	if x != nil && x.AdminGroupName != nil {
		return *x.AdminGroupName
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsTypeAdminGroupListStateType) GetBitPosition() uint32 {
	if x != nil && x.BitPosition != nil {
		return *x.BitPosition
	}
	return 0
}

type NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeTeLspTimersTypeStateType struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	InstallDelay    *uint32                `protobuf:"varint,51,opt,name=install_delay,json=installDelay" json:"install_delay,omitempty"`
	CleanupDelay    *uint32                `protobuf:"varint,52,opt,name=cleanup_delay,json=cleanupDelay" json:"cleanup_delay,omitempty"`
	ReoptimizeTimer *uint32                `protobuf:"varint,53,opt,name=reoptimize_timer,json=reoptimizeTimer" json:"reoptimize_timer,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeTeLspTimersTypeStateType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeTeLspTimersTypeStateType{}
	mi := &file_rpd_te_oc_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeTeLspTimersTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeTeLspTimersTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeTeLspTimersTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeTeLspTimersTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeTeLspTimersTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 2, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeTeLspTimersTypeStateType) GetInstallDelay() uint32 {
	if x != nil && x.InstallDelay != nil {
		return *x.InstallDelay
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeTeLspTimersTypeStateType) GetCleanupDelay() uint32 {
	if x != nil && x.CleanupDelay != nil {
		return *x.CleanupDelay
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeTeLspTimersTypeStateType) GetReoptimizeTimer() uint32 {
	if x != nil && x.ReoptimizeTimer != nil {
		return *x.ReoptimizeTimer
	}
	return 0
}

type NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceList struct {
	state                protoimpl.MessageState                                                                                       `protogen:"open.v1"`
	InterfaceId          *string                                                                                                      `protobuf:"bytes,52,opt,name=interface_id,json=interfaceId" json:"interface_id,omitempty"`
	State                *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListStateType                `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	InterfaceRef         *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListInterfaceRefType         `protobuf:"bytes,152,opt,name=interface_ref,json=interfaceRef" json:"interface_ref,omitempty"`
	IgpFloodingBandwidth *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListIgpFloodingBandwidthType `protobuf:"bytes,153,opt,name=igp_flooding_bandwidth,json=igpFloodingBandwidth" json:"igp_flooding_bandwidth,omitempty"`
	BandwidthMeasurement *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListBandwidthMeasurementType `protobuf:"bytes,154,opt,name=bandwidth_measurement,json=bandwidthMeasurement" json:"bandwidth_measurement,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceList) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceList{}
	mi := &file_rpd_te_oc_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceList) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceList) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceList) GetInterfaceId() string {
	if x != nil && x.InterfaceId != nil {
		return *x.InterfaceId
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceList) GetState() *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceList) GetInterfaceRef() *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListInterfaceRefType {
	if x != nil {
		return x.InterfaceRef
	}
	return nil
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceList) GetIgpFloodingBandwidth() *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListIgpFloodingBandwidthType {
	if x != nil {
		return x.IgpFloodingBandwidth
	}
	return nil
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceList) GetBandwidthMeasurement() *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListBandwidthMeasurementType {
	if x != nil {
		return x.BandwidthMeasurement
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListStateType struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	InterfaceId    *string                `protobuf:"bytes,51,opt,name=interface_id,json=interfaceId" json:"interface_id,omitempty"`
	SrlgMembership []string               `protobuf:"bytes,52,rep,name=srlg_membership,json=srlgMembership" json:"srlg_membership,omitempty"`
	AdminGroup     []string               `protobuf:"bytes,53,rep,name=admin_group,json=adminGroup" json:"admin_group,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListStateType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListStateType{}
	mi := &file_rpd_te_oc_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListStateType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListStateType) GetInterfaceId() string {
	if x != nil && x.InterfaceId != nil {
		return *x.InterfaceId
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListStateType) GetSrlgMembership() []string {
	if x != nil {
		return x.SrlgMembership
	}
	return nil
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListStateType) GetAdminGroup() []string {
	if x != nil {
		return x.AdminGroup
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListInterfaceRefType struct {
	state         protoimpl.MessageState                                                                                        `protogen:"open.v1"`
	State         *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListInterfaceRefTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListInterfaceRefType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListInterfaceRefType{}
	mi := &file_rpd_te_oc_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListInterfaceRefType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListInterfaceRefType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListInterfaceRefType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListInterfaceRefType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListInterfaceRefType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 1}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListInterfaceRefType) GetState() *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListInterfaceRefTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListIgpFloodingBandwidthType struct {
	state         protoimpl.MessageState                                                                                                `protogen:"open.v1"`
	State         *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListIgpFloodingBandwidthTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListIgpFloodingBandwidthType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListIgpFloodingBandwidthType{}
	mi := &file_rpd_te_oc_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListIgpFloodingBandwidthType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListIgpFloodingBandwidthType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListIgpFloodingBandwidthType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListIgpFloodingBandwidthType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListIgpFloodingBandwidthType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 2}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListIgpFloodingBandwidthType) GetState() *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListIgpFloodingBandwidthTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListBandwidthMeasurementType struct {
	state         protoimpl.MessageState                                                                                                `protogen:"open.v1"`
	State         *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListBandwidthMeasurementTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListBandwidthMeasurementType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListBandwidthMeasurementType{}
	mi := &file_rpd_te_oc_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListBandwidthMeasurementType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListBandwidthMeasurementType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListBandwidthMeasurementType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListBandwidthMeasurementType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListBandwidthMeasurementType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 3}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListBandwidthMeasurementType) GetState() *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListBandwidthMeasurementTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListInterfaceRefTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Interface     *string                `protobuf:"bytes,51,opt,name=interface" json:"interface,omitempty"`
	Subinterface  *uint32                `protobuf:"varint,52,opt,name=subinterface" json:"subinterface,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListInterfaceRefTypeStateType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListInterfaceRefTypeStateType{}
	mi := &file_rpd_te_oc_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListInterfaceRefTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListInterfaceRefTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListInterfaceRefTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListInterfaceRefTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListInterfaceRefTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 1, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListInterfaceRefTypeStateType) GetInterface() string {
	if x != nil && x.Interface != nil {
		return *x.Interface
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListInterfaceRefTypeStateType) GetSubinterface() uint32 {
	if x != nil && x.Subinterface != nil {
		return *x.Subinterface
	}
	return 0
}

type NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListIgpFloodingBandwidthTypeStateType struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ThresholdType   *string                `protobuf:"bytes,51,opt,name=threshold_type,json=thresholdType" json:"threshold_type,omitempty"`
	DeltaPercentage *uint32                `protobuf:"varint,52,opt,name=delta_percentage,json=deltaPercentage" json:"delta_percentage,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListIgpFloodingBandwidthTypeStateType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListIgpFloodingBandwidthTypeStateType{}
	mi := &file_rpd_te_oc_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListIgpFloodingBandwidthTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListIgpFloodingBandwidthTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListIgpFloodingBandwidthTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListIgpFloodingBandwidthTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListIgpFloodingBandwidthTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 2, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListIgpFloodingBandwidthTypeStateType) GetThresholdType() string {
	if x != nil && x.ThresholdType != nil {
		return *x.ThresholdType
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListIgpFloodingBandwidthTypeStateType) GetDeltaPercentage() uint32 {
	if x != nil && x.DeltaPercentage != nil {
		return *x.DeltaPercentage
	}
	return 0
}

type NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListBandwidthMeasurementTypeStateType struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	LastCalculatedSrUtilisation *uint64                `protobuf:"varint,51,opt,name=last_calculated_sr_utilisation,json=lastCalculatedSrUtilisation" json:"last_calculated_sr_utilisation,omitempty"`
	LastSampleMeasuredSrUtil    *uint64                `protobuf:"varint,52,opt,name=last_sample_measured_sr_util,json=lastSampleMeasuredSrUtil" json:"last_sample_measured_sr_util,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListBandwidthMeasurementTypeStateType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListBandwidthMeasurementTypeStateType{}
	mi := &file_rpd_te_oc_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListBandwidthMeasurementTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListBandwidthMeasurementTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListBandwidthMeasurementTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListBandwidthMeasurementTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListBandwidthMeasurementTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 3, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListBandwidthMeasurementTypeStateType) GetLastCalculatedSrUtilisation() uint64 {
	if x != nil && x.LastCalculatedSrUtilisation != nil {
		return *x.LastCalculatedSrUtilisation
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListBandwidthMeasurementTypeStateType) GetLastSampleMeasuredSrUtil() uint64 {
	if x != nil && x.LastSampleMeasuredSrUtil != nil {
		return *x.LastSampleMeasuredSrUtil
	}
	return 0
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathType struct {
	state              protoimpl.MessageState                                                                          `protogen:"open.v1"`
	NamedExplicitPaths *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsType `protobuf:"bytes,151,opt,name=named_explicit_paths,json=namedExplicitPaths" json:"named_explicit_paths,omitempty"`
	Tunnels            *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsType            `protobuf:"bytes,152,opt,name=tunnels" json:"tunnels,omitempty"`
	ContainerTunnels   *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsType   `protobuf:"bytes,153,opt,name=container_tunnels,json=containerTunnels" json:"container_tunnels,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathType{}
	mi := &file_rpd_te_oc_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathType) ProtoMessage() {}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathType) GetNamedExplicitPaths() *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsType {
	if x != nil {
		return x.NamedExplicitPaths
	}
	return nil
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathType) GetTunnels() *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsType {
	if x != nil {
		return x.Tunnels
	}
	return nil
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathType) GetContainerTunnels() *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsType {
	if x != nil {
		return x.ContainerTunnels
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsType struct {
	state             protoimpl.MessageState                                                                                                 `protogen:"open.v1"`
	NamedExplicitPath []*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathList `protobuf:"bytes,151,rep,name=named_explicit_path,json=namedExplicitPath" json:"named_explicit_path,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsType{}
	mi := &file_rpd_te_oc_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsType) GetNamedExplicitPath() []*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathList {
	if x != nil {
		return x.NamedExplicitPath
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsType struct {
	state         protoimpl.MessageState                                                                           `protogen:"open.v1"`
	Tunnel        []*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelList `protobuf:"bytes,151,rep,name=tunnel" json:"tunnel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsType{}
	mi := &file_rpd_te_oc_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsType) GetTunnel() []*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelList {
	if x != nil {
		return x.Tunnel
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsType struct {
	state           protoimpl.MessageState                                                                                             `protogen:"open.v1"`
	ContainerTunnel []*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelList `protobuf:"bytes,151,rep,name=container_tunnel,json=containerTunnel" json:"container_tunnel,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsType{}
	mi := &file_rpd_te_oc_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 2}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsType) GetContainerTunnel() []*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelList {
	if x != nil {
		return x.ContainerTunnel
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathList struct {
	state                protoimpl.MessageState                                                                                                                       `protogen:"open.v1"`
	Name                 *string                                                                                                                                      `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	State                *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListStateType                `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	ExplicitRouteObjects *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsType `protobuf:"bytes,152,opt,name=explicit_route_objects,json=explicitRouteObjects" json:"explicit_route_objects,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathList) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathList{}
	mi := &file_rpd_te_oc_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathList) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathList) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 0, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathList) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathList) GetState() *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathList) GetExplicitRouteObjects() *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsType {
	if x != nil {
		return x.ExplicitRouteObjects
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListStateType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListStateType{}
	mi := &file_rpd_te_oc_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListStateType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 0, 0, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListStateType) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsType struct {
	state               protoimpl.MessageState                                                                                                                                                `protogen:"open.v1"`
	ExplicitRouteObject []*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsTypeExplicitRouteObjectList `protobuf:"bytes,151,rep,name=explicit_route_object,json=explicitRouteObject" json:"explicit_route_object,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsType{}
	mi := &file_rpd_te_oc_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 0, 0, 1}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsType) GetExplicitRouteObject() []*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsTypeExplicitRouteObjectList {
	if x != nil {
		return x.ExplicitRouteObject
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsTypeExplicitRouteObjectList struct {
	state         protoimpl.MessageState                                                                                                                                                       `protogen:"open.v1"`
	Index         *uint32                                                                                                                                                                      `protobuf:"varint,51,opt,name=index" json:"index,omitempty"`
	State         *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsTypeExplicitRouteObjectListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsTypeExplicitRouteObjectList) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsTypeExplicitRouteObjectList{}
	mi := &file_rpd_te_oc_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsTypeExplicitRouteObjectList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsTypeExplicitRouteObjectList) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsTypeExplicitRouteObjectList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsTypeExplicitRouteObjectList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsTypeExplicitRouteObjectList) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 0, 0, 1, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsTypeExplicitRouteObjectList) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsTypeExplicitRouteObjectList) GetState() *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsTypeExplicitRouteObjectListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsTypeExplicitRouteObjectListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       *string                `protobuf:"bytes,51,opt,name=address" json:"address,omitempty"`
	HopType       *string                `protobuf:"bytes,52,opt,name=hop_type,json=hopType" json:"hop_type,omitempty"`
	Index         *uint32                `protobuf:"varint,53,opt,name=index" json:"index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsTypeExplicitRouteObjectListStateType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsTypeExplicitRouteObjectListStateType{}
	mi := &file_rpd_te_oc_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsTypeExplicitRouteObjectListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsTypeExplicitRouteObjectListStateType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsTypeExplicitRouteObjectListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsTypeExplicitRouteObjectListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsTypeExplicitRouteObjectListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 0, 0, 1, 0, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsTypeExplicitRouteObjectListStateType) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsTypeExplicitRouteObjectListStateType) GetHopType() string {
	if x != nil && x.HopType != nil {
		return *x.HopType
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsTypeExplicitRouteObjectListStateType) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelList struct {
	state               protoimpl.MessageState                                                                                                `protogen:"open.v1"`
	Name                *string                                                                                                               `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	Source              *string                                                                                                               `protobuf:"bytes,52,opt,name=source" json:"source,omitempty"`
	State               *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateType               `protobuf:"bytes,53,opt,name=state" json:"state,omitempty"`
	Bandwidth           *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthType           `protobuf:"bytes,152,opt,name=bandwidth" json:"bandwidth,omitempty"`
	P2PTunnelAttributes *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesType `protobuf:"bytes,153,opt,name=p2p_tunnel_attributes,json=p2pTunnelAttributes" json:"p2p_tunnel_attributes,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelList) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelList{}
	mi := &file_rpd_te_oc_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelList) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelList) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelList) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelList) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelList) GetState() *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelList) GetBandwidth() *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthType {
	if x != nil {
		return x.Bandwidth
	}
	return nil
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelList) GetP2PTunnelAttributes() *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesType {
	if x != nil {
		return x.P2PTunnelAttributes
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateType struct {
	state                    protoimpl.MessageState                                                                                              `protogen:"open.v1"`
	Name                     *string                                                                                                             `protobuf:"bytes,54,opt,name=name" json:"name,omitempty"`
	Type                     *string                                                                                                             `protobuf:"bytes,55,opt,name=type" json:"type,omitempty"`
	SignalingProtocol        *string                                                                                                             `protobuf:"bytes,56,opt,name=signaling_protocol,json=signalingProtocol" json:"signaling_protocol,omitempty"`
	Description              *string                                                                                                             `protobuf:"bytes,57,opt,name=description" json:"description,omitempty"`
	AdminStatus              *string                                                                                                             `protobuf:"bytes,58,opt,name=admin_status,json=adminStatus" json:"admin_status,omitempty"`
	Preference               *uint32                                                                                                             `protobuf:"varint,59,opt,name=preference" json:"preference,omitempty"`
	MetricType               *string                                                                                                             `protobuf:"bytes,60,opt,name=metric_type,json=metricType" json:"metric_type,omitempty"`
	Metric                   *int32                                                                                                              `protobuf:"varint,61,opt,name=metric" json:"metric,omitempty"`
	ProtectionStyleRequested *string                                                                                                             `protobuf:"bytes,63,opt,name=protection_style_requested,json=protectionStyleRequested" json:"protection_style_requested,omitempty"`
	ReoptimizeTimer          *uint32                                                                                                             `protobuf:"varint,64,opt,name=reoptimize_timer,json=reoptimizeTimer" json:"reoptimize_timer,omitempty"`
	Source                   *string                                                                                                             `protobuf:"bytes,65,opt,name=source" json:"source,omitempty"`
	SoftPreemption           *bool                                                                                                               `protobuf:"varint,66,opt,name=soft_preemption,json=softPreemption" json:"soft_preemption,omitempty"`
	SetupPriority            *uint32                                                                                                             `protobuf:"varint,67,opt,name=setup_priority,json=setupPriority" json:"setup_priority,omitempty"`
	HoldPriority             *uint32                                                                                                             `protobuf:"varint,68,opt,name=hold_priority,json=holdPriority" json:"hold_priority,omitempty"`
	OperStatus               *string                                                                                                             `protobuf:"bytes,69,opt,name=oper_status,json=operStatus" json:"oper_status,omitempty"`
	Counters                 *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateTypeCountersType `protobuf:"bytes,151,opt,name=counters" json:"counters,omitempty"`
	InheritedMetric          *uint32                                                                                                             `protobuf:"varint,62,opt,name=inherited_metric,json=inheritedMetric" json:"inherited_metric,omitempty"`
	TunnelId                 *uint32                                                                                                             `protobuf:"varint,52,opt,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateType{}
	mi := &file_rpd_te_oc_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 0, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateType) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateType) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateType) GetSignalingProtocol() string {
	if x != nil && x.SignalingProtocol != nil {
		return *x.SignalingProtocol
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateType) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateType) GetAdminStatus() string {
	if x != nil && x.AdminStatus != nil {
		return *x.AdminStatus
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateType) GetPreference() uint32 {
	if x != nil && x.Preference != nil {
		return *x.Preference
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateType) GetMetricType() string {
	if x != nil && x.MetricType != nil {
		return *x.MetricType
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateType) GetMetric() int32 {
	if x != nil && x.Metric != nil {
		return *x.Metric
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateType) GetProtectionStyleRequested() string {
	if x != nil && x.ProtectionStyleRequested != nil {
		return *x.ProtectionStyleRequested
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateType) GetReoptimizeTimer() uint32 {
	if x != nil && x.ReoptimizeTimer != nil {
		return *x.ReoptimizeTimer
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateType) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateType) GetSoftPreemption() bool {
	if x != nil && x.SoftPreemption != nil {
		return *x.SoftPreemption
	}
	return false
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateType) GetSetupPriority() uint32 {
	if x != nil && x.SetupPriority != nil {
		return *x.SetupPriority
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateType) GetHoldPriority() uint32 {
	if x != nil && x.HoldPriority != nil {
		return *x.HoldPriority
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateType) GetOperStatus() string {
	if x != nil && x.OperStatus != nil {
		return *x.OperStatus
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateType) GetCounters() *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateTypeCountersType {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateType) GetInheritedMetric() uint32 {
	if x != nil && x.InheritedMetric != nil {
		return *x.InheritedMetric
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateType) GetTunnelId() uint32 {
	if x != nil && x.TunnelId != nil {
		return *x.TunnelId
	}
	return 0
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthType struct {
	state         protoimpl.MessageState                                                                                                       `protogen:"open.v1"`
	State         *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeStateType         `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	AutoBandwidth *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthType `protobuf:"bytes,152,opt,name=auto_bandwidth,json=autoBandwidth" json:"auto_bandwidth,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthType{}
	mi := &file_rpd_te_oc_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 0, 1}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthType) GetState() *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthType) GetAutoBandwidth() *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthType {
	if x != nil {
		return x.AutoBandwidth
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesType struct {
	state             protoimpl.MessageState                                                                                                                     `protogen:"open.v1"`
	State             *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeStateType             `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	P2PPrimaryPath    *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathType    `protobuf:"bytes,152,opt,name=p2p_primary_path,json=p2pPrimaryPath" json:"p2p_primary_path,omitempty"`
	P2PSecondaryPaths *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsType `protobuf:"bytes,153,opt,name=p2p_secondary_paths,json=p2pSecondaryPaths" json:"p2p_secondary_paths,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesType{}
	mi := &file_rpd_te_oc_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 0, 2}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesType) GetState() *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesType) GetP2PPrimaryPath() *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathType {
	if x != nil {
		return x.P2PPrimaryPath
	}
	return nil
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesType) GetP2PSecondaryPaths() *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsType {
	if x != nil {
		return x.P2PSecondaryPaths
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateTypeCountersType struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	PathChanges            *uint64                `protobuf:"varint,51,opt,name=path_changes,json=pathChanges" json:"path_changes,omitempty"`
	StateChanges           *uint64                `protobuf:"varint,52,opt,name=state_changes,json=stateChanges" json:"state_changes,omitempty"`
	OnlineTime             *string                `protobuf:"bytes,53,opt,name=online_time,json=onlineTime" json:"online_time,omitempty"`
	CurrentPathTime        *string                `protobuf:"bytes,54,opt,name=current_path_time,json=currentPathTime" json:"current_path_time,omitempty"`
	NextReoptimizationTime *string                `protobuf:"bytes,55,opt,name=next_reoptimization_time,json=nextReoptimizationTime" json:"next_reoptimization_time,omitempty"`
	LastTransitionTime     *string                `protobuf:"bytes,56,opt,name=last_transition_time,json=lastTransitionTime" json:"last_transition_time,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateTypeCountersType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateTypeCountersType{}
	mi := &file_rpd_te_oc_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateTypeCountersType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateTypeCountersType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateTypeCountersType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateTypeCountersType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateTypeCountersType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 0, 0, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateTypeCountersType) GetPathChanges() uint64 {
	if x != nil && x.PathChanges != nil {
		return *x.PathChanges
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateTypeCountersType) GetStateChanges() uint64 {
	if x != nil && x.StateChanges != nil {
		return *x.StateChanges
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateTypeCountersType) GetOnlineTime() string {
	if x != nil && x.OnlineTime != nil {
		return *x.OnlineTime
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateTypeCountersType) GetCurrentPathTime() string {
	if x != nil && x.CurrentPathTime != nil {
		return *x.CurrentPathTime
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateTypeCountersType) GetNextReoptimizationTime() string {
	if x != nil && x.NextReoptimizationTime != nil {
		return *x.NextReoptimizationTime
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateTypeCountersType) GetLastTransitionTime() string {
	if x != nil && x.LastTransitionTime != nil {
		return *x.LastTransitionTime
	}
	return ""
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeStateType struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SpecificationType *string                `protobuf:"bytes,51,opt,name=specification_type,json=specificationType" json:"specification_type,omitempty"`
	SetBandwidth      *uint64                `protobuf:"varint,52,opt,name=set_bandwidth,json=setBandwidth" json:"set_bandwidth,omitempty"`
	SignaledBandwidth *uint64                `protobuf:"varint,53,opt,name=signaled_bandwidth,json=signaledBandwidth" json:"signaled_bandwidth,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeStateType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeStateType{}
	mi := &file_rpd_te_oc_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 0, 1, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeStateType) GetSpecificationType() string {
	if x != nil && x.SpecificationType != nil {
		return *x.SpecificationType
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeStateType) GetSetBandwidth() uint64 {
	if x != nil && x.SetBandwidth != nil {
		return *x.SetBandwidth
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeStateType) GetSignaledBandwidth() uint64 {
	if x != nil && x.SignaledBandwidth != nil {
		return *x.SignaledBandwidth
	}
	return 0
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthType struct {
	state         protoimpl.MessageState                                                                                                                    `protogen:"open.v1"`
	State         *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeStateType     `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	Overflow      *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeOverflowType  `protobuf:"bytes,152,opt,name=overflow" json:"overflow,omitempty"`
	Underflow     *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeUnderflowType `protobuf:"bytes,153,opt,name=underflow" json:"underflow,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthType{}
	mi := &file_rpd_te_oc_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 0, 1, 1}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthType) GetState() *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthType) GetOverflow() *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeOverflowType {
	if x != nil {
		return x.Overflow
	}
	return nil
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthType) GetUnderflow() *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeUnderflowType {
	if x != nil {
		return x.Underflow
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeStateType struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Enabled         *bool                  `protobuf:"varint,51,opt,name=enabled" json:"enabled,omitempty"`
	MinBw           *uint64                `protobuf:"varint,52,opt,name=min_bw,json=minBw" json:"min_bw,omitempty"`
	MaxBw           *uint64                `protobuf:"varint,53,opt,name=max_bw,json=maxBw" json:"max_bw,omitempty"`
	AdjustInterval  *uint32                `protobuf:"varint,54,opt,name=adjust_interval,json=adjustInterval" json:"adjust_interval,omitempty"`
	AdjustThreshold *uint32                `protobuf:"varint,55,opt,name=adjust_threshold,json=adjustThreshold" json:"adjust_threshold,omitempty"`
	MaxAverageBw    *uint64                `protobuf:"varint,61,opt,name=max_average_bw,json=maxAverageBw" json:"max_average_bw,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeStateType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeStateType{}
	mi := &file_rpd_te_oc_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 0, 1, 1, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeStateType) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeStateType) GetMinBw() uint64 {
	if x != nil && x.MinBw != nil {
		return *x.MinBw
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeStateType) GetMaxBw() uint64 {
	if x != nil && x.MaxBw != nil {
		return *x.MaxBw
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeStateType) GetAdjustInterval() uint32 {
	if x != nil && x.AdjustInterval != nil {
		return *x.AdjustInterval
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeStateType) GetAdjustThreshold() uint32 {
	if x != nil && x.AdjustThreshold != nil {
		return *x.AdjustThreshold
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeStateType) GetMaxAverageBw() uint64 {
	if x != nil && x.MaxAverageBw != nil {
		return *x.MaxAverageBw
	}
	return 0
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeOverflowType struct {
	state         protoimpl.MessageState                                                                                                                            `protogen:"open.v1"`
	State         *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeOverflowTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeOverflowType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeOverflowType{}
	mi := &file_rpd_te_oc_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeOverflowType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeOverflowType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeOverflowType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeOverflowType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeOverflowType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 0, 1, 1, 1}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeOverflowType) GetState() *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeOverflowTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeUnderflowType struct {
	state         protoimpl.MessageState                                                                                                                             `protogen:"open.v1"`
	State         *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeUnderflowTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeUnderflowType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeUnderflowType{}
	mi := &file_rpd_te_oc_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeUnderflowType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeUnderflowType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeUnderflowType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeUnderflowType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeUnderflowType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 0, 1, 1, 2}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeUnderflowType) GetState() *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeUnderflowTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeOverflowTypeStateType struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Enabled           *bool                  `protobuf:"varint,51,opt,name=enabled" json:"enabled,omitempty"`
	TriggerEventCount *uint32                `protobuf:"varint,52,opt,name=trigger_event_count,json=triggerEventCount" json:"trigger_event_count,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeOverflowTypeStateType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeOverflowTypeStateType{}
	mi := &file_rpd_te_oc_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeOverflowTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeOverflowTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeOverflowTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeOverflowTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeOverflowTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 0, 1, 1, 1, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeOverflowTypeStateType) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeOverflowTypeStateType) GetTriggerEventCount() uint32 {
	if x != nil && x.TriggerEventCount != nil {
		return *x.TriggerEventCount
	}
	return 0
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeUnderflowTypeStateType struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Enabled           *bool                  `protobuf:"varint,51,opt,name=enabled" json:"enabled,omitempty"`
	TriggerEventCount *uint32                `protobuf:"varint,52,opt,name=trigger_event_count,json=triggerEventCount" json:"trigger_event_count,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeUnderflowTypeStateType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeUnderflowTypeStateType{}
	mi := &file_rpd_te_oc_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeUnderflowTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeUnderflowTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeUnderflowTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeUnderflowTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeUnderflowTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 0, 1, 1, 2, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeUnderflowTypeStateType) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeUnderflowTypeStateType) GetTriggerEventCount() uint32 {
	if x != nil && x.TriggerEventCount != nil {
		return *x.TriggerEventCount
	}
	return 0
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Destination   *string                `protobuf:"bytes,51,opt,name=destination" json:"destination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeStateType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeStateType{}
	mi := &file_rpd_te_oc_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 0, 2, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeStateType) GetDestination() string {
	if x != nil && x.Destination != nil {
		return *x.Destination
	}
	return ""
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathType struct {
	state          protoimpl.MessageState                                                                                                                                      `protogen:"open.v1"`
	P2PPrimaryPath []*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathList `protobuf:"bytes,151,rep,name=p2p_primary_path,json=p2pPrimaryPath" json:"p2p_primary_path,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathType{}
	mi := &file_rpd_te_oc_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 0, 2, 1}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathType) GetP2PPrimaryPath() []*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathList {
	if x != nil {
		return x.P2PPrimaryPath
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsType struct {
	state            protoimpl.MessageState                                                                                                                                           `protogen:"open.v1"`
	P2PSecondaryPath []*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathList `protobuf:"bytes,151,rep,name=p2p_secondary_path,json=p2pSecondaryPath" json:"p2p_secondary_path,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsType{}
	mi := &file_rpd_te_oc_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 0, 2, 2}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsType) GetP2PSecondaryPath() []*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathList {
	if x != nil {
		return x.P2PSecondaryPath
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathList struct {
	state         protoimpl.MessageState                                                                                                                                                      `protogen:"open.v1"`
	Name          *string                                                                                                                                                                     `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	State         *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListStateType          `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	AdminGroups   *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListAdminGroupsType    `protobuf:"bytes,152,opt,name=admin_groups,json=adminGroups" json:"admin_groups,omitempty"`
	LspInstances  []*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListLspInstancesList `protobuf:"bytes,153,rep,name=lsp_instances,json=lspInstances" json:"lsp_instances,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathList) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathList{}
	mi := &file_rpd_te_oc_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathList) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathList) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 0, 2, 1, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathList) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathList) GetState() *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathList) GetAdminGroups() *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListAdminGroupsType {
	if x != nil {
		return x.AdminGroups
	}
	return nil
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathList) GetLspInstances() []*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListLspInstancesList {
	if x != nil {
		return x.LspInstances
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListStateType struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Name                   *string                `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	UseCspf                *bool                  `protobuf:"varint,52,opt,name=use_cspf,json=useCspf" json:"use_cspf,omitempty"`
	CspfTiebreaker         *string                `protobuf:"bytes,53,opt,name=cspf_tiebreaker,json=cspfTiebreaker" json:"cspf_tiebreaker,omitempty"`
	ExplicitPathName       *string                `protobuf:"bytes,56,opt,name=explicit_path_name,json=explicitPathName" json:"explicit_path_name,omitempty"`
	Preference             *uint32                `protobuf:"varint,61,opt,name=preference" json:"preference,omitempty"`
	SetupPriority          *uint32                `protobuf:"varint,62,opt,name=setup_priority,json=setupPriority" json:"setup_priority,omitempty"`
	HoldPriority           *uint32                `protobuf:"varint,63,opt,name=hold_priority,json=holdPriority" json:"hold_priority,omitempty"`
	RetryTimer             *uint32                `protobuf:"varint,64,opt,name=retry_timer,json=retryTimer" json:"retry_timer,omitempty"`
	NotifyStatus           *string                `protobuf:"bytes,81,opt,name=notify_status,json=notifyStatus" json:"notify_status,omitempty"`
	CspfStatus             *string                `protobuf:"bytes,54,opt,name=cspf_status,json=cspfStatus" json:"cspf_status,omitempty"`
	CspfMetric             *uint64                `protobuf:"varint,55,opt,name=cspf_metric,json=cspfMetric" json:"cspf_metric,omitempty"`
	AssociatedRsvpSessions []uint32               `protobuf:"varint,59,rep,name=associated_rsvp_sessions,json=associatedRsvpSessions" json:"associated_rsvp_sessions,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListStateType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListStateType{}
	mi := &file_rpd_te_oc_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListStateType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 0, 2, 1, 0, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListStateType) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListStateType) GetUseCspf() bool {
	if x != nil && x.UseCspf != nil {
		return *x.UseCspf
	}
	return false
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListStateType) GetCspfTiebreaker() string {
	if x != nil && x.CspfTiebreaker != nil {
		return *x.CspfTiebreaker
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListStateType) GetExplicitPathName() string {
	if x != nil && x.ExplicitPathName != nil {
		return *x.ExplicitPathName
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListStateType) GetPreference() uint32 {
	if x != nil && x.Preference != nil {
		return *x.Preference
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListStateType) GetSetupPriority() uint32 {
	if x != nil && x.SetupPriority != nil {
		return *x.SetupPriority
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListStateType) GetHoldPriority() uint32 {
	if x != nil && x.HoldPriority != nil {
		return *x.HoldPriority
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListStateType) GetRetryTimer() uint32 {
	if x != nil && x.RetryTimer != nil {
		return *x.RetryTimer
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListStateType) GetNotifyStatus() string {
	if x != nil && x.NotifyStatus != nil {
		return *x.NotifyStatus
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListStateType) GetCspfStatus() string {
	if x != nil && x.CspfStatus != nil {
		return *x.CspfStatus
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListStateType) GetCspfMetric() uint64 {
	if x != nil && x.CspfMetric != nil {
		return *x.CspfMetric
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListStateType) GetAssociatedRsvpSessions() []uint32 {
	if x != nil {
		return x.AssociatedRsvpSessions
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListAdminGroupsType struct {
	state         protoimpl.MessageState                                                                                                                                                            `protogen:"open.v1"`
	State         *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListAdminGroupsTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListAdminGroupsType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListAdminGroupsType{}
	mi := &file_rpd_te_oc_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListAdminGroupsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListAdminGroupsType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListAdminGroupsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListAdminGroupsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListAdminGroupsType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 0, 2, 1, 0, 1}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListAdminGroupsType) GetState() *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListAdminGroupsTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListLspInstancesList struct {
	state         protoimpl.MessageState                                                                                                                                                             `protogen:"open.v1"`
	LocalIndex    *uint32                                                                                                                                                                            `protobuf:"varint,51,opt,name=local_index,json=localIndex" json:"local_index,omitempty"`
	LspId         *uint32                                                                                                                                                                            `protobuf:"varint,52,opt,name=lsp_id,json=lspId" json:"lsp_id,omitempty"`
	Subcode       *string                                                                                                                                                                            `protobuf:"bytes,53,opt,name=subcode" json:"subcode,omitempty"`
	State         *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListLspInstancesListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListLspInstancesList) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListLspInstancesList{}
	mi := &file_rpd_te_oc_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListLspInstancesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListLspInstancesList) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListLspInstancesList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListLspInstancesList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListLspInstancesList) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 0, 2, 1, 0, 2}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListLspInstancesList) GetLocalIndex() uint32 {
	if x != nil && x.LocalIndex != nil {
		return *x.LocalIndex
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListLspInstancesList) GetLspId() uint32 {
	if x != nil && x.LspId != nil {
		return *x.LspId
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListLspInstancesList) GetSubcode() string {
	if x != nil && x.Subcode != nil {
		return *x.Subcode
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListLspInstancesList) GetState() *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListLspInstancesListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListAdminGroupsTypeStateType struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ExcludeGroup    []string               `protobuf:"bytes,51,rep,name=exclude_group,json=excludeGroup" json:"exclude_group,omitempty"`
	IncludeAllGroup []string               `protobuf:"bytes,52,rep,name=include_all_group,json=includeAllGroup" json:"include_all_group,omitempty"`
	IncludeAnyGroup []string               `protobuf:"bytes,53,rep,name=include_any_group,json=includeAnyGroup" json:"include_any_group,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListAdminGroupsTypeStateType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListAdminGroupsTypeStateType{}
	mi := &file_rpd_te_oc_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListAdminGroupsTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListAdminGroupsTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListAdminGroupsTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListAdminGroupsTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListAdminGroupsTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 0, 2, 1, 0, 1, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListAdminGroupsTypeStateType) GetExcludeGroup() []string {
	if x != nil {
		return x.ExcludeGroup
	}
	return nil
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListAdminGroupsTypeStateType) GetIncludeAllGroup() []string {
	if x != nil {
		return x.IncludeAllGroup
	}
	return nil
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListAdminGroupsTypeStateType) GetIncludeAnyGroup() []string {
	if x != nil {
		return x.IncludeAnyGroup
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListLspInstancesListStateType struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	LocalIndex      *uint32                `protobuf:"varint,51,opt,name=local_index,json=localIndex" json:"local_index,omitempty"`
	NotifyStatus    *string                `protobuf:"bytes,52,opt,name=notify_status,json=notifyStatus" json:"notify_status,omitempty"`
	Metric          *int32                 `protobuf:"varint,53,opt,name=metric" json:"metric,omitempty"`
	Bandwidth       *uint64                `protobuf:"varint,54,opt,name=bandwidth" json:"bandwidth,omitempty"`
	MaxAvgBandwidth *uint64                `protobuf:"varint,55,opt,name=max_avg_bandwidth,json=maxAvgBandwidth" json:"max_avg_bandwidth,omitempty"`
	Reason          *string                `protobuf:"bytes,56,opt,name=reason" json:"reason,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListLspInstancesListStateType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListLspInstancesListStateType{}
	mi := &file_rpd_te_oc_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListLspInstancesListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListLspInstancesListStateType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListLspInstancesListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListLspInstancesListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListLspInstancesListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 0, 2, 1, 0, 2, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListLspInstancesListStateType) GetLocalIndex() uint32 {
	if x != nil && x.LocalIndex != nil {
		return *x.LocalIndex
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListLspInstancesListStateType) GetNotifyStatus() string {
	if x != nil && x.NotifyStatus != nil {
		return *x.NotifyStatus
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListLspInstancesListStateType) GetMetric() int32 {
	if x != nil && x.Metric != nil {
		return *x.Metric
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListLspInstancesListStateType) GetBandwidth() uint64 {
	if x != nil && x.Bandwidth != nil {
		return *x.Bandwidth
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListLspInstancesListStateType) GetMaxAvgBandwidth() uint64 {
	if x != nil && x.MaxAvgBandwidth != nil {
		return *x.MaxAvgBandwidth
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListLspInstancesListStateType) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathList struct {
	state         protoimpl.MessageState                                                                                                                                                        `protogen:"open.v1"`
	Name          *string                                                                                                                                                                       `protobuf:"bytes,52,opt,name=name" json:"name,omitempty"`
	State         *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListStateType       `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	AdminGroups   *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListAdminGroupsType `protobuf:"bytes,152,opt,name=admin_groups,json=adminGroups" json:"admin_groups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathList) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathList{}
	mi := &file_rpd_te_oc_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathList) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathList) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 0, 2, 2, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathList) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathList) GetState() *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathList) GetAdminGroups() *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListAdminGroupsType {
	if x != nil {
		return x.AdminGroups
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListStateType struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Name                   *string                `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	UseCspf                *bool                  `protobuf:"varint,52,opt,name=use_cspf,json=useCspf" json:"use_cspf,omitempty"`
	CspfTiebreaker         *string                `protobuf:"bytes,53,opt,name=cspf_tiebreaker,json=cspfTiebreaker" json:"cspf_tiebreaker,omitempty"`
	ExplicitPathName       *string                `protobuf:"bytes,54,opt,name=explicit_path_name,json=explicitPathName" json:"explicit_path_name,omitempty"`
	Preference             *uint32                `protobuf:"varint,55,opt,name=preference" json:"preference,omitempty"`
	SetupPriority          *uint32                `protobuf:"varint,56,opt,name=setup_priority,json=setupPriority" json:"setup_priority,omitempty"`
	HoldPriority           *uint32                `protobuf:"varint,57,opt,name=hold_priority,json=holdPriority" json:"hold_priority,omitempty"`
	RetryTimer             *uint32                `protobuf:"varint,58,opt,name=retry_timer,json=retryTimer" json:"retry_timer,omitempty"`
	AssociatedRsvpSessions []uint32               `protobuf:"varint,59,rep,name=associated_rsvp_sessions,json=associatedRsvpSessions" json:"associated_rsvp_sessions,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListStateType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListStateType{}
	mi := &file_rpd_te_oc_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListStateType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 0, 2, 2, 0, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListStateType) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListStateType) GetUseCspf() bool {
	if x != nil && x.UseCspf != nil {
		return *x.UseCspf
	}
	return false
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListStateType) GetCspfTiebreaker() string {
	if x != nil && x.CspfTiebreaker != nil {
		return *x.CspfTiebreaker
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListStateType) GetExplicitPathName() string {
	if x != nil && x.ExplicitPathName != nil {
		return *x.ExplicitPathName
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListStateType) GetPreference() uint32 {
	if x != nil && x.Preference != nil {
		return *x.Preference
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListStateType) GetSetupPriority() uint32 {
	if x != nil && x.SetupPriority != nil {
		return *x.SetupPriority
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListStateType) GetHoldPriority() uint32 {
	if x != nil && x.HoldPriority != nil {
		return *x.HoldPriority
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListStateType) GetRetryTimer() uint32 {
	if x != nil && x.RetryTimer != nil {
		return *x.RetryTimer
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListStateType) GetAssociatedRsvpSessions() []uint32 {
	if x != nil {
		return x.AssociatedRsvpSessions
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListAdminGroupsType struct {
	state         protoimpl.MessageState                                                                                                                                                                 `protogen:"open.v1"`
	State         *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListAdminGroupsTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListAdminGroupsType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListAdminGroupsType{}
	mi := &file_rpd_te_oc_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListAdminGroupsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListAdminGroupsType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListAdminGroupsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListAdminGroupsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListAdminGroupsType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 0, 2, 2, 0, 1}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListAdminGroupsType) GetState() *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListAdminGroupsTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListAdminGroupsTypeStateType struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ExcludeGroup    []string               `protobuf:"bytes,51,rep,name=exclude_group,json=excludeGroup" json:"exclude_group,omitempty"`
	IncludeAllGroup []string               `protobuf:"bytes,52,rep,name=include_all_group,json=includeAllGroup" json:"include_all_group,omitempty"`
	IncludeAnyGroup []string               `protobuf:"bytes,53,rep,name=include_any_group,json=includeAnyGroup" json:"include_any_group,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListAdminGroupsTypeStateType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListAdminGroupsTypeStateType{}
	mi := &file_rpd_te_oc_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListAdminGroupsTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListAdminGroupsTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListAdminGroupsTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListAdminGroupsTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListAdminGroupsTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 0, 2, 2, 0, 1, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListAdminGroupsTypeStateType) GetExcludeGroup() []string {
	if x != nil {
		return x.ExcludeGroup
	}
	return nil
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListAdminGroupsTypeStateType) GetIncludeAllGroup() []string {
	if x != nil {
		return x.IncludeAllGroup
	}
	return nil
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListAdminGroupsTypeStateType) GetIncludeAnyGroup() []string {
	if x != nil {
		return x.IncludeAnyGroup
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelList struct {
	state         protoimpl.MessageState                                                                                                    `protogen:"open.v1"`
	Name          *string                                                                                                                   `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	State         *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelList) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelList{}
	mi := &file_rpd_te_oc_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelList) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelList) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 2, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelList) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelList) GetState() *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateType struct {
	state                     protoimpl.MessageState                                                                                                                `protogen:"open.v1"`
	Name                      *string                                                                                                                               `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	OperState                 *string                                                                                                                               `protobuf:"bytes,52,opt,name=oper_state,json=operState" json:"oper_state,omitempty"`
	NormalizationStatus       *string                                                                                                                               `protobuf:"bytes,53,opt,name=normalization_status,json=normalizationStatus" json:"normalization_status,omitempty"`
	MemberCount               *uint32                                                                                                                               `protobuf:"varint,54,opt,name=member_count,json=memberCount" json:"member_count,omitempty"`
	MinimumLspCount           *uint32                                                                                                                               `protobuf:"varint,55,opt,name=minimum_lsp_count,json=minimumLspCount" json:"minimum_lsp_count,omitempty"`
	MaximumLspCount           *uint32                                                                                                                               `protobuf:"varint,56,opt,name=maximum_lsp_count,json=maximumLspCount" json:"maximum_lsp_count,omitempty"`
	NormalizeTimer            *uint32                                                                                                                               `protobuf:"varint,57,opt,name=normalize_timer,json=normalizeTimer" json:"normalize_timer,omitempty"`
	NormalizeThreshold        *uint32                                                                                                                               `protobuf:"varint,58,opt,name=normalize_threshold,json=normalizeThreshold" json:"normalize_threshold,omitempty"`
	AggregateBandwidth        *uint64                                                                                                                               `protobuf:"varint,59,opt,name=aggregate_bandwidth,json=aggregateBandwidth" json:"aggregate_bandwidth,omitempty"`
	SampledAggregateBandwidth *uint64                                                                                                                               `protobuf:"varint,60,opt,name=sampled_aggregate_bandwidth,json=sampledAggregateBandwidth" json:"sampled_aggregate_bandwidth,omitempty"`
	MaxSignalingBandwidth     *uint64                                                                                                                               `protobuf:"varint,61,opt,name=max_signaling_bandwidth,json=maxSignalingBandwidth" json:"max_signaling_bandwidth,omitempty"`
	MinSignalingBandwidth     *uint64                                                                                                                               `protobuf:"varint,62,opt,name=min_signaling_bandwidth,json=minSignalingBandwidth" json:"min_signaling_bandwidth,omitempty"`
	SplittingBandwidth        *uint64                                                                                                                               `protobuf:"varint,63,opt,name=splitting_bandwidth,json=splittingBandwidth" json:"splitting_bandwidth,omitempty"`
	MergingBandwidth          *uint64                                                                                                                               `protobuf:"varint,64,opt,name=merging_bandwidth,json=mergingBandwidth" json:"merging_bandwidth,omitempty"`
	TimeToNormalize           *uint64                                                                                                                               `protobuf:"varint,65,opt,name=time_to_normalize,json=timeToNormalize" json:"time_to_normalize,omitempty"`
	IncrementalNormalization  *bool                                                                                                                                 `protobuf:"varint,66,opt,name=incremental_normalization,json=incrementalNormalization" json:"incremental_normalization,omitempty"`
	FailoverNormalization     *bool                                                                                                                                 `protobuf:"varint,67,opt,name=failover_normalization,json=failoverNormalization" json:"failover_normalization,omitempty"`
	Reason                    *string                                                                                                                               `protobuf:"bytes,68,opt,name=reason" json:"reason,omitempty"`
	Sampling                  *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateTypeSamplingType `protobuf:"bytes,151,opt,name=sampling" json:"sampling,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateType{}
	mi := &file_rpd_te_oc_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 2, 0, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateType) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateType) GetOperState() string {
	if x != nil && x.OperState != nil {
		return *x.OperState
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateType) GetNormalizationStatus() string {
	if x != nil && x.NormalizationStatus != nil {
		return *x.NormalizationStatus
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateType) GetMemberCount() uint32 {
	if x != nil && x.MemberCount != nil {
		return *x.MemberCount
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateType) GetMinimumLspCount() uint32 {
	if x != nil && x.MinimumLspCount != nil {
		return *x.MinimumLspCount
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateType) GetMaximumLspCount() uint32 {
	if x != nil && x.MaximumLspCount != nil {
		return *x.MaximumLspCount
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateType) GetNormalizeTimer() uint32 {
	if x != nil && x.NormalizeTimer != nil {
		return *x.NormalizeTimer
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateType) GetNormalizeThreshold() uint32 {
	if x != nil && x.NormalizeThreshold != nil {
		return *x.NormalizeThreshold
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateType) GetAggregateBandwidth() uint64 {
	if x != nil && x.AggregateBandwidth != nil {
		return *x.AggregateBandwidth
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateType) GetSampledAggregateBandwidth() uint64 {
	if x != nil && x.SampledAggregateBandwidth != nil {
		return *x.SampledAggregateBandwidth
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateType) GetMaxSignalingBandwidth() uint64 {
	if x != nil && x.MaxSignalingBandwidth != nil {
		return *x.MaxSignalingBandwidth
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateType) GetMinSignalingBandwidth() uint64 {
	if x != nil && x.MinSignalingBandwidth != nil {
		return *x.MinSignalingBandwidth
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateType) GetSplittingBandwidth() uint64 {
	if x != nil && x.SplittingBandwidth != nil {
		return *x.SplittingBandwidth
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateType) GetMergingBandwidth() uint64 {
	if x != nil && x.MergingBandwidth != nil {
		return *x.MergingBandwidth
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateType) GetTimeToNormalize() uint64 {
	if x != nil && x.TimeToNormalize != nil {
		return *x.TimeToNormalize
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateType) GetIncrementalNormalization() bool {
	if x != nil && x.IncrementalNormalization != nil {
		return *x.IncrementalNormalization
	}
	return false
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateType) GetFailoverNormalization() bool {
	if x != nil && x.FailoverNormalization != nil {
		return *x.FailoverNormalization
	}
	return false
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateType) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateType) GetSampling() *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateTypeSamplingType {
	if x != nil {
		return x.Sampling
	}
	return nil
}

type NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateTypeSamplingType struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	SamplingOutlierCutoff *uint32                `protobuf:"varint,51,opt,name=sampling_outlier_cutoff,json=samplingOutlierCutoff" json:"sampling_outlier_cutoff,omitempty"`
	SamplingMode          *string                `protobuf:"bytes,52,opt,name=sampling_mode,json=samplingMode" json:"sampling_mode,omitempty"`
	SamplingPercentile    *uint32                `protobuf:"varint,53,opt,name=sampling_percentile,json=samplingPercentile" json:"sampling_percentile,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateTypeSamplingType) Reset() {
	*x = NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateTypeSamplingType{}
	mi := &file_rpd_te_oc_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateTypeSamplingType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateTypeSamplingType) ProtoMessage() {
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateTypeSamplingType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_te_oc_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateTypeSamplingType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateTypeSamplingType) Descriptor() ([]byte, []int) {
	return file_rpd_te_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 2, 0, 0, 0}
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateTypeSamplingType) GetSamplingOutlierCutoff() uint32 {
	if x != nil && x.SamplingOutlierCutoff != nil {
		return *x.SamplingOutlierCutoff
	}
	return 0
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateTypeSamplingType) GetSamplingMode() string {
	if x != nil && x.SamplingMode != nil {
		return *x.SamplingMode
	}
	return ""
}

func (x *NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateTypeSamplingType) GetSamplingPercentile() uint32 {
	if x != nil && x.SamplingPercentile != nil {
		return *x.SamplingPercentile
	}
	return 0
}

var file_rpd_te_oc_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*NetworkInstancesTe)(nil),
		Field:         69,
		Name:          "jnpr_network_instances_te_ext",
		Tag:           "bytes,69,opt,name=jnpr_network_instances_te_ext",
		Filename:      "rpd_te_oc.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional network_instances_te jnpr_network_instances_te_ext = 69;
	E_JnprNetworkInstancesTeExt = &file_rpd_te_oc_proto_extTypes[0]
)

var File_rpd_te_oc_proto protoreflect.FileDescriptor

var file_rpd_te_oc_proto_rawDesc = string([]byte{
	0x0a, 0x0f, 0x72, 0x70, 0x64, 0x5f, 0x74, 0x65, 0x5f, 0x6f, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcd, 0x7d, 0x0a, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x12,
	0x57, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74,
	0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0xdb, 0x7c, 0x0a, 0x15, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a,
	0x04, 0x6d, 0x70, 0x6c, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x6d, 0x70, 0x6c, 0x73, 0x1a, 0xda, 0x7b, 0x0a, 0x09, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x14, 0x74, 0x65, 0x5f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74,
	0x65, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x12, 0x74, 0x65, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x8b, 0x01, 0x0a,
	0x17, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x52, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x15, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x04, 0x6c, 0x73,
	0x70, 0x73, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6c, 0x73, 0x70, 0x73,
	0x1a, 0xf2, 0x0c, 0x0a, 0x19, 0x74, 0x65, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x71,
	0x0a, 0x05, 0x73, 0x72, 0x6c, 0x67, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x65, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x73, 0x72, 0x6c, 0x67, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x72, 0x6c, 0x67,
	0x73, 0x12, 0x93, 0x01, 0x0a, 0x11, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x66,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x65, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6d, 0x70, 0x6c, 0x73, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x0d, 0x74, 0x65, 0x5f, 0x6c,
	0x73, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x62, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x65, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x74, 0x65, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x74, 0x65, 0x4c, 0x73, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x72,
	0x73, 0x1a, 0xaa, 0x03, 0x0a, 0x0a, 0x73, 0x72, 0x6c, 0x67, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x79, 0x0a, 0x04, 0x73, 0x72, 0x6c, 0x67, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x65, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x73, 0x72, 0x6c, 0x67, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x72, 0x6c, 0x67,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x73, 0x72, 0x6c, 0x67, 0x1a, 0xa0, 0x02, 0x0a, 0x09,
	0x73, 0x72, 0x6c, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x65, 0x5f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x72, 0x6c, 0x67, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x73, 0x72, 0x6c, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x6f, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6c, 0x6f,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xf2,
	0x03, 0x0a, 0x16, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x0b, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x77, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x65, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0xbb, 0x02, 0x0a, 0x10, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x10, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x82, 0x01, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x65, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x59, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x9f, 0x02, 0x0a, 0x12, 0x74, 0x65, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6d, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x74, 0x65, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x65, 0x5f,
	0x6c, 0x73, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0x81, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6c,
	0x65, 0x61, 0x6e, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65,
	0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x1a, 0xe0, 0x0e, 0x0a, 0x1c, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xbc, 0x0d, 0x0a, 0x0e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0c,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x83, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x9a, 0x01, 0x0a,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x98,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0xb4, 0x01, 0x0a, 0x16, 0x69, 0x67,
	0x70, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7d, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69,
	0x67, 0x70, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x14, 0x69, 0x67, 0x70, 0x46,
	0x6c, 0x6f, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0xb2, 0x01, 0x0a, 0x15, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x7c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x14, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x79, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x72, 0x6c, 0x67, 0x5f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x34, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x73, 0x72, 0x6c, 0x67, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x35,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x1a, 0xfd, 0x01, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0x4e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x1a, 0xa0, 0x02, 0x0a, 0x1b, 0x69, 0x67, 0x70, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0xa0, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x88, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x67, 0x70, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0x5e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x1a, 0xd2, 0x02, 0x0a, 0x1a, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x87, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x65, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x91, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x72, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x6c, 0x61, 0x73,
	0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x72, 0x55, 0x74, 0x69,
	0x6c, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1c, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x72, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18,
	0x6c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x64, 0x53, 0x72, 0x55, 0x74, 0x69, 0x6c, 0x1a, 0x8b, 0x5d, 0x0a, 0x09, 0x6c, 0x73, 0x70,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x55, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x1a, 0xf9, 0x5b, 0x0a, 0x15, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x14, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x65,
	0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x97, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65,
	0x64, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x45, 0x78, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x7d, 0x0a, 0x07, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x9a, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x99,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x1a, 0xd1, 0x0a, 0x0a, 0x19, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f,
	0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0xba, 0x01, 0x0a, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x65, 0x78,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x97, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x88, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64,
	0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x11, 0x6e,
	0x61, 0x6d, 0x65, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x1a, 0xf6, 0x08, 0x0a, 0x18, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02,
	0x08, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x93, 0x01, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74,
	0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65,
	0x64, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xdc, 0x01, 0x0a, 0x16, 0x65, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xa4, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64,
	0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x14, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x1a, 0x20, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x8f, 0x05, 0x0a, 0x1b, 0x65, 0x78, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xf5, 0x01, 0x0a, 0x15, 0x65, 0x78, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0xbf, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64,
	0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x13, 0x65, 0x78, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a,
	0xf7, 0x02, 0x0a, 0x1a, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82,
	0x40, 0x02, 0x08, 0x01, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xe2, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xca, 0x01, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e,
	0x61, 0x6d, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0x57, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x83, 0x41, 0x0a, 0x0c, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x06, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6e, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0xe8, 0x3f, 0x0a, 0x0b, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x79, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c,
	0x73, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x09, 0x62, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7d,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0xbf, 0x01, 0x0a, 0x15, 0x70, 0x32, 0x70,
	0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x89, 0x01, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74,
	0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x13, 0x70, 0x32, 0x70, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x9b, 0x08, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x18, 0x3d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x3c,
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x3f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10,
	0x72, 0x65, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x42, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x6f, 0x66, 0x74, 0x50, 0x72,
	0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x75,
	0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x73, 0x65, 0x74, 0x75, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x44, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x87, 0x01, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74,
	0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x1a, 0x90, 0x02, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70,
	0x61, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x6e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x85, 0x0f, 0x0a, 0x0e, 0x62, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x88, 0x01, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x62, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xba,
	0x01, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x91, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x62, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x61, 0x75,
	0x74, 0x6f, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x1a, 0x8f, 0x01, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x74,
	0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x73, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x2d,
	0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x65, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x1a, 0x80, 0x0b,
	0x0a, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xb4, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x9c, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c,
	0x73, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xbd, 0x01, 0x0a,
	0x08, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x9f, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0xc0, 0x01, 0x0a,
	0x09, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0xa0, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x1a,
	0xce, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x5f,
	0x62, 0x77, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x42, 0x77, 0x12,
	0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x77, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x6d, 0x61, 0x78, 0x42, 0x77, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x29, 0x0a, 0x10, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61,
	0x78, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x77, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x42, 0x77,
	0x1a, 0xac, 0x02, 0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0xc2, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0xaa, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x56, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a,
	0xae, 0x02, 0x0a, 0x0e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0xc3, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0xab, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x56, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x1a, 0x8c, 0x24, 0x0a, 0x1a, 0x70, 0x32, 0x70, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0xac, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x94, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xcb,
	0x01, 0x0a, 0x10, 0x70, 0x32, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x9f, 0x01, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x32, 0x70, 0x5f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x70, 0x32,
	0x70, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0xd4, 0x01, 0x0a,
	0x13, 0x70, 0x32, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xa2, 0x01, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x32, 0x70,
	0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x11, 0x70, 0x32, 0x70, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x1a, 0x2e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0xe4, 0x12, 0x0a, 0x15, 0x70, 0x32, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xe1, 0x01,
	0x0a, 0x10, 0x70, 0x32, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0xb5, 0x01, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74,
	0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x32, 0x70, 0x5f,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x0e, 0x70, 0x32, 0x70, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x61, 0x74,
	0x68, 0x1a, 0xe6, 0x10, 0x0a, 0x15, 0x70, 0x32, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xd8, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xc0, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6c, 0x73, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0xec, 0x01, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xc7, 0x01, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74,
	0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x32, 0x70, 0x5f,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0xef, 0x01, 0x0a, 0x0d, 0x6c, 0x73, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x99, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0xc8, 0x01, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74,
	0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x32, 0x70, 0x5f,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x6c, 0x73, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x1a, 0xc0, 0x03, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x73, 0x70,
	0x66, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x75, 0x73, 0x65, 0x43, 0x73, 0x70, 0x66,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x73, 0x70, 0x66, 0x5f, 0x74, 0x69, 0x65, 0x62, 0x72, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x73, 0x70, 0x66, 0x54,
	0x69, 0x65, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x75, 0x70,
	0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x73, 0x65, 0x74, 0x75, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x23,
	0x0a, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x73, 0x70,
	0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x73, 0x70, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x73,
	0x70, 0x66, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x37, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x63, 0x73, 0x70, 0x66, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x38, 0x0a, 0x18, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x3b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x16, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x52, 0x73, 0x76, 0x70, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x8c, 0x03, 0x0a, 0x11, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xea, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xd2, 0x01, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x32,
	0x70, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x32, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x89, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x33, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x11,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x34, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x41, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x35, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6e, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x1a, 0xa3, 0x04, 0x0a, 0x12, 0x6c, 0x73, 0x70, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x15, 0x0a, 0x06,
	0x6c, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x73,
	0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x64, 0x65, 0x12, 0xeb, 0x01,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xd3,
	0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x32, 0x70, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x32, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xcc, 0x01, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x35, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x36, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x76,
	0x67, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x41, 0x76, 0x67, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x38, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x1a, 0x82, 0x0c, 0x0a, 0x18, 0x70,
	0x32, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xea, 0x01, 0x0a, 0x12, 0x70, 0x32, 0x70, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x97,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0xba, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73,
	0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x10, 0x70, 0x32, 0x70, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x50, 0x61, 0x74, 0x68, 0x1a, 0xf8, 0x09, 0x0a, 0x17, 0x70, 0x32, 0x70, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05,
	0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xdd, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xc5, 0x01, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x32,
	0x70, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xf1, 0x01, 0x0a, 0x0c,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x98, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0xcc, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x32, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a,
	0xd9, 0x02, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x73, 0x70, 0x66, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x75, 0x73, 0x65, 0x43, 0x73, 0x70, 0x66, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x73, 0x70, 0x66, 0x5f, 0x74, 0x69, 0x65, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x73, 0x70, 0x66, 0x54, 0x69, 0x65, 0x62,
	0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65,
	0x74, 0x75, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x68,
	0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18,
	0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x72, 0x73, 0x76, 0x70, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x3b, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x16, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x73, 0x76, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x91, 0x03, 0x0a, 0x11,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0xef, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0xd7, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x32, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0x89, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x33, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x34, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61,
	0x6e, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x35, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6e, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a,
	0xc4, 0x0c, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x82, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c,
	0x73, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0xf7, 0x0a, 0x0a,
	0x15, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0xa5, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x8d, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x9a, 0x09, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6c, 0x73, 0x70,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4c, 0x73, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x4c, 0x73, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x12, 0x2f, 0x0a, 0x13, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x12, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x3e, 0x0a, 0x1b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x64, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x17,
	0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6d,
	0x69, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x3f, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x12, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x65, 0x72, 0x67, 0x69, 0x6e, 0x67,
	0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x40, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74,
	0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x3b,
	0x0a, 0x19, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x42, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x18, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x16, 0x66,
	0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x43, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x66, 0x61, 0x69,
	0x6c, 0x6f, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x44, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0xb9, 0x01, 0x0a, 0x08, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x9b,
	0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x1a, 0x9d, 0x01, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x74,
	0x6f, 0x66, 0x66, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x3a, 0x70, 0x0a, 0x1d, 0x6a, 0x6e, 0x70, 0x72, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x12, 0x17, 0x2e, 0x4a, 0x75, 0x6e, 0x69, 0x70, 0x65,
	0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73,
	0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x52, 0x19, 0x6a,
	0x6e, 0x70, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x54, 0x65, 0x45, 0x78, 0x74, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x6a, 0x75,
	0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
})

var (
	file_rpd_te_oc_proto_rawDescOnce sync.Once
	file_rpd_te_oc_proto_rawDescData []byte
)

func file_rpd_te_oc_proto_rawDescGZIP() []byte {
	file_rpd_te_oc_proto_rawDescOnce.Do(func() {
		file_rpd_te_oc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_rpd_te_oc_proto_rawDesc), len(file_rpd_te_oc_proto_rawDesc)))
	})
	return file_rpd_te_oc_proto_rawDescData
}

var file_rpd_te_oc_proto_msgTypes = make([]protoimpl.MessageInfo, 59)
var file_rpd_te_oc_proto_goTypes = []any{
	(*NetworkInstancesTe)(nil),                                                                                                                                                                    // 0: network_instances_te
	(*NetworkInstancesTeNetworkInstanceList)(nil),                                                                                                                                                 // 1: network_instances_te.network_instance_list
	(*NetworkInstancesTeNetworkInstanceListMplsType)(nil),                                                                                                                                         // 2: network_instances_te.network_instance_list.mpls_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesType)(nil),                                                                                                                   // 3: network_instances_te.network_instance_list.mpls_type.te_global_attributes_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesType)(nil),                                                                                                                // 4: network_instances_te.network_instance_list.mpls_type.te_interface_attributes_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsType)(nil),                                                                                                                                 // 5: network_instances_te.network_instance_list.mpls_type.lsps_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsType)(nil),                                                                                                          // 6: network_instances_te.network_instance_list.mpls_type.te_global_attributes_type.srlgs_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsType)(nil),                                                                                                // 7: network_instances_te.network_instance_list.mpls_type.te_global_attributes_type.mpls_admin_groups_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeTeLspTimersType)(nil),                                                                                                    // 8: network_instances_te.network_instance_list.mpls_type.te_global_attributes_type.te_lsp_timers_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsTypeSrlgList)(nil),                                                                                                  // 9: network_instances_te.network_instance_list.mpls_type.te_global_attributes_type.srlgs_type.srlg_list
	(*NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeSrlgsTypeSrlgListStateType)(nil),                                                                                         // 10: network_instances_te.network_instance_list.mpls_type.te_global_attributes_type.srlgs_type.srlg_list.state_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsTypeAdminGroupList)(nil),                                                                                  // 11: network_instances_te.network_instance_list.mpls_type.te_global_attributes_type.mpls_admin_groups_type.admin_group_list
	(*NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeMplsAdminGroupsTypeAdminGroupListStateType)(nil),                                                                         // 12: network_instances_te.network_instance_list.mpls_type.te_global_attributes_type.mpls_admin_groups_type.admin_group_list.state_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeTeGlobalAttributesTypeTeLspTimersTypeStateType)(nil),                                                                                           // 13: network_instances_te.network_instance_list.mpls_type.te_global_attributes_type.te_lsp_timers_type.state_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceList)(nil),                                                                                                   // 14: network_instances_te.network_instance_list.mpls_type.te_interface_attributes_type.interface_list
	(*NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListStateType)(nil),                                                                                          // 15: network_instances_te.network_instance_list.mpls_type.te_interface_attributes_type.interface_list.state_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListInterfaceRefType)(nil),                                                                                   // 16: network_instances_te.network_instance_list.mpls_type.te_interface_attributes_type.interface_list.interface_ref_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListIgpFloodingBandwidthType)(nil),                                                                           // 17: network_instances_te.network_instance_list.mpls_type.te_interface_attributes_type.interface_list.igp_flooding_bandwidth_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListBandwidthMeasurementType)(nil),                                                                           // 18: network_instances_te.network_instance_list.mpls_type.te_interface_attributes_type.interface_list.bandwidth_measurement_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListInterfaceRefTypeStateType)(nil),                                                                          // 19: network_instances_te.network_instance_list.mpls_type.te_interface_attributes_type.interface_list.interface_ref_type.state_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListIgpFloodingBandwidthTypeStateType)(nil),                                                                  // 20: network_instances_te.network_instance_list.mpls_type.te_interface_attributes_type.interface_list.igp_flooding_bandwidth_type.state_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeTeInterfaceAttributesTypeInterfaceListBandwidthMeasurementTypeStateType)(nil),                                                                  // 21: network_instances_te.network_instance_list.mpls_type.te_interface_attributes_type.interface_list.bandwidth_measurement_type.state_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathType)(nil),                                                                                                              // 22: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsType)(nil),                                                                                        // 23: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.named_explicit_paths_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsType)(nil),                                                                                                   // 24: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsType)(nil),                                                                                          // 25: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.container_tunnels_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathList)(nil),                                                                   // 26: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.named_explicit_paths_type.named_explicit_path_list
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListStateType)(nil),                                                          // 27: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.named_explicit_paths_type.named_explicit_path_list.state_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsType)(nil),                                           // 28: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.named_explicit_paths_type.named_explicit_path_list.explicit_route_objects_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsTypeExplicitRouteObjectList)(nil),                    // 29: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.named_explicit_paths_type.named_explicit_path_list.explicit_route_objects_type.explicit_route_object_list
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeNamedExplicitPathsTypeNamedExplicitPathListExplicitRouteObjectsTypeExplicitRouteObjectListStateType)(nil),           // 30: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.named_explicit_paths_type.named_explicit_path_list.explicit_route_objects_type.explicit_route_object_list.state_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelList)(nil),                                                                                         // 31: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateType)(nil),                                                                                // 32: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.state_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthType)(nil),                                                                            // 33: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.bandwidth_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesType)(nil),                                                                  // 34: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListStateTypeCountersType)(nil),                                                                    // 35: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.state_type.counters_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeStateType)(nil),                                                                   // 36: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.bandwidth_type.state_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthType)(nil),                                                           // 37: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.bandwidth_type.auto_bandwidth_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeStateType)(nil),                                                  // 38: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.bandwidth_type.auto_bandwidth_type.state_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeOverflowType)(nil),                                               // 39: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.bandwidth_type.auto_bandwidth_type.overflow_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeUnderflowType)(nil),                                              // 40: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.bandwidth_type.auto_bandwidth_type.underflow_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeOverflowTypeStateType)(nil),                                      // 41: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.bandwidth_type.auto_bandwidth_type.overflow_type.state_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListBandwidthTypeAutoBandwidthTypeUnderflowTypeStateType)(nil),                                     // 42: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.bandwidth_type.auto_bandwidth_type.underflow_type.state_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeStateType)(nil),                                                         // 43: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.state_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathType)(nil),                                                // 44: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_primary_path_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsType)(nil),                                             // 45: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_secondary_paths_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathList)(nil),                              // 46: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_primary_path_type.p2p_primary_path_list
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListStateType)(nil),                     // 47: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_primary_path_type.p2p_primary_path_list.state_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListAdminGroupsType)(nil),               // 48: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_primary_path_type.p2p_primary_path_list.admin_groups_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListLspInstancesList)(nil),              // 49: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_primary_path_type.p2p_primary_path_list.lsp_instances_list
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListAdminGroupsTypeStateType)(nil),      // 50: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_primary_path_type.p2p_primary_path_list.admin_groups_type.state_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PPrimaryPathTypeP2PPrimaryPathListLspInstancesListStateType)(nil),     // 51: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_primary_path_type.p2p_primary_path_list.lsp_instances_list.state_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathList)(nil),                         // 52: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_secondary_paths_type.p2p_secondary_path_list
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListStateType)(nil),                // 53: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_secondary_paths_type.p2p_secondary_path_list.state_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListAdminGroupsType)(nil),          // 54: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_secondary_paths_type.p2p_secondary_path_list.admin_groups_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeTunnelsTypeTunnelListP2PTunnelAttributesTypeP2PSecondaryPathsTypeP2PSecondaryPathListAdminGroupsTypeStateType)(nil), // 55: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_secondary_paths_type.p2p_secondary_path_list.admin_groups_type.state_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelList)(nil),                                                                       // 56: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.container_tunnels_type.container_tunnel_list
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateType)(nil),                                                              // 57: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.container_tunnels_type.container_tunnel_list.state_type
	(*NetworkInstancesTeNetworkInstanceListMplsTypeLspsTypeConstrainedPathTypeContainerTunnelsTypeContainerTunnelListStateTypeSamplingType)(nil),                                                  // 58: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.container_tunnels_type.container_tunnel_list.state_type.sampling_type
	(*JuniperNetworksSensors)(nil), // 59: JuniperNetworksSensors
}
var file_rpd_te_oc_proto_depIdxs = []int32{
	1,  // 0: network_instances_te.network_instance:type_name -> network_instances_te.network_instance_list
	2,  // 1: network_instances_te.network_instance_list.mpls:type_name -> network_instances_te.network_instance_list.mpls_type
	3,  // 2: network_instances_te.network_instance_list.mpls_type.te_global_attributes:type_name -> network_instances_te.network_instance_list.mpls_type.te_global_attributes_type
	4,  // 3: network_instances_te.network_instance_list.mpls_type.te_interface_attributes:type_name -> network_instances_te.network_instance_list.mpls_type.te_interface_attributes_type
	5,  // 4: network_instances_te.network_instance_list.mpls_type.lsps:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type
	6,  // 5: network_instances_te.network_instance_list.mpls_type.te_global_attributes_type.srlgs:type_name -> network_instances_te.network_instance_list.mpls_type.te_global_attributes_type.srlgs_type
	7,  // 6: network_instances_te.network_instance_list.mpls_type.te_global_attributes_type.mpls_admin_groups:type_name -> network_instances_te.network_instance_list.mpls_type.te_global_attributes_type.mpls_admin_groups_type
	8,  // 7: network_instances_te.network_instance_list.mpls_type.te_global_attributes_type.te_lsp_timers:type_name -> network_instances_te.network_instance_list.mpls_type.te_global_attributes_type.te_lsp_timers_type
	14, // 8: network_instances_te.network_instance_list.mpls_type.te_interface_attributes_type.interface:type_name -> network_instances_te.network_instance_list.mpls_type.te_interface_attributes_type.interface_list
	22, // 9: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type
	9,  // 10: network_instances_te.network_instance_list.mpls_type.te_global_attributes_type.srlgs_type.srlg:type_name -> network_instances_te.network_instance_list.mpls_type.te_global_attributes_type.srlgs_type.srlg_list
	11, // 11: network_instances_te.network_instance_list.mpls_type.te_global_attributes_type.mpls_admin_groups_type.admin_group:type_name -> network_instances_te.network_instance_list.mpls_type.te_global_attributes_type.mpls_admin_groups_type.admin_group_list
	13, // 12: network_instances_te.network_instance_list.mpls_type.te_global_attributes_type.te_lsp_timers_type.state:type_name -> network_instances_te.network_instance_list.mpls_type.te_global_attributes_type.te_lsp_timers_type.state_type
	10, // 13: network_instances_te.network_instance_list.mpls_type.te_global_attributes_type.srlgs_type.srlg_list.state:type_name -> network_instances_te.network_instance_list.mpls_type.te_global_attributes_type.srlgs_type.srlg_list.state_type
	12, // 14: network_instances_te.network_instance_list.mpls_type.te_global_attributes_type.mpls_admin_groups_type.admin_group_list.state:type_name -> network_instances_te.network_instance_list.mpls_type.te_global_attributes_type.mpls_admin_groups_type.admin_group_list.state_type
	15, // 15: network_instances_te.network_instance_list.mpls_type.te_interface_attributes_type.interface_list.state:type_name -> network_instances_te.network_instance_list.mpls_type.te_interface_attributes_type.interface_list.state_type
	16, // 16: network_instances_te.network_instance_list.mpls_type.te_interface_attributes_type.interface_list.interface_ref:type_name -> network_instances_te.network_instance_list.mpls_type.te_interface_attributes_type.interface_list.interface_ref_type
	17, // 17: network_instances_te.network_instance_list.mpls_type.te_interface_attributes_type.interface_list.igp_flooding_bandwidth:type_name -> network_instances_te.network_instance_list.mpls_type.te_interface_attributes_type.interface_list.igp_flooding_bandwidth_type
	18, // 18: network_instances_te.network_instance_list.mpls_type.te_interface_attributes_type.interface_list.bandwidth_measurement:type_name -> network_instances_te.network_instance_list.mpls_type.te_interface_attributes_type.interface_list.bandwidth_measurement_type
	19, // 19: network_instances_te.network_instance_list.mpls_type.te_interface_attributes_type.interface_list.interface_ref_type.state:type_name -> network_instances_te.network_instance_list.mpls_type.te_interface_attributes_type.interface_list.interface_ref_type.state_type
	20, // 20: network_instances_te.network_instance_list.mpls_type.te_interface_attributes_type.interface_list.igp_flooding_bandwidth_type.state:type_name -> network_instances_te.network_instance_list.mpls_type.te_interface_attributes_type.interface_list.igp_flooding_bandwidth_type.state_type
	21, // 21: network_instances_te.network_instance_list.mpls_type.te_interface_attributes_type.interface_list.bandwidth_measurement_type.state:type_name -> network_instances_te.network_instance_list.mpls_type.te_interface_attributes_type.interface_list.bandwidth_measurement_type.state_type
	23, // 22: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.named_explicit_paths:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.named_explicit_paths_type
	24, // 23: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type
	25, // 24: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.container_tunnels:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.container_tunnels_type
	26, // 25: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.named_explicit_paths_type.named_explicit_path:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.named_explicit_paths_type.named_explicit_path_list
	31, // 26: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list
	56, // 27: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.container_tunnels_type.container_tunnel:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.container_tunnels_type.container_tunnel_list
	27, // 28: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.named_explicit_paths_type.named_explicit_path_list.state:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.named_explicit_paths_type.named_explicit_path_list.state_type
	28, // 29: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.named_explicit_paths_type.named_explicit_path_list.explicit_route_objects:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.named_explicit_paths_type.named_explicit_path_list.explicit_route_objects_type
	29, // 30: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.named_explicit_paths_type.named_explicit_path_list.explicit_route_objects_type.explicit_route_object:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.named_explicit_paths_type.named_explicit_path_list.explicit_route_objects_type.explicit_route_object_list
	30, // 31: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.named_explicit_paths_type.named_explicit_path_list.explicit_route_objects_type.explicit_route_object_list.state:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.named_explicit_paths_type.named_explicit_path_list.explicit_route_objects_type.explicit_route_object_list.state_type
	32, // 32: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.state:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.state_type
	33, // 33: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.bandwidth:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.bandwidth_type
	34, // 34: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type
	35, // 35: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.state_type.counters:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.state_type.counters_type
	36, // 36: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.bandwidth_type.state:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.bandwidth_type.state_type
	37, // 37: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.bandwidth_type.auto_bandwidth:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.bandwidth_type.auto_bandwidth_type
	43, // 38: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.state:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.state_type
	44, // 39: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_primary_path:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_primary_path_type
	45, // 40: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_secondary_paths:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_secondary_paths_type
	38, // 41: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.bandwidth_type.auto_bandwidth_type.state:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.bandwidth_type.auto_bandwidth_type.state_type
	39, // 42: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.bandwidth_type.auto_bandwidth_type.overflow:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.bandwidth_type.auto_bandwidth_type.overflow_type
	40, // 43: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.bandwidth_type.auto_bandwidth_type.underflow:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.bandwidth_type.auto_bandwidth_type.underflow_type
	41, // 44: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.bandwidth_type.auto_bandwidth_type.overflow_type.state:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.bandwidth_type.auto_bandwidth_type.overflow_type.state_type
	42, // 45: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.bandwidth_type.auto_bandwidth_type.underflow_type.state:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.bandwidth_type.auto_bandwidth_type.underflow_type.state_type
	46, // 46: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_primary_path_type.p2p_primary_path:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_primary_path_type.p2p_primary_path_list
	52, // 47: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_secondary_paths_type.p2p_secondary_path:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_secondary_paths_type.p2p_secondary_path_list
	47, // 48: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_primary_path_type.p2p_primary_path_list.state:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_primary_path_type.p2p_primary_path_list.state_type
	48, // 49: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_primary_path_type.p2p_primary_path_list.admin_groups:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_primary_path_type.p2p_primary_path_list.admin_groups_type
	49, // 50: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_primary_path_type.p2p_primary_path_list.lsp_instances:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_primary_path_type.p2p_primary_path_list.lsp_instances_list
	50, // 51: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_primary_path_type.p2p_primary_path_list.admin_groups_type.state:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_primary_path_type.p2p_primary_path_list.admin_groups_type.state_type
	51, // 52: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_primary_path_type.p2p_primary_path_list.lsp_instances_list.state:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_primary_path_type.p2p_primary_path_list.lsp_instances_list.state_type
	53, // 53: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_secondary_paths_type.p2p_secondary_path_list.state:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_secondary_paths_type.p2p_secondary_path_list.state_type
	54, // 54: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_secondary_paths_type.p2p_secondary_path_list.admin_groups:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_secondary_paths_type.p2p_secondary_path_list.admin_groups_type
	55, // 55: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_secondary_paths_type.p2p_secondary_path_list.admin_groups_type.state:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.tunnels_type.tunnel_list.p2p_tunnel_attributes_type.p2p_secondary_paths_type.p2p_secondary_path_list.admin_groups_type.state_type
	57, // 56: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.container_tunnels_type.container_tunnel_list.state:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.container_tunnels_type.container_tunnel_list.state_type
	58, // 57: network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.container_tunnels_type.container_tunnel_list.state_type.sampling:type_name -> network_instances_te.network_instance_list.mpls_type.lsps_type.constrained_path_type.container_tunnels_type.container_tunnel_list.state_type.sampling_type
	59, // 58: jnpr_network_instances_te_ext:extendee -> JuniperNetworksSensors
	0,  // 59: jnpr_network_instances_te_ext:type_name -> network_instances_te
	60, // [60:60] is the sub-list for method output_type
	60, // [60:60] is the sub-list for method input_type
	59, // [59:60] is the sub-list for extension type_name
	58, // [58:59] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_rpd_te_oc_proto_init() }
func file_rpd_te_oc_proto_init() {
	if File_rpd_te_oc_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_rpd_te_oc_proto_rawDesc), len(file_rpd_te_oc_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   59,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_rpd_te_oc_proto_goTypes,
		DependencyIndexes: file_rpd_te_oc_proto_depIdxs,
		MessageInfos:      file_rpd_te_oc_proto_msgTypes,
		ExtensionInfos:    file_rpd_te_oc_proto_extTypes,
	}.Build()
	File_rpd_te_oc_proto = out.File
	file_rpd_te_oc_proto_goTypes = nil
	file_rpd_te_oc_proto_depIdxs = nil
}
