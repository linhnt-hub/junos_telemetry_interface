// Copyright (c) 2016, 2017 Juniper Networks, Inc.
// All rights reserved.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

//
// Version 1.1
//

//
// Shibu Piriyath 2017-09-11
//
// This file defines the messages in Protocol Buffers used by
// the service-set sensor. The top-level message is ServicesInfra.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: svcset_telemetry.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServicesInfra struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SvcsPluginsInfo   []*PluginsInfo         `protobuf:"bytes,1,rep,name=svcs_plugins_info,json=svcsPluginsInfo" json:"svcs_plugins_info,omitempty"`
	SvcsetCpuInfo     []*CpuUsageInfo        `protobuf:"bytes,2,rep,name=svcset_cpu_info,json=svcsetCpuInfo" json:"svcset_cpu_info,omitempty"`
	SvcsetMemInfo     []*MemUsageInfo        `protobuf:"bytes,3,rep,name=svcset_mem_info,json=svcsetMemInfo" json:"svcset_mem_info,omitempty"`
	SvcsetSvcInfo     []*ServicesInfo        `protobuf:"bytes,4,rep,name=svcset_svc_info,json=svcsetSvcInfo" json:"svcset_svc_info,omitempty"`
	SvcsetPktdropInfo []*PktDropInfo         `protobuf:"bytes,5,rep,name=svcset_pktdrop_info,json=svcsetPktdropInfo" json:"svcset_pktdrop_info,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ServicesInfra) Reset() {
	*x = ServicesInfra{}
	mi := &file_svcset_telemetry_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServicesInfra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicesInfra) ProtoMessage() {}

func (x *ServicesInfra) ProtoReflect() protoreflect.Message {
	mi := &file_svcset_telemetry_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicesInfra.ProtoReflect.Descriptor instead.
func (*ServicesInfra) Descriptor() ([]byte, []int) {
	return file_svcset_telemetry_proto_rawDescGZIP(), []int{0}
}

func (x *ServicesInfra) GetSvcsPluginsInfo() []*PluginsInfo {
	if x != nil {
		return x.SvcsPluginsInfo
	}
	return nil
}

func (x *ServicesInfra) GetSvcsetCpuInfo() []*CpuUsageInfo {
	if x != nil {
		return x.SvcsetCpuInfo
	}
	return nil
}

func (x *ServicesInfra) GetSvcsetMemInfo() []*MemUsageInfo {
	if x != nil {
		return x.SvcsetMemInfo
	}
	return nil
}

func (x *ServicesInfra) GetSvcsetSvcInfo() []*ServicesInfo {
	if x != nil {
		return x.SvcsetSvcInfo
	}
	return nil
}

func (x *ServicesInfra) GetSvcsetPktdropInfo() []*PktDropInfo {
	if x != nil {
		return x.SvcsetPktdropInfo
	}
	return nil
}

// /=========================
type PluginsInfo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SpNumPlugins      *uint64                `protobuf:"varint,1,opt,name=sp_num_plugins,json=spNumPlugins" json:"sp_num_plugins,omitempty"`
	SpName            *string                `protobuf:"bytes,2,opt,name=sp_name,json=spName" json:"sp_name,omitempty"`
	SpPid             *uint64                `protobuf:"varint,3,opt,name=sp_pid,json=spPid" json:"sp_pid,omitempty"`
	SpDataEvh         *uint64                `protobuf:"varint,4,opt,name=sp_data_evh,json=spDataEvh" json:"sp_data_evh,omitempty"`
	SpControlEvh      *uint64                `protobuf:"varint,5,opt,name=sp_control_evh,json=spControlEvh" json:"sp_control_evh,omitempty"`
	SpClass           *uint64                `protobuf:"varint,6,opt,name=sp_class,json=spClass" json:"sp_class,omitempty"`
	SpProviderId      *uint64                `protobuf:"varint,7,opt,name=sp_provider_id,json=spProviderId" json:"sp_provider_id,omitempty"`
	SpAppId           *uint64                `protobuf:"varint,8,opt,name=sp_app_id,json=spAppId" json:"sp_app_id,omitempty"`
	SpPluginFlags     *uint64                `protobuf:"varint,9,opt,name=sp_plugin_flags,json=spPluginFlags" json:"sp_plugin_flags,omitempty"`
	SpTcpSupportFlags *uint64                `protobuf:"varint,10,opt,name=sp_tcp_support_flags,json=spTcpSupportFlags" json:"sp_tcp_support_flags,omitempty"`
	SpEvClassBase     *uint64                `protobuf:"varint,11,opt,name=sp_ev_class_base,json=spEvClassBase" json:"sp_ev_class_base,omitempty"`
	SpPluginMask      *uint64                `protobuf:"varint,12,opt,name=sp_plugin_mask,json=spPluginMask" json:"sp_plugin_mask,omitempty"`
	SpEvClassName     []string               `protobuf:"bytes,13,rep,name=sp_ev_class_name,json=spEvClassName" json:"sp_ev_class_name,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PluginsInfo) Reset() {
	*x = PluginsInfo{}
	mi := &file_svcset_telemetry_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginsInfo) ProtoMessage() {}

func (x *PluginsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_svcset_telemetry_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginsInfo.ProtoReflect.Descriptor instead.
func (*PluginsInfo) Descriptor() ([]byte, []int) {
	return file_svcset_telemetry_proto_rawDescGZIP(), []int{1}
}

func (x *PluginsInfo) GetSpNumPlugins() uint64 {
	if x != nil && x.SpNumPlugins != nil {
		return *x.SpNumPlugins
	}
	return 0
}

func (x *PluginsInfo) GetSpName() string {
	if x != nil && x.SpName != nil {
		return *x.SpName
	}
	return ""
}

func (x *PluginsInfo) GetSpPid() uint64 {
	if x != nil && x.SpPid != nil {
		return *x.SpPid
	}
	return 0
}

func (x *PluginsInfo) GetSpDataEvh() uint64 {
	if x != nil && x.SpDataEvh != nil {
		return *x.SpDataEvh
	}
	return 0
}

func (x *PluginsInfo) GetSpControlEvh() uint64 {
	if x != nil && x.SpControlEvh != nil {
		return *x.SpControlEvh
	}
	return 0
}

func (x *PluginsInfo) GetSpClass() uint64 {
	if x != nil && x.SpClass != nil {
		return *x.SpClass
	}
	return 0
}

func (x *PluginsInfo) GetSpProviderId() uint64 {
	if x != nil && x.SpProviderId != nil {
		return *x.SpProviderId
	}
	return 0
}

func (x *PluginsInfo) GetSpAppId() uint64 {
	if x != nil && x.SpAppId != nil {
		return *x.SpAppId
	}
	return 0
}

func (x *PluginsInfo) GetSpPluginFlags() uint64 {
	if x != nil && x.SpPluginFlags != nil {
		return *x.SpPluginFlags
	}
	return 0
}

func (x *PluginsInfo) GetSpTcpSupportFlags() uint64 {
	if x != nil && x.SpTcpSupportFlags != nil {
		return *x.SpTcpSupportFlags
	}
	return 0
}

func (x *PluginsInfo) GetSpEvClassBase() uint64 {
	if x != nil && x.SpEvClassBase != nil {
		return *x.SpEvClassBase
	}
	return 0
}

func (x *PluginsInfo) GetSpPluginMask() uint64 {
	if x != nil && x.SpPluginMask != nil {
		return *x.SpPluginMask
	}
	return 0
}

func (x *PluginsInfo) GetSpEvClassName() []string {
	if x != nil {
		return x.SpEvClassName
	}
	return nil
}

// --------------------------
type CpuUsageInfo struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SvcsetId         *uint64                `protobuf:"varint,1,opt,name=svcset_id,json=svcsetId" json:"svcset_id,omitempty"`
	SvcsetIdPresent  *uint64                `protobuf:"varint,2,opt,name=svcset_id_present,json=svcsetIdPresent" json:"svcset_id_present,omitempty"`
	ExternalSvcSetId *uint64                `protobuf:"varint,3,opt,name=external_svc_set_id,json=externalSvcSetId" json:"external_svc_set_id,omitempty"`
	SvcType          *uint64                `protobuf:"varint,4,opt,name=svc_type,json=svcType" json:"svc_type,omitempty"`
	SvcSetType       *uint64                `protobuf:"varint,5,opt,name=svc_set_type,json=svcSetType" json:"svc_set_type,omitempty"`
	SvcSetName       *string                `protobuf:"bytes,6,opt,name=svc_set_name,json=svcSetName" json:"svc_set_name,omitempty"`
	CpuUtilization   *uint64                `protobuf:"varint,7,opt,name=cpu_utilization,json=cpuUtilization" json:"cpu_utilization,omitempty"`
	CpuZone          *uint64                `protobuf:"varint,8,opt,name=cpu_zone,json=cpuZone" json:"cpu_zone,omitempty"`
	CpuLoad          *float32               `protobuf:"fixed32,9,opt,name=cpu_load,json=cpuLoad" json:"cpu_load,omitempty"`
	CpuUser          *string                `protobuf:"bytes,10,opt,name=cpu_user,json=cpuUser" json:"cpu_user,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CpuUsageInfo) Reset() {
	*x = CpuUsageInfo{}
	mi := &file_svcset_telemetry_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CpuUsageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuUsageInfo) ProtoMessage() {}

func (x *CpuUsageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_svcset_telemetry_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuUsageInfo.ProtoReflect.Descriptor instead.
func (*CpuUsageInfo) Descriptor() ([]byte, []int) {
	return file_svcset_telemetry_proto_rawDescGZIP(), []int{2}
}

func (x *CpuUsageInfo) GetSvcsetId() uint64 {
	if x != nil && x.SvcsetId != nil {
		return *x.SvcsetId
	}
	return 0
}

func (x *CpuUsageInfo) GetSvcsetIdPresent() uint64 {
	if x != nil && x.SvcsetIdPresent != nil {
		return *x.SvcsetIdPresent
	}
	return 0
}

func (x *CpuUsageInfo) GetExternalSvcSetId() uint64 {
	if x != nil && x.ExternalSvcSetId != nil {
		return *x.ExternalSvcSetId
	}
	return 0
}

func (x *CpuUsageInfo) GetSvcType() uint64 {
	if x != nil && x.SvcType != nil {
		return *x.SvcType
	}
	return 0
}

func (x *CpuUsageInfo) GetSvcSetType() uint64 {
	if x != nil && x.SvcSetType != nil {
		return *x.SvcSetType
	}
	return 0
}

func (x *CpuUsageInfo) GetSvcSetName() string {
	if x != nil && x.SvcSetName != nil {
		return *x.SvcSetName
	}
	return ""
}

func (x *CpuUsageInfo) GetCpuUtilization() uint64 {
	if x != nil && x.CpuUtilization != nil {
		return *x.CpuUtilization
	}
	return 0
}

func (x *CpuUsageInfo) GetCpuZone() uint64 {
	if x != nil && x.CpuZone != nil {
		return *x.CpuZone
	}
	return 0
}

func (x *CpuUsageInfo) GetCpuLoad() float32 {
	if x != nil && x.CpuLoad != nil {
		return *x.CpuLoad
	}
	return 0
}

func (x *CpuUsageInfo) GetCpuUser() string {
	if x != nil && x.CpuUser != nil {
		return *x.CpuUser
	}
	return ""
}

// --------------------------
type MemUsageInfo struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	SvcsetId               *uint64                `protobuf:"varint,1,opt,name=svcset_id,json=svcsetId" json:"svcset_id,omitempty"`
	SvcsetIdPresent        *uint64                `protobuf:"varint,2,opt,name=svcset_id_present,json=svcsetIdPresent" json:"svcset_id_present,omitempty"`
	ExternalSvcSetId       *uint64                `protobuf:"varint,3,opt,name=external_svc_set_id,json=externalSvcSetId" json:"external_svc_set_id,omitempty"`
	SvcType                *uint64                `protobuf:"varint,4,opt,name=svc_type,json=svcType" json:"svc_type,omitempty"`
	SvcSetType             *uint64                `protobuf:"varint,5,opt,name=svc_set_type,json=svcSetType" json:"svc_set_type,omitempty"`
	SvcSetName             *string                `protobuf:"bytes,6,opt,name=svc_set_name,json=svcSetName" json:"svc_set_name,omitempty"`
	MemPercentUsed         *float32               `protobuf:"fixed32,7,opt,name=mem_percent_used,json=memPercentUsed" json:"mem_percent_used,omitempty"`
	MemBytesUsed           *uint64                `protobuf:"varint,8,opt,name=mem_bytes_used,json=memBytesUsed" json:"mem_bytes_used,omitempty"`
	MemZone                *uint64                `protobuf:"varint,9,opt,name=mem_zone,json=memZone" json:"mem_zone,omitempty"`
	PolicyBytesUsed        *uint64                `protobuf:"varint,10,opt,name=policy_bytes_used,json=policyBytesUsed" json:"policy_bytes_used,omitempty"`
	PolicyBytesUsedPercent *uint64                `protobuf:"varint,11,opt,name=policy_bytes_used_percent,json=policyBytesUsedPercent" json:"policy_bytes_used_percent,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *MemUsageInfo) Reset() {
	*x = MemUsageInfo{}
	mi := &file_svcset_telemetry_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemUsageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemUsageInfo) ProtoMessage() {}

func (x *MemUsageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_svcset_telemetry_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemUsageInfo.ProtoReflect.Descriptor instead.
func (*MemUsageInfo) Descriptor() ([]byte, []int) {
	return file_svcset_telemetry_proto_rawDescGZIP(), []int{3}
}

func (x *MemUsageInfo) GetSvcsetId() uint64 {
	if x != nil && x.SvcsetId != nil {
		return *x.SvcsetId
	}
	return 0
}

func (x *MemUsageInfo) GetSvcsetIdPresent() uint64 {
	if x != nil && x.SvcsetIdPresent != nil {
		return *x.SvcsetIdPresent
	}
	return 0
}

func (x *MemUsageInfo) GetExternalSvcSetId() uint64 {
	if x != nil && x.ExternalSvcSetId != nil {
		return *x.ExternalSvcSetId
	}
	return 0
}

func (x *MemUsageInfo) GetSvcType() uint64 {
	if x != nil && x.SvcType != nil {
		return *x.SvcType
	}
	return 0
}

func (x *MemUsageInfo) GetSvcSetType() uint64 {
	if x != nil && x.SvcSetType != nil {
		return *x.SvcSetType
	}
	return 0
}

func (x *MemUsageInfo) GetSvcSetName() string {
	if x != nil && x.SvcSetName != nil {
		return *x.SvcSetName
	}
	return ""
}

func (x *MemUsageInfo) GetMemPercentUsed() float32 {
	if x != nil && x.MemPercentUsed != nil {
		return *x.MemPercentUsed
	}
	return 0
}

func (x *MemUsageInfo) GetMemBytesUsed() uint64 {
	if x != nil && x.MemBytesUsed != nil {
		return *x.MemBytesUsed
	}
	return 0
}

func (x *MemUsageInfo) GetMemZone() uint64 {
	if x != nil && x.MemZone != nil {
		return *x.MemZone
	}
	return 0
}

func (x *MemUsageInfo) GetPolicyBytesUsed() uint64 {
	if x != nil && x.PolicyBytesUsed != nil {
		return *x.PolicyBytesUsed
	}
	return 0
}

func (x *MemUsageInfo) GetPolicyBytesUsedPercent() uint64 {
	if x != nil && x.PolicyBytesUsedPercent != nil {
		return *x.PolicyBytesUsedPercent
	}
	return 0
}

// --------------------------
type ServicesInfo struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	SvcsetId            *uint64                `protobuf:"varint,1,opt,name=svcset_id,json=svcsetId" json:"svcset_id,omitempty"`
	SvcsetIdPresent     *uint64                `protobuf:"varint,2,opt,name=svcset_id_present,json=svcsetIdPresent" json:"svcset_id_present,omitempty"`
	ExternalSvcSetId    *uint64                `protobuf:"varint,3,opt,name=external_svc_set_id,json=externalSvcSetId" json:"external_svc_set_id,omitempty"`
	SvcType             *uint64                `protobuf:"varint,4,opt,name=svc_type,json=svcType" json:"svc_type,omitempty"`
	SvcSetType          *uint64                `protobuf:"varint,5,opt,name=svc_set_type,json=svcSetType" json:"svc_set_type,omitempty"`
	SvcSetName          *string                `protobuf:"bytes,6,opt,name=svc_set_name,json=svcSetName" json:"svc_set_name,omitempty"`
	InternalSvcSetId    *uint64                `protobuf:"varint,7,opt,name=internal_svc_set_id,json=internalSvcSetId" json:"internal_svc_set_id,omitempty"`
	ActiveSvcSetCount   *uint64                `protobuf:"varint,8,opt,name=active_svc_set_count,json=activeSvcSetCount" json:"active_svc_set_count,omitempty"`
	TotalSvcSetCount    *uint64                `protobuf:"varint,9,opt,name=total_svc_set_count,json=totalSvcSetCount" json:"total_svc_set_count,omitempty"`
	MemBytesUsed        *uint64                `protobuf:"varint,10,opt,name=mem_bytes_used,json=memBytesUsed" json:"mem_bytes_used,omitempty"`
	MemBytesUsedPercent *uint64                `protobuf:"varint,11,opt,name=mem_bytes_used_percent,json=memBytesUsedPercent" json:"mem_bytes_used_percent,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ServicesInfo) Reset() {
	*x = ServicesInfo{}
	mi := &file_svcset_telemetry_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServicesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicesInfo) ProtoMessage() {}

func (x *ServicesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_svcset_telemetry_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicesInfo.ProtoReflect.Descriptor instead.
func (*ServicesInfo) Descriptor() ([]byte, []int) {
	return file_svcset_telemetry_proto_rawDescGZIP(), []int{4}
}

func (x *ServicesInfo) GetSvcsetId() uint64 {
	if x != nil && x.SvcsetId != nil {
		return *x.SvcsetId
	}
	return 0
}

func (x *ServicesInfo) GetSvcsetIdPresent() uint64 {
	if x != nil && x.SvcsetIdPresent != nil {
		return *x.SvcsetIdPresent
	}
	return 0
}

func (x *ServicesInfo) GetExternalSvcSetId() uint64 {
	if x != nil && x.ExternalSvcSetId != nil {
		return *x.ExternalSvcSetId
	}
	return 0
}

func (x *ServicesInfo) GetSvcType() uint64 {
	if x != nil && x.SvcType != nil {
		return *x.SvcType
	}
	return 0
}

func (x *ServicesInfo) GetSvcSetType() uint64 {
	if x != nil && x.SvcSetType != nil {
		return *x.SvcSetType
	}
	return 0
}

func (x *ServicesInfo) GetSvcSetName() string {
	if x != nil && x.SvcSetName != nil {
		return *x.SvcSetName
	}
	return ""
}

func (x *ServicesInfo) GetInternalSvcSetId() uint64 {
	if x != nil && x.InternalSvcSetId != nil {
		return *x.InternalSvcSetId
	}
	return 0
}

func (x *ServicesInfo) GetActiveSvcSetCount() uint64 {
	if x != nil && x.ActiveSvcSetCount != nil {
		return *x.ActiveSvcSetCount
	}
	return 0
}

func (x *ServicesInfo) GetTotalSvcSetCount() uint64 {
	if x != nil && x.TotalSvcSetCount != nil {
		return *x.TotalSvcSetCount
	}
	return 0
}

func (x *ServicesInfo) GetMemBytesUsed() uint64 {
	if x != nil && x.MemBytesUsed != nil {
		return *x.MemBytesUsed
	}
	return 0
}

func (x *ServicesInfo) GetMemBytesUsedPercent() uint64 {
	if x != nil && x.MemBytesUsedPercent != nil {
		return *x.MemBytesUsedPercent
	}
	return 0
}

// --------------------------
type PktDropInfo struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	SvcsetId               *uint64                `protobuf:"varint,1,opt,name=svcset_id,json=svcsetId" json:"svcset_id,omitempty"`
	SvcsetIdPresent        *uint64                `protobuf:"varint,2,opt,name=svcset_id_present,json=svcsetIdPresent" json:"svcset_id_present,omitempty"`
	ExternalSvcSetId       *uint64                `protobuf:"varint,3,opt,name=external_svc_set_id,json=externalSvcSetId" json:"external_svc_set_id,omitempty"`
	SvcType                *uint64                `protobuf:"varint,4,opt,name=svc_type,json=svcType" json:"svc_type,omitempty"`
	SvcSetType             *uint64                `protobuf:"varint,5,opt,name=svc_set_type,json=svcSetType" json:"svc_set_type,omitempty"`
	SvcSetName             *string                `protobuf:"bytes,6,opt,name=svc_set_name,json=svcSetName" json:"svc_set_name,omitempty"`
	MemlimitDrops          *uint64                `protobuf:"varint,7,opt,name=memlimit_drops,json=memlimitDrops" json:"memlimit_drops,omitempty"`
	CpulimitDrops          *uint64                `protobuf:"varint,8,opt,name=cpulimit_drops,json=cpulimitDrops" json:"cpulimit_drops,omitempty"`
	FlowlimitDrops         *uint64                `protobuf:"varint,9,opt,name=flowlimit_drops,json=flowlimitDrops" json:"flowlimit_drops,omitempty"`
	PtclcopyDrops          *uint64                `protobuf:"varint,10,opt,name=ptclcopy_drops,json=ptclcopyDrops" json:"ptclcopy_drops,omitempty"`
	IngressDropFlows       *uint64                `protobuf:"varint,11,opt,name=ingress_drop_flows,json=ingressDropFlows" json:"ingress_drop_flows,omitempty"`
	EgressDropFlows        *uint64                `protobuf:"varint,12,opt,name=egress_drop_flows,json=egressDropFlows" json:"egress_drop_flows,omitempty"`
	DropExceedIngressLimit *uint64                `protobuf:"varint,13,opt,name=drop_exceed_ingress_limit,json=dropExceedIngressLimit" json:"drop_exceed_ingress_limit,omitempty"`
	DropExceedEgressLimit  *uint64                `protobuf:"varint,14,opt,name=drop_exceed_egress_limit,json=dropExceedEgressLimit" json:"drop_exceed_egress_limit,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *PktDropInfo) Reset() {
	*x = PktDropInfo{}
	mi := &file_svcset_telemetry_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PktDropInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PktDropInfo) ProtoMessage() {}

func (x *PktDropInfo) ProtoReflect() protoreflect.Message {
	mi := &file_svcset_telemetry_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PktDropInfo.ProtoReflect.Descriptor instead.
func (*PktDropInfo) Descriptor() ([]byte, []int) {
	return file_svcset_telemetry_proto_rawDescGZIP(), []int{5}
}

func (x *PktDropInfo) GetSvcsetId() uint64 {
	if x != nil && x.SvcsetId != nil {
		return *x.SvcsetId
	}
	return 0
}

func (x *PktDropInfo) GetSvcsetIdPresent() uint64 {
	if x != nil && x.SvcsetIdPresent != nil {
		return *x.SvcsetIdPresent
	}
	return 0
}

func (x *PktDropInfo) GetExternalSvcSetId() uint64 {
	if x != nil && x.ExternalSvcSetId != nil {
		return *x.ExternalSvcSetId
	}
	return 0
}

func (x *PktDropInfo) GetSvcType() uint64 {
	if x != nil && x.SvcType != nil {
		return *x.SvcType
	}
	return 0
}

func (x *PktDropInfo) GetSvcSetType() uint64 {
	if x != nil && x.SvcSetType != nil {
		return *x.SvcSetType
	}
	return 0
}

func (x *PktDropInfo) GetSvcSetName() string {
	if x != nil && x.SvcSetName != nil {
		return *x.SvcSetName
	}
	return ""
}

func (x *PktDropInfo) GetMemlimitDrops() uint64 {
	if x != nil && x.MemlimitDrops != nil {
		return *x.MemlimitDrops
	}
	return 0
}

func (x *PktDropInfo) GetCpulimitDrops() uint64 {
	if x != nil && x.CpulimitDrops != nil {
		return *x.CpulimitDrops
	}
	return 0
}

func (x *PktDropInfo) GetFlowlimitDrops() uint64 {
	if x != nil && x.FlowlimitDrops != nil {
		return *x.FlowlimitDrops
	}
	return 0
}

func (x *PktDropInfo) GetPtclcopyDrops() uint64 {
	if x != nil && x.PtclcopyDrops != nil {
		return *x.PtclcopyDrops
	}
	return 0
}

func (x *PktDropInfo) GetIngressDropFlows() uint64 {
	if x != nil && x.IngressDropFlows != nil {
		return *x.IngressDropFlows
	}
	return 0
}

func (x *PktDropInfo) GetEgressDropFlows() uint64 {
	if x != nil && x.EgressDropFlows != nil {
		return *x.EgressDropFlows
	}
	return 0
}

func (x *PktDropInfo) GetDropExceedIngressLimit() uint64 {
	if x != nil && x.DropExceedIngressLimit != nil {
		return *x.DropExceedIngressLimit
	}
	return 0
}

func (x *PktDropInfo) GetDropExceedEgressLimit() uint64 {
	if x != nil && x.DropExceedEgressLimit != nil {
		return *x.DropExceedEgressLimit
	}
	return 0
}

var file_svcset_telemetry_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*ServicesInfra)(nil),
		Field:         78,
		Name:          "jnprScvsInfraExt",
		Tag:           "bytes,78,opt,name=jnprScvsInfraExt",
		Filename:      "svcset_telemetry.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional ServicesInfra jnprScvsInfraExt = 78;
	E_JnprScvsInfraExt = &file_svcset_telemetry_proto_extTypes[0]
)

var File_svcset_telemetry_proto protoreflect.FileDescriptor

var file_svcset_telemetry_proto_rawDesc = string([]byte{
	0x0a, 0x16, 0x73, 0x76, 0x63, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xac, 0x02,
	0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x12,
	0x38, 0x0a, 0x11, 0x73, 0x76, 0x63, 0x73, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x73, 0x76, 0x63, 0x73, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x0f, 0x73, 0x76, 0x63,
	0x73, 0x65, 0x74, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0d, 0x73, 0x76, 0x63, 0x73, 0x65, 0x74, 0x43, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x35, 0x0a, 0x0f, 0x73, 0x76, 0x63, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x65, 0x6d, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x73, 0x76, 0x63, 0x73, 0x65, 0x74,
	0x4d, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x0f, 0x73, 0x76, 0x63, 0x73, 0x65,
	0x74, 0x5f, 0x73, 0x76, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0d, 0x73, 0x76, 0x63, 0x73, 0x65, 0x74, 0x53, 0x76, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c,
	0x0a, 0x13, 0x73, 0x76, 0x63, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x64, 0x72, 0x6f, 0x70,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x6b,
	0x74, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x73, 0x76, 0x63, 0x73, 0x65,
	0x74, 0x50, 0x6b, 0x74, 0x64, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xd7, 0x03, 0x0a,
	0x0b, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0e,
	0x73, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x70, 0x4e, 0x75, 0x6d, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x73,
	0x70, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x70, 0x50,
	0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x76,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x76, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x65, 0x76, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x70, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x45, 0x76, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x70, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x70, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x73, 0x70, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x70,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x70, 0x5f, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x73, 0x70, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2f, 0x0a,
	0x14, 0x73, 0x70, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x73, 0x70, 0x54,
	0x63, 0x70, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x27,
	0x0a, 0x10, 0x73, 0x70, 0x5f, 0x65, 0x76, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x70, 0x45, 0x76, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x70, 0x5f, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x73, 0x70, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x27, 0x0a,
	0x10, 0x73, 0x70, 0x5f, 0x65, 0x76, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x70, 0x45, 0x76, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xdf, 0x02, 0x0a, 0x0c, 0x43, 0x70, 0x75, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x76, 0x63, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x76, 0x63, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x76, 0x63, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x73, 0x76, 0x63, 0x73, 0x65, 0x74, 0x49, 0x64, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x12, 0x2d, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x76, 0x63,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x76, 0x63, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x76, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x73, 0x76, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x76,
	0x63, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x73, 0x76, 0x63, 0x53, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c,
	0x73, 0x76, 0x63, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x76, 0x63, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x7a,
	0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x70, 0x75, 0x5a, 0x6f,
	0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x70, 0x75, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x70, 0x75, 0x55, 0x73, 0x65, 0x72, 0x22, 0xb7, 0x03, 0x0a, 0x0c, 0x4d, 0x65, 0x6d,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x76, 0x63,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x76,
	0x63, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x76, 0x63, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x73, 0x76, 0x63, 0x73, 0x65, 0x74, 0x49, 0x64, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73,
	0x76, 0x63, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x76, 0x63, 0x53, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x76, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x76, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c,
	0x73, 0x76, 0x63, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x73, 0x76, 0x63, 0x53, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0c, 0x73, 0x76, 0x63, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x76, 0x63, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f,
	0x75, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x65,
	0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x22, 0xcf, 0x03, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x76, 0x63, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x76, 0x63, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x76, 0x63, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x76, 0x63,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x13,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x76, 0x63, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x53, 0x76, 0x63, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x76, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73,
	0x76, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x76, 0x63, 0x5f, 0x73, 0x65,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x76,
	0x63, 0x53, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x76, 0x63, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x76, 0x63, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x76, 0x63, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x53, 0x76, 0x63, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x76, 0x63, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x76, 0x63, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x76,
	0x63, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x65, 0x6d,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12,
	0x33, 0x0a, 0x16, 0x6d, 0x65, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65,
	0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x13, 0x6d, 0x65, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x22, 0xd0, 0x04, 0x0a, 0x0b, 0x50, 0x6b, 0x74, 0x44, 0x72, 0x6f, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x76, 0x63, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x76, 0x63, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x76, 0x63, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x76,
	0x63, 0x73, 0x65, 0x74, 0x49, 0x64, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a,
	0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x76, 0x63, 0x5f, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x53, 0x76, 0x63, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x76, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x73, 0x76, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x76, 0x63, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73,
	0x76, 0x63, 0x53, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x76, 0x63,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x76, 0x63, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d,
	0x65, 0x6d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x72, 0x6f,
	0x70, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x70, 0x75, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x64,
	0x72, 0x6f, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x70, 0x75, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x6c, 0x6f,
	0x77, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x66, 0x6c, 0x6f, 0x77, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x72, 0x6f,
	0x70, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x74, 0x63, 0x6c, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x64,
	0x72, 0x6f, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x74, 0x63, 0x6c,
	0x63, 0x6f, 0x70, 0x79, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x44, 0x72,
	0x6f, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x46, 0x6c,
	0x6f, 0x77, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x65, 0x78, 0x63, 0x65,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x64, 0x72, 0x6f, 0x70, 0x45, 0x78, 0x63, 0x65,
	0x65, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x37,
	0x0a, 0x18, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x5f, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x15, 0x64, 0x72, 0x6f, 0x70, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x45, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x53, 0x0a, 0x10, 0x6a, 0x6e, 0x70, 0x72, 0x53,
	0x63, 0x76, 0x73, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x45, 0x78, 0x74, 0x12, 0x17, 0x2e, 0x4a, 0x75,
	0x6e, 0x69, 0x70, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x73, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x52, 0x10, 0x6a, 0x6e, 0x70, 0x72,
	0x53, 0x63, 0x76, 0x73, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x45, 0x78, 0x74, 0x42, 0x1d, 0x5a, 0x1b,
	0x2e, 0x2f, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
})

var (
	file_svcset_telemetry_proto_rawDescOnce sync.Once
	file_svcset_telemetry_proto_rawDescData []byte
)

func file_svcset_telemetry_proto_rawDescGZIP() []byte {
	file_svcset_telemetry_proto_rawDescOnce.Do(func() {
		file_svcset_telemetry_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_svcset_telemetry_proto_rawDesc), len(file_svcset_telemetry_proto_rawDesc)))
	})
	return file_svcset_telemetry_proto_rawDescData
}

var file_svcset_telemetry_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_svcset_telemetry_proto_goTypes = []any{
	(*ServicesInfra)(nil),          // 0: ServicesInfra
	(*PluginsInfo)(nil),            // 1: PluginsInfo
	(*CpuUsageInfo)(nil),           // 2: CpuUsageInfo
	(*MemUsageInfo)(nil),           // 3: MemUsageInfo
	(*ServicesInfo)(nil),           // 4: ServicesInfo
	(*PktDropInfo)(nil),            // 5: PktDropInfo
	(*JuniperNetworksSensors)(nil), // 6: JuniperNetworksSensors
}
var file_svcset_telemetry_proto_depIdxs = []int32{
	1, // 0: ServicesInfra.svcs_plugins_info:type_name -> PluginsInfo
	2, // 1: ServicesInfra.svcset_cpu_info:type_name -> CpuUsageInfo
	3, // 2: ServicesInfra.svcset_mem_info:type_name -> MemUsageInfo
	4, // 3: ServicesInfra.svcset_svc_info:type_name -> ServicesInfo
	5, // 4: ServicesInfra.svcset_pktdrop_info:type_name -> PktDropInfo
	6, // 5: jnprScvsInfraExt:extendee -> JuniperNetworksSensors
	0, // 6: jnprScvsInfraExt:type_name -> ServicesInfra
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	6, // [6:7] is the sub-list for extension type_name
	5, // [5:6] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_svcset_telemetry_proto_init() }
func file_svcset_telemetry_proto_init() {
	if File_svcset_telemetry_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_svcset_telemetry_proto_rawDesc), len(file_svcset_telemetry_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_svcset_telemetry_proto_goTypes,
		DependencyIndexes: file_svcset_telemetry_proto_depIdxs,
		MessageInfos:      file_svcset_telemetry_proto_msgTypes,
		ExtensionInfos:    file_svcset_telemetry_proto_extTypes,
	}.Build()
	File_svcset_telemetry_proto = out.File
	file_svcset_telemetry_proto_goTypes = nil
	file_svcset_telemetry_proto_depIdxs = nil
}
