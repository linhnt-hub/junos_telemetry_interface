//
// Copyrights (c)  2016, Juniper Networks, Inc.
// All rights reserved.
//

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// Manikandan Poornachary, Mar 2016
//
// Inline Jflow service creates/updates flow, construct flow records
// either in v9 or v10 format, and exports to collector.
// This service maintains set of counters which are FPC Slot level,
// NPU level and family level. This file provides a template for the
// GBP stream format of these counters.
//
// Version 1.0
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: inline_jflow.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InlineJflow struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version of exported flow records (v10 or v9)
	Ipv4FlowsExportFormat *string `protobuf:"bytes,2,opt,name=ipv4_flows_export_format,json=ipv4FlowsExportFormat" json:"ipv4_flows_export_format,omitempty"`
	Ipv6FlowsExportFormat *string `protobuf:"bytes,3,opt,name=ipv6_flows_export_format,json=ipv6FlowsExportFormat" json:"ipv6_flows_export_format,omitempty"`
	VplsFlowsExportFormat *string `protobuf:"bytes,4,opt,name=vpls_flows_export_format,json=vplsFlowsExportFormat" json:"vpls_flows_export_format,omitempty"`
	MplsFlowsExportFormat *string `protobuf:"bytes,5,opt,name=mpls_flows_export_format,json=mplsFlowsExportFormat" json:"mpls_flows_export_format,omitempty"`
	// Total number of IPv4/IPv6/MPLS routes
	Ipv4RouteRecordCnt *uint32 `protobuf:"varint,6,opt,name=ipv4_route_record_cnt,json=ipv4RouteRecordCnt" json:"ipv4_route_record_cnt,omitempty"`
	Ipv6RouteRecordCnt *uint32 `protobuf:"varint,7,opt,name=ipv6_route_record_cnt,json=ipv6RouteRecordCnt" json:"ipv6_route_record_cnt,omitempty"`
	MplsRouteRecordCnt *uint32 `protobuf:"varint,8,opt,name=mpls_route_record_cnt,json=mplsRouteRecordCnt" json:"mpls_route_record_cnt,omitempty"`
	// Total number of Autonomous System information
	AutonomousSystemRecordCnt *uint32 `protobuf:"varint,9,opt,name=autonomous_system_record_cnt,json=autonomousSystemRecordCnt" json:"autonomous_system_record_cnt,omitempty"`
	// Maximum number of flows supported.
	Ipv4MaxFlowsCount *uint64 `protobuf:"varint,10,opt,name=ipv4_max_flows_count,json=ipv4MaxFlowsCount" json:"ipv4_max_flows_count,omitempty"`
	Ipv6MaxFlowsCount *uint64 `protobuf:"varint,11,opt,name=ipv6_max_flows_count,json=ipv6MaxFlowsCount" json:"ipv6_max_flows_count,omitempty"`
	VplsMaxFlowsCount *uint64 `protobuf:"varint,12,opt,name=vpls_max_flows_count,json=vplsMaxFlowsCount" json:"vpls_max_flows_count,omitempty"`
	MplsMaxFlowsCount *uint64 `protobuf:"varint,13,opt,name=mpls_max_flows_count,json=mplsMaxFlowsCount" json:"mpls_max_flows_count,omitempty"`
	// Total number of heap memory allocation failure
	MemoryAllocFailCnt *uint32 `protobuf:"varint,14,opt,name=memory_alloc_fail_cnt,json=memoryAllocFailCnt" json:"memory_alloc_fail_cnt,omitempty"`
	// Value of Configured Observation Domain ID
	Ipv4ConfiguredObservationDomainId *uint32 `protobuf:"varint,15,opt,name=ipv4_configured_observation_domain_id,json=ipv4ConfiguredObservationDomainId" json:"ipv4_configured_observation_domain_id,omitempty"`
	Ipv6ConfiguredObservationDomainId *uint32 `protobuf:"varint,16,opt,name=ipv6_configured_observation_domain_id,json=ipv6ConfiguredObservationDomainId" json:"ipv6_configured_observation_domain_id,omitempty"`
	VplsConfiguredObservationDomainId *uint32 `protobuf:"varint,17,opt,name=vpls_configured_observation_domain_id,json=vplsConfiguredObservationDomainId" json:"vpls_configured_observation_domain_id,omitempty"`
	MplsConfiguredObservationDomainId *uint32 `protobuf:"varint,18,opt,name=mpls_configured_observation_domain_id,json=mplsConfiguredObservationDomainId" json:"mpls_configured_observation_domain_id,omitempty"`
	// Timestamp of last clear command
	LastClearTimestamp *uint32 `protobuf:"varint,19,opt,name=last_clear_timestamp,json=lastClearTimestamp" json:"last_clear_timestamp,omitempty"`
	// Status of ipv6_extended_attrib knob
	Ipv6ExtendedAttribute *bool `protobuf:"varint,20,opt,name=ipv6_extended_attribute,json=ipv6ExtendedAttribute" json:"ipv6_extended_attribute,omitempty"`
	// Status of flex_flow_sizing knob
	FlexibleFlowSizing *bool `protobuf:"varint,21,opt,name=flexible_flow_sizing,json=flexibleFlowSizing" json:"flexible_flow_sizing,omitempty"`
	// Status of use_extended_flow_memory knob
	UseExtendedFlowMemory *bool `protobuf:"varint,22,opt,name=use_extended_flow_memory,json=useExtendedFlowMemory" json:"use_extended_flow_memory,omitempty"`
	// Version of Bridge exported flow records (v10 or v9)
	BridgeFlowsExportFormat *string `protobuf:"bytes,23,opt,name=bridge_flows_export_format,json=bridgeFlowsExportFormat" json:"bridge_flows_export_format,omitempty"`
	// Maximum number of flows supported for Bridge.
	BridgeMaxFlowsCount *uint64 `protobuf:"varint,24,opt,name=bridge_max_flows_count,json=bridgeMaxFlowsCount" json:"bridge_max_flows_count,omitempty"`
	// Value of Configured Observation Domain ID for Bridge
	BridgeConfiguredObservationDomainId *uint32 `protobuf:"varint,25,opt,name=bridge_configured_observation_domain_id,json=bridgeConfiguredObservationDomainId" json:"bridge_configured_observation_domain_id,omitempty"`
	// NPU level statistics
	NpuStats      []*InlineJflowNpuStats `protobuf:"bytes,50,rep,name=npu_stats,json=npuStats" json:"npu_stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InlineJflow) Reset() {
	*x = InlineJflow{}
	mi := &file_inline_jflow_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InlineJflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InlineJflow) ProtoMessage() {}

func (x *InlineJflow) ProtoReflect() protoreflect.Message {
	mi := &file_inline_jflow_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InlineJflow.ProtoReflect.Descriptor instead.
func (*InlineJflow) Descriptor() ([]byte, []int) {
	return file_inline_jflow_proto_rawDescGZIP(), []int{0}
}

func (x *InlineJflow) GetIpv4FlowsExportFormat() string {
	if x != nil && x.Ipv4FlowsExportFormat != nil {
		return *x.Ipv4FlowsExportFormat
	}
	return ""
}

func (x *InlineJflow) GetIpv6FlowsExportFormat() string {
	if x != nil && x.Ipv6FlowsExportFormat != nil {
		return *x.Ipv6FlowsExportFormat
	}
	return ""
}

func (x *InlineJflow) GetVplsFlowsExportFormat() string {
	if x != nil && x.VplsFlowsExportFormat != nil {
		return *x.VplsFlowsExportFormat
	}
	return ""
}

func (x *InlineJflow) GetMplsFlowsExportFormat() string {
	if x != nil && x.MplsFlowsExportFormat != nil {
		return *x.MplsFlowsExportFormat
	}
	return ""
}

func (x *InlineJflow) GetIpv4RouteRecordCnt() uint32 {
	if x != nil && x.Ipv4RouteRecordCnt != nil {
		return *x.Ipv4RouteRecordCnt
	}
	return 0
}

func (x *InlineJflow) GetIpv6RouteRecordCnt() uint32 {
	if x != nil && x.Ipv6RouteRecordCnt != nil {
		return *x.Ipv6RouteRecordCnt
	}
	return 0
}

func (x *InlineJflow) GetMplsRouteRecordCnt() uint32 {
	if x != nil && x.MplsRouteRecordCnt != nil {
		return *x.MplsRouteRecordCnt
	}
	return 0
}

func (x *InlineJflow) GetAutonomousSystemRecordCnt() uint32 {
	if x != nil && x.AutonomousSystemRecordCnt != nil {
		return *x.AutonomousSystemRecordCnt
	}
	return 0
}

func (x *InlineJflow) GetIpv4MaxFlowsCount() uint64 {
	if x != nil && x.Ipv4MaxFlowsCount != nil {
		return *x.Ipv4MaxFlowsCount
	}
	return 0
}

func (x *InlineJflow) GetIpv6MaxFlowsCount() uint64 {
	if x != nil && x.Ipv6MaxFlowsCount != nil {
		return *x.Ipv6MaxFlowsCount
	}
	return 0
}

func (x *InlineJflow) GetVplsMaxFlowsCount() uint64 {
	if x != nil && x.VplsMaxFlowsCount != nil {
		return *x.VplsMaxFlowsCount
	}
	return 0
}

func (x *InlineJflow) GetMplsMaxFlowsCount() uint64 {
	if x != nil && x.MplsMaxFlowsCount != nil {
		return *x.MplsMaxFlowsCount
	}
	return 0
}

func (x *InlineJflow) GetMemoryAllocFailCnt() uint32 {
	if x != nil && x.MemoryAllocFailCnt != nil {
		return *x.MemoryAllocFailCnt
	}
	return 0
}

func (x *InlineJflow) GetIpv4ConfiguredObservationDomainId() uint32 {
	if x != nil && x.Ipv4ConfiguredObservationDomainId != nil {
		return *x.Ipv4ConfiguredObservationDomainId
	}
	return 0
}

func (x *InlineJflow) GetIpv6ConfiguredObservationDomainId() uint32 {
	if x != nil && x.Ipv6ConfiguredObservationDomainId != nil {
		return *x.Ipv6ConfiguredObservationDomainId
	}
	return 0
}

func (x *InlineJflow) GetVplsConfiguredObservationDomainId() uint32 {
	if x != nil && x.VplsConfiguredObservationDomainId != nil {
		return *x.VplsConfiguredObservationDomainId
	}
	return 0
}

func (x *InlineJflow) GetMplsConfiguredObservationDomainId() uint32 {
	if x != nil && x.MplsConfiguredObservationDomainId != nil {
		return *x.MplsConfiguredObservationDomainId
	}
	return 0
}

func (x *InlineJflow) GetLastClearTimestamp() uint32 {
	if x != nil && x.LastClearTimestamp != nil {
		return *x.LastClearTimestamp
	}
	return 0
}

func (x *InlineJflow) GetIpv6ExtendedAttribute() bool {
	if x != nil && x.Ipv6ExtendedAttribute != nil {
		return *x.Ipv6ExtendedAttribute
	}
	return false
}

func (x *InlineJflow) GetFlexibleFlowSizing() bool {
	if x != nil && x.FlexibleFlowSizing != nil {
		return *x.FlexibleFlowSizing
	}
	return false
}

func (x *InlineJflow) GetUseExtendedFlowMemory() bool {
	if x != nil && x.UseExtendedFlowMemory != nil {
		return *x.UseExtendedFlowMemory
	}
	return false
}

func (x *InlineJflow) GetBridgeFlowsExportFormat() string {
	if x != nil && x.BridgeFlowsExportFormat != nil {
		return *x.BridgeFlowsExportFormat
	}
	return ""
}

func (x *InlineJflow) GetBridgeMaxFlowsCount() uint64 {
	if x != nil && x.BridgeMaxFlowsCount != nil {
		return *x.BridgeMaxFlowsCount
	}
	return 0
}

func (x *InlineJflow) GetBridgeConfiguredObservationDomainId() uint32 {
	if x != nil && x.BridgeConfiguredObservationDomainId != nil {
		return *x.BridgeConfiguredObservationDomainId
	}
	return 0
}

func (x *InlineJflow) GetNpuStats() []*InlineJflowNpuStats {
	if x != nil {
		return x.NpuStats
	}
	return nil
}

type InlineJflowNpuStats struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// All NPUs in the system are globally identified
	// <fpcslot><luinst><pfeinst>
	//
	//	8         4         4    bits
	NpuIdentifier *uint32 `protobuf:"varint,1,req,name=npu_identifier,json=npuIdentifier" json:"npu_identifier,omitempty"`
	// IPv4 NPU Stats
	// Total number of IPv4 packets and bytes sampled
	Ipv4FlowPackets *uint64 `protobuf:"varint,51,opt,name=ipv4_flow_packets,json=ipv4FlowPackets" json:"ipv4_flow_packets,omitempty"`
	Ipv4FlowBytes   *uint64 `protobuf:"varint,52,opt,name=ipv4_flow_bytes,json=ipv4FlowBytes" json:"ipv4_flow_bytes,omitempty"`
	// Total number of IPv4 flows created
	Ipv4TotalFlows *uint64 `protobuf:"varint,53,opt,name=ipv4_total_flows,json=ipv4TotalFlows" json:"ipv4_total_flows,omitempty"`
	// Total number of IPv4 flows that are active currently
	Ipv4ActiveFlows *uint64 `protobuf:"varint,54,opt,name=ipv4_active_flows,json=ipv4ActiveFlows" json:"ipv4_active_flows,omitempty"`
	// Total number of IPv4 flows exported to collector
	Ipv4FlowsExported *uint64 `protobuf:"varint,55,opt,name=ipv4_flows_exported,json=ipv4FlowsExported" json:"ipv4_flows_exported,omitempty"`
	// Total number of IPv4 flow packets exported to collector
	Ipv4PacketsExported *uint64 `protobuf:"varint,56,opt,name=ipv4_packets_exported,json=ipv4PacketsExported" json:"ipv4_packets_exported,omitempty"`
	// Total number of IPv4 flows exported due to idle time out
	Ipv4FlowsInactiveTimedOut *uint64 `protobuf:"varint,57,opt,name=ipv4_flows_inactive_timed_out,json=ipv4FlowsInactiveTimedOut" json:"ipv4_flows_inactive_timed_out,omitempty"`
	// Total number of IPv4 flows exported due to active time out
	Ipv4FlowsActiveTimedOut *uint64 `protobuf:"varint,58,opt,name=ipv4_flows_active_timed_out,json=ipv4FlowsActiveTimedOut" json:"ipv4_flows_active_timed_out,omitempty"`
	// Total number of IPv4 flow creation failure (flow insert faiure)
	Ipv4FlowCreateFailure *uint64 `protobuf:"varint,59,opt,name=ipv4_flow_create_failure,json=ipv4FlowCreateFailure" json:"ipv4_flow_create_failure,omitempty"`
	// Total number of route, autonomous system lookup failure
	Ipv4RouteLookupFailure            *uint64 `protobuf:"varint,60,opt,name=ipv4_route_lookup_failure,json=ipv4RouteLookupFailure" json:"ipv4_route_lookup_failure,omitempty"`
	Ipv4AutonomousSystemLookupFailure *uint64 `protobuf:"varint,61,opt,name=ipv4_autonomous_system_lookup_failure,json=ipv4AutonomousSystemLookupFailure" json:"ipv4_autonomous_system_lookup_failure,omitempty"`
	// Total number of exporting flow record to collector failed
	Ipv4FlowPacketExportFailure *uint64 `protobuf:"varint,62,opt,name=ipv4_flow_packet_export_failure,json=ipv4FlowPacketExportFailure" json:"ipv4_flow_packet_export_failure,omitempty"`
	// IPv4 flow table utlization in percentage
	Ipv4FlowTableUtilization *float32 `protobuf:"fixed32,63,opt,name=ipv4_flow_table_utilization,json=ipv4FlowTableUtilization" json:"ipv4_flow_table_utilization,omitempty"`
	// Absolute number of flow inserted
	Ipv4FlowInsertCount *uint64 `protobuf:"varint,64,opt,name=ipv4_flow_insert_count,json=ipv4FlowInsertCount" json:"ipv4_flow_insert_count,omitempty"`
	// IPv6 NPU Stats
	Ipv6FlowPackets                   *uint64  `protobuf:"varint,101,opt,name=ipv6_flow_packets,json=ipv6FlowPackets" json:"ipv6_flow_packets,omitempty"`
	Ipv6FlowBytes                     *uint64  `protobuf:"varint,102,opt,name=ipv6_flow_bytes,json=ipv6FlowBytes" json:"ipv6_flow_bytes,omitempty"`
	Ipv6TotalFlows                    *uint64  `protobuf:"varint,103,opt,name=ipv6_total_flows,json=ipv6TotalFlows" json:"ipv6_total_flows,omitempty"`
	Ipv6ActiveFlows                   *uint64  `protobuf:"varint,104,opt,name=ipv6_active_flows,json=ipv6ActiveFlows" json:"ipv6_active_flows,omitempty"`
	Ipv6FlowsExported                 *uint64  `protobuf:"varint,105,opt,name=ipv6_flows_exported,json=ipv6FlowsExported" json:"ipv6_flows_exported,omitempty"`
	Ipv6PacketsExported               *uint64  `protobuf:"varint,106,opt,name=ipv6_packets_exported,json=ipv6PacketsExported" json:"ipv6_packets_exported,omitempty"`
	Ipv6FlowsInactiveTimedOut         *uint64  `protobuf:"varint,107,opt,name=ipv6_flows_inactive_timed_out,json=ipv6FlowsInactiveTimedOut" json:"ipv6_flows_inactive_timed_out,omitempty"`
	Ipv6FlowsActiveTimedOut           *uint64  `protobuf:"varint,108,opt,name=ipv6_flows_active_timed_out,json=ipv6FlowsActiveTimedOut" json:"ipv6_flows_active_timed_out,omitempty"`
	Ipv6FlowCreateFailure             *uint64  `protobuf:"varint,109,opt,name=ipv6_flow_create_failure,json=ipv6FlowCreateFailure" json:"ipv6_flow_create_failure,omitempty"`
	Ipv6RouteLookupFailure            *uint64  `protobuf:"varint,110,opt,name=ipv6_route_lookup_failure,json=ipv6RouteLookupFailure" json:"ipv6_route_lookup_failure,omitempty"`
	Ipv6AutonomousSystemLookupFailure *uint64  `protobuf:"varint,111,opt,name=ipv6_autonomous_system_lookup_failure,json=ipv6AutonomousSystemLookupFailure" json:"ipv6_autonomous_system_lookup_failure,omitempty"`
	Ipv6FlowPacketExportFailure       *uint64  `protobuf:"varint,112,opt,name=ipv6_flow_packet_export_failure,json=ipv6FlowPacketExportFailure" json:"ipv6_flow_packet_export_failure,omitempty"`
	Ipv6FlowTableUtilization          *float32 `protobuf:"fixed32,113,opt,name=ipv6_flow_table_utilization,json=ipv6FlowTableUtilization" json:"ipv6_flow_table_utilization,omitempty"`
	Ipv6FlowInsertCount               *uint64  `protobuf:"varint,114,opt,name=ipv6_flow_insert_count,json=ipv6FlowInsertCount" json:"ipv6_flow_insert_count,omitempty"`
	// VPLS NPU Stats
	VplsFlowPackets                   *uint64  `protobuf:"varint,151,opt,name=vpls_flow_packets,json=vplsFlowPackets" json:"vpls_flow_packets,omitempty"`
	VplsFlowBytes                     *uint64  `protobuf:"varint,152,opt,name=vpls_flow_bytes,json=vplsFlowBytes" json:"vpls_flow_bytes,omitempty"`
	VplsTotalFlows                    *uint64  `protobuf:"varint,153,opt,name=vpls_total_flows,json=vplsTotalFlows" json:"vpls_total_flows,omitempty"`
	VplsActiveFlows                   *uint64  `protobuf:"varint,154,opt,name=vpls_active_flows,json=vplsActiveFlows" json:"vpls_active_flows,omitempty"`
	VplsFlowsExported                 *uint64  `protobuf:"varint,155,opt,name=vpls_flows_exported,json=vplsFlowsExported" json:"vpls_flows_exported,omitempty"`
	VplsPacketsExported               *uint64  `protobuf:"varint,156,opt,name=vpls_packets_exported,json=vplsPacketsExported" json:"vpls_packets_exported,omitempty"`
	VplsFlowsInactiveTimedOut         *uint64  `protobuf:"varint,157,opt,name=vpls_flows_inactive_timed_out,json=vplsFlowsInactiveTimedOut" json:"vpls_flows_inactive_timed_out,omitempty"`
	VplsFlowsActiveTimedOut           *uint64  `protobuf:"varint,158,opt,name=vpls_flows_active_timed_out,json=vplsFlowsActiveTimedOut" json:"vpls_flows_active_timed_out,omitempty"`
	VplsFlowCreateFailure             *uint64  `protobuf:"varint,159,opt,name=vpls_flow_create_failure,json=vplsFlowCreateFailure" json:"vpls_flow_create_failure,omitempty"`
	VplsRouteLookupFailure            *uint64  `protobuf:"varint,160,opt,name=vpls_route_lookup_failure,json=vplsRouteLookupFailure" json:"vpls_route_lookup_failure,omitempty"`
	VplsAutonomousSystemLookupFailure *uint64  `protobuf:"varint,161,opt,name=vpls_autonomous_system_lookup_failure,json=vplsAutonomousSystemLookupFailure" json:"vpls_autonomous_system_lookup_failure,omitempty"`
	VplsFlowPacketExportFailure       *uint64  `protobuf:"varint,162,opt,name=vpls_flow_packet_export_failure,json=vplsFlowPacketExportFailure" json:"vpls_flow_packet_export_failure,omitempty"`
	VplsFlowTableUtilization          *float32 `protobuf:"fixed32,163,opt,name=vpls_flow_table_utilization,json=vplsFlowTableUtilization" json:"vpls_flow_table_utilization,omitempty"`
	VplsFlowInsertCount               *uint64  `protobuf:"varint,164,opt,name=vpls_flow_insert_count,json=vplsFlowInsertCount" json:"vpls_flow_insert_count,omitempty"`
	// MPLS NPU Stats
	MplsFlowPackets                   *uint64  `protobuf:"varint,201,opt,name=mpls_flow_packets,json=mplsFlowPackets" json:"mpls_flow_packets,omitempty"`
	MplsFlowBytes                     *uint64  `protobuf:"varint,202,opt,name=mpls_flow_bytes,json=mplsFlowBytes" json:"mpls_flow_bytes,omitempty"`
	MplsTotalFlows                    *uint64  `protobuf:"varint,203,opt,name=mpls_total_flows,json=mplsTotalFlows" json:"mpls_total_flows,omitempty"`
	MplsActiveFlows                   *uint64  `protobuf:"varint,204,opt,name=mpls_active_flows,json=mplsActiveFlows" json:"mpls_active_flows,omitempty"`
	MplsFlowsExported                 *uint64  `protobuf:"varint,205,opt,name=mpls_flows_exported,json=mplsFlowsExported" json:"mpls_flows_exported,omitempty"`
	MplsPacketsExported               *uint64  `protobuf:"varint,206,opt,name=mpls_packets_exported,json=mplsPacketsExported" json:"mpls_packets_exported,omitempty"`
	MplsFlowsInactiveTimedOut         *uint64  `protobuf:"varint,207,opt,name=mpls_flows_inactive_timed_out,json=mplsFlowsInactiveTimedOut" json:"mpls_flows_inactive_timed_out,omitempty"`
	MplsFlowsActiveTimedOut           *uint64  `protobuf:"varint,208,opt,name=mpls_flows_active_timed_out,json=mplsFlowsActiveTimedOut" json:"mpls_flows_active_timed_out,omitempty"`
	MplsFlowCreateFailure             *uint64  `protobuf:"varint,209,opt,name=mpls_flow_create_failure,json=mplsFlowCreateFailure" json:"mpls_flow_create_failure,omitempty"`
	MplsRouteLookupFailure            *uint64  `protobuf:"varint,210,opt,name=mpls_route_lookup_failure,json=mplsRouteLookupFailure" json:"mpls_route_lookup_failure,omitempty"`
	MplsAutonomousSystemLookupFailure *uint64  `protobuf:"varint,211,opt,name=mpls_autonomous_system_lookup_failure,json=mplsAutonomousSystemLookupFailure" json:"mpls_autonomous_system_lookup_failure,omitempty"`
	MplsFlowPacketExportFailure       *uint64  `protobuf:"varint,212,opt,name=mpls_flow_packet_export_failure,json=mplsFlowPacketExportFailure" json:"mpls_flow_packet_export_failure,omitempty"`
	MplsFlowTableUtilization          *float32 `protobuf:"fixed32,213,opt,name=mpls_flow_table_utilization,json=mplsFlowTableUtilization" json:"mpls_flow_table_utilization,omitempty"`
	MplsFlowInsertCount               *uint64  `protobuf:"varint,214,opt,name=mpls_flow_insert_count,json=mplsFlowInsertCount" json:"mpls_flow_insert_count,omitempty"`
	// BRIDGE NPU Stats
	BridgeFlowPackets                   *uint64  `protobuf:"varint,251,opt,name=bridge_flow_packets,json=bridgeFlowPackets" json:"bridge_flow_packets,omitempty"`
	BridgeFlowBytes                     *uint64  `protobuf:"varint,252,opt,name=bridge_flow_bytes,json=bridgeFlowBytes" json:"bridge_flow_bytes,omitempty"`
	BridgeTotalFlows                    *uint64  `protobuf:"varint,253,opt,name=bridge_total_flows,json=bridgeTotalFlows" json:"bridge_total_flows,omitempty"`
	BridgeActiveFlows                   *uint64  `protobuf:"varint,254,opt,name=bridge_active_flows,json=bridgeActiveFlows" json:"bridge_active_flows,omitempty"`
	BridgeFlowsExported                 *uint64  `protobuf:"varint,255,opt,name=bridge_flows_exported,json=bridgeFlowsExported" json:"bridge_flows_exported,omitempty"`
	BridgePacketsExported               *uint64  `protobuf:"varint,256,opt,name=bridge_packets_exported,json=bridgePacketsExported" json:"bridge_packets_exported,omitempty"`
	BridgeFlowsInactiveTimedOut         *uint64  `protobuf:"varint,257,opt,name=bridge_flows_inactive_timed_out,json=bridgeFlowsInactiveTimedOut" json:"bridge_flows_inactive_timed_out,omitempty"`
	BridgeFlowsActiveTimedOut           *uint64  `protobuf:"varint,258,opt,name=bridge_flows_active_timed_out,json=bridgeFlowsActiveTimedOut" json:"bridge_flows_active_timed_out,omitempty"`
	BridgeFlowCreateFailure             *uint64  `protobuf:"varint,259,opt,name=bridge_flow_create_failure,json=bridgeFlowCreateFailure" json:"bridge_flow_create_failure,omitempty"`
	BridgeRouteLookupFailure            *uint64  `protobuf:"varint,260,opt,name=bridge_route_lookup_failure,json=bridgeRouteLookupFailure" json:"bridge_route_lookup_failure,omitempty"`
	BridgeAutonomousSystemLookupFailure *uint64  `protobuf:"varint,261,opt,name=bridge_autonomous_system_lookup_failure,json=bridgeAutonomousSystemLookupFailure" json:"bridge_autonomous_system_lookup_failure,omitempty"`
	BridgeFlowPacketExportFailure       *uint64  `protobuf:"varint,262,opt,name=bridge_flow_packet_export_failure,json=bridgeFlowPacketExportFailure" json:"bridge_flow_packet_export_failure,omitempty"`
	BridgeFlowTableUtilization          *float32 `protobuf:"fixed32,263,opt,name=bridge_flow_table_utilization,json=bridgeFlowTableUtilization" json:"bridge_flow_table_utilization,omitempty"`
	BridgeFlowInsertCount               *uint64  `protobuf:"varint,264,opt,name=bridge_flow_insert_count,json=bridgeFlowInsertCount" json:"bridge_flow_insert_count,omitempty"`
	unknownFields                       protoimpl.UnknownFields
	sizeCache                           protoimpl.SizeCache
}

func (x *InlineJflowNpuStats) Reset() {
	*x = InlineJflowNpuStats{}
	mi := &file_inline_jflow_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InlineJflowNpuStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InlineJflowNpuStats) ProtoMessage() {}

func (x *InlineJflowNpuStats) ProtoReflect() protoreflect.Message {
	mi := &file_inline_jflow_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InlineJflowNpuStats.ProtoReflect.Descriptor instead.
func (*InlineJflowNpuStats) Descriptor() ([]byte, []int) {
	return file_inline_jflow_proto_rawDescGZIP(), []int{1}
}

func (x *InlineJflowNpuStats) GetNpuIdentifier() uint32 {
	if x != nil && x.NpuIdentifier != nil {
		return *x.NpuIdentifier
	}
	return 0
}

func (x *InlineJflowNpuStats) GetIpv4FlowPackets() uint64 {
	if x != nil && x.Ipv4FlowPackets != nil {
		return *x.Ipv4FlowPackets
	}
	return 0
}

func (x *InlineJflowNpuStats) GetIpv4FlowBytes() uint64 {
	if x != nil && x.Ipv4FlowBytes != nil {
		return *x.Ipv4FlowBytes
	}
	return 0
}

func (x *InlineJflowNpuStats) GetIpv4TotalFlows() uint64 {
	if x != nil && x.Ipv4TotalFlows != nil {
		return *x.Ipv4TotalFlows
	}
	return 0
}

func (x *InlineJflowNpuStats) GetIpv4ActiveFlows() uint64 {
	if x != nil && x.Ipv4ActiveFlows != nil {
		return *x.Ipv4ActiveFlows
	}
	return 0
}

func (x *InlineJflowNpuStats) GetIpv4FlowsExported() uint64 {
	if x != nil && x.Ipv4FlowsExported != nil {
		return *x.Ipv4FlowsExported
	}
	return 0
}

func (x *InlineJflowNpuStats) GetIpv4PacketsExported() uint64 {
	if x != nil && x.Ipv4PacketsExported != nil {
		return *x.Ipv4PacketsExported
	}
	return 0
}

func (x *InlineJflowNpuStats) GetIpv4FlowsInactiveTimedOut() uint64 {
	if x != nil && x.Ipv4FlowsInactiveTimedOut != nil {
		return *x.Ipv4FlowsInactiveTimedOut
	}
	return 0
}

func (x *InlineJflowNpuStats) GetIpv4FlowsActiveTimedOut() uint64 {
	if x != nil && x.Ipv4FlowsActiveTimedOut != nil {
		return *x.Ipv4FlowsActiveTimedOut
	}
	return 0
}

func (x *InlineJflowNpuStats) GetIpv4FlowCreateFailure() uint64 {
	if x != nil && x.Ipv4FlowCreateFailure != nil {
		return *x.Ipv4FlowCreateFailure
	}
	return 0
}

func (x *InlineJflowNpuStats) GetIpv4RouteLookupFailure() uint64 {
	if x != nil && x.Ipv4RouteLookupFailure != nil {
		return *x.Ipv4RouteLookupFailure
	}
	return 0
}

func (x *InlineJflowNpuStats) GetIpv4AutonomousSystemLookupFailure() uint64 {
	if x != nil && x.Ipv4AutonomousSystemLookupFailure != nil {
		return *x.Ipv4AutonomousSystemLookupFailure
	}
	return 0
}

func (x *InlineJflowNpuStats) GetIpv4FlowPacketExportFailure() uint64 {
	if x != nil && x.Ipv4FlowPacketExportFailure != nil {
		return *x.Ipv4FlowPacketExportFailure
	}
	return 0
}

func (x *InlineJflowNpuStats) GetIpv4FlowTableUtilization() float32 {
	if x != nil && x.Ipv4FlowTableUtilization != nil {
		return *x.Ipv4FlowTableUtilization
	}
	return 0
}

func (x *InlineJflowNpuStats) GetIpv4FlowInsertCount() uint64 {
	if x != nil && x.Ipv4FlowInsertCount != nil {
		return *x.Ipv4FlowInsertCount
	}
	return 0
}

func (x *InlineJflowNpuStats) GetIpv6FlowPackets() uint64 {
	if x != nil && x.Ipv6FlowPackets != nil {
		return *x.Ipv6FlowPackets
	}
	return 0
}

func (x *InlineJflowNpuStats) GetIpv6FlowBytes() uint64 {
	if x != nil && x.Ipv6FlowBytes != nil {
		return *x.Ipv6FlowBytes
	}
	return 0
}

func (x *InlineJflowNpuStats) GetIpv6TotalFlows() uint64 {
	if x != nil && x.Ipv6TotalFlows != nil {
		return *x.Ipv6TotalFlows
	}
	return 0
}

func (x *InlineJflowNpuStats) GetIpv6ActiveFlows() uint64 {
	if x != nil && x.Ipv6ActiveFlows != nil {
		return *x.Ipv6ActiveFlows
	}
	return 0
}

func (x *InlineJflowNpuStats) GetIpv6FlowsExported() uint64 {
	if x != nil && x.Ipv6FlowsExported != nil {
		return *x.Ipv6FlowsExported
	}
	return 0
}

func (x *InlineJflowNpuStats) GetIpv6PacketsExported() uint64 {
	if x != nil && x.Ipv6PacketsExported != nil {
		return *x.Ipv6PacketsExported
	}
	return 0
}

func (x *InlineJflowNpuStats) GetIpv6FlowsInactiveTimedOut() uint64 {
	if x != nil && x.Ipv6FlowsInactiveTimedOut != nil {
		return *x.Ipv6FlowsInactiveTimedOut
	}
	return 0
}

func (x *InlineJflowNpuStats) GetIpv6FlowsActiveTimedOut() uint64 {
	if x != nil && x.Ipv6FlowsActiveTimedOut != nil {
		return *x.Ipv6FlowsActiveTimedOut
	}
	return 0
}

func (x *InlineJflowNpuStats) GetIpv6FlowCreateFailure() uint64 {
	if x != nil && x.Ipv6FlowCreateFailure != nil {
		return *x.Ipv6FlowCreateFailure
	}
	return 0
}

func (x *InlineJflowNpuStats) GetIpv6RouteLookupFailure() uint64 {
	if x != nil && x.Ipv6RouteLookupFailure != nil {
		return *x.Ipv6RouteLookupFailure
	}
	return 0
}

func (x *InlineJflowNpuStats) GetIpv6AutonomousSystemLookupFailure() uint64 {
	if x != nil && x.Ipv6AutonomousSystemLookupFailure != nil {
		return *x.Ipv6AutonomousSystemLookupFailure
	}
	return 0
}

func (x *InlineJflowNpuStats) GetIpv6FlowPacketExportFailure() uint64 {
	if x != nil && x.Ipv6FlowPacketExportFailure != nil {
		return *x.Ipv6FlowPacketExportFailure
	}
	return 0
}

func (x *InlineJflowNpuStats) GetIpv6FlowTableUtilization() float32 {
	if x != nil && x.Ipv6FlowTableUtilization != nil {
		return *x.Ipv6FlowTableUtilization
	}
	return 0
}

func (x *InlineJflowNpuStats) GetIpv6FlowInsertCount() uint64 {
	if x != nil && x.Ipv6FlowInsertCount != nil {
		return *x.Ipv6FlowInsertCount
	}
	return 0
}

func (x *InlineJflowNpuStats) GetVplsFlowPackets() uint64 {
	if x != nil && x.VplsFlowPackets != nil {
		return *x.VplsFlowPackets
	}
	return 0
}

func (x *InlineJflowNpuStats) GetVplsFlowBytes() uint64 {
	if x != nil && x.VplsFlowBytes != nil {
		return *x.VplsFlowBytes
	}
	return 0
}

func (x *InlineJflowNpuStats) GetVplsTotalFlows() uint64 {
	if x != nil && x.VplsTotalFlows != nil {
		return *x.VplsTotalFlows
	}
	return 0
}

func (x *InlineJflowNpuStats) GetVplsActiveFlows() uint64 {
	if x != nil && x.VplsActiveFlows != nil {
		return *x.VplsActiveFlows
	}
	return 0
}

func (x *InlineJflowNpuStats) GetVplsFlowsExported() uint64 {
	if x != nil && x.VplsFlowsExported != nil {
		return *x.VplsFlowsExported
	}
	return 0
}

func (x *InlineJflowNpuStats) GetVplsPacketsExported() uint64 {
	if x != nil && x.VplsPacketsExported != nil {
		return *x.VplsPacketsExported
	}
	return 0
}

func (x *InlineJflowNpuStats) GetVplsFlowsInactiveTimedOut() uint64 {
	if x != nil && x.VplsFlowsInactiveTimedOut != nil {
		return *x.VplsFlowsInactiveTimedOut
	}
	return 0
}

func (x *InlineJflowNpuStats) GetVplsFlowsActiveTimedOut() uint64 {
	if x != nil && x.VplsFlowsActiveTimedOut != nil {
		return *x.VplsFlowsActiveTimedOut
	}
	return 0
}

func (x *InlineJflowNpuStats) GetVplsFlowCreateFailure() uint64 {
	if x != nil && x.VplsFlowCreateFailure != nil {
		return *x.VplsFlowCreateFailure
	}
	return 0
}

func (x *InlineJflowNpuStats) GetVplsRouteLookupFailure() uint64 {
	if x != nil && x.VplsRouteLookupFailure != nil {
		return *x.VplsRouteLookupFailure
	}
	return 0
}

func (x *InlineJflowNpuStats) GetVplsAutonomousSystemLookupFailure() uint64 {
	if x != nil && x.VplsAutonomousSystemLookupFailure != nil {
		return *x.VplsAutonomousSystemLookupFailure
	}
	return 0
}

func (x *InlineJflowNpuStats) GetVplsFlowPacketExportFailure() uint64 {
	if x != nil && x.VplsFlowPacketExportFailure != nil {
		return *x.VplsFlowPacketExportFailure
	}
	return 0
}

func (x *InlineJflowNpuStats) GetVplsFlowTableUtilization() float32 {
	if x != nil && x.VplsFlowTableUtilization != nil {
		return *x.VplsFlowTableUtilization
	}
	return 0
}

func (x *InlineJflowNpuStats) GetVplsFlowInsertCount() uint64 {
	if x != nil && x.VplsFlowInsertCount != nil {
		return *x.VplsFlowInsertCount
	}
	return 0
}

func (x *InlineJflowNpuStats) GetMplsFlowPackets() uint64 {
	if x != nil && x.MplsFlowPackets != nil {
		return *x.MplsFlowPackets
	}
	return 0
}

func (x *InlineJflowNpuStats) GetMplsFlowBytes() uint64 {
	if x != nil && x.MplsFlowBytes != nil {
		return *x.MplsFlowBytes
	}
	return 0
}

func (x *InlineJflowNpuStats) GetMplsTotalFlows() uint64 {
	if x != nil && x.MplsTotalFlows != nil {
		return *x.MplsTotalFlows
	}
	return 0
}

func (x *InlineJflowNpuStats) GetMplsActiveFlows() uint64 {
	if x != nil && x.MplsActiveFlows != nil {
		return *x.MplsActiveFlows
	}
	return 0
}

func (x *InlineJflowNpuStats) GetMplsFlowsExported() uint64 {
	if x != nil && x.MplsFlowsExported != nil {
		return *x.MplsFlowsExported
	}
	return 0
}

func (x *InlineJflowNpuStats) GetMplsPacketsExported() uint64 {
	if x != nil && x.MplsPacketsExported != nil {
		return *x.MplsPacketsExported
	}
	return 0
}

func (x *InlineJflowNpuStats) GetMplsFlowsInactiveTimedOut() uint64 {
	if x != nil && x.MplsFlowsInactiveTimedOut != nil {
		return *x.MplsFlowsInactiveTimedOut
	}
	return 0
}

func (x *InlineJflowNpuStats) GetMplsFlowsActiveTimedOut() uint64 {
	if x != nil && x.MplsFlowsActiveTimedOut != nil {
		return *x.MplsFlowsActiveTimedOut
	}
	return 0
}

func (x *InlineJflowNpuStats) GetMplsFlowCreateFailure() uint64 {
	if x != nil && x.MplsFlowCreateFailure != nil {
		return *x.MplsFlowCreateFailure
	}
	return 0
}

func (x *InlineJflowNpuStats) GetMplsRouteLookupFailure() uint64 {
	if x != nil && x.MplsRouteLookupFailure != nil {
		return *x.MplsRouteLookupFailure
	}
	return 0
}

func (x *InlineJflowNpuStats) GetMplsAutonomousSystemLookupFailure() uint64 {
	if x != nil && x.MplsAutonomousSystemLookupFailure != nil {
		return *x.MplsAutonomousSystemLookupFailure
	}
	return 0
}

func (x *InlineJflowNpuStats) GetMplsFlowPacketExportFailure() uint64 {
	if x != nil && x.MplsFlowPacketExportFailure != nil {
		return *x.MplsFlowPacketExportFailure
	}
	return 0
}

func (x *InlineJflowNpuStats) GetMplsFlowTableUtilization() float32 {
	if x != nil && x.MplsFlowTableUtilization != nil {
		return *x.MplsFlowTableUtilization
	}
	return 0
}

func (x *InlineJflowNpuStats) GetMplsFlowInsertCount() uint64 {
	if x != nil && x.MplsFlowInsertCount != nil {
		return *x.MplsFlowInsertCount
	}
	return 0
}

func (x *InlineJflowNpuStats) GetBridgeFlowPackets() uint64 {
	if x != nil && x.BridgeFlowPackets != nil {
		return *x.BridgeFlowPackets
	}
	return 0
}

func (x *InlineJflowNpuStats) GetBridgeFlowBytes() uint64 {
	if x != nil && x.BridgeFlowBytes != nil {
		return *x.BridgeFlowBytes
	}
	return 0
}

func (x *InlineJflowNpuStats) GetBridgeTotalFlows() uint64 {
	if x != nil && x.BridgeTotalFlows != nil {
		return *x.BridgeTotalFlows
	}
	return 0
}

func (x *InlineJflowNpuStats) GetBridgeActiveFlows() uint64 {
	if x != nil && x.BridgeActiveFlows != nil {
		return *x.BridgeActiveFlows
	}
	return 0
}

func (x *InlineJflowNpuStats) GetBridgeFlowsExported() uint64 {
	if x != nil && x.BridgeFlowsExported != nil {
		return *x.BridgeFlowsExported
	}
	return 0
}

func (x *InlineJflowNpuStats) GetBridgePacketsExported() uint64 {
	if x != nil && x.BridgePacketsExported != nil {
		return *x.BridgePacketsExported
	}
	return 0
}

func (x *InlineJflowNpuStats) GetBridgeFlowsInactiveTimedOut() uint64 {
	if x != nil && x.BridgeFlowsInactiveTimedOut != nil {
		return *x.BridgeFlowsInactiveTimedOut
	}
	return 0
}

func (x *InlineJflowNpuStats) GetBridgeFlowsActiveTimedOut() uint64 {
	if x != nil && x.BridgeFlowsActiveTimedOut != nil {
		return *x.BridgeFlowsActiveTimedOut
	}
	return 0
}

func (x *InlineJflowNpuStats) GetBridgeFlowCreateFailure() uint64 {
	if x != nil && x.BridgeFlowCreateFailure != nil {
		return *x.BridgeFlowCreateFailure
	}
	return 0
}

func (x *InlineJflowNpuStats) GetBridgeRouteLookupFailure() uint64 {
	if x != nil && x.BridgeRouteLookupFailure != nil {
		return *x.BridgeRouteLookupFailure
	}
	return 0
}

func (x *InlineJflowNpuStats) GetBridgeAutonomousSystemLookupFailure() uint64 {
	if x != nil && x.BridgeAutonomousSystemLookupFailure != nil {
		return *x.BridgeAutonomousSystemLookupFailure
	}
	return 0
}

func (x *InlineJflowNpuStats) GetBridgeFlowPacketExportFailure() uint64 {
	if x != nil && x.BridgeFlowPacketExportFailure != nil {
		return *x.BridgeFlowPacketExportFailure
	}
	return 0
}

func (x *InlineJflowNpuStats) GetBridgeFlowTableUtilization() float32 {
	if x != nil && x.BridgeFlowTableUtilization != nil {
		return *x.BridgeFlowTableUtilization
	}
	return 0
}

func (x *InlineJflowNpuStats) GetBridgeFlowInsertCount() uint64 {
	if x != nil && x.BridgeFlowInsertCount != nil {
		return *x.BridgeFlowInsertCount
	}
	return 0
}

var file_inline_jflow_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*InlineJflow)(nil),
		Field:         9,
		Name:          "inline_jflow_stats_ext",
		Tag:           "bytes,9,opt,name=inline_jflow_stats_ext",
		Filename:      "inline_jflow.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional InlineJflow inline_jflow_stats_ext = 9;
	E_InlineJflowStatsExt = &file_inline_jflow_proto_extTypes[0]
)

var File_inline_jflow_proto protoreflect.FileDescriptor

var file_inline_jflow_proto_rawDesc = string([]byte{
	0x0a, 0x12, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6a, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x74, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe1, 0x0b, 0x0a, 0x0b, 0x49, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x4a, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x69, 0x70, 0x76,
	0x34, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x69, 0x70, 0x76, 0x36, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x76,
	0x70, 0x6c, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x76,
	0x70, 0x6c, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x70, 0x6c, 0x73, 0x46, 0x6c, 0x6f, 0x77,
	0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x31, 0x0a,
	0x15, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x69, 0x70,
	0x76, 0x34, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6e, 0x74,
	0x12, 0x31, 0x0a, 0x15, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x69, 0x70, 0x76, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x43, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x6d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x43, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x6f,
	0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x61, 0x75,
	0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x43, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x69, 0x70, 0x76, 0x34, 0x4d, 0x61, 0x78, 0x46, 0x6c,
	0x6f, 0x77, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x69, 0x70, 0x76, 0x36, 0x4d, 0x61, 0x78, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x76, 0x70, 0x6c,
	0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x76, 0x70, 0x6c, 0x73, 0x4d, 0x61, 0x78,
	0x46, 0x6c, 0x6f, 0x77, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x70, 0x6c, 0x73, 0x4d, 0x61,
	0x78, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x15, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x5f, 0x63, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18,
	0x01, 0x52, 0x12, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x46, 0x61,
	0x69, 0x6c, 0x43, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x25, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x69, 0x70, 0x76, 0x34, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x25, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x69, 0x70, 0x76, 0x36, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x25, 0x76, 0x70, 0x6c,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x76, 0x70, 0x6c, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x25, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x6d, 0x70, 0x6c, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61, 0x73,
	0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x36, 0x0a, 0x17, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x69, 0x70, 0x76, 0x36, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x6c, 0x65, 0x78, 0x69,
	0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x18, 0x75, 0x73, 0x65,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x75, 0x73, 0x65,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x46, 0x6c,
	0x6f, 0x77, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x33, 0x0a, 0x16, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x13, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x27, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x23, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x6e, 0x70,
	0x75, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x32, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4a, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x70, 0x75, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x08, 0x6e, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xce, 0x23,
	0x0a, 0x13, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4a, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x70, 0x75,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0d, 0x6e,
	0x70, 0x75, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x11,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x0f,
	0x69, 0x70, 0x76, 0x34, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x2d, 0x0a, 0x0f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52,
	0x0d, 0x69, 0x70, 0x76, 0x34, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2f,
	0x0a, 0x10, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52,
	0x0e, 0x69, 0x70, 0x76, 0x34, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12,
	0x31, 0x0a, 0x11, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18,
	0x01, 0x52, 0x0f, 0x69, 0x70, 0x76, 0x34, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x12, 0x35, 0x0a, 0x13, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x11, 0x69, 0x70, 0x76, 0x34, 0x46, 0x6c, 0x6f, 0x77,
	0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x15, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52,
	0x13, 0x69, 0x70, 0x76, 0x34, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x1d, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02,
	0x18, 0x01, 0x52, 0x19, 0x69, 0x70, 0x76, 0x34, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x49, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x43, 0x0a,
	0x1b, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x17, 0x69, 0x70, 0x76, 0x34, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f,
	0x75, 0x74, 0x12, 0x3e, 0x0a, 0x18, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x3b,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x15, 0x69, 0x70, 0x76,
	0x34, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x12, 0x40, 0x0a, 0x19, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x16, 0x69, 0x70,
	0x76, 0x34, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x12, 0x57, 0x0a, 0x25, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x75, 0x74,
	0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x3d, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x21, 0x69, 0x70, 0x76, 0x34,
	0x41, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x4b, 0x0a,
	0x1f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x18, 0x3e, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x1b, 0x69,
	0x70, 0x76, 0x34, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x1b, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x02, 0x42,
	0x05, 0x82, 0x40, 0x02, 0x20, 0x01, 0x52, 0x18, 0x69, 0x70, 0x76, 0x34, 0x46, 0x6c, 0x6f, 0x77,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3a, 0x0a, 0x16, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x40, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x13, 0x69, 0x70, 0x76, 0x34, 0x46, 0x6c, 0x6f,
	0x77, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x11,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x65, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x0f,
	0x69, 0x70, 0x76, 0x36, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x2d, 0x0a, 0x0f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x66, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52,
	0x0d, 0x69, 0x70, 0x76, 0x36, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2f,
	0x0a, 0x10, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x18, 0x67, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52,
	0x0e, 0x69, 0x70, 0x76, 0x36, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12,
	0x31, 0x0a, 0x11, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x18, 0x68, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18,
	0x01, 0x52, 0x0f, 0x69, 0x70, 0x76, 0x36, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x12, 0x35, 0x0a, 0x13, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x69, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x11, 0x69, 0x70, 0x76, 0x36, 0x46, 0x6c, 0x6f, 0x77,
	0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x15, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52,
	0x13, 0x69, 0x70, 0x76, 0x36, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x1d, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02,
	0x18, 0x01, 0x52, 0x19, 0x69, 0x70, 0x76, 0x36, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x49, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x43, 0x0a,
	0x1b, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x6c, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x17, 0x69, 0x70, 0x76, 0x36, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f,
	0x75, 0x74, 0x12, 0x3e, 0x0a, 0x18, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x6d,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x15, 0x69, 0x70, 0x76,
	0x36, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x12, 0x40, 0x0a, 0x19, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18,
	0x6e, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x16, 0x69, 0x70,
	0x76, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x12, 0x57, 0x0a, 0x25, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x75, 0x74,
	0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x6f, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x21, 0x69, 0x70, 0x76, 0x36,
	0x41, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x4b, 0x0a,
	0x1f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x18, 0x70, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x1b, 0x69,
	0x70, 0x76, 0x36, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x1b, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x71, 0x20, 0x01, 0x28, 0x02, 0x42,
	0x05, 0x82, 0x40, 0x02, 0x20, 0x01, 0x52, 0x18, 0x69, 0x70, 0x76, 0x36, 0x46, 0x6c, 0x6f, 0x77,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3a, 0x0a, 0x16, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x72, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x13, 0x69, 0x70, 0x76, 0x36, 0x46, 0x6c, 0x6f,
	0x77, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x11,
	0x76, 0x70, 0x6c, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52,
	0x0f, 0x76, 0x70, 0x6c, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x2e, 0x0a, 0x0f, 0x76, 0x70, 0x6c, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18,
	0x01, 0x52, 0x0d, 0x76, 0x70, 0x6c, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x30, 0x0a, 0x10, 0x76, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02,
	0x18, 0x01, 0x52, 0x0e, 0x76, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x12, 0x32, 0x0a, 0x11, 0x76, 0x70, 0x6c, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05,
	0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x76, 0x70, 0x6c, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x36, 0x0a, 0x13, 0x76, 0x70, 0x6c, 0x73, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x9b, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x11, 0x76, 0x70, 0x6c,
	0x73, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x3a,
	0x0a, 0x15, 0x76, 0x70, 0x6c, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05,
	0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x13, 0x76, 0x70, 0x6c, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x1d, 0x76, 0x70,
	0x6c, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x9d, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x19, 0x76, 0x70, 0x6c, 0x73, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x64, 0x4f, 0x75, 0x74, 0x12, 0x44, 0x0a, 0x1b, 0x76, 0x70, 0x6c, 0x73, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f,
	0x6f, 0x75, 0x74, 0x18, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18,
	0x01, 0x52, 0x17, 0x76, 0x70, 0x6c, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x3f, 0x0a, 0x18, 0x76, 0x70,
	0x6c, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82,
	0x40, 0x02, 0x18, 0x01, 0x52, 0x15, 0x76, 0x70, 0x6c, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x41, 0x0a, 0x19, 0x76,
	0x70, 0x6c, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x16, 0x76, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x58,
	0x0a, 0x25, 0x76, 0x70, 0x6c, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75,
	0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05,
	0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x21, 0x76, 0x70, 0x6c, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6e,
	0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x4c, 0x0a, 0x1f, 0x76, 0x70, 0x6c, 0x73,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0xa2, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x1b, 0x76, 0x70, 0x6c, 0x73, 0x46,
	0x6c, 0x6f, 0x77, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x45, 0x0a, 0x1b, 0x76, 0x70, 0x6c, 0x73, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42, 0x05, 0x82, 0x40,
	0x02, 0x20, 0x01, 0x52, 0x18, 0x76, 0x70, 0x6c, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a,
	0x16, 0x76, 0x70, 0x6c, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05,
	0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x13, 0x76, 0x70, 0x6c, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x11, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0xc9, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x6d,
	0x70, 0x6c, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2e,
	0x0a, 0x0f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52,
	0x0d, 0x6d, 0x70, 0x6c, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x30,
	0x0a, 0x10, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01,
	0x52, 0x0e, 0x6d, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x73,
	0x12, 0x32, 0x0a, 0x11, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40,
	0x02, 0x18, 0x01, 0x52, 0x0f, 0x6d, 0x70, 0x6c, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x12, 0x36, 0x0a, 0x13, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0xcd, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x11, 0x6d, 0x70, 0x6c, 0x73, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x15,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0xce, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40,
	0x02, 0x18, 0x01, 0x52, 0x13, 0x6d, 0x70, 0x6c, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x1d, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x19, 0x6d, 0x70, 0x6c, 0x73, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f,
	0x75, 0x74, 0x12, 0x44, 0x0a, 0x1b, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x6f, 0x75,
	0x74, 0x18, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52,
	0x17, 0x6d, 0x70, 0x6c, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x3f, 0x0a, 0x18, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x18, 0xd1, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02,
	0x18, 0x01, 0x52, 0x15, 0x6d, 0x70, 0x6c, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x41, 0x0a, 0x19, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82,
	0x40, 0x02, 0x18, 0x01, 0x52, 0x16, 0x6d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x58, 0x0a, 0x25,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x5f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40,
	0x02, 0x18, 0x01, 0x52, 0x21, 0x6d, 0x70, 0x6c, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d,
	0x6f, 0x75, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x4c, 0x0a, 0x1f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x1b, 0x6d, 0x70, 0x6c, 0x73, 0x46, 0x6c, 0x6f,
	0x77, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x12, 0x45, 0x0a, 0x1b, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0xd5, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42, 0x05, 0x82, 0x40, 0x02, 0x20,
	0x01, 0x52, 0x18, 0x6d, 0x70, 0x6c, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x16, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xd6, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40,
	0x02, 0x18, 0x01, 0x52, 0x13, 0x6d, 0x70, 0x6c, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x13, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0xfb, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x11, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x32, 0x0a, 0x11, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xfc, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40,
	0x02, 0x18, 0x01, 0x52, 0x0f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x12, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0xfd, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x10, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x36, 0x0a, 0x13, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x18, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52,
	0x11, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x12, 0x3a, 0x0a, 0x15, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0xff, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x13, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x3e,
	0x0a, 0x17, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x15, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x4c,
	0x0a, 0x1f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x6f, 0x75,
	0x74, 0x18, 0x81, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52,
	0x1b, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x49, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x48, 0x0a, 0x1d,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x82, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x19, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x43, 0x0a, 0x1a, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x18, 0x83, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02,
	0x18, 0x01, 0x52, 0x17, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x45, 0x0a, 0x1b, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x84, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x18, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x12, 0x5c, 0x0a, 0x27, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x75, 0x74,
	0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x85, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x23, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x12, 0x50, 0x0a, 0x21, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x86, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40,
	0x02, 0x18, 0x01, 0x52, 0x1d, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x12, 0x49, 0x0a, 0x1d, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x87, 0x02, 0x20, 0x01, 0x28, 0x02, 0x42, 0x05, 0x82, 0x40, 0x02, 0x20,
	0x01, 0x52, 0x1a, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a,
	0x18, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x88, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x15, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x5a,
	0x0a, 0x16, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6a, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x12, 0x17, 0x2e, 0x4a, 0x75, 0x6e, 0x69, 0x70,
	0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x4a, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x13, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4a, 0x66, 0x6c,
	0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x78, 0x74, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f,
	0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
})

var (
	file_inline_jflow_proto_rawDescOnce sync.Once
	file_inline_jflow_proto_rawDescData []byte
)

func file_inline_jflow_proto_rawDescGZIP() []byte {
	file_inline_jflow_proto_rawDescOnce.Do(func() {
		file_inline_jflow_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_inline_jflow_proto_rawDesc), len(file_inline_jflow_proto_rawDesc)))
	})
	return file_inline_jflow_proto_rawDescData
}

var file_inline_jflow_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_inline_jflow_proto_goTypes = []any{
	(*InlineJflow)(nil),            // 0: InlineJflow
	(*InlineJflowNpuStats)(nil),    // 1: InlineJflowNpuStats
	(*JuniperNetworksSensors)(nil), // 2: JuniperNetworksSensors
}
var file_inline_jflow_proto_depIdxs = []int32{
	1, // 0: InlineJflow.npu_stats:type_name -> InlineJflowNpuStats
	2, // 1: inline_jflow_stats_ext:extendee -> JuniperNetworksSensors
	0, // 2: inline_jflow_stats_ext:type_name -> InlineJflow
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	2, // [2:3] is the sub-list for extension type_name
	1, // [1:2] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_inline_jflow_proto_init() }
func file_inline_jflow_proto_init() {
	if File_inline_jflow_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_inline_jflow_proto_rawDesc), len(file_inline_jflow_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_inline_jflow_proto_goTypes,
		DependencyIndexes: file_inline_jflow_proto_depIdxs,
		MessageInfos:      file_inline_jflow_proto_msgTypes,
		ExtensionInfos:    file_inline_jflow_proto_extTypes,
	}.Build()
	File_inline_jflow_proto = out.File
	file_inline_jflow_proto_goTypes = nil
	file_inline_jflow_proto_depIdxs = nil
}
