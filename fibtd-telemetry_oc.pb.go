// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: fibtd-telemetry_oc.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NetworkInstances struct {
	state           protoimpl.MessageState                 `protogen:"open.v1"`
	NetworkInstance []*NetworkInstancesNetworkInstanceList `protobuf:"bytes,151,rep,name=network_instance,json=networkInstance" json:"network_instance,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkInstances) Reset() {
	*x = NetworkInstances{}
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstances) ProtoMessage() {}

func (x *NetworkInstances) ProtoReflect() protoreflect.Message {
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstances.ProtoReflect.Descriptor instead.
func (*NetworkInstances) Descriptor() ([]byte, []int) {
	return file_fibtd_telemetry_oc_proto_rawDescGZIP(), []int{0}
}

func (x *NetworkInstances) GetNetworkInstance() []*NetworkInstancesNetworkInstanceList {
	if x != nil {
		return x.NetworkInstance
	}
	return nil
}

type NetworkInstancesNetworkInstanceList struct {
	state         protoimpl.MessageState                       `protogen:"open.v1"`
	Name          *string                                      `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	Afts          *NetworkInstancesNetworkInstanceListAftsType `protobuf:"bytes,151,opt,name=afts" json:"afts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNetworkInstanceList) Reset() {
	*x = NetworkInstancesNetworkInstanceList{}
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNetworkInstanceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNetworkInstanceList) ProtoMessage() {}

func (x *NetworkInstancesNetworkInstanceList) ProtoReflect() protoreflect.Message {
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNetworkInstanceList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNetworkInstanceList) Descriptor() ([]byte, []int) {
	return file_fibtd_telemetry_oc_proto_rawDescGZIP(), []int{0, 0}
}

func (x *NetworkInstancesNetworkInstanceList) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NetworkInstancesNetworkInstanceList) GetAfts() *NetworkInstancesNetworkInstanceListAftsType {
	if x != nil {
		return x.Afts
	}
	return nil
}

type NetworkInstancesNetworkInstanceListAftsType struct {
	state         protoimpl.MessageState                                        `protogen:"open.v1"`
	Ipv4Unicast   *NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastType   `protobuf:"bytes,151,opt,name=ipv4_unicast,json=ipv4Unicast" json:"ipv4_unicast,omitempty"`
	Ipv6Unicast   *NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastType   `protobuf:"bytes,152,opt,name=ipv6_unicast,json=ipv6Unicast" json:"ipv6_unicast,omitempty"`
	Mpls          *NetworkInstancesNetworkInstanceListAftsTypeMplsType          `protobuf:"bytes,153,opt,name=mpls" json:"mpls,omitempty"`
	NextHopGroups *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsType `protobuf:"bytes,154,opt,name=next_hop_groups,json=nextHopGroups" json:"next_hop_groups,omitempty"`
	NextHops      *NetworkInstancesNetworkInstanceListAftsTypeNextHopsType      `protobuf:"bytes,155,opt,name=next_hops,json=nextHops" json:"next_hops,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNetworkInstanceListAftsType) Reset() {
	*x = NetworkInstancesNetworkInstanceListAftsType{}
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNetworkInstanceListAftsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNetworkInstanceListAftsType) ProtoMessage() {}

func (x *NetworkInstancesNetworkInstanceListAftsType) ProtoReflect() protoreflect.Message {
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNetworkInstanceListAftsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNetworkInstanceListAftsType) Descriptor() ([]byte, []int) {
	return file_fibtd_telemetry_oc_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *NetworkInstancesNetworkInstanceListAftsType) GetIpv4Unicast() *NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastType {
	if x != nil {
		return x.Ipv4Unicast
	}
	return nil
}

func (x *NetworkInstancesNetworkInstanceListAftsType) GetIpv6Unicast() *NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastType {
	if x != nil {
		return x.Ipv6Unicast
	}
	return nil
}

func (x *NetworkInstancesNetworkInstanceListAftsType) GetMpls() *NetworkInstancesNetworkInstanceListAftsTypeMplsType {
	if x != nil {
		return x.Mpls
	}
	return nil
}

func (x *NetworkInstancesNetworkInstanceListAftsType) GetNextHopGroups() *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsType {
	if x != nil {
		return x.NextHopGroups
	}
	return nil
}

func (x *NetworkInstancesNetworkInstanceListAftsType) GetNextHops() *NetworkInstancesNetworkInstanceListAftsTypeNextHopsType {
	if x != nil {
		return x.NextHops
	}
	return nil
}

type NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastType struct {
	state         protoimpl.MessageState                                                     `protogen:"open.v1"`
	Ipv4Entry     []*NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastTypeIpv4EntryList `protobuf:"bytes,151,rep,name=ipv4_entry,json=ipv4Entry" json:"ipv4_entry,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastType) Reset() {
	*x = NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastType{}
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastType) ProtoMessage() {}

func (x *NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastType) ProtoReflect() protoreflect.Message {
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastType) Descriptor() ([]byte, []int) {
	return file_fibtd_telemetry_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastType) GetIpv4Entry() []*NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastTypeIpv4EntryList {
	if x != nil {
		return x.Ipv4Entry
	}
	return nil
}

type NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastType struct {
	state         protoimpl.MessageState                                                     `protogen:"open.v1"`
	Ipv6Entry     []*NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastTypeIpv6EntryList `protobuf:"bytes,151,rep,name=ipv6_entry,json=ipv6Entry" json:"ipv6_entry,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastType) Reset() {
	*x = NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastType{}
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastType) ProtoMessage() {}

func (x *NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastType) ProtoReflect() protoreflect.Message {
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastType) Descriptor() ([]byte, []int) {
	return file_fibtd_telemetry_oc_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastType) GetIpv6Entry() []*NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastTypeIpv6EntryList {
	if x != nil {
		return x.Ipv6Entry
	}
	return nil
}

type NetworkInstancesNetworkInstanceListAftsTypeMplsType struct {
	state         protoimpl.MessageState                                               `protogen:"open.v1"`
	LabelEntry    []*NetworkInstancesNetworkInstanceListAftsTypeMplsTypeLabelEntryList `protobuf:"bytes,151,rep,name=label_entry,json=labelEntry" json:"label_entry,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeMplsType) Reset() {
	*x = NetworkInstancesNetworkInstanceListAftsTypeMplsType{}
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeMplsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNetworkInstanceListAftsTypeMplsType) ProtoMessage() {}

func (x *NetworkInstancesNetworkInstanceListAftsTypeMplsType) ProtoReflect() protoreflect.Message {
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNetworkInstanceListAftsTypeMplsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNetworkInstanceListAftsTypeMplsType) Descriptor() ([]byte, []int) {
	return file_fibtd_telemetry_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeMplsType) GetLabelEntry() []*NetworkInstancesNetworkInstanceListAftsTypeMplsTypeLabelEntryList {
	if x != nil {
		return x.LabelEntry
	}
	return nil
}

type NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsType struct {
	state         protoimpl.MessageState                                                          `protogen:"open.v1"`
	NextHopGroup  []*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupList `protobuf:"bytes,151,rep,name=next_hop_group,json=nextHopGroup" json:"next_hop_group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsType) Reset() {
	*x = NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsType{}
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsType) ProtoMessage() {}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsType) ProtoReflect() protoreflect.Message {
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsType) Descriptor() ([]byte, []int) {
	return file_fibtd_telemetry_oc_proto_rawDescGZIP(), []int{0, 0, 0, 3}
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsType) GetNextHopGroup() []*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupList {
	if x != nil {
		return x.NextHopGroup
	}
	return nil
}

type NetworkInstancesNetworkInstanceListAftsTypeNextHopsType struct {
	state         protoimpl.MessageState                                                `protogen:"open.v1"`
	NextHop       []*NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopList `protobuf:"bytes,151,rep,name=next_hop,json=nextHop" json:"next_hop,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsType) Reset() {
	*x = NetworkInstancesNetworkInstanceListAftsTypeNextHopsType{}
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopsType) ProtoMessage() {}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsType) ProtoReflect() protoreflect.Message {
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNetworkInstanceListAftsTypeNextHopsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopsType) Descriptor() ([]byte, []int) {
	return file_fibtd_telemetry_oc_proto_rawDescGZIP(), []int{0, 0, 0, 4}
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsType) GetNextHop() []*NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopList {
	if x != nil {
		return x.NextHop
	}
	return nil
}

type NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastTypeIpv4EntryList struct {
	state         protoimpl.MessageState                                                            `protogen:"open.v1"`
	Prefix        *string                                                                           `protobuf:"bytes,51,opt,name=prefix" json:"prefix,omitempty"`
	State         *NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastTypeIpv4EntryListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastTypeIpv4EntryList) Reset() {
	*x = NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastTypeIpv4EntryList{}
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastTypeIpv4EntryList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastTypeIpv4EntryList) ProtoMessage() {}

func (x *NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastTypeIpv4EntryList) ProtoReflect() protoreflect.Message {
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastTypeIpv4EntryList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastTypeIpv4EntryList) Descriptor() ([]byte, []int) {
	return file_fibtd_telemetry_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastTypeIpv4EntryList) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastTypeIpv4EntryList) GetState() *NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastTypeIpv4EntryListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastTypeIpv4EntryListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Prefix        *string                `protobuf:"bytes,51,opt,name=prefix" json:"prefix,omitempty"`
	NextHopGroup  *uint64                `protobuf:"varint,52,opt,name=next_hop_group,json=nextHopGroup" json:"next_hop_group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastTypeIpv4EntryListStateType) Reset() {
	*x = NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastTypeIpv4EntryListStateType{}
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastTypeIpv4EntryListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastTypeIpv4EntryListStateType) ProtoMessage() {
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastTypeIpv4EntryListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastTypeIpv4EntryListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastTypeIpv4EntryListStateType) Descriptor() ([]byte, []int) {
	return file_fibtd_telemetry_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0}
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastTypeIpv4EntryListStateType) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastTypeIpv4EntryListStateType) GetNextHopGroup() uint64 {
	if x != nil && x.NextHopGroup != nil {
		return *x.NextHopGroup
	}
	return 0
}

type NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastTypeIpv6EntryList struct {
	state         protoimpl.MessageState                                                            `protogen:"open.v1"`
	Prefix        *string                                                                           `protobuf:"bytes,51,opt,name=prefix" json:"prefix,omitempty"`
	State         *NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastTypeIpv6EntryListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastTypeIpv6EntryList) Reset() {
	*x = NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastTypeIpv6EntryList{}
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastTypeIpv6EntryList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastTypeIpv6EntryList) ProtoMessage() {}

func (x *NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastTypeIpv6EntryList) ProtoReflect() protoreflect.Message {
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastTypeIpv6EntryList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastTypeIpv6EntryList) Descriptor() ([]byte, []int) {
	return file_fibtd_telemetry_oc_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0}
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastTypeIpv6EntryList) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastTypeIpv6EntryList) GetState() *NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastTypeIpv6EntryListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastTypeIpv6EntryListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Prefix        *string                `protobuf:"bytes,51,opt,name=prefix" json:"prefix,omitempty"`
	NextHopGroup  *uint64                `protobuf:"varint,52,opt,name=next_hop_group,json=nextHopGroup" json:"next_hop_group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastTypeIpv6EntryListStateType) Reset() {
	*x = NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastTypeIpv6EntryListStateType{}
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastTypeIpv6EntryListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastTypeIpv6EntryListStateType) ProtoMessage() {
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastTypeIpv6EntryListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastTypeIpv6EntryListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastTypeIpv6EntryListStateType) Descriptor() ([]byte, []int) {
	return file_fibtd_telemetry_oc_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 0}
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastTypeIpv6EntryListStateType) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastTypeIpv6EntryListStateType) GetNextHopGroup() uint64 {
	if x != nil && x.NextHopGroup != nil {
		return *x.NextHopGroup
	}
	return 0
}

type NetworkInstancesNetworkInstanceListAftsTypeMplsTypeLabelEntryList struct {
	state         protoimpl.MessageState                                                      `protogen:"open.v1"`
	Label         *string                                                                     `protobuf:"bytes,51,opt,name=label" json:"label,omitempty"`
	State         *NetworkInstancesNetworkInstanceListAftsTypeMplsTypeLabelEntryListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeMplsTypeLabelEntryList) Reset() {
	*x = NetworkInstancesNetworkInstanceListAftsTypeMplsTypeLabelEntryList{}
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeMplsTypeLabelEntryList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNetworkInstanceListAftsTypeMplsTypeLabelEntryList) ProtoMessage() {}

func (x *NetworkInstancesNetworkInstanceListAftsTypeMplsTypeLabelEntryList) ProtoReflect() protoreflect.Message {
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNetworkInstanceListAftsTypeMplsTypeLabelEntryList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNetworkInstanceListAftsTypeMplsTypeLabelEntryList) Descriptor() ([]byte, []int) {
	return file_fibtd_telemetry_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0}
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeMplsTypeLabelEntryList) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeMplsTypeLabelEntryList) GetState() *NetworkInstancesNetworkInstanceListAftsTypeMplsTypeLabelEntryListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNetworkInstanceListAftsTypeMplsTypeLabelEntryListStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Label                *string                `protobuf:"bytes,51,opt,name=label" json:"label,omitempty"`
	NextHopGroup         *uint64                `protobuf:"varint,52,opt,name=next_hop_group,json=nextHopGroup" json:"next_hop_group,omitempty"`
	PoppedMplsLabelStack []string               `protobuf:"bytes,53,rep,name=popped_mpls_label_stack,json=poppedMplsLabelStack" json:"popped_mpls_label_stack,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeMplsTypeLabelEntryListStateType) Reset() {
	*x = NetworkInstancesNetworkInstanceListAftsTypeMplsTypeLabelEntryListStateType{}
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeMplsTypeLabelEntryListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNetworkInstanceListAftsTypeMplsTypeLabelEntryListStateType) ProtoMessage() {}

func (x *NetworkInstancesNetworkInstanceListAftsTypeMplsTypeLabelEntryListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNetworkInstanceListAftsTypeMplsTypeLabelEntryListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNetworkInstanceListAftsTypeMplsTypeLabelEntryListStateType) Descriptor() ([]byte, []int) {
	return file_fibtd_telemetry_oc_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 0}
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeMplsTypeLabelEntryListStateType) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeMplsTypeLabelEntryListStateType) GetNextHopGroup() uint64 {
	if x != nil && x.NextHopGroup != nil {
		return *x.NextHopGroup
	}
	return 0
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeMplsTypeLabelEntryListStateType) GetPoppedMplsLabelStack() []string {
	if x != nil {
		return x.PoppedMplsLabelStack
	}
	return nil
}

type NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupList struct {
	state                   protoimpl.MessageState                                                                       `protogen:"open.v1"`
	Id                      *uint64                                                                                      `protobuf:"varint,51,opt,name=id" json:"id,omitempty"`
	State                   *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListStateType       `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	NextHops                *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsType    `protobuf:"bytes,152,opt,name=next_hops,json=nextHops" json:"next_hops,omitempty"`
	Conditional             *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalType `protobuf:"bytes,53,opt,name=conditional" json:"conditional,omitempty"`
	JnxNextHopGroupComplete *bool                                                                                        `protobuf:"varint,67,opt,name=jnx_next_hop_group_complete,json=jnxNextHopGroupComplete" json:"jnx_next_hop_group_complete,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupList) Reset() {
	*x = NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupList{}
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupList) ProtoMessage() {}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupList) Descriptor() ([]byte, []int) {
	return file_fibtd_telemetry_oc_proto_rawDescGZIP(), []int{0, 0, 0, 3, 0}
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupList) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupList) GetState() *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupList) GetNextHops() *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsType {
	if x != nil {
		return x.NextHops
	}
	return nil
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupList) GetConditional() *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalType {
	if x != nil {
		return x.Conditional
	}
	return nil
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupList) GetJnxNextHopGroupComplete() bool {
	if x != nil && x.JnxNextHopGroupComplete != nil {
		return *x.JnxNextHopGroupComplete
	}
	return false
}

type NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint64                `protobuf:"varint,51,opt,name=id" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListStateType) Reset() {
	*x = NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListStateType{}
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListStateType) ProtoMessage() {
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListStateType) Descriptor() ([]byte, []int) {
	return file_fibtd_telemetry_oc_proto_rawDescGZIP(), []int{0, 0, 0, 3, 0, 0}
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListStateType) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsType struct {
	state         protoimpl.MessageState                                                                                 `protogen:"open.v1"`
	NextHop       []*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsTypeNextHopList `protobuf:"bytes,151,rep,name=next_hop,json=nextHop" json:"next_hop,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsType) Reset() {
	*x = NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsType{}
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsType) ProtoMessage() {
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsType) ProtoReflect() protoreflect.Message {
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsType) Descriptor() ([]byte, []int) {
	return file_fibtd_telemetry_oc_proto_rawDescGZIP(), []int{0, 0, 0, 3, 0, 1}
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsType) GetNextHop() []*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsTypeNextHopList {
	if x != nil {
		return x.NextHop
	}
	return nil
}

type NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalType struct {
	state         protoimpl.MessageState                                                                                      `protogen:"open.v1"`
	Condition     []*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionList `protobuf:"bytes,54,rep,name=condition" json:"condition,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalType) Reset() {
	*x = NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalType{}
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalType) ProtoMessage() {
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalType) ProtoReflect() protoreflect.Message {
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalType) Descriptor() ([]byte, []int) {
	return file_fibtd_telemetry_oc_proto_rawDescGZIP(), []int{0, 0, 0, 3, 0, 2}
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalType) GetCondition() []*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionList {
	if x != nil {
		return x.Condition
	}
	return nil
}

type NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsTypeNextHopList struct {
	state         protoimpl.MessageState                                                                                        `protogen:"open.v1"`
	Index         *uint64                                                                                                       `protobuf:"varint,51,opt,name=index" json:"index,omitempty"`
	State         *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsTypeNextHopListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsTypeNextHopList) Reset() {
	*x = NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsTypeNextHopList{}
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsTypeNextHopList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsTypeNextHopList) ProtoMessage() {
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsTypeNextHopList) ProtoReflect() protoreflect.Message {
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsTypeNextHopList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsTypeNextHopList) Descriptor() ([]byte, []int) {
	return file_fibtd_telemetry_oc_proto_rawDescGZIP(), []int{0, 0, 0, 3, 0, 1, 0}
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsTypeNextHopList) GetIndex() uint64 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsTypeNextHopList) GetState() *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsTypeNextHopListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsTypeNextHopListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         *uint64                `protobuf:"varint,51,opt,name=index" json:"index,omitempty"`
	Weight        *uint64                `protobuf:"varint,52,opt,name=weight" json:"weight,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsTypeNextHopListStateType) Reset() {
	*x = NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsTypeNextHopListStateType{}
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsTypeNextHopListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsTypeNextHopListStateType) ProtoMessage() {
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsTypeNextHopListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsTypeNextHopListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsTypeNextHopListStateType) Descriptor() ([]byte, []int) {
	return file_fibtd_telemetry_oc_proto_rawDescGZIP(), []int{0, 0, 0, 3, 0, 1, 0, 0}
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsTypeNextHopListStateType) GetIndex() uint64 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsTypeNextHopListStateType) GetWeight() uint64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

type NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionList struct {
	state           protoimpl.MessageState                                                                                                       `protogen:"open.v1"`
	Id              *uint64                                                                                                                      `protobuf:"varint,55,opt,name=id" json:"id,omitempty"`
	State           *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListStateType           `protobuf:"bytes,56,opt,name=state" json:"state,omitempty"`
	InputInterfaces *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesType `protobuf:"bytes,60,opt,name=input_interfaces,json=inputInterfaces" json:"input_interfaces,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionList) Reset() {
	*x = NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionList{}
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionList) ProtoMessage() {
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionList) ProtoReflect() protoreflect.Message {
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionList) Descriptor() ([]byte, []int) {
	return file_fibtd_telemetry_oc_proto_rawDescGZIP(), []int{0, 0, 0, 3, 0, 2, 0}
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionList) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionList) GetState() *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionList) GetInputInterfaces() *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesType {
	if x != nil {
		return x.InputInterfaces
	}
	return nil
}

type NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint64                `protobuf:"varint,57,opt,name=id" json:"id,omitempty"`
	Dscp          []uint32               `protobuf:"varint,58,rep,name=dscp" json:"dscp,omitempty"`
	NextHopGroup  *uint64                `protobuf:"varint,59,opt,name=next_hop_group,json=nextHopGroup" json:"next_hop_group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListStateType) Reset() {
	*x = NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListStateType{}
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListStateType) ProtoMessage() {
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListStateType) Descriptor() ([]byte, []int) {
	return file_fibtd_telemetry_oc_proto_rawDescGZIP(), []int{0, 0, 0, 3, 0, 2, 0, 0}
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListStateType) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListStateType) GetDscp() []uint32 {
	if x != nil {
		return x.Dscp
	}
	return nil
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListStateType) GetNextHopGroup() uint64 {
	if x != nil && x.NextHopGroup != nil {
		return *x.NextHopGroup
	}
	return 0
}

type NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesType struct {
	state          protoimpl.MessageState                                                                                                                           `protogen:"open.v1"`
	InputInterface []*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesTypeInputInterfaceList `protobuf:"bytes,61,rep,name=input_interface,json=inputInterface" json:"input_interface,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesType) Reset() {
	*x = NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesType{}
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesType) ProtoMessage() {
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesType) ProtoReflect() protoreflect.Message {
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesType) Descriptor() ([]byte, []int) {
	return file_fibtd_telemetry_oc_proto_rawDescGZIP(), []int{0, 0, 0, 3, 0, 2, 0, 1}
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesType) GetInputInterface() []*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesTypeInputInterfaceList {
	if x != nil {
		return x.InputInterface
	}
	return nil
}

type NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesTypeInputInterfaceList struct {
	state         protoimpl.MessageState                                                                                                                                  `protogen:"open.v1"`
	Id            *string                                                                                                                                                 `protobuf:"bytes,62,opt,name=id" json:"id,omitempty"`
	State         *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesTypeInputInterfaceListStateType `protobuf:"bytes,63,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesTypeInputInterfaceList) Reset() {
	*x = NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesTypeInputInterfaceList{}
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesTypeInputInterfaceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesTypeInputInterfaceList) ProtoMessage() {
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesTypeInputInterfaceList) ProtoReflect() protoreflect.Message {
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesTypeInputInterfaceList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesTypeInputInterfaceList) Descriptor() ([]byte, []int) {
	return file_fibtd_telemetry_oc_proto_rawDescGZIP(), []int{0, 0, 0, 3, 0, 2, 0, 1, 0}
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesTypeInputInterfaceList) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesTypeInputInterfaceList) GetState() *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesTypeInputInterfaceListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesTypeInputInterfaceListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,64,opt,name=id" json:"id,omitempty"`
	Interface     *string                `protobuf:"bytes,65,opt,name=interface" json:"interface,omitempty"`
	Subinterface  *uint32                `protobuf:"varint,66,opt,name=subinterface" json:"subinterface,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesTypeInputInterfaceListStateType) Reset() {
	*x = NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesTypeInputInterfaceListStateType{}
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesTypeInputInterfaceListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesTypeInputInterfaceListStateType) ProtoMessage() {
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesTypeInputInterfaceListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesTypeInputInterfaceListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesTypeInputInterfaceListStateType) Descriptor() ([]byte, []int) {
	return file_fibtd_telemetry_oc_proto_rawDescGZIP(), []int{0, 0, 0, 3, 0, 2, 0, 1, 0, 0}
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesTypeInputInterfaceListStateType) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesTypeInputInterfaceListStateType) GetInterface() string {
	if x != nil && x.Interface != nil {
		return *x.Interface
	}
	return ""
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesTypeInputInterfaceListStateType) GetSubinterface() uint32 {
	if x != nil && x.Subinterface != nil {
		return *x.Subinterface
	}
	return 0
}

type NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopList struct {
	state         protoimpl.MessageState                                                              `protogen:"open.v1"`
	Index         *uint64                                                                             `protobuf:"varint,51,opt,name=index" json:"index,omitempty"`
	State         *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListStateType        `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	InterfaceRef  *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListInterfaceRefType `protobuf:"bytes,153,opt,name=interface_ref,json=interfaceRef" json:"interface_ref,omitempty"`
	Juniper       *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListJuniperType      `protobuf:"bytes,152,opt,name=juniper" json:"juniper,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopList) Reset() {
	*x = NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopList{}
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopList) ProtoMessage() {}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopList) ProtoReflect() protoreflect.Message {
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopList) Descriptor() ([]byte, []int) {
	return file_fibtd_telemetry_oc_proto_rawDescGZIP(), []int{0, 0, 0, 4, 0}
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopList) GetIndex() uint64 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopList) GetState() *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopList) GetInterfaceRef() *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListInterfaceRefType {
	if x != nil {
		return x.InterfaceRef
	}
	return nil
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopList) GetJuniper() *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListJuniperType {
	if x != nil {
		return x.Juniper
	}
	return nil
}

type NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListStateType struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Index                *uint64                `protobuf:"varint,54,opt,name=index" json:"index,omitempty"`
	IpAddress            *string                `protobuf:"bytes,51,opt,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
	MacAddress           *string                `protobuf:"bytes,52,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
	PushedMplsLabelStack []string               `protobuf:"bytes,53,rep,name=pushed_mpls_label_stack,json=pushedMplsLabelStack" json:"pushed_mpls_label_stack,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListStateType) Reset() {
	*x = NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListStateType{}
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListStateType) ProtoMessage() {}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListStateType) Descriptor() ([]byte, []int) {
	return file_fibtd_telemetry_oc_proto_rawDescGZIP(), []int{0, 0, 0, 4, 0, 0}
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListStateType) GetIndex() uint64 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListStateType) GetIpAddress() string {
	if x != nil && x.IpAddress != nil {
		return *x.IpAddress
	}
	return ""
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListStateType) GetMacAddress() string {
	if x != nil && x.MacAddress != nil {
		return *x.MacAddress
	}
	return ""
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListStateType) GetPushedMplsLabelStack() []string {
	if x != nil {
		return x.PushedMplsLabelStack
	}
	return nil
}

type NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListInterfaceRefType struct {
	state         protoimpl.MessageState                                                                       `protogen:"open.v1"`
	State         *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListInterfaceRefTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListInterfaceRefType) Reset() {
	*x = NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListInterfaceRefType{}
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListInterfaceRefType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListInterfaceRefType) ProtoMessage() {
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListInterfaceRefType) ProtoReflect() protoreflect.Message {
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListInterfaceRefType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListInterfaceRefType) Descriptor() ([]byte, []int) {
	return file_fibtd_telemetry_oc_proto_rawDescGZIP(), []int{0, 0, 0, 4, 0, 1}
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListInterfaceRefType) GetState() *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListInterfaceRefTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListJuniperType struct {
	state         protoimpl.MessageState                                                                  `protogen:"open.v1"`
	State         *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListJuniperTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListJuniperType) Reset() {
	*x = NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListJuniperType{}
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListJuniperType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListJuniperType) ProtoMessage() {
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListJuniperType) ProtoReflect() protoreflect.Message {
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListJuniperType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListJuniperType) Descriptor() ([]byte, []int) {
	return file_fibtd_telemetry_oc_proto_rawDescGZIP(), []int{0, 0, 0, 4, 0, 2}
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListJuniperType) GetState() *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListJuniperTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListInterfaceRefTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Interface     *string                `protobuf:"bytes,51,opt,name=interface" json:"interface,omitempty"`
	Subinterface  *uint32                `protobuf:"varint,52,opt,name=subinterface" json:"subinterface,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListInterfaceRefTypeStateType) Reset() {
	*x = NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListInterfaceRefTypeStateType{}
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListInterfaceRefTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListInterfaceRefTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListInterfaceRefTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListInterfaceRefTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListInterfaceRefTypeStateType) Descriptor() ([]byte, []int) {
	return file_fibtd_telemetry_oc_proto_rawDescGZIP(), []int{0, 0, 0, 4, 0, 1, 0}
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListInterfaceRefTypeStateType) GetInterface() string {
	if x != nil && x.Interface != nil {
		return *x.Interface
	}
	return ""
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListInterfaceRefTypeStateType) GetSubinterface() uint32 {
	if x != nil && x.Subinterface != nil {
		return *x.Subinterface
	}
	return 0
}

type NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListJuniperTypeStateType struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	UnmappedNexthop    *bool                  `protobuf:"varint,51,opt,name=unmapped_nexthop,json=unmappedNexthop" json:"unmapped_nexthop,omitempty"`
	MappedNextHopIndex []uint64               `protobuf:"varint,52,rep,name=mapped_next_hop_index,json=mappedNextHopIndex" json:"mapped_next_hop_index,omitempty"`
	LspId              *uint32                `protobuf:"varint,53,opt,name=lsp_id,json=lspId" json:"lsp_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListJuniperTypeStateType) Reset() {
	*x = NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListJuniperTypeStateType{}
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListJuniperTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListJuniperTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListJuniperTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_fibtd_telemetry_oc_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListJuniperTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListJuniperTypeStateType) Descriptor() ([]byte, []int) {
	return file_fibtd_telemetry_oc_proto_rawDescGZIP(), []int{0, 0, 0, 4, 0, 2, 0}
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListJuniperTypeStateType) GetUnmappedNexthop() bool {
	if x != nil && x.UnmappedNexthop != nil {
		return *x.UnmappedNexthop
	}
	return false
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListJuniperTypeStateType) GetMappedNextHopIndex() []uint64 {
	if x != nil {
		return x.MappedNextHopIndex
	}
	return nil
}

func (x *NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListJuniperTypeStateType) GetLspId() uint32 {
	if x != nil && x.LspId != nil {
		return *x.LspId
	}
	return 0
}

var file_fibtd_telemetry_oc_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*NetworkInstances)(nil),
		Field:         117,
		Name:          "jnpr_network_instances_ext",
		Tag:           "bytes,117,opt,name=jnpr_network_instances_ext",
		Filename:      "fibtd-telemetry_oc.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional network_instances jnpr_network_instances_ext = 117;
	E_JnprNetworkInstancesExt = &file_fibtd_telemetry_oc_proto_extTypes[0]
)

var File_fibtd_telemetry_oc_proto protoreflect.FileDescriptor

var file_fibtd_telemetry_oc_proto_rawDesc = string([]byte{
	0x0a, 0x18, 0x66, 0x69, 0x62, 0x74, 0x64, 0x2d, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x6f, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xaf, 0x2b, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0xc3, 0x2a, 0x0a, 0x15,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x47, 0x0a, 0x04, 0x61, 0x66, 0x74, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x74, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x61, 0x66, 0x74, 0x73, 0x1a, 0xc5, 0x29, 0x0a, 0x09, 0x61, 0x66,
	0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x68, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x74, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x12, 0x68, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x61, 0x66, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x69, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x04, 0x6d,
	0x70, 0x6c, 0x73, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6d, 0x70, 0x6c, 0x73, 0x12, 0x70,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x61, 0x66, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x5f, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x9b, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61,
	0x66, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f,
	0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x73, 0x1a, 0x80, 0x03, 0x0a, 0x11, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x74, 0x0a, 0x0a, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x09, 0x69, 0x70, 0x76, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0xf4, 0x01,
	0x0a, 0x0f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x76, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x5f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x74, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x4a, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x24,
	0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x1a, 0x80, 0x03, 0x0a, 0x11, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x74, 0x0a, 0x0a, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x54, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x74, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x69, 0x70, 0x76, 0x36, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x1a, 0xf4, 0x01, 0x0a, 0x0f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x76, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66,
	0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x4a, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0xa0, 0x03, 0x0a, 0x09, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x6f, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0xa1, 0x02, 0x0a, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08,
	0x01, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x6f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x61, 0x66, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x7f, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x24, 0x0a,
	0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x35,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x70, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x4d, 0x70, 0x6c, 0x73,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x1a, 0xcf, 0x12, 0x0a, 0x14, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0xb1, 0x11, 0x0a, 0x13, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40,
	0x02, 0x08, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x7d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x66, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x61, 0x66, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x68, 0x6f, 0x70, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f,
	0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x73, 0x12, 0x8e, 0x01, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x61, 0x66, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x1b, 0x6a, 0x6e, 0x78, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68,
	0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6a, 0x6e, 0x78, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x1a, 0x1c, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x1a, 0xb0,
	0x03, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x94, 0x01, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x97,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x78, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x61, 0x66, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68,
	0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x07, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x1a, 0x86, 0x02, 0x0a, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x9b, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x83, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x3a, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x1a, 0xd8, 0x09, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x36, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0xa7, 0x08, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x9d, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x86, 0x01, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xbd, 0x01, 0x0a,
	0x10, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x91, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x61, 0x66, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x1a, 0x56, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x73,
	0x63, 0x70, 0x18, 0x3a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x73, 0x63, 0x70, 0x12, 0x24,
	0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x3b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x1a, 0xc5, 0x04, 0x0a, 0x15, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xd0,
	0x01, 0x0a, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x18, 0x3d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0xa6, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x1a, 0xd8, 0x02, 0x0a, 0x14, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x12, 0xc8, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0xb1, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x74,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x5e, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xc2, 0x09, 0x0a,
	0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x6b, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x97, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x74,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x1a, 0xc2, 0x08, 0x0a,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82,
	0x40, 0x02, 0x08, 0x01, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x71, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x88,
	0x01, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x61, 0x66, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x68, 0x6f, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x68, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x77, 0x0a, 0x07, 0x6a, 0x75, 0x6e,
	0x69, 0x70, 0x65, 0x72, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6a, 0x75, 0x6e,
	0x69, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6a, 0x75, 0x6e, 0x69, 0x70,
	0x65, 0x72, 0x1a, 0x99, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x36, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x75, 0x73, 0x68, 0x65,
	0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x18, 0x35, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64,
	0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x1a, 0xeb,
	0x01, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x61, 0x66, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x68, 0x6f, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68,
	0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x4e, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0x92, 0x02, 0x0a,
	0x0c, 0x6a, 0x75, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x7e, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x67, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x66, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6a,
	0x75, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x81, 0x01,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x34, 0x20, 0x03, 0x28, 0x04, 0x52, 0x12, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x73,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x73, 0x70, 0x49,
	0x64, 0x3a, 0x68, 0x0a, 0x1a, 0x6a, 0x6e, 0x70, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x12,
	0x17, 0x2e, 0x4a, 0x75, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x17, 0x6a, 0x6e, 0x70, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x78, 0x74, 0x42, 0x1d, 0x5a, 0x1b, 0x2e,
	0x2f, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
})

var (
	file_fibtd_telemetry_oc_proto_rawDescOnce sync.Once
	file_fibtd_telemetry_oc_proto_rawDescData []byte
)

func file_fibtd_telemetry_oc_proto_rawDescGZIP() []byte {
	file_fibtd_telemetry_oc_proto_rawDescOnce.Do(func() {
		file_fibtd_telemetry_oc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_fibtd_telemetry_oc_proto_rawDesc), len(file_fibtd_telemetry_oc_proto_rawDesc)))
	})
	return file_fibtd_telemetry_oc_proto_rawDescData
}

var file_fibtd_telemetry_oc_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_fibtd_telemetry_oc_proto_goTypes = []any{
	(*NetworkInstances)(nil),                                                                                                                                       // 0: network_instances
	(*NetworkInstancesNetworkInstanceList)(nil),                                                                                                                    // 1: network_instances.network_instance_list
	(*NetworkInstancesNetworkInstanceListAftsType)(nil),                                                                                                            // 2: network_instances.network_instance_list.afts_type
	(*NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastType)(nil),                                                                                             // 3: network_instances.network_instance_list.afts_type.ipv4_unicast_type
	(*NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastType)(nil),                                                                                             // 4: network_instances.network_instance_list.afts_type.ipv6_unicast_type
	(*NetworkInstancesNetworkInstanceListAftsTypeMplsType)(nil),                                                                                                    // 5: network_instances.network_instance_list.afts_type.mpls_type
	(*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsType)(nil),                                                                                           // 6: network_instances.network_instance_list.afts_type.next_hop_groups_type
	(*NetworkInstancesNetworkInstanceListAftsTypeNextHopsType)(nil),                                                                                                // 7: network_instances.network_instance_list.afts_type.next_hops_type
	(*NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastTypeIpv4EntryList)(nil),                                                                                // 8: network_instances.network_instance_list.afts_type.ipv4_unicast_type.ipv4_entry_list
	(*NetworkInstancesNetworkInstanceListAftsTypeIpv4UnicastTypeIpv4EntryListStateType)(nil),                                                                       // 9: network_instances.network_instance_list.afts_type.ipv4_unicast_type.ipv4_entry_list.state_type
	(*NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastTypeIpv6EntryList)(nil),                                                                                // 10: network_instances.network_instance_list.afts_type.ipv6_unicast_type.ipv6_entry_list
	(*NetworkInstancesNetworkInstanceListAftsTypeIpv6UnicastTypeIpv6EntryListStateType)(nil),                                                                       // 11: network_instances.network_instance_list.afts_type.ipv6_unicast_type.ipv6_entry_list.state_type
	(*NetworkInstancesNetworkInstanceListAftsTypeMplsTypeLabelEntryList)(nil),                                                                                      // 12: network_instances.network_instance_list.afts_type.mpls_type.label_entry_list
	(*NetworkInstancesNetworkInstanceListAftsTypeMplsTypeLabelEntryListStateType)(nil),                                                                             // 13: network_instances.network_instance_list.afts_type.mpls_type.label_entry_list.state_type
	(*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupList)(nil),                                                                           // 14: network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group_list
	(*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListStateType)(nil),                                                                  // 15: network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group_list.state_type
	(*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsType)(nil),                                                               // 16: network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group_list.next_hops_type
	(*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalType)(nil),                                                            // 17: network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group_list.conditional_type
	(*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsTypeNextHopList)(nil),                                                    // 18: network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group_list.next_hops_type.next_hop_list
	(*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListNextHopsTypeNextHopListStateType)(nil),                                           // 19: network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group_list.next_hops_type.next_hop_list.state_type
	(*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionList)(nil),                                               // 20: network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group_list.conditional_type.condition_list
	(*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListStateType)(nil),                                      // 21: network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group_list.conditional_type.condition_list.state_type
	(*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesType)(nil),                            // 22: network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group_list.conditional_type.condition_list.input_interfaces_type
	(*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesTypeInputInterfaceList)(nil),          // 23: network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group_list.conditional_type.condition_list.input_interfaces_type.input_interface_list
	(*NetworkInstancesNetworkInstanceListAftsTypeNextHopGroupsTypeNextHopGroupListConditionalTypeConditionListInputInterfacesTypeInputInterfaceListStateType)(nil), // 24: network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group_list.conditional_type.condition_list.input_interfaces_type.input_interface_list.state_type
	(*NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopList)(nil),                                                                                     // 25: network_instances.network_instance_list.afts_type.next_hops_type.next_hop_list
	(*NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListStateType)(nil),                                                                            // 26: network_instances.network_instance_list.afts_type.next_hops_type.next_hop_list.state_type
	(*NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListInterfaceRefType)(nil),                                                                     // 27: network_instances.network_instance_list.afts_type.next_hops_type.next_hop_list.interface_ref_type
	(*NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListJuniperType)(nil),                                                                          // 28: network_instances.network_instance_list.afts_type.next_hops_type.next_hop_list.juniper_type
	(*NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListInterfaceRefTypeStateType)(nil),                                                            // 29: network_instances.network_instance_list.afts_type.next_hops_type.next_hop_list.interface_ref_type.state_type
	(*NetworkInstancesNetworkInstanceListAftsTypeNextHopsTypeNextHopListJuniperTypeStateType)(nil),                                                                 // 30: network_instances.network_instance_list.afts_type.next_hops_type.next_hop_list.juniper_type.state_type
	(*JuniperNetworksSensors)(nil), // 31: JuniperNetworksSensors
}
var file_fibtd_telemetry_oc_proto_depIdxs = []int32{
	1,  // 0: network_instances.network_instance:type_name -> network_instances.network_instance_list
	2,  // 1: network_instances.network_instance_list.afts:type_name -> network_instances.network_instance_list.afts_type
	3,  // 2: network_instances.network_instance_list.afts_type.ipv4_unicast:type_name -> network_instances.network_instance_list.afts_type.ipv4_unicast_type
	4,  // 3: network_instances.network_instance_list.afts_type.ipv6_unicast:type_name -> network_instances.network_instance_list.afts_type.ipv6_unicast_type
	5,  // 4: network_instances.network_instance_list.afts_type.mpls:type_name -> network_instances.network_instance_list.afts_type.mpls_type
	6,  // 5: network_instances.network_instance_list.afts_type.next_hop_groups:type_name -> network_instances.network_instance_list.afts_type.next_hop_groups_type
	7,  // 6: network_instances.network_instance_list.afts_type.next_hops:type_name -> network_instances.network_instance_list.afts_type.next_hops_type
	8,  // 7: network_instances.network_instance_list.afts_type.ipv4_unicast_type.ipv4_entry:type_name -> network_instances.network_instance_list.afts_type.ipv4_unicast_type.ipv4_entry_list
	10, // 8: network_instances.network_instance_list.afts_type.ipv6_unicast_type.ipv6_entry:type_name -> network_instances.network_instance_list.afts_type.ipv6_unicast_type.ipv6_entry_list
	12, // 9: network_instances.network_instance_list.afts_type.mpls_type.label_entry:type_name -> network_instances.network_instance_list.afts_type.mpls_type.label_entry_list
	14, // 10: network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group:type_name -> network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group_list
	25, // 11: network_instances.network_instance_list.afts_type.next_hops_type.next_hop:type_name -> network_instances.network_instance_list.afts_type.next_hops_type.next_hop_list
	9,  // 12: network_instances.network_instance_list.afts_type.ipv4_unicast_type.ipv4_entry_list.state:type_name -> network_instances.network_instance_list.afts_type.ipv4_unicast_type.ipv4_entry_list.state_type
	11, // 13: network_instances.network_instance_list.afts_type.ipv6_unicast_type.ipv6_entry_list.state:type_name -> network_instances.network_instance_list.afts_type.ipv6_unicast_type.ipv6_entry_list.state_type
	13, // 14: network_instances.network_instance_list.afts_type.mpls_type.label_entry_list.state:type_name -> network_instances.network_instance_list.afts_type.mpls_type.label_entry_list.state_type
	15, // 15: network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group_list.state:type_name -> network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group_list.state_type
	16, // 16: network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group_list.next_hops:type_name -> network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group_list.next_hops_type
	17, // 17: network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group_list.conditional:type_name -> network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group_list.conditional_type
	18, // 18: network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group_list.next_hops_type.next_hop:type_name -> network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group_list.next_hops_type.next_hop_list
	20, // 19: network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group_list.conditional_type.condition:type_name -> network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group_list.conditional_type.condition_list
	19, // 20: network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group_list.next_hops_type.next_hop_list.state:type_name -> network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group_list.next_hops_type.next_hop_list.state_type
	21, // 21: network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group_list.conditional_type.condition_list.state:type_name -> network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group_list.conditional_type.condition_list.state_type
	22, // 22: network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group_list.conditional_type.condition_list.input_interfaces:type_name -> network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group_list.conditional_type.condition_list.input_interfaces_type
	23, // 23: network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group_list.conditional_type.condition_list.input_interfaces_type.input_interface:type_name -> network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group_list.conditional_type.condition_list.input_interfaces_type.input_interface_list
	24, // 24: network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group_list.conditional_type.condition_list.input_interfaces_type.input_interface_list.state:type_name -> network_instances.network_instance_list.afts_type.next_hop_groups_type.next_hop_group_list.conditional_type.condition_list.input_interfaces_type.input_interface_list.state_type
	26, // 25: network_instances.network_instance_list.afts_type.next_hops_type.next_hop_list.state:type_name -> network_instances.network_instance_list.afts_type.next_hops_type.next_hop_list.state_type
	27, // 26: network_instances.network_instance_list.afts_type.next_hops_type.next_hop_list.interface_ref:type_name -> network_instances.network_instance_list.afts_type.next_hops_type.next_hop_list.interface_ref_type
	28, // 27: network_instances.network_instance_list.afts_type.next_hops_type.next_hop_list.juniper:type_name -> network_instances.network_instance_list.afts_type.next_hops_type.next_hop_list.juniper_type
	29, // 28: network_instances.network_instance_list.afts_type.next_hops_type.next_hop_list.interface_ref_type.state:type_name -> network_instances.network_instance_list.afts_type.next_hops_type.next_hop_list.interface_ref_type.state_type
	30, // 29: network_instances.network_instance_list.afts_type.next_hops_type.next_hop_list.juniper_type.state:type_name -> network_instances.network_instance_list.afts_type.next_hops_type.next_hop_list.juniper_type.state_type
	31, // 30: jnpr_network_instances_ext:extendee -> JuniperNetworksSensors
	0,  // 31: jnpr_network_instances_ext:type_name -> network_instances
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	31, // [31:32] is the sub-list for extension type_name
	30, // [30:31] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_fibtd_telemetry_oc_proto_init() }
func file_fibtd_telemetry_oc_proto_init() {
	if File_fibtd_telemetry_oc_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_fibtd_telemetry_oc_proto_rawDesc), len(file_fibtd_telemetry_oc_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_fibtd_telemetry_oc_proto_goTypes,
		DependencyIndexes: file_fibtd_telemetry_oc_proto_depIdxs,
		MessageInfos:      file_fibtd_telemetry_oc_proto_msgTypes,
		ExtensionInfos:    file_fibtd_telemetry_oc_proto_extTypes,
	}.Build()
	File_fibtd_telemetry_oc_proto = out.File
	file_fibtd_telemetry_oc_proto_goTypes = nil
	file_fibtd_telemetry_oc_proto_depIdxs = nil
}
