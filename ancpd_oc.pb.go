// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: ancpd_oc.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JunosAncp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	System        *JunosAncpSystemType   `protobuf:"bytes,151,opt,name=system" json:"system,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosAncp) Reset() {
	*x = JunosAncp{}
	mi := &file_ancpd_oc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosAncp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosAncp) ProtoMessage() {}

func (x *JunosAncp) ProtoReflect() protoreflect.Message {
	mi := &file_ancpd_oc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosAncp.ProtoReflect.Descriptor instead.
func (*JunosAncp) Descriptor() ([]byte, []int) {
	return file_ancpd_oc_proto_rawDescGZIP(), []int{0}
}

func (x *JunosAncp) GetSystem() *JunosAncpSystemType {
	if x != nil {
		return x.System
	}
	return nil
}

type JunosAncpSystemType struct {
	state                protoimpl.MessageState                       `protogen:"open.v1"`
	SubscriberManagement *JunosAncpSystemTypeSubscriberManagementType `protobuf:"bytes,151,opt,name=subscriber_management,json=subscriberManagement" json:"subscriber_management,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *JunosAncpSystemType) Reset() {
	*x = JunosAncpSystemType{}
	mi := &file_ancpd_oc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosAncpSystemType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosAncpSystemType) ProtoMessage() {}

func (x *JunosAncpSystemType) ProtoReflect() protoreflect.Message {
	mi := &file_ancpd_oc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosAncpSystemType.ProtoReflect.Descriptor instead.
func (*JunosAncpSystemType) Descriptor() ([]byte, []int) {
	return file_ancpd_oc_proto_rawDescGZIP(), []int{0, 0}
}

func (x *JunosAncpSystemType) GetSubscriberManagement() *JunosAncpSystemTypeSubscriberManagementType {
	if x != nil {
		return x.SubscriberManagement
	}
	return nil
}

type JunosAncpSystemTypeSubscriberManagementType struct {
	state         protoimpl.MessageState                                        `protogen:"open.v1"`
	AccessNetwork *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType `protobuf:"bytes,151,opt,name=access_network,json=accessNetwork" json:"access_network,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosAncpSystemTypeSubscriberManagementType) Reset() {
	*x = JunosAncpSystemTypeSubscriberManagementType{}
	mi := &file_ancpd_oc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosAncpSystemTypeSubscriberManagementType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosAncpSystemTypeSubscriberManagementType) ProtoMessage() {}

func (x *JunosAncpSystemTypeSubscriberManagementType) ProtoReflect() protoreflect.Message {
	mi := &file_ancpd_oc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosAncpSystemTypeSubscriberManagementType.ProtoReflect.Descriptor instead.
func (*JunosAncpSystemTypeSubscriberManagementType) Descriptor() ([]byte, []int) {
	return file_ancpd_oc_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *JunosAncpSystemTypeSubscriberManagementType) GetAccessNetwork() *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType {
	if x != nil {
		return x.AccessNetwork
	}
	return nil
}

type JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType struct {
	state         protoimpl.MessageState                                                `protogen:"open.v1"`
	Ancp          *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType `protobuf:"bytes,151,opt,name=ancp" json:"ancp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType) Reset() {
	*x = JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType{}
	mi := &file_ancpd_oc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType) ProtoMessage() {}

func (x *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType) ProtoReflect() protoreflect.Message {
	mi := &file_ancpd_oc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType.ProtoReflect.Descriptor instead.
func (*JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType) Descriptor() ([]byte, []int) {
	return file_ancpd_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType) GetAncp() *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType {
	if x != nil {
		return x.Ancp
	}
	return nil
}

type JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType struct {
	state         protoimpl.MessageState                                                            `protogen:"open.v1"`
	Protocol      *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType `protobuf:"bytes,151,opt,name=protocol" json:"protocol,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType) Reset() {
	*x = JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType{}
	mi := &file_ancpd_oc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType) ProtoMessage() {}

func (x *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType) ProtoReflect() protoreflect.Message {
	mi := &file_ancpd_oc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType.ProtoReflect.Descriptor instead.
func (*JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType) Descriptor() ([]byte, []int) {
	return file_ancpd_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType) GetProtocol() *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType {
	if x != nil {
		return x.Protocol
	}
	return nil
}

type JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	ConfiguredNeighborCount     *uint32                `protobuf:"varint,51,opt,name=configured_neighbor_count,json=configuredNeighborCount" json:"configured_neighbor_count,omitempty"`
	EstablishingNeighborCount   *uint32                `protobuf:"varint,52,opt,name=establishing_neighbor_count,json=establishingNeighborCount" json:"establishing_neighbor_count,omitempty"`
	EstablishedNeighborCount    *uint32                `protobuf:"varint,53,opt,name=established_neighbor_count,json=establishedNeighborCount" json:"established_neighbor_count,omitempty"`
	NotEstablishedNeighborCount *uint32                `protobuf:"varint,54,opt,name=not_established_neighbor_count,json=notEstablishedNeighborCount" json:"not_established_neighbor_count,omitempty"`
	TotalNeighborCount          *uint32                `protobuf:"varint,55,opt,name=total_neighbor_count,json=totalNeighborCount" json:"total_neighbor_count,omitempty"`
	MappedStaticSubscriberCount *uint32                `protobuf:"varint,56,opt,name=mapped_static_subscriber_count,json=mappedStaticSubscriberCount" json:"mapped_static_subscriber_count,omitempty"`
	PortUpCount                 *uint64                `protobuf:"varint,57,opt,name=port_up_count,json=portUpCount" json:"port_up_count,omitempty"`
	PortDownCount               *uint64                `protobuf:"varint,58,opt,name=port_down_count,json=portDownCount" json:"port_down_count,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) Reset() {
	*x = JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType{}
	mi := &file_ancpd_oc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) ProtoMessage() {
}

func (x *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) ProtoReflect() protoreflect.Message {
	mi := &file_ancpd_oc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType.ProtoReflect.Descriptor instead.
func (*JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) Descriptor() ([]byte, []int) {
	return file_ancpd_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0}
}

func (x *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) GetConfiguredNeighborCount() uint32 {
	if x != nil && x.ConfiguredNeighborCount != nil {
		return *x.ConfiguredNeighborCount
	}
	return 0
}

func (x *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) GetEstablishingNeighborCount() uint32 {
	if x != nil && x.EstablishingNeighborCount != nil {
		return *x.EstablishingNeighborCount
	}
	return 0
}

func (x *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) GetEstablishedNeighborCount() uint32 {
	if x != nil && x.EstablishedNeighborCount != nil {
		return *x.EstablishedNeighborCount
	}
	return 0
}

func (x *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) GetNotEstablishedNeighborCount() uint32 {
	if x != nil && x.NotEstablishedNeighborCount != nil {
		return *x.NotEstablishedNeighborCount
	}
	return 0
}

func (x *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) GetTotalNeighborCount() uint32 {
	if x != nil && x.TotalNeighborCount != nil {
		return *x.TotalNeighborCount
	}
	return 0
}

func (x *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) GetMappedStaticSubscriberCount() uint32 {
	if x != nil && x.MappedStaticSubscriberCount != nil {
		return *x.MappedStaticSubscriberCount
	}
	return 0
}

func (x *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) GetPortUpCount() uint64 {
	if x != nil && x.PortUpCount != nil {
		return *x.PortUpCount
	}
	return 0
}

func (x *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) GetPortDownCount() uint64 {
	if x != nil && x.PortDownCount != nil {
		return *x.PortDownCount
	}
	return 0
}

var file_ancpd_oc_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*JunosAncp)(nil),
		Field:         32,
		Name:          "jnpr_junos_ancp_ext",
		Tag:           "bytes,32,opt,name=jnpr_junos_ancp_ext",
		Filename:      "ancpd_oc.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional junos_ancp jnpr_junos_ancp_ext = 32;
	E_JnprJunosAncpExt = &file_ancpd_oc_proto_extTypes[0]
)

var File_ancpd_oc_proto protoreflect.FileDescriptor

var file_ancpd_oc_proto_rawDesc = string([]byte{
	0x0a, 0x0e, 0x61, 0x6e, 0x63, 0x70, 0x64, 0x5f, 0x6f, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x13, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x08, 0x0a, 0x0a, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f,
	0x61, 0x6e, 0x63, 0x70, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x97,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x61, 0x6e,
	0x63, 0x70, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x1a, 0xe4, 0x07, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x68, 0x0a, 0x15, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x61,
	0x6e, 0x63, 0x70, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x14, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x1a, 0xea, 0x06, 0x0a, 0x1a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x6e, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73,
	0x5f, 0x61, 0x6e, 0x63, 0x70, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x1a,
	0xdb, 0x05, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x65, 0x0a, 0x04, 0x61, 0x6e, 0x63, 0x70, 0x18,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x61,
	0x6e, 0x63, 0x70, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61,
	0x6e, 0x63, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x61, 0x6e, 0x63, 0x70, 0x1a, 0xdc,
	0x04, 0x0a, 0x09, 0x61, 0x6e, 0x63, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x7b, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x5e, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x61, 0x6e, 0x63, 0x70, 0x2e, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x6e, 0x63, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0xd1, 0x03, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1b, 0x65, 0x73, 0x74, 0x61, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x65, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x65, 0x73, 0x74, 0x61, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x65, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x1e, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6e,
	0x6f, 0x74, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x1e,
	0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x70,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f,
	0x77, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x53, 0x0a,
	0x13, 0x6a, 0x6e, 0x70, 0x72, 0x5f, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x61, 0x6e, 0x63, 0x70,
	0x5f, 0x65, 0x78, 0x74, 0x12, 0x17, 0x2e, 0x4a, 0x75, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x61, 0x6e, 0x63, 0x70,
	0x52, 0x10, 0x6a, 0x6e, 0x70, 0x72, 0x4a, 0x75, 0x6e, 0x6f, 0x73, 0x41, 0x6e, 0x63, 0x70, 0x45,
	0x78, 0x74, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65,
})

var (
	file_ancpd_oc_proto_rawDescOnce sync.Once
	file_ancpd_oc_proto_rawDescData []byte
)

func file_ancpd_oc_proto_rawDescGZIP() []byte {
	file_ancpd_oc_proto_rawDescOnce.Do(func() {
		file_ancpd_oc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ancpd_oc_proto_rawDesc), len(file_ancpd_oc_proto_rawDesc)))
	})
	return file_ancpd_oc_proto_rawDescData
}

var file_ancpd_oc_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_ancpd_oc_proto_goTypes = []any{
	(*JunosAncp)(nil),                                                                        // 0: junos_ancp
	(*JunosAncpSystemType)(nil),                                                              // 1: junos_ancp.system_type
	(*JunosAncpSystemTypeSubscriberManagementType)(nil),                                      // 2: junos_ancp.system_type.subscriber_management_type
	(*JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType)(nil),                     // 3: junos_ancp.system_type.subscriber_management_type.access_network_type
	(*JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType)(nil),             // 4: junos_ancp.system_type.subscriber_management_type.access_network_type.ancp_type
	(*JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType)(nil), // 5: junos_ancp.system_type.subscriber_management_type.access_network_type.ancp_type.protocol_type
	(*JuniperNetworksSensors)(nil),                                                           // 6: JuniperNetworksSensors
}
var file_ancpd_oc_proto_depIdxs = []int32{
	1, // 0: junos_ancp.system:type_name -> junos_ancp.system_type
	2, // 1: junos_ancp.system_type.subscriber_management:type_name -> junos_ancp.system_type.subscriber_management_type
	3, // 2: junos_ancp.system_type.subscriber_management_type.access_network:type_name -> junos_ancp.system_type.subscriber_management_type.access_network_type
	4, // 3: junos_ancp.system_type.subscriber_management_type.access_network_type.ancp:type_name -> junos_ancp.system_type.subscriber_management_type.access_network_type.ancp_type
	5, // 4: junos_ancp.system_type.subscriber_management_type.access_network_type.ancp_type.protocol:type_name -> junos_ancp.system_type.subscriber_management_type.access_network_type.ancp_type.protocol_type
	6, // 5: jnpr_junos_ancp_ext:extendee -> JuniperNetworksSensors
	0, // 6: jnpr_junos_ancp_ext:type_name -> junos_ancp
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	6, // [6:7] is the sub-list for extension type_name
	5, // [5:6] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_ancpd_oc_proto_init() }
func file_ancpd_oc_proto_init() {
	if File_ancpd_oc_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ancpd_oc_proto_rawDesc), len(file_ancpd_oc_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_ancpd_oc_proto_goTypes,
		DependencyIndexes: file_ancpd_oc_proto_depIdxs,
		MessageInfos:      file_ancpd_oc_proto_msgTypes,
		ExtensionInfos:    file_ancpd_oc_proto_extTypes,
	}.Build()
	File_ancpd_oc_proto = out.File
	file_ancpd_oc_proto_goTypes = nil
	file_ancpd_oc_proto_depIdxs = nil
}
