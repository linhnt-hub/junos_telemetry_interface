// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: pfe_ddos_oc.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DdosStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Group         []*DdosStatsGroupList  `protobuf:"bytes,152,rep,name=group" json:"group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DdosStats) Reset() {
	*x = DdosStats{}
	mi := &file_pfe_ddos_oc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DdosStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DdosStats) ProtoMessage() {}

func (x *DdosStats) ProtoReflect() protoreflect.Message {
	mi := &file_pfe_ddos_oc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DdosStats.ProtoReflect.Descriptor instead.
func (*DdosStats) Descriptor() ([]byte, []int) {
	return file_pfe_ddos_oc_proto_rawDescGZIP(), []int{0}
}

func (x *DdosStats) GetGroup() []*DdosStatsGroupList {
	if x != nil {
		return x.Group
	}
	return nil
}

type DdosStatsGroupList struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	GroupName     *string                              `protobuf:"bytes,153,opt,name=group_name,json=groupName" json:"group_name,omitempty"`
	GroupId       *uint32                              `protobuf:"varint,154,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	ProtocolStats *DdosStatsGroupListProtocolStatsType `protobuf:"bytes,155,opt,name=protocol_stats,json=protocolStats" json:"protocol_stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DdosStatsGroupList) Reset() {
	*x = DdosStatsGroupList{}
	mi := &file_pfe_ddos_oc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DdosStatsGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DdosStatsGroupList) ProtoMessage() {}

func (x *DdosStatsGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_pfe_ddos_oc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DdosStatsGroupList.ProtoReflect.Descriptor instead.
func (*DdosStatsGroupList) Descriptor() ([]byte, []int) {
	return file_pfe_ddos_oc_proto_rawDescGZIP(), []int{0, 0}
}

func (x *DdosStatsGroupList) GetGroupName() string {
	if x != nil && x.GroupName != nil {
		return *x.GroupName
	}
	return ""
}

func (x *DdosStatsGroupList) GetGroupId() uint32 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *DdosStatsGroupList) GetProtocolStats() *DdosStatsGroupListProtocolStatsType {
	if x != nil {
		return x.ProtocolStats
	}
	return nil
}

type DdosStatsGroupListProtocolStatsType struct {
	state         protoimpl.MessageState                             `protogen:"open.v1"`
	Protocol      []*DdosStatsGroupListProtocolStatsTypeProtocolList `protobuf:"bytes,156,rep,name=protocol" json:"protocol,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DdosStatsGroupListProtocolStatsType) Reset() {
	*x = DdosStatsGroupListProtocolStatsType{}
	mi := &file_pfe_ddos_oc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DdosStatsGroupListProtocolStatsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DdosStatsGroupListProtocolStatsType) ProtoMessage() {}

func (x *DdosStatsGroupListProtocolStatsType) ProtoReflect() protoreflect.Message {
	mi := &file_pfe_ddos_oc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DdosStatsGroupListProtocolStatsType.ProtoReflect.Descriptor instead.
func (*DdosStatsGroupListProtocolStatsType) Descriptor() ([]byte, []int) {
	return file_pfe_ddos_oc_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *DdosStatsGroupListProtocolStatsType) GetProtocol() []*DdosStatsGroupListProtocolStatsTypeProtocolList {
	if x != nil {
		return x.Protocol
	}
	return nil
}

type DdosStatsGroupListProtocolStatsTypeProtocolList struct {
	state         protoimpl.MessageState                                          `protogen:"open.v1"`
	ProtocolName  *string                                                         `protobuf:"bytes,157,opt,name=protocol_name,json=protocolName" json:"protocol_name,omitempty"`
	ProtocolId    *uint32                                                         `protobuf:"varint,158,opt,name=protocol_id,json=protocolId" json:"protocol_id,omitempty"`
	LocaleStats   *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType `protobuf:"bytes,159,opt,name=locale_stats,json=localeStats" json:"locale_stats,omitempty"`
	FlowStats     *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType   `protobuf:"bytes,161,opt,name=flow_stats,json=flowStats" json:"flow_stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolList) Reset() {
	*x = DdosStatsGroupListProtocolStatsTypeProtocolList{}
	mi := &file_pfe_ddos_oc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DdosStatsGroupListProtocolStatsTypeProtocolList) ProtoMessage() {}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolList) ProtoReflect() protoreflect.Message {
	mi := &file_pfe_ddos_oc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DdosStatsGroupListProtocolStatsTypeProtocolList.ProtoReflect.Descriptor instead.
func (*DdosStatsGroupListProtocolStatsTypeProtocolList) Descriptor() ([]byte, []int) {
	return file_pfe_ddos_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolList) GetProtocolName() string {
	if x != nil && x.ProtocolName != nil {
		return *x.ProtocolName
	}
	return ""
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolList) GetProtocolId() uint32 {
	if x != nil && x.ProtocolId != nil {
		return *x.ProtocolId
	}
	return 0
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolList) GetLocaleStats() *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType {
	if x != nil {
		return x.LocaleStats
	}
	return nil
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolList) GetFlowStats() *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType {
	if x != nil {
		return x.FlowStats
	}
	return nil
}

type DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType struct {
	state         protoimpl.MessageState                                                      `protogen:"open.v1"`
	Locale        []*DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList `protobuf:"bytes,160,rep,name=locale" json:"locale,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType) Reset() {
	*x = DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType{}
	mi := &file_pfe_ddos_oc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType) ProtoMessage() {}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType) ProtoReflect() protoreflect.Message {
	mi := &file_pfe_ddos_oc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType.ProtoReflect.Descriptor instead.
func (*DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType) Descriptor() ([]byte, []int) {
	return file_pfe_ddos_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType) GetLocale() []*DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList {
	if x != nil {
		return x.Locale
	}
	return nil
}

type DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType struct {
	state         protoimpl.MessageState                                                  `protogen:"open.v1"`
	Flow          []*DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList `protobuf:"bytes,180,rep,name=flow" json:"flow,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType) Reset() {
	*x = DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType{}
	mi := &file_pfe_ddos_oc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType) ProtoMessage() {}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType) ProtoReflect() protoreflect.Message {
	mi := &file_pfe_ddos_oc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType.ProtoReflect.Descriptor instead.
func (*DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType) Descriptor() ([]byte, []int) {
	return file_pfe_ddos_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1}
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType) GetFlow() []*DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList {
	if x != nil {
		return x.Flow
	}
	return nil
}

type DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList struct {
	state                    protoimpl.MessageState                                                                 `protogen:"open.v1"`
	Location                 *string                                                                                `protobuf:"bytes,162,opt,name=location" json:"location,omitempty"`
	Received                 *uint64                                                                                `protobuf:"varint,163,opt,name=received" json:"received,omitempty"`
	ArrivedPolicer           *uint64                                                                                `protobuf:"varint,164,opt,name=arrived_policer,json=arrivedPolicer" json:"arrived_policer,omitempty"`
	DroppedIndividualPolicer *uint64                                                                                `protobuf:"varint,165,opt,name=dropped_individual_policer,json=droppedIndividualPolicer" json:"dropped_individual_policer,omitempty"`
	DroppedAggregatePolicer  *uint64                                                                                `protobuf:"varint,166,opt,name=dropped_aggregate_policer,json=droppedAggregatePolicer" json:"dropped_aggregate_policer,omitempty"`
	DroppedIndividualFlow    *uint64                                                                                `protobuf:"varint,167,opt,name=dropped_individual_flow,json=droppedIndividualFlow" json:"dropped_individual_flow,omitempty"`
	DroppedAggregateFlow     *uint64                                                                                `protobuf:"varint,168,opt,name=dropped_aggregate_flow,json=droppedAggregateFlow" json:"dropped_aggregate_flow,omitempty"`
	TotalDropped             *uint64                                                                                `protobuf:"varint,169,opt,name=total_dropped,json=totalDropped" json:"total_dropped,omitempty"`
	FinalPassed              *uint64                                                                                `protobuf:"varint,170,opt,name=final_passed,json=finalPassed" json:"final_passed,omitempty"`
	ArrivalRate              *uint64                                                                                `protobuf:"varint,171,opt,name=arrival_rate,json=arrivalRate" json:"arrival_rate,omitempty"`
	MaxArrivalRate           *uint64                                                                                `protobuf:"varint,173,opt,name=max_arrival_rate,json=maxArrivalRate" json:"max_arrival_rate,omitempty"`
	PassRate                 *uint64                                                                                `protobuf:"varint,172,opt,name=pass_rate,json=passRate" json:"pass_rate,omitempty"`
	Violation                *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType `protobuf:"bytes,174,opt,name=violation" json:"violation,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) Reset() {
	*x = DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList{}
	mi := &file_pfe_ddos_oc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) ProtoMessage() {}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) ProtoReflect() protoreflect.Message {
	mi := &file_pfe_ddos_oc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList.ProtoReflect.Descriptor instead.
func (*DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) Descriptor() ([]byte, []int) {
	return file_pfe_ddos_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0}
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) GetReceived() uint64 {
	if x != nil && x.Received != nil {
		return *x.Received
	}
	return 0
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) GetArrivedPolicer() uint64 {
	if x != nil && x.ArrivedPolicer != nil {
		return *x.ArrivedPolicer
	}
	return 0
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) GetDroppedIndividualPolicer() uint64 {
	if x != nil && x.DroppedIndividualPolicer != nil {
		return *x.DroppedIndividualPolicer
	}
	return 0
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) GetDroppedAggregatePolicer() uint64 {
	if x != nil && x.DroppedAggregatePolicer != nil {
		return *x.DroppedAggregatePolicer
	}
	return 0
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) GetDroppedIndividualFlow() uint64 {
	if x != nil && x.DroppedIndividualFlow != nil {
		return *x.DroppedIndividualFlow
	}
	return 0
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) GetDroppedAggregateFlow() uint64 {
	if x != nil && x.DroppedAggregateFlow != nil {
		return *x.DroppedAggregateFlow
	}
	return 0
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) GetTotalDropped() uint64 {
	if x != nil && x.TotalDropped != nil {
		return *x.TotalDropped
	}
	return 0
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) GetFinalPassed() uint64 {
	if x != nil && x.FinalPassed != nil {
		return *x.FinalPassed
	}
	return 0
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) GetArrivalRate() uint64 {
	if x != nil && x.ArrivalRate != nil {
		return *x.ArrivalRate
	}
	return 0
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) GetMaxArrivalRate() uint64 {
	if x != nil && x.MaxArrivalRate != nil {
		return *x.MaxArrivalRate
	}
	return 0
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) GetPassRate() uint64 {
	if x != nil && x.PassRate != nil {
		return *x.PassRate
	}
	return 0
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) GetViolation() *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType {
	if x != nil {
		return x.Violation
	}
	return nil
}

type DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	PolicerState              *string                `protobuf:"bytes,175,opt,name=policer_state,json=policerState" json:"policer_state,omitempty"`
	PolicerViolationCount     *uint32                `protobuf:"varint,176,opt,name=policer_violation_count,json=policerViolationCount" json:"policer_violation_count,omitempty"`
	PolicerViolationStartTime *uint64                `protobuf:"varint,177,opt,name=policer_violation_start_time,json=policerViolationStartTime" json:"policer_violation_start_time,omitempty"`
	PolicerViolationEndTime   *uint64                `protobuf:"varint,178,opt,name=policer_violation_end_time,json=policerViolationEndTime" json:"policer_violation_end_time,omitempty"`
	PolicerViolationDuration  *uint64                `protobuf:"varint,179,opt,name=policer_violation_duration,json=policerViolationDuration" json:"policer_violation_duration,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType) Reset() {
	*x = DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType{}
	mi := &file_pfe_ddos_oc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType) ProtoMessage() {
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType) ProtoReflect() protoreflect.Message {
	mi := &file_pfe_ddos_oc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType.ProtoReflect.Descriptor instead.
func (*DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType) Descriptor() ([]byte, []int) {
	return file_pfe_ddos_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0}
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType) GetPolicerState() string {
	if x != nil && x.PolicerState != nil {
		return *x.PolicerState
	}
	return ""
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType) GetPolicerViolationCount() uint32 {
	if x != nil && x.PolicerViolationCount != nil {
		return *x.PolicerViolationCount
	}
	return 0
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType) GetPolicerViolationStartTime() uint64 {
	if x != nil && x.PolicerViolationStartTime != nil {
		return *x.PolicerViolationStartTime
	}
	return 0
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType) GetPolicerViolationEndTime() uint64 {
	if x != nil && x.PolicerViolationEndTime != nil {
		return *x.PolicerViolationEndTime
	}
	return 0
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType) GetPolicerViolationDuration() uint64 {
	if x != nil && x.PolicerViolationDuration != nil {
		return *x.PolicerViolationDuration
	}
	return 0
}

type DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList struct {
	state         protoimpl.MessageState                                                                 `protogen:"open.v1"`
	FlowType      *string                                                                                `protobuf:"bytes,181,opt,name=flow_type,json=flowType" json:"flow_type,omitempty"`
	FlowCount     *uint64                                                                                `protobuf:"varint,182,opt,name=flow_count,json=flowCount" json:"flow_count,omitempty"`
	FlowInfoStats *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType `protobuf:"bytes,183,opt,name=flow_info_stats,json=flowInfoStats" json:"flow_info_stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList) Reset() {
	*x = DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList{}
	mi := &file_pfe_ddos_oc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList) ProtoMessage() {}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList) ProtoReflect() protoreflect.Message {
	mi := &file_pfe_ddos_oc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList.ProtoReflect.Descriptor instead.
func (*DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList) Descriptor() ([]byte, []int) {
	return file_pfe_ddos_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0}
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList) GetFlowType() string {
	if x != nil && x.FlowType != nil {
		return *x.FlowType
	}
	return ""
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList) GetFlowCount() uint64 {
	if x != nil && x.FlowCount != nil {
		return *x.FlowCount
	}
	return 0
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList) GetFlowInfoStats() *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType {
	if x != nil {
		return x.FlowInfoStats
	}
	return nil
}

type DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType struct {
	state         protoimpl.MessageState                                                                               `protogen:"open.v1"`
	FlowInfo      []*DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList `protobuf:"bytes,184,rep,name=flow_info,json=flowInfo" json:"flow_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType) Reset() {
	*x = DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType{}
	mi := &file_pfe_ddos_oc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType) ProtoMessage() {
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType) ProtoReflect() protoreflect.Message {
	mi := &file_pfe_ddos_oc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType.ProtoReflect.Descriptor instead.
func (*DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType) Descriptor() ([]byte, []int) {
	return file_pfe_ddos_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 0}
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType) GetFlowInfo() []*DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList {
	if x != nil {
		return x.FlowInfo
	}
	return nil
}

type DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Ifl              *uint64                `protobuf:"varint,185,opt,name=ifl" json:"ifl,omitempty"`
	TimeFound        *uint64                `protobuf:"varint,186,opt,name=time_found,json=timeFound" json:"time_found,omitempty"`
	TimeLastViolated *uint64                `protobuf:"varint,187,opt,name=time_last_violated,json=timeLastViolated" json:"time_last_violated,omitempty"`
	Rate             *uint64                `protobuf:"varint,188,opt,name=rate" json:"rate,omitempty"`
	Packets          *uint64                `protobuf:"varint,189,opt,name=packets" json:"packets,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList) Reset() {
	*x = DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList{}
	mi := &file_pfe_ddos_oc_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList) ProtoMessage() {
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_pfe_ddos_oc_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList.ProtoReflect.Descriptor instead.
func (*DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList) Descriptor() ([]byte, []int) {
	return file_pfe_ddos_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 0, 0}
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList) GetIfl() uint64 {
	if x != nil && x.Ifl != nil {
		return *x.Ifl
	}
	return 0
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList) GetTimeFound() uint64 {
	if x != nil && x.TimeFound != nil {
		return *x.TimeFound
	}
	return 0
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList) GetTimeLastViolated() uint64 {
	if x != nil && x.TimeLastViolated != nil {
		return *x.TimeLastViolated
	}
	return 0
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList) GetRate() uint64 {
	if x != nil && x.Rate != nil {
		return *x.Rate
	}
	return 0
}

func (x *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList) GetPackets() uint64 {
	if x != nil && x.Packets != nil {
		return *x.Packets
	}
	return 0
}

var file_pfe_ddos_oc_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*DdosStats)(nil),
		Field:         126,
		Name:          "jnpr_ddos_stats_ext",
		Tag:           "bytes,126,opt,name=jnpr_ddos_stats_ext",
		Filename:      "pfe_ddos_oc.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional ddos_stats jnpr_ddos_stats_ext = 126;
	E_JnprDdosStatsExt = &file_pfe_ddos_oc_proto_extTypes[0]
)

var File_pfe_ddos_oc_proto protoreflect.FileDescriptor

var file_pfe_ddos_oc_proto_rawDesc = string([]byte{
	0x0a, 0x11, 0x70, 0x66, 0x65, 0x5f, 0x64, 0x64, 0x6f, 0x73, 0x5f, 0x6f, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74,
	0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x13, 0x0a, 0x0a, 0x64, 0x64, 0x6f,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x98, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x64, 0x6f, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0xe9, 0x12, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08,
	0x01, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x64, 0x6f, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0xc3, 0x11, 0x0a,
	0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x55, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x9c, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x64, 0x6f, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0xd4, 0x10, 0x0a, 0x0d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x9d,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x6e, 0x0a, 0x0c,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x9f, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x64, 0x64, 0x6f, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x68, 0x0a, 0x0a,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0xa1, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x48, 0x2e, 0x64, 0x64, 0x6f, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x6c, 0x6f,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0xda, 0x08, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x6f, 0x0a, 0x06,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0xa0, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e,
	0x64, 0x64, 0x6f, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x1a, 0xd3, 0x07,
	0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0xa3, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65,
	0x72, 0x18, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65,
	0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x1a, 0x64, 0x72, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x18, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x64,
	0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x19, 0x64, 0x72, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x65, 0x72, 0x18, 0xa6, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x64, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x17, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x18,
	0xa7, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x49,
	0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x35, 0x0a,
	0x16, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0xa8, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14,
	0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x46, 0x6c, 0x6f, 0x77, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0xab,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61,
	0x6c, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0xad, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d,
	0x61, 0x78, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0xac, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x09,
	0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xae, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x65, 0x2e, 0x64, 0x64, 0x6f, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0xae, 0x02, 0x0a, 0x0e, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x17, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xb0, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x1c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x5f,
	0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x65, 0x72, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65,
	0x72, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0xb2, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x65, 0x72, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x1a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x5f,
	0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x65, 0x72, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0xbc, 0x05, 0x0a, 0x0f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x67, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18,
	0xb4, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x64, 0x64, 0x6f, 0x73, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77,
	0x1a, 0xbf, 0x04, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xb5, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x90, 0x01, 0x0a, 0x0f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x67,
	0x2e, 0x64, 0x64, 0x6f, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66,
	0x6f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0xd9, 0x02, 0x0a, 0x14, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x94, 0x01, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xb8, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x76, 0x2e, 0x64, 0x64, 0x6f, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x66, 0x6c,
	0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0xa9, 0x01, 0x0a, 0x0e, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x03, 0x69, 0x66, 0x6c,
	0x18, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x03,
	0x69, 0x66, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0xba, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0xbb, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x13, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0xbc, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x3a, 0x53, 0x0a, 0x13, 0x6a, 0x6e, 0x70, 0x72, 0x5f, 0x64, 0x64, 0x6f, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x12, 0x17, 0x2e, 0x4a, 0x75, 0x6e, 0x69,
	0x70, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x73, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x64, 0x64, 0x6f, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x52, 0x10, 0x6a, 0x6e, 0x70, 0x72, 0x44, 0x64, 0x6f, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x45, 0x78, 0x74, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x6a, 0x75, 0x6e,
	0x6f, 0x73, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
})

var (
	file_pfe_ddos_oc_proto_rawDescOnce sync.Once
	file_pfe_ddos_oc_proto_rawDescData []byte
)

func file_pfe_ddos_oc_proto_rawDescGZIP() []byte {
	file_pfe_ddos_oc_proto_rawDescOnce.Do(func() {
		file_pfe_ddos_oc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pfe_ddos_oc_proto_rawDesc), len(file_pfe_ddos_oc_proto_rawDesc)))
	})
	return file_pfe_ddos_oc_proto_rawDescData
}

var file_pfe_ddos_oc_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_pfe_ddos_oc_proto_goTypes = []any{
	(*DdosStats)(nil),                                                                                         // 0: ddos_stats
	(*DdosStatsGroupList)(nil),                                                                                // 1: ddos_stats.group_list
	(*DdosStatsGroupListProtocolStatsType)(nil),                                                               // 2: ddos_stats.group_list.protocol_stats_type
	(*DdosStatsGroupListProtocolStatsTypeProtocolList)(nil),                                                   // 3: ddos_stats.group_list.protocol_stats_type.protocol_list
	(*DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType)(nil),                                    // 4: ddos_stats.group_list.protocol_stats_type.protocol_list.locale_stats_type
	(*DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType)(nil),                                      // 5: ddos_stats.group_list.protocol_stats_type.protocol_list.flow_stats_type
	(*DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList)(nil),                          // 6: ddos_stats.group_list.protocol_stats_type.protocol_list.locale_stats_type.locale_list
	(*DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType)(nil),             // 7: ddos_stats.group_list.protocol_stats_type.protocol_list.locale_stats_type.locale_list.violation_type
	(*DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList)(nil),                              // 8: ddos_stats.group_list.protocol_stats_type.protocol_list.flow_stats_type.flow_list
	(*DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType)(nil),             // 9: ddos_stats.group_list.protocol_stats_type.protocol_list.flow_stats_type.flow_list.flow_info_stats_type
	(*DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList)(nil), // 10: ddos_stats.group_list.protocol_stats_type.protocol_list.flow_stats_type.flow_list.flow_info_stats_type.flow_info_list
	(*JuniperNetworksSensors)(nil),                                                                            // 11: JuniperNetworksSensors
}
var file_pfe_ddos_oc_proto_depIdxs = []int32{
	1,  // 0: ddos_stats.group:type_name -> ddos_stats.group_list
	2,  // 1: ddos_stats.group_list.protocol_stats:type_name -> ddos_stats.group_list.protocol_stats_type
	3,  // 2: ddos_stats.group_list.protocol_stats_type.protocol:type_name -> ddos_stats.group_list.protocol_stats_type.protocol_list
	4,  // 3: ddos_stats.group_list.protocol_stats_type.protocol_list.locale_stats:type_name -> ddos_stats.group_list.protocol_stats_type.protocol_list.locale_stats_type
	5,  // 4: ddos_stats.group_list.protocol_stats_type.protocol_list.flow_stats:type_name -> ddos_stats.group_list.protocol_stats_type.protocol_list.flow_stats_type
	6,  // 5: ddos_stats.group_list.protocol_stats_type.protocol_list.locale_stats_type.locale:type_name -> ddos_stats.group_list.protocol_stats_type.protocol_list.locale_stats_type.locale_list
	8,  // 6: ddos_stats.group_list.protocol_stats_type.protocol_list.flow_stats_type.flow:type_name -> ddos_stats.group_list.protocol_stats_type.protocol_list.flow_stats_type.flow_list
	7,  // 7: ddos_stats.group_list.protocol_stats_type.protocol_list.locale_stats_type.locale_list.violation:type_name -> ddos_stats.group_list.protocol_stats_type.protocol_list.locale_stats_type.locale_list.violation_type
	9,  // 8: ddos_stats.group_list.protocol_stats_type.protocol_list.flow_stats_type.flow_list.flow_info_stats:type_name -> ddos_stats.group_list.protocol_stats_type.protocol_list.flow_stats_type.flow_list.flow_info_stats_type
	10, // 9: ddos_stats.group_list.protocol_stats_type.protocol_list.flow_stats_type.flow_list.flow_info_stats_type.flow_info:type_name -> ddos_stats.group_list.protocol_stats_type.protocol_list.flow_stats_type.flow_list.flow_info_stats_type.flow_info_list
	11, // 10: jnpr_ddos_stats_ext:extendee -> JuniperNetworksSensors
	0,  // 11: jnpr_ddos_stats_ext:type_name -> ddos_stats
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	11, // [11:12] is the sub-list for extension type_name
	10, // [10:11] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_pfe_ddos_oc_proto_init() }
func file_pfe_ddos_oc_proto_init() {
	if File_pfe_ddos_oc_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pfe_ddos_oc_proto_rawDesc), len(file_pfe_ddos_oc_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_pfe_ddos_oc_proto_goTypes,
		DependencyIndexes: file_pfe_ddos_oc_proto_depIdxs,
		MessageInfos:      file_pfe_ddos_oc_proto_msgTypes,
		ExtensionInfos:    file_pfe_ddos_oc_proto_extTypes,
	}.Build()
	File_pfe_ddos_oc_proto = out.File
	file_pfe_ddos_oc_proto_goTypes = nil
	file_pfe_ddos_oc_proto_depIdxs = nil
}
