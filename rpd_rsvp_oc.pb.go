// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: rpd_rsvp_oc.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NetworkInstancesRsvp struct {
	state           protoimpl.MessageState                     `protogen:"open.v1"`
	NetworkInstance []*NetworkInstancesRsvpNetworkInstanceList `protobuf:"bytes,151,rep,name=network_instance,json=networkInstance" json:"network_instance,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkInstancesRsvp) Reset() {
	*x = NetworkInstancesRsvp{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvp) ProtoMessage() {}

func (x *NetworkInstancesRsvp) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvp.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvp) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0}
}

func (x *NetworkInstancesRsvp) GetNetworkInstance() []*NetworkInstancesRsvpNetworkInstanceList {
	if x != nil {
		return x.NetworkInstance
	}
	return nil
}

type NetworkInstancesRsvpNetworkInstanceList struct {
	state         protoimpl.MessageState                           `protogen:"open.v1"`
	Name          *string                                          `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	Mpls          *NetworkInstancesRsvpNetworkInstanceListMplsType `protobuf:"bytes,151,opt,name=mpls" json:"mpls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceList) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceList{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceList) ProtoMessage() {}

func (x *NetworkInstancesRsvpNetworkInstanceList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceList) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0}
}

func (x *NetworkInstancesRsvpNetworkInstanceList) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NetworkInstancesRsvpNetworkInstanceList) GetMpls() *NetworkInstancesRsvpNetworkInstanceListMplsType {
	if x != nil {
		return x.Mpls
	}
	return nil
}

type NetworkInstancesRsvpNetworkInstanceListMplsType struct {
	state              protoimpl.MessageState                                                 `protogen:"open.v1"`
	SignalingProtocols *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsType `protobuf:"bytes,151,opt,name=signaling_protocols,json=signalingProtocols" json:"signaling_protocols,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsType) ProtoMessage() {}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsType) GetSignalingProtocols() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsType {
	if x != nil {
		return x.SignalingProtocols
	}
	return nil
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsType struct {
	state         protoimpl.MessageState                                                           `protogen:"open.v1"`
	RsvpTe        *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeType `protobuf:"bytes,151,opt,name=rsvp_te,json=rsvpTe" json:"rsvp_te,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsType) ProtoMessage() {}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsType) GetRsvpTe() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeType {
	if x != nil {
		return x.RsvpTe
	}
	return nil
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeType struct {
	state               protoimpl.MessageState                                                                                  `protogen:"open.v1"`
	Sessions            *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsType            `protobuf:"bytes,151,opt,name=sessions" json:"sessions,omitempty"`
	Neighbors           *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsType           `protobuf:"bytes,152,opt,name=neighbors" json:"neighbors,omitempty"`
	Global              *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalType              `protobuf:"bytes,153,opt,name=global" json:"global,omitempty"`
	InterfaceAttributes *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesType `protobuf:"bytes,154,opt,name=interface_attributes,json=interfaceAttributes" json:"interface_attributes,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeType) GetSessions() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsType {
	if x != nil {
		return x.Sessions
	}
	return nil
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeType) GetNeighbors() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsType {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeType) GetGlobal() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalType {
	if x != nil {
		return x.Global
	}
	return nil
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeType) GetInterfaceAttributes() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesType {
	if x != nil {
		return x.InterfaceAttributes
	}
	return nil
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsType struct {
	state         protoimpl.MessageState                                                                                    `protogen:"open.v1"`
	Session       []*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionList `protobuf:"bytes,151,rep,name=session" json:"session,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsType) GetSession() []*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionList {
	if x != nil {
		return x.Session
	}
	return nil
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsType struct {
	state         protoimpl.MessageState                                                                                      `protogen:"open.v1"`
	Neighbor      []*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsTypeNeighborList `protobuf:"bytes,151,rep,name=neighbor" json:"neighbor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsType) GetNeighbor() []*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsTypeNeighborList {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalType struct {
	state           protoimpl.MessageState                                                                                        `protogen:"open.v1"`
	GracefulRestart *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeGracefulRestartType `protobuf:"bytes,151,opt,name=graceful_restart,json=gracefulRestart" json:"graceful_restart,omitempty"`
	SoftPreemption  *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeSoftPreemptionType  `protobuf:"bytes,152,opt,name=soft_preemption,json=softPreemption" json:"soft_preemption,omitempty"`
	Hellos          *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeHellosType          `protobuf:"bytes,153,opt,name=hellos" json:"hellos,omitempty"`
	State           *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateType           `protobuf:"bytes,154,opt,name=state" json:"state,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalType) GetGracefulRestart() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeGracefulRestartType {
	if x != nil {
		return x.GracefulRestart
	}
	return nil
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalType) GetSoftPreemption() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeSoftPreemptionType {
	if x != nil {
		return x.SoftPreemption
	}
	return nil
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalType) GetHellos() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeHellosType {
	if x != nil {
		return x.Hellos
	}
	return nil
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalType) GetState() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesType struct {
	state         protoimpl.MessageState                                                                                                 `protogen:"open.v1"`
	Interface     []*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceList `protobuf:"bytes,151,rep,name=interface" json:"interface,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 3}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesType) GetInterface() []*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceList {
	if x != nil {
		return x.Interface
	}
	return nil
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionList struct {
	state                protoimpl.MessageState                                                                                                          `protogen:"open.v1"`
	LocalIndex           *uint64                                                                                                                         `protobuf:"varint,51,opt,name=local_index,json=localIndex" json:"local_index,omitempty"`
	Name                 *string                                                                                                                         `protobuf:"bytes,52,opt,name=name" json:"name,omitempty"`
	LspId                *uint32                                                                                                                         `protobuf:"varint,53,opt,name=lsp_id,json=lspId" json:"lsp_id,omitempty"`
	Subcode              *string                                                                                                                         `protobuf:"bytes,54,opt,name=subcode" json:"subcode,omitempty"`
	RecordRouteObjects   *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsType   `protobuf:"bytes,151,opt,name=record_route_objects,json=recordRouteObjects" json:"record_route_objects,omitempty"`
	State                *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateType                `protobuf:"bytes,153,opt,name=state" json:"state,omitempty"`
	ExplicitRouteObjects *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsType `protobuf:"bytes,152,opt,name=explicit_route_objects,json=explicitRouteObjects" json:"explicit_route_objects,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionList) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionList{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionList) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionList) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionList) GetLocalIndex() uint64 {
	if x != nil && x.LocalIndex != nil {
		return *x.LocalIndex
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionList) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionList) GetLspId() uint32 {
	if x != nil && x.LspId != nil {
		return *x.LspId
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionList) GetSubcode() string {
	if x != nil && x.Subcode != nil {
		return *x.Subcode
	}
	return ""
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionList) GetRecordRouteObjects() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsType {
	if x != nil {
		return x.RecordRouteObjects
	}
	return nil
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionList) GetState() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionList) GetExplicitRouteObjects() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsType {
	if x != nil {
		return x.ExplicitRouteObjects
	}
	return nil
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsType struct {
	state             protoimpl.MessageState                                                                                                                               `protogen:"open.v1"`
	RecordRouteObject []*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsTypeRecordRouteObjectList `protobuf:"bytes,151,rep,name=record_route_object,json=recordRouteObject" json:"record_route_object,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsType) GetRecordRouteObject() []*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsTypeRecordRouteObjectList {
	if x != nil {
		return x.RecordRouteObject
	}
	return nil
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateType struct {
	state               protoimpl.MessageState                                                                                                          `protogen:"open.v1"`
	LocalIndex          *uint64                                                                                                                         `protobuf:"varint,51,opt,name=local_index,json=localIndex" json:"local_index,omitempty"`
	SourceAddress       *string                                                                                                                         `protobuf:"bytes,52,opt,name=source_address,json=sourceAddress" json:"source_address,omitempty"`
	DestinationAddress  *string                                                                                                                         `protobuf:"bytes,53,opt,name=destination_address,json=destinationAddress" json:"destination_address,omitempty"`
	TunnelId            *uint32                                                                                                                         `protobuf:"varint,54,opt,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	LspId               *uint32                                                                                                                         `protobuf:"varint,55,opt,name=lsp_id,json=lspId" json:"lsp_id,omitempty"`
	SessionName         *string                                                                                                                         `protobuf:"bytes,56,opt,name=session_name,json=sessionName" json:"session_name,omitempty"`
	Status              *string                                                                                                                         `protobuf:"bytes,57,opt,name=status" json:"status,omitempty"`
	Type                *string                                                                                                                         `protobuf:"bytes,59,opt,name=type" json:"type,omitempty"`
	ProtectionRequested *string                                                                                                                         `protobuf:"bytes,58,opt,name=protection_requested,json=protectionRequested" json:"protection_requested,omitempty"`
	LabelIn             *string                                                                                                                         `protobuf:"bytes,60,opt,name=label_in,json=labelIn" json:"label_in,omitempty"`
	LabelOut            *string                                                                                                                         `protobuf:"bytes,61,opt,name=label_out,json=labelOut" json:"label_out,omitempty"`
	SenderTspec         *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateTypeSenderTspecType `protobuf:"bytes,151,opt,name=sender_tspec,json=senderTspec" json:"sender_tspec,omitempty"`
	NotifyStatus        *string                                                                                                                         `protobuf:"bytes,62,opt,name=notify_status,json=notifyStatus" json:"notify_status,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 1}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateType) GetLocalIndex() uint64 {
	if x != nil && x.LocalIndex != nil {
		return *x.LocalIndex
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateType) GetSourceAddress() string {
	if x != nil && x.SourceAddress != nil {
		return *x.SourceAddress
	}
	return ""
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateType) GetDestinationAddress() string {
	if x != nil && x.DestinationAddress != nil {
		return *x.DestinationAddress
	}
	return ""
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateType) GetTunnelId() uint32 {
	if x != nil && x.TunnelId != nil {
		return *x.TunnelId
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateType) GetLspId() uint32 {
	if x != nil && x.LspId != nil {
		return *x.LspId
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateType) GetSessionName() string {
	if x != nil && x.SessionName != nil {
		return *x.SessionName
	}
	return ""
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateType) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateType) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateType) GetProtectionRequested() string {
	if x != nil && x.ProtectionRequested != nil {
		return *x.ProtectionRequested
	}
	return ""
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateType) GetLabelIn() string {
	if x != nil && x.LabelIn != nil {
		return *x.LabelIn
	}
	return ""
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateType) GetLabelOut() string {
	if x != nil && x.LabelOut != nil {
		return *x.LabelOut
	}
	return ""
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateType) GetSenderTspec() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateTypeSenderTspecType {
	if x != nil {
		return x.SenderTspec
	}
	return nil
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateType) GetNotifyStatus() string {
	if x != nil && x.NotifyStatus != nil {
		return *x.NotifyStatus
	}
	return ""
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsType struct {
	state               protoimpl.MessageState                                                                                                                                   `protogen:"open.v1"`
	ExplicitRouteObject []*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsTypeExplicitRouteObjectList `protobuf:"bytes,151,rep,name=explicit_route_object,json=explicitRouteObject" json:"explicit_route_object,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 2}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsType) GetExplicitRouteObject() []*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsTypeExplicitRouteObjectList {
	if x != nil {
		return x.ExplicitRouteObject
	}
	return nil
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsTypeRecordRouteObjectList struct {
	state         protoimpl.MessageState                                                                                                                                      `protogen:"open.v1"`
	Index         *uint32                                                                                                                                                     `protobuf:"varint,51,opt,name=index" json:"index,omitempty"`
	State         *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsTypeRecordRouteObjectListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsTypeRecordRouteObjectList) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsTypeRecordRouteObjectList{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsTypeRecordRouteObjectList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsTypeRecordRouteObjectList) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsTypeRecordRouteObjectList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsTypeRecordRouteObjectList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsTypeRecordRouteObjectList) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsTypeRecordRouteObjectList) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsTypeRecordRouteObjectList) GetState() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsTypeRecordRouteObjectListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsTypeRecordRouteObjectListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         *uint32                `protobuf:"varint,51,opt,name=index" json:"index,omitempty"`
	Address       *string                `protobuf:"bytes,52,opt,name=address" json:"address,omitempty"`
	ReportedLabel *string                `protobuf:"bytes,53,opt,name=reported_label,json=reportedLabel" json:"reported_label,omitempty"`
	ReportedFlags *uint32                `protobuf:"varint,54,opt,name=reported_flags,json=reportedFlags" json:"reported_flags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsTypeRecordRouteObjectListStateType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsTypeRecordRouteObjectListStateType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsTypeRecordRouteObjectListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsTypeRecordRouteObjectListStateType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsTypeRecordRouteObjectListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsTypeRecordRouteObjectListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsTypeRecordRouteObjectListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsTypeRecordRouteObjectListStateType) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsTypeRecordRouteObjectListStateType) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsTypeRecordRouteObjectListStateType) GetReportedLabel() string {
	if x != nil && x.ReportedLabel != nil {
		return *x.ReportedLabel
	}
	return ""
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsTypeRecordRouteObjectListStateType) GetReportedFlags() uint32 {
	if x != nil && x.ReportedFlags != nil {
		return *x.ReportedFlags
	}
	return 0
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateTypeSenderTspecType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rate          *string                `protobuf:"bytes,51,opt,name=rate" json:"rate,omitempty"`
	Size          *string                `protobuf:"bytes,52,opt,name=size" json:"size,omitempty"`
	PeakDataRate  *string                `protobuf:"bytes,53,opt,name=peak_data_rate,json=peakDataRate" json:"peak_data_rate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateTypeSenderTspecType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateTypeSenderTspecType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateTypeSenderTspecType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateTypeSenderTspecType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateTypeSenderTspecType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateTypeSenderTspecType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateTypeSenderTspecType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 1, 0}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateTypeSenderTspecType) GetRate() string {
	if x != nil && x.Rate != nil {
		return *x.Rate
	}
	return ""
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateTypeSenderTspecType) GetSize() string {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return ""
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateTypeSenderTspecType) GetPeakDataRate() string {
	if x != nil && x.PeakDataRate != nil {
		return *x.PeakDataRate
	}
	return ""
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsTypeExplicitRouteObjectList struct {
	state         protoimpl.MessageState                                                                                                                                          `protogen:"open.v1"`
	Index         *uint32                                                                                                                                                         `protobuf:"varint,52,opt,name=index" json:"index,omitempty"`
	State         *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsTypeExplicitRouteObjectListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsTypeExplicitRouteObjectList) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsTypeExplicitRouteObjectList{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsTypeExplicitRouteObjectList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsTypeExplicitRouteObjectList) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsTypeExplicitRouteObjectList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsTypeExplicitRouteObjectList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsTypeExplicitRouteObjectList) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 2, 0}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsTypeExplicitRouteObjectList) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsTypeExplicitRouteObjectList) GetState() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsTypeExplicitRouteObjectListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsTypeExplicitRouteObjectListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         *uint32                `protobuf:"varint,51,opt,name=index" json:"index,omitempty"`
	Address       *string                `protobuf:"bytes,52,opt,name=address" json:"address,omitempty"`
	HopType       *string                `protobuf:"bytes,53,opt,name=hop_type,json=hopType" json:"hop_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsTypeExplicitRouteObjectListStateType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsTypeExplicitRouteObjectListStateType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsTypeExplicitRouteObjectListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsTypeExplicitRouteObjectListStateType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsTypeExplicitRouteObjectListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsTypeExplicitRouteObjectListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsTypeExplicitRouteObjectListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 2, 0, 0}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsTypeExplicitRouteObjectListStateType) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsTypeExplicitRouteObjectListStateType) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsTypeExplicitRouteObjectListStateType) GetHopType() string {
	if x != nil && x.HopType != nil {
		return *x.HopType
	}
	return ""
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsTypeNeighborList struct {
	state         protoimpl.MessageState                                                                                             `protogen:"open.v1"`
	Address       *string                                                                                                            `protobuf:"bytes,51,opt,name=address" json:"address,omitempty"`
	State         *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsTypeNeighborListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsTypeNeighborList) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsTypeNeighborList{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsTypeNeighborList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsTypeNeighborList) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsTypeNeighborList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsTypeNeighborList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsTypeNeighborList) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsTypeNeighborList) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsTypeNeighborList) GetState() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsTypeNeighborListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsTypeNeighborListStateType struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Address           *string                `protobuf:"bytes,51,opt,name=address" json:"address,omitempty"`
	DetectedInterface *string                `protobuf:"bytes,52,opt,name=detected_interface,json=detectedInterface" json:"detected_interface,omitempty"`
	NeighborStatus    *string                `protobuf:"bytes,53,opt,name=neighbor_status,json=neighborStatus" json:"neighbor_status,omitempty"`
	RefreshReduction  *bool                  `protobuf:"varint,54,opt,name=refresh_reduction,json=refreshReduction" json:"refresh_reduction,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsTypeNeighborListStateType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsTypeNeighborListStateType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsTypeNeighborListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsTypeNeighborListStateType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsTypeNeighborListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsTypeNeighborListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsTypeNeighborListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 0}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsTypeNeighborListStateType) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsTypeNeighborListStateType) GetDetectedInterface() string {
	if x != nil && x.DetectedInterface != nil {
		return *x.DetectedInterface
	}
	return ""
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsTypeNeighborListStateType) GetNeighborStatus() string {
	if x != nil && x.NeighborStatus != nil {
		return *x.NeighborStatus
	}
	return ""
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsTypeNeighborListStateType) GetRefreshReduction() bool {
	if x != nil && x.RefreshReduction != nil {
		return *x.RefreshReduction
	}
	return false
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeGracefulRestartType struct {
	state         protoimpl.MessageState                                                                                                 `protogen:"open.v1"`
	State         *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeGracefulRestartTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeGracefulRestartType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeGracefulRestartType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeGracefulRestartType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeGracefulRestartType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeGracefulRestartType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeGracefulRestartType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeGracefulRestartType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeGracefulRestartType) GetState() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeGracefulRestartTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeSoftPreemptionType struct {
	state         protoimpl.MessageState                                                                                                `protogen:"open.v1"`
	State         *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeSoftPreemptionTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeSoftPreemptionType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeSoftPreemptionType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeSoftPreemptionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeSoftPreemptionType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeSoftPreemptionType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeSoftPreemptionType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeSoftPreemptionType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 1}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeSoftPreemptionType) GetState() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeSoftPreemptionTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeHellosType struct {
	state         protoimpl.MessageState                                                                                        `protogen:"open.v1"`
	State         *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeHellosTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeHellosType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeHellosType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeHellosType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeHellosType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeHellosType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeHellosType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeHellosType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 2}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeHellosType) GetState() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeHellosTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateType struct {
	state         protoimpl.MessageState                                                                                               `protogen:"open.v1"`
	Counters      *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeCountersType      `protobuf:"bytes,152,opt,name=counters" json:"counters,omitempty"`
	ErrorCounters *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeErrorCountersType `protobuf:"bytes,151,opt,name=error_counters,json=errorCounters" json:"error_counters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 3}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateType) GetCounters() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeCountersType {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateType) GetErrorCounters() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeErrorCountersType {
	if x != nil {
		return x.ErrorCounters
	}
	return nil
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeGracefulRestartTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enable        *bool                  `protobuf:"varint,51,opt,name=enable" json:"enable,omitempty"`
	RestartTime   *uint32                `protobuf:"varint,52,opt,name=restart_time,json=restartTime" json:"restart_time,omitempty"`
	RecoveryTime  *uint32                `protobuf:"varint,53,opt,name=recovery_time,json=recoveryTime" json:"recovery_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeGracefulRestartTypeStateType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeGracefulRestartTypeStateType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeGracefulRestartTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeGracefulRestartTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeGracefulRestartTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeGracefulRestartTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeGracefulRestartTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0, 0}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeGracefulRestartTypeStateType) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeGracefulRestartTypeStateType) GetRestartTime() uint32 {
	if x != nil && x.RestartTime != nil {
		return *x.RestartTime
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeGracefulRestartTypeStateType) GetRecoveryTime() uint32 {
	if x != nil && x.RecoveryTime != nil {
		return *x.RecoveryTime
	}
	return 0
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeSoftPreemptionTypeStateType struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Enable                *bool                  `protobuf:"varint,51,opt,name=enable" json:"enable,omitempty"`
	SoftPreemptionTimeout *uint32                `protobuf:"varint,52,opt,name=soft_preemption_timeout,json=softPreemptionTimeout" json:"soft_preemption_timeout,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeSoftPreemptionTypeStateType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeSoftPreemptionTypeStateType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeSoftPreemptionTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeSoftPreemptionTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeSoftPreemptionTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeSoftPreemptionTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeSoftPreemptionTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 1, 0}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeSoftPreemptionTypeStateType) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeSoftPreemptionTypeStateType) GetSoftPreemptionTimeout() uint32 {
	if x != nil && x.SoftPreemptionTimeout != nil {
		return *x.SoftPreemptionTimeout
	}
	return 0
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeHellosTypeStateType struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	HelloInterval    *uint32                `protobuf:"varint,51,opt,name=hello_interval,json=helloInterval" json:"hello_interval,omitempty"`
	RefreshReduction *bool                  `protobuf:"varint,52,opt,name=refresh_reduction,json=refreshReduction" json:"refresh_reduction,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeHellosTypeStateType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeHellosTypeStateType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeHellosTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeHellosTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeHellosTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeHellosTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeHellosTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 2, 0}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeHellosTypeStateType) GetHelloInterval() uint32 {
	if x != nil && x.HelloInterval != nil {
		return *x.HelloInterval
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeHellosTypeStateType) GetRefreshReduction() bool {
	if x != nil && x.RefreshReduction != nil {
		return *x.RefreshReduction
	}
	return false
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeCountersType struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	PathTimeouts                *uint64                `protobuf:"varint,51,opt,name=path_timeouts,json=pathTimeouts" json:"path_timeouts,omitempty"`
	ReservationTimeouts         *uint64                `protobuf:"varint,52,opt,name=reservation_timeouts,json=reservationTimeouts" json:"reservation_timeouts,omitempty"`
	RateLimitedMessages         *uint64                `protobuf:"varint,53,opt,name=rate_limited_messages,json=rateLimitedMessages" json:"rate_limited_messages,omitempty"`
	InPathMessages              *uint64                `protobuf:"varint,54,opt,name=in_path_messages,json=inPathMessages" json:"in_path_messages,omitempty"`
	InPathErrorMessages         *uint64                `protobuf:"varint,55,opt,name=in_path_error_messages,json=inPathErrorMessages" json:"in_path_error_messages,omitempty"`
	InPathTearMessages          *uint64                `protobuf:"varint,56,opt,name=in_path_tear_messages,json=inPathTearMessages" json:"in_path_tear_messages,omitempty"`
	InReservationMessages       *uint64                `protobuf:"varint,57,opt,name=in_reservation_messages,json=inReservationMessages" json:"in_reservation_messages,omitempty"`
	InReservationErrorMessages  *uint64                `protobuf:"varint,58,opt,name=in_reservation_error_messages,json=inReservationErrorMessages" json:"in_reservation_error_messages,omitempty"`
	InReservationTearMessages   *uint64                `protobuf:"varint,59,opt,name=in_reservation_tear_messages,json=inReservationTearMessages" json:"in_reservation_tear_messages,omitempty"`
	InHelloMessages             *uint64                `protobuf:"varint,60,opt,name=in_hello_messages,json=inHelloMessages" json:"in_hello_messages,omitempty"`
	InSrefreshMessages          *uint64                `protobuf:"varint,61,opt,name=in_srefresh_messages,json=inSrefreshMessages" json:"in_srefresh_messages,omitempty"`
	InAckMessages               *uint64                `protobuf:"varint,62,opt,name=in_ack_messages,json=inAckMessages" json:"in_ack_messages,omitempty"`
	OutPathMessages             *uint64                `protobuf:"varint,63,opt,name=out_path_messages,json=outPathMessages" json:"out_path_messages,omitempty"`
	OutPathErrorMessages        *uint64                `protobuf:"varint,64,opt,name=out_path_error_messages,json=outPathErrorMessages" json:"out_path_error_messages,omitempty"`
	OutPathTearMessages         *uint64                `protobuf:"varint,65,opt,name=out_path_tear_messages,json=outPathTearMessages" json:"out_path_tear_messages,omitempty"`
	OutReservationMessages      *uint64                `protobuf:"varint,66,opt,name=out_reservation_messages,json=outReservationMessages" json:"out_reservation_messages,omitempty"`
	OutReservationErrorMessages *uint64                `protobuf:"varint,67,opt,name=out_reservation_error_messages,json=outReservationErrorMessages" json:"out_reservation_error_messages,omitempty"`
	OutReservationTearMessages  *uint64                `protobuf:"varint,68,opt,name=out_reservation_tear_messages,json=outReservationTearMessages" json:"out_reservation_tear_messages,omitempty"`
	OutHelloMessages            *uint64                `protobuf:"varint,69,opt,name=out_hello_messages,json=outHelloMessages" json:"out_hello_messages,omitempty"`
	OutSrefreshMessages         *uint64                `protobuf:"varint,70,opt,name=out_srefresh_messages,json=outSrefreshMessages" json:"out_srefresh_messages,omitempty"`
	OutAckMessages              *uint64                `protobuf:"varint,71,opt,name=out_ack_messages,json=outAckMessages" json:"out_ack_messages,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeCountersType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeCountersType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeCountersType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeCountersType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeCountersType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeCountersType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeCountersType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 3, 0}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeCountersType) GetPathTimeouts() uint64 {
	if x != nil && x.PathTimeouts != nil {
		return *x.PathTimeouts
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeCountersType) GetReservationTimeouts() uint64 {
	if x != nil && x.ReservationTimeouts != nil {
		return *x.ReservationTimeouts
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeCountersType) GetRateLimitedMessages() uint64 {
	if x != nil && x.RateLimitedMessages != nil {
		return *x.RateLimitedMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeCountersType) GetInPathMessages() uint64 {
	if x != nil && x.InPathMessages != nil {
		return *x.InPathMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeCountersType) GetInPathErrorMessages() uint64 {
	if x != nil && x.InPathErrorMessages != nil {
		return *x.InPathErrorMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeCountersType) GetInPathTearMessages() uint64 {
	if x != nil && x.InPathTearMessages != nil {
		return *x.InPathTearMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeCountersType) GetInReservationMessages() uint64 {
	if x != nil && x.InReservationMessages != nil {
		return *x.InReservationMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeCountersType) GetInReservationErrorMessages() uint64 {
	if x != nil && x.InReservationErrorMessages != nil {
		return *x.InReservationErrorMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeCountersType) GetInReservationTearMessages() uint64 {
	if x != nil && x.InReservationTearMessages != nil {
		return *x.InReservationTearMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeCountersType) GetInHelloMessages() uint64 {
	if x != nil && x.InHelloMessages != nil {
		return *x.InHelloMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeCountersType) GetInSrefreshMessages() uint64 {
	if x != nil && x.InSrefreshMessages != nil {
		return *x.InSrefreshMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeCountersType) GetInAckMessages() uint64 {
	if x != nil && x.InAckMessages != nil {
		return *x.InAckMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeCountersType) GetOutPathMessages() uint64 {
	if x != nil && x.OutPathMessages != nil {
		return *x.OutPathMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeCountersType) GetOutPathErrorMessages() uint64 {
	if x != nil && x.OutPathErrorMessages != nil {
		return *x.OutPathErrorMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeCountersType) GetOutPathTearMessages() uint64 {
	if x != nil && x.OutPathTearMessages != nil {
		return *x.OutPathTearMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeCountersType) GetOutReservationMessages() uint64 {
	if x != nil && x.OutReservationMessages != nil {
		return *x.OutReservationMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeCountersType) GetOutReservationErrorMessages() uint64 {
	if x != nil && x.OutReservationErrorMessages != nil {
		return *x.OutReservationErrorMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeCountersType) GetOutReservationTearMessages() uint64 {
	if x != nil && x.OutReservationTearMessages != nil {
		return *x.OutReservationTearMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeCountersType) GetOutHelloMessages() uint64 {
	if x != nil && x.OutHelloMessages != nil {
		return *x.OutHelloMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeCountersType) GetOutSrefreshMessages() uint64 {
	if x != nil && x.OutSrefreshMessages != nil {
		return *x.OutSrefreshMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeCountersType) GetOutAckMessages() uint64 {
	if x != nil && x.OutAckMessages != nil {
		return *x.OutAckMessages
	}
	return 0
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeErrorCountersType struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	BadPacketLength     *uint64                `protobuf:"varint,51,opt,name=bad_packet_length,json=badPacketLength" json:"bad_packet_length,omitempty"`
	BadPacketVersion    *uint64                `protobuf:"varint,52,opt,name=bad_packet_version,json=badPacketVersion" json:"bad_packet_version,omitempty"`
	AuthenticationFail  *uint64                `protobuf:"varint,53,opt,name=authentication_fail,json=authenticationFail" json:"authentication_fail,omitempty"`
	BadChecksum         *uint64                `protobuf:"varint,54,opt,name=bad_checksum,json=badChecksum" json:"bad_checksum,omitempty"`
	BadPacketFormat     *uint64                `protobuf:"varint,55,opt,name=bad_packet_format,json=badPacketFormat" json:"bad_packet_format,omitempty"`
	RecvPktDisabledIntf *uint64                `protobuf:"varint,56,opt,name=recv_pkt_disabled_intf,json=recvPktDisabledIntf" json:"recv_pkt_disabled_intf,omitempty"`
	StateTimeout        *uint64                `protobuf:"varint,57,opt,name=state_timeout,json=stateTimeout" json:"state_timeout,omitempty"`
	MessageOutOfOrder   *uint64                `protobuf:"varint,58,opt,name=message_out_of_order,json=messageOutOfOrder" json:"message_out_of_order,omitempty"`
	UnknownAck          *uint64                `protobuf:"varint,59,opt,name=unknown_ack,json=unknownAck" json:"unknown_ack,omitempty"`
	UnknownNack         *uint64                `protobuf:"varint,60,opt,name=unknown_nack,json=unknownNack" json:"unknown_nack,omitempty"`
	ReceivedNack        *uint64                `protobuf:"varint,61,opt,name=received_nack,json=receivedNack" json:"received_nack,omitempty"`
	SendFailure         *uint64                `protobuf:"varint,62,opt,name=send_failure,json=sendFailure" json:"send_failure,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeErrorCountersType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeErrorCountersType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeErrorCountersType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeErrorCountersType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeErrorCountersType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeErrorCountersType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeErrorCountersType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 3, 1}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeErrorCountersType) GetBadPacketLength() uint64 {
	if x != nil && x.BadPacketLength != nil {
		return *x.BadPacketLength
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeErrorCountersType) GetBadPacketVersion() uint64 {
	if x != nil && x.BadPacketVersion != nil {
		return *x.BadPacketVersion
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeErrorCountersType) GetAuthenticationFail() uint64 {
	if x != nil && x.AuthenticationFail != nil {
		return *x.AuthenticationFail
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeErrorCountersType) GetBadChecksum() uint64 {
	if x != nil && x.BadChecksum != nil {
		return *x.BadChecksum
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeErrorCountersType) GetBadPacketFormat() uint64 {
	if x != nil && x.BadPacketFormat != nil {
		return *x.BadPacketFormat
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeErrorCountersType) GetRecvPktDisabledIntf() uint64 {
	if x != nil && x.RecvPktDisabledIntf != nil {
		return *x.RecvPktDisabledIntf
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeErrorCountersType) GetStateTimeout() uint64 {
	if x != nil && x.StateTimeout != nil {
		return *x.StateTimeout
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeErrorCountersType) GetMessageOutOfOrder() uint64 {
	if x != nil && x.MessageOutOfOrder != nil {
		return *x.MessageOutOfOrder
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeErrorCountersType) GetUnknownAck() uint64 {
	if x != nil && x.UnknownAck != nil {
		return *x.UnknownAck
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeErrorCountersType) GetUnknownNack() uint64 {
	if x != nil && x.UnknownNack != nil {
		return *x.UnknownNack
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeErrorCountersType) GetReceivedNack() uint64 {
	if x != nil && x.ReceivedNack != nil {
		return *x.ReceivedNack
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeErrorCountersType) GetSendFailure() uint64 {
	if x != nil && x.SendFailure != nil {
		return *x.SendFailure
	}
	return 0
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceList struct {
	state                 protoimpl.MessageState                                                                                                                        `protogen:"open.v1"`
	InterfaceId           *string                                                                                                                                       `protobuf:"bytes,51,opt,name=interface_id,json=interfaceId" json:"interface_id,omitempty"`
	State                 *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateType                 `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	InterfaceRef          *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListInterfaceRefType          `protobuf:"bytes,152,opt,name=interface_ref,json=interfaceRef" json:"interface_ref,omitempty"`
	BandwidthReservations *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsType `protobuf:"bytes,153,opt,name=bandwidth_reservations,json=bandwidthReservations" json:"bandwidth_reservations,omitempty"`
	Hellos                *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListHellosType                `protobuf:"bytes,154,opt,name=hellos" json:"hellos,omitempty"`
	Authentication        *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListAuthenticationType        `protobuf:"bytes,155,opt,name=authentication" json:"authentication,omitempty"`
	Subscription          *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListSubscriptionType          `protobuf:"bytes,156,opt,name=subscription" json:"subscription,omitempty"`
	Protection            *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListProtectionType            `protobuf:"bytes,157,opt,name=protection" json:"protection,omitempty"`
	AdminStatus           *string                                                                                                                                       `protobuf:"bytes,52,opt,name=admin_status,json=adminStatus" json:"admin_status,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceList) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceList{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceList) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceList) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 3, 0}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceList) GetInterfaceId() string {
	if x != nil && x.InterfaceId != nil {
		return *x.InterfaceId
	}
	return ""
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceList) GetState() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceList) GetInterfaceRef() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListInterfaceRefType {
	if x != nil {
		return x.InterfaceRef
	}
	return nil
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceList) GetBandwidthReservations() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsType {
	if x != nil {
		return x.BandwidthReservations
	}
	return nil
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceList) GetHellos() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListHellosType {
	if x != nil {
		return x.Hellos
	}
	return nil
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceList) GetAuthentication() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListAuthenticationType {
	if x != nil {
		return x.Authentication
	}
	return nil
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceList) GetSubscription() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListSubscriptionType {
	if x != nil {
		return x.Subscription
	}
	return nil
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceList) GetProtection() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListProtectionType {
	if x != nil {
		return x.Protection
	}
	return nil
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceList) GetAdminStatus() string {
	if x != nil && x.AdminStatus != nil {
		return *x.AdminStatus
	}
	return ""
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateType struct {
	state         protoimpl.MessageState                                                                                                                         `protogen:"open.v1"`
	InterfaceId   *string                                                                                                                                        `protobuf:"bytes,51,opt,name=interface_id,json=interfaceId" json:"interface_id,omitempty"`
	Counters      *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeCountersType      `protobuf:"bytes,151,opt,name=counters" json:"counters,omitempty"`
	ErrorCounters *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeErrorCountersType `protobuf:"bytes,152,opt,name=error_counters,json=errorCounters" json:"error_counters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 3, 0, 0}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateType) GetInterfaceId() string {
	if x != nil && x.InterfaceId != nil {
		return *x.InterfaceId
	}
	return ""
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateType) GetCounters() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeCountersType {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateType) GetErrorCounters() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeErrorCountersType {
	if x != nil {
		return x.ErrorCounters
	}
	return nil
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListInterfaceRefType struct {
	state         protoimpl.MessageState                                                                                                                        `protogen:"open.v1"`
	State         *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListInterfaceRefTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListInterfaceRefType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListInterfaceRefType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListInterfaceRefType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListInterfaceRefType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListInterfaceRefType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListInterfaceRefType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListInterfaceRefType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 3, 0, 1}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListInterfaceRefType) GetState() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListInterfaceRefTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsType struct {
	state                protoimpl.MessageState                                                                                                                                                  `protogen:"open.v1"`
	BandwidthReservation []*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsTypeBandwidthReservationList `protobuf:"bytes,151,rep,name=bandwidth_reservation,json=bandwidthReservation" json:"bandwidth_reservation,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 3, 0, 2}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsType) GetBandwidthReservation() []*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsTypeBandwidthReservationList {
	if x != nil {
		return x.BandwidthReservation
	}
	return nil
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListHellosType struct {
	state         protoimpl.MessageState                                                                                                                  `protogen:"open.v1"`
	State         *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListHellosTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListHellosType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListHellosType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListHellosType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListHellosType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListHellosType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListHellosType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListHellosType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 3, 0, 3}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListHellosType) GetState() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListHellosTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListAuthenticationType struct {
	state         protoimpl.MessageState                                                                                                                          `protogen:"open.v1"`
	State         *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListAuthenticationTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListAuthenticationType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListAuthenticationType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListAuthenticationType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListAuthenticationType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListAuthenticationType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListAuthenticationType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListAuthenticationType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 3, 0, 4}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListAuthenticationType) GetState() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListAuthenticationTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListSubscriptionType struct {
	state         protoimpl.MessageState                                                                                                                        `protogen:"open.v1"`
	State         *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListSubscriptionTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListSubscriptionType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListSubscriptionType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListSubscriptionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListSubscriptionType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListSubscriptionType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListSubscriptionType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListSubscriptionType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 3, 0, 5}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListSubscriptionType) GetState() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListSubscriptionTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListProtectionType struct {
	state         protoimpl.MessageState                                                                                                                      `protogen:"open.v1"`
	State         *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListProtectionTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListProtectionType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListProtectionType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListProtectionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListProtectionType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListProtectionType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListProtectionType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListProtectionType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 3, 0, 6}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListProtectionType) GetState() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListProtectionTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeCountersType struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	InPathMessages              *uint64                `protobuf:"varint,51,opt,name=in_path_messages,json=inPathMessages" json:"in_path_messages,omitempty"`
	InPathErrorMessages         *uint64                `protobuf:"varint,52,opt,name=in_path_error_messages,json=inPathErrorMessages" json:"in_path_error_messages,omitempty"`
	InPathTearMessages          *uint64                `protobuf:"varint,53,opt,name=in_path_tear_messages,json=inPathTearMessages" json:"in_path_tear_messages,omitempty"`
	InReservationMessages       *uint64                `protobuf:"varint,54,opt,name=in_reservation_messages,json=inReservationMessages" json:"in_reservation_messages,omitempty"`
	InReservationErrorMessages  *uint64                `protobuf:"varint,55,opt,name=in_reservation_error_messages,json=inReservationErrorMessages" json:"in_reservation_error_messages,omitempty"`
	InReservationTearMessages   *uint64                `protobuf:"varint,56,opt,name=in_reservation_tear_messages,json=inReservationTearMessages" json:"in_reservation_tear_messages,omitempty"`
	InHelloMessages             *uint64                `protobuf:"varint,57,opt,name=in_hello_messages,json=inHelloMessages" json:"in_hello_messages,omitempty"`
	InSrefreshMessages          *uint64                `protobuf:"varint,58,opt,name=in_srefresh_messages,json=inSrefreshMessages" json:"in_srefresh_messages,omitempty"`
	InAckMessages               *uint64                `protobuf:"varint,59,opt,name=in_ack_messages,json=inAckMessages" json:"in_ack_messages,omitempty"`
	OutPathMessages             *uint64                `protobuf:"varint,60,opt,name=out_path_messages,json=outPathMessages" json:"out_path_messages,omitempty"`
	OutPathErrorMessages        *uint64                `protobuf:"varint,61,opt,name=out_path_error_messages,json=outPathErrorMessages" json:"out_path_error_messages,omitempty"`
	OutPathTearMessages         *uint64                `protobuf:"varint,62,opt,name=out_path_tear_messages,json=outPathTearMessages" json:"out_path_tear_messages,omitempty"`
	OutReservationMessages      *uint64                `protobuf:"varint,63,opt,name=out_reservation_messages,json=outReservationMessages" json:"out_reservation_messages,omitempty"`
	OutReservationErrorMessages *uint64                `protobuf:"varint,64,opt,name=out_reservation_error_messages,json=outReservationErrorMessages" json:"out_reservation_error_messages,omitempty"`
	OutReservationTearMessages  *uint64                `protobuf:"varint,65,opt,name=out_reservation_tear_messages,json=outReservationTearMessages" json:"out_reservation_tear_messages,omitempty"`
	OutHelloMessages            *uint64                `protobuf:"varint,66,opt,name=out_hello_messages,json=outHelloMessages" json:"out_hello_messages,omitempty"`
	OutSrefreshMessages         *uint64                `protobuf:"varint,67,opt,name=out_srefresh_messages,json=outSrefreshMessages" json:"out_srefresh_messages,omitempty"`
	OutAckMessages              *uint64                `protobuf:"varint,68,opt,name=out_ack_messages,json=outAckMessages" json:"out_ack_messages,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeCountersType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeCountersType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeCountersType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeCountersType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeCountersType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeCountersType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeCountersType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 3, 0, 0, 0}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeCountersType) GetInPathMessages() uint64 {
	if x != nil && x.InPathMessages != nil {
		return *x.InPathMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeCountersType) GetInPathErrorMessages() uint64 {
	if x != nil && x.InPathErrorMessages != nil {
		return *x.InPathErrorMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeCountersType) GetInPathTearMessages() uint64 {
	if x != nil && x.InPathTearMessages != nil {
		return *x.InPathTearMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeCountersType) GetInReservationMessages() uint64 {
	if x != nil && x.InReservationMessages != nil {
		return *x.InReservationMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeCountersType) GetInReservationErrorMessages() uint64 {
	if x != nil && x.InReservationErrorMessages != nil {
		return *x.InReservationErrorMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeCountersType) GetInReservationTearMessages() uint64 {
	if x != nil && x.InReservationTearMessages != nil {
		return *x.InReservationTearMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeCountersType) GetInHelloMessages() uint64 {
	if x != nil && x.InHelloMessages != nil {
		return *x.InHelloMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeCountersType) GetInSrefreshMessages() uint64 {
	if x != nil && x.InSrefreshMessages != nil {
		return *x.InSrefreshMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeCountersType) GetInAckMessages() uint64 {
	if x != nil && x.InAckMessages != nil {
		return *x.InAckMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeCountersType) GetOutPathMessages() uint64 {
	if x != nil && x.OutPathMessages != nil {
		return *x.OutPathMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeCountersType) GetOutPathErrorMessages() uint64 {
	if x != nil && x.OutPathErrorMessages != nil {
		return *x.OutPathErrorMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeCountersType) GetOutPathTearMessages() uint64 {
	if x != nil && x.OutPathTearMessages != nil {
		return *x.OutPathTearMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeCountersType) GetOutReservationMessages() uint64 {
	if x != nil && x.OutReservationMessages != nil {
		return *x.OutReservationMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeCountersType) GetOutReservationErrorMessages() uint64 {
	if x != nil && x.OutReservationErrorMessages != nil {
		return *x.OutReservationErrorMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeCountersType) GetOutReservationTearMessages() uint64 {
	if x != nil && x.OutReservationTearMessages != nil {
		return *x.OutReservationTearMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeCountersType) GetOutHelloMessages() uint64 {
	if x != nil && x.OutHelloMessages != nil {
		return *x.OutHelloMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeCountersType) GetOutSrefreshMessages() uint64 {
	if x != nil && x.OutSrefreshMessages != nil {
		return *x.OutSrefreshMessages
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeCountersType) GetOutAckMessages() uint64 {
	if x != nil && x.OutAckMessages != nil {
		return *x.OutAckMessages
	}
	return 0
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeErrorCountersType struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	BadPacketLength     *uint64                `protobuf:"varint,51,opt,name=bad_packet_length,json=badPacketLength" json:"bad_packet_length,omitempty"`
	BadPacketVersion    *uint64                `protobuf:"varint,52,opt,name=bad_packet_version,json=badPacketVersion" json:"bad_packet_version,omitempty"`
	AuthenticationFail  *uint64                `protobuf:"varint,53,opt,name=authentication_fail,json=authenticationFail" json:"authentication_fail,omitempty"`
	BadChecksum         *uint64                `protobuf:"varint,54,opt,name=bad_checksum,json=badChecksum" json:"bad_checksum,omitempty"`
	BadPacketFormat     *uint64                `protobuf:"varint,55,opt,name=bad_packet_format,json=badPacketFormat" json:"bad_packet_format,omitempty"`
	RecvPktDisabledIntf *uint64                `protobuf:"varint,56,opt,name=recv_pkt_disabled_intf,json=recvPktDisabledIntf" json:"recv_pkt_disabled_intf,omitempty"`
	StateTimeout        *uint64                `protobuf:"varint,57,opt,name=state_timeout,json=stateTimeout" json:"state_timeout,omitempty"`
	MessageOutOfOrder   *uint64                `protobuf:"varint,58,opt,name=message_out_of_order,json=messageOutOfOrder" json:"message_out_of_order,omitempty"`
	UnknownAck          *uint64                `protobuf:"varint,59,opt,name=unknown_ack,json=unknownAck" json:"unknown_ack,omitempty"`
	UnknownNack         *uint64                `protobuf:"varint,60,opt,name=unknown_nack,json=unknownNack" json:"unknown_nack,omitempty"`
	ReceivedNack        *uint64                `protobuf:"varint,61,opt,name=received_nack,json=receivedNack" json:"received_nack,omitempty"`
	SendFailure         *uint64                `protobuf:"varint,62,opt,name=send_failure,json=sendFailure" json:"send_failure,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeErrorCountersType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeErrorCountersType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeErrorCountersType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeErrorCountersType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeErrorCountersType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeErrorCountersType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeErrorCountersType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 3, 0, 0, 1}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeErrorCountersType) GetBadPacketLength() uint64 {
	if x != nil && x.BadPacketLength != nil {
		return *x.BadPacketLength
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeErrorCountersType) GetBadPacketVersion() uint64 {
	if x != nil && x.BadPacketVersion != nil {
		return *x.BadPacketVersion
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeErrorCountersType) GetAuthenticationFail() uint64 {
	if x != nil && x.AuthenticationFail != nil {
		return *x.AuthenticationFail
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeErrorCountersType) GetBadChecksum() uint64 {
	if x != nil && x.BadChecksum != nil {
		return *x.BadChecksum
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeErrorCountersType) GetBadPacketFormat() uint64 {
	if x != nil && x.BadPacketFormat != nil {
		return *x.BadPacketFormat
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeErrorCountersType) GetRecvPktDisabledIntf() uint64 {
	if x != nil && x.RecvPktDisabledIntf != nil {
		return *x.RecvPktDisabledIntf
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeErrorCountersType) GetStateTimeout() uint64 {
	if x != nil && x.StateTimeout != nil {
		return *x.StateTimeout
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeErrorCountersType) GetMessageOutOfOrder() uint64 {
	if x != nil && x.MessageOutOfOrder != nil {
		return *x.MessageOutOfOrder
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeErrorCountersType) GetUnknownAck() uint64 {
	if x != nil && x.UnknownAck != nil {
		return *x.UnknownAck
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeErrorCountersType) GetUnknownNack() uint64 {
	if x != nil && x.UnknownNack != nil {
		return *x.UnknownNack
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeErrorCountersType) GetReceivedNack() uint64 {
	if x != nil && x.ReceivedNack != nil {
		return *x.ReceivedNack
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeErrorCountersType) GetSendFailure() uint64 {
	if x != nil && x.SendFailure != nil {
		return *x.SendFailure
	}
	return 0
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListInterfaceRefTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Interface     *string                `protobuf:"bytes,51,opt,name=interface" json:"interface,omitempty"`
	Subinterface  *uint32                `protobuf:"varint,52,opt,name=subinterface" json:"subinterface,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListInterfaceRefTypeStateType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListInterfaceRefTypeStateType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListInterfaceRefTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListInterfaceRefTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListInterfaceRefTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListInterfaceRefTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListInterfaceRefTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 3, 0, 1, 0}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListInterfaceRefTypeStateType) GetInterface() string {
	if x != nil && x.Interface != nil {
		return *x.Interface
	}
	return ""
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListInterfaceRefTypeStateType) GetSubinterface() uint32 {
	if x != nil && x.Subinterface != nil {
		return *x.Subinterface
	}
	return 0
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsTypeBandwidthReservationList struct {
	state         protoimpl.MessageState                                                                                                                                                         `protogen:"open.v1"`
	Priority      *string                                                                                                                                                                        `protobuf:"bytes,51,opt,name=priority" json:"priority,omitempty"`
	State         *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsTypeBandwidthReservationListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsTypeBandwidthReservationList) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsTypeBandwidthReservationList{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsTypeBandwidthReservationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsTypeBandwidthReservationList) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsTypeBandwidthReservationList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsTypeBandwidthReservationList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsTypeBandwidthReservationList) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 3, 0, 2, 0}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsTypeBandwidthReservationList) GetPriority() string {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return ""
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsTypeBandwidthReservationList) GetState() *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsTypeBandwidthReservationListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsTypeBandwidthReservationListStateType struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Priority                *string                `protobuf:"bytes,51,opt,name=priority" json:"priority,omitempty"`
	AvailableBandwidth      *uint64                `protobuf:"varint,52,opt,name=available_bandwidth,json=availableBandwidth" json:"available_bandwidth,omitempty"`
	ReservedBandwidth       *uint64                `protobuf:"varint,53,opt,name=reserved_bandwidth,json=reservedBandwidth" json:"reserved_bandwidth,omitempty"`
	ActiveReservationsCount *uint64                `protobuf:"varint,54,opt,name=active_reservations_count,json=activeReservationsCount" json:"active_reservations_count,omitempty"`
	HighwaterMark           *uint64                `protobuf:"varint,55,opt,name=highwater_mark,json=highwaterMark" json:"highwater_mark,omitempty"`
	StaticBandwidth         *uint64                `protobuf:"varint,61,opt,name=static_bandwidth,json=staticBandwidth" json:"static_bandwidth,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsTypeBandwidthReservationListStateType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsTypeBandwidthReservationListStateType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsTypeBandwidthReservationListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsTypeBandwidthReservationListStateType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsTypeBandwidthReservationListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsTypeBandwidthReservationListStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsTypeBandwidthReservationListStateType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 3, 0, 2, 0, 0}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsTypeBandwidthReservationListStateType) GetPriority() string {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return ""
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsTypeBandwidthReservationListStateType) GetAvailableBandwidth() uint64 {
	if x != nil && x.AvailableBandwidth != nil {
		return *x.AvailableBandwidth
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsTypeBandwidthReservationListStateType) GetReservedBandwidth() uint64 {
	if x != nil && x.ReservedBandwidth != nil {
		return *x.ReservedBandwidth
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsTypeBandwidthReservationListStateType) GetActiveReservationsCount() uint64 {
	if x != nil && x.ActiveReservationsCount != nil {
		return *x.ActiveReservationsCount
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsTypeBandwidthReservationListStateType) GetHighwaterMark() uint64 {
	if x != nil && x.HighwaterMark != nil {
		return *x.HighwaterMark
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsTypeBandwidthReservationListStateType) GetStaticBandwidth() uint64 {
	if x != nil && x.StaticBandwidth != nil {
		return *x.StaticBandwidth
	}
	return 0
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListHellosTypeStateType struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	HelloInterval    *uint32                `protobuf:"varint,51,opt,name=hello_interval,json=helloInterval" json:"hello_interval,omitempty"`
	RefreshReduction *bool                  `protobuf:"varint,52,opt,name=refresh_reduction,json=refreshReduction" json:"refresh_reduction,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListHellosTypeStateType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListHellosTypeStateType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListHellosTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListHellosTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListHellosTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListHellosTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListHellosTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 3, 0, 3, 0}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListHellosTypeStateType) GetHelloInterval() uint32 {
	if x != nil && x.HelloInterval != nil {
		return *x.HelloInterval
	}
	return 0
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListHellosTypeStateType) GetRefreshReduction() bool {
	if x != nil && x.RefreshReduction != nil {
		return *x.RefreshReduction
	}
	return false
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListAuthenticationTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enable        *bool                  `protobuf:"varint,51,opt,name=enable" json:"enable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListAuthenticationTypeStateType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListAuthenticationTypeStateType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListAuthenticationTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListAuthenticationTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListAuthenticationTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListAuthenticationTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListAuthenticationTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 3, 0, 4, 0}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListAuthenticationTypeStateType) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListSubscriptionTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subscription  *uint32                `protobuf:"varint,51,opt,name=subscription" json:"subscription,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListSubscriptionTypeStateType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListSubscriptionTypeStateType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListSubscriptionTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListSubscriptionTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListSubscriptionTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListSubscriptionTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListSubscriptionTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 3, 0, 5, 0}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListSubscriptionTypeStateType) GetSubscription() uint32 {
	if x != nil && x.Subscription != nil {
		return *x.Subscription
	}
	return 0
}

type NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListProtectionTypeStateType struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	LinkProtectionStyleRequested *string                `protobuf:"bytes,51,opt,name=link_protection_style_requested,json=linkProtectionStyleRequested" json:"link_protection_style_requested,omitempty"`
	BypassOptimizeInterval       *uint32                `protobuf:"varint,52,opt,name=bypass_optimize_interval,json=bypassOptimizeInterval" json:"bypass_optimize_interval,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListProtectionTypeStateType) Reset() {
	*x = NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListProtectionTypeStateType{}
	mi := &file_rpd_rsvp_oc_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListProtectionTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListProtectionTypeStateType) ProtoMessage() {
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListProtectionTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_rsvp_oc_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListProtectionTypeStateType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListProtectionTypeStateType) Descriptor() ([]byte, []int) {
	return file_rpd_rsvp_oc_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 3, 0, 6, 0}
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListProtectionTypeStateType) GetLinkProtectionStyleRequested() string {
	if x != nil && x.LinkProtectionStyleRequested != nil {
		return *x.LinkProtectionStyleRequested
	}
	return ""
}

func (x *NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListProtectionTypeStateType) GetBypassOptimizeInterval() uint32 {
	if x != nil && x.BypassOptimizeInterval != nil {
		return *x.BypassOptimizeInterval
	}
	return 0
}

var file_rpd_rsvp_oc_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*NetworkInstancesRsvp)(nil),
		Field:         68,
		Name:          "jnpr_network_instances_rsvp_ext",
		Tag:           "bytes,68,opt,name=jnpr_network_instances_rsvp_ext",
		Filename:      "rpd_rsvp_oc.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional network_instances_rsvp jnpr_network_instances_rsvp_ext = 68;
	E_JnprNetworkInstancesRsvpExt = &file_rpd_rsvp_oc_proto_extTypes[0]
)

var File_rpd_rsvp_oc_proto protoreflect.FileDescriptor

var file_rpd_rsvp_oc_proto_rawDesc = string([]byte{
	0x0a, 0x11, 0x72, 0x70, 0x64, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x6f, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74,
	0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf4, 0x6c, 0x0a, 0x16, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72,
	0x73, 0x76, 0x70, 0x12, 0x59, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0xfe,
	0x6b, 0x0a, 0x15, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x04, 0x6d, 0x70, 0x6c, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6d, 0x70, 0x6c,
	0x73, 0x1a, 0xfb, 0x6a, 0x0a, 0x09, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x82, 0x01, 0x0a, 0x13, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x1a, 0xe8, 0x69, 0x0a, 0x18, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x77, 0x0a, 0x07, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x06, 0x72, 0x73, 0x76, 0x70, 0x54, 0x65, 0x1a, 0xd2, 0x68, 0x0a, 0x0c, 0x72,
	0x73, 0x76, 0x70, 0x5f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x08,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x6b, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6c, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x72, 0x73, 0x76, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x73,
	0x76, 0x70, 0x5f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18,
	0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0xab, 0x01, 0x0a, 0x14, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x77, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x73,
	0x76, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x73, 0x76, 0x70,
	0x5f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x9c, 0x16, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x78, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72,
	0x73, 0x76, 0x70, 0x5f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a,
	0xf4, 0x14, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x6c, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x73,
	0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x64, 0x65, 0x12, 0xc6, 0x01,
	0x0a, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x92, 0x01,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x83, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x73, 0x76,
	0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x73, 0x76, 0x70, 0x5f,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0xcc, 0x01, 0x0a, 0x16, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18,
	0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x94, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x70,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x14, 0x65,
	0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x1a, 0x93, 0x05, 0x0a, 0x19, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0xdd, 0x01, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0xab, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x11,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x1a, 0x95, 0x03, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82,
	0x40, 0x02, 0x08, 0x01, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xce, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xb6, 0x01, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x72, 0x73, 0x76, 0x70, 0x5f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8a, 0x01, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x1a, 0xb8, 0x05, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x6c, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x73, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x69, 0x6e, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x49, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x75, 0x74, 0x12,
	0xba, 0x01, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x95, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x73, 0x76,
	0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x73, 0x76, 0x70, 0x5f,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x73, 0x70, 0x65, 0x63, 0x12, 0x23, 0x0a, 0x0d,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x3e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x1a, 0x61, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x65, 0x61, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x61, 0x74, 0x65, 0x1a, 0xef, 0x04, 0x0a, 0x1b, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0xe5, 0x01, 0x0a, 0x15, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x97,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0xaf, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x65, 0x78, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x13, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0xe7, 0x02, 0x0a,
	0x1a, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08,
	0x01, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xd2, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xba, 0x01, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72,
	0x73, 0x76, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x73, 0x76,
	0x70, 0x5f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x57, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x68,
	0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68,
	0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xab, 0x04, 0x0a, 0x0e, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x08, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x7a, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x72, 0x73, 0x76, 0x70, 0x5f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x1a, 0xfe, 0x02, 0x0a, 0x0d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x85, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x73, 0x76,
	0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x73, 0x76, 0x70, 0x5f,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xab, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x2d, 0x0a, 0x12, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xa1, 0x1b, 0x0a, 0x0b, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x10, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75,
	0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x7f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x72, 0x61, 0x63,
	0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x0f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0xa8, 0x01, 0x0a, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7e, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x72, 0x73, 0x76, 0x70, 0x5f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x70, 0x72,
	0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x73,
	0x6f, 0x66, 0x74, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8e, 0x01,
	0x0a, 0x06, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x75, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x06, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x12, 0x8b,
	0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xaa, 0x02, 0x0a,
	0x15, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x8a, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x73, 0x76,
	0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x73, 0x76, 0x70, 0x5f,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x6c, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x98, 0x02, 0x0a, 0x14, 0x73, 0x6f,
	0x66, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x89, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x73, 0x6f, 0x66, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x5c, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x17,
	0x73, 0x6f, 0x66, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73,
	0x6f, 0x66, 0x74, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x1a, 0x8a, 0x02, 0x0a, 0x0b, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x80, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0x60, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0xc4, 0x0f, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0xa0, 0x01, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x98, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x82, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x12, 0xb1, 0x01, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x88, 0x01,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x1a, 0xd5, 0x08, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x31,
	0x0a, 0x14, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x13, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x69, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x33, 0x0a, 0x16, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x13, 0x69, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x74, 0x65, 0x61, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x38, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x12, 0x69, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x54, 0x65, 0x61, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x39, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x41, 0x0a, 0x1d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x3a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x61, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x69, 0x6e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x30, 0x0a, 0x14, 0x69, 0x6e, 0x5f, 0x73, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x69,
	0x6e, 0x53, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x69, 0x6e, 0x41, 0x63,
	0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x75, 0x74,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x3f,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16,
	0x6f, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x41, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6f, 0x75,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x54, 0x65, 0x61, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x38, 0x0a, 0x18, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x42, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x16, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x6f,
	0x75, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x43, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x1b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x41, 0x0a, 0x1d, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x44, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x61, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x45, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x6f, 0x75, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x13, 0x6f, 0x75, 0x74, 0x53, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x63, 0x6b,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x47, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x6f, 0x75, 0x74, 0x41, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a,
	0x86, 0x04, 0x0a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x61, 0x64, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x62, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x61, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x62, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61,
	0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x64, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x75, 0x6d, 0x18, 0x36, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x61, 0x64, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x61, 0x64, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x62, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x18, 0x38, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x13, 0x72, 0x65, 0x63, 0x76, 0x50, 0x6b, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x49, 0x6e, 0x74, 0x66, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x3b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x63, 0x6b, 0x12, 0x21, 0x0a,
	0x0c, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6e, 0x61, 0x63, 0x6b, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4e, 0x61, 0x63, 0x6b,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x63,
	0x6b, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x4e, 0x61, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x65, 0x6e,
	0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x1a, 0x84, 0x2e, 0x0a, 0x19, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xa6, 0x01, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x86, 0x01, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72,
	0x73, 0x76, 0x70, 0x5f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a,
	0xbd, 0x2c, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52,
	0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0xa9, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x91, 0x01,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xc0, 0x01, 0x0a, 0x0d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x99, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0xdb, 0x01, 0x0a, 0x16,
	0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xa2, 0x01,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x15, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xac, 0x01, 0x0a, 0x06, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x73, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x92, 0x01, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72,
	0x73, 0x76, 0x70, 0x5f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x06, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x12, 0xc4, 0x01, 0x0a, 0x0e, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x9b, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x9a, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0xbe, 0x01, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x98, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x73, 0x76,
	0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x73, 0x76, 0x70, 0x5f,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0xb8, 0x01, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x96, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x70,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x95,
	0x0f, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0xbd, 0x01, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x97, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x9f, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x12, 0xce, 0x01, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xa5, 0x01, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x72, 0x73, 0x76, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x73,
	0x76, 0x70, 0x5f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x1a, 0xc9, 0x07, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x69,
	0x6e, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x33, 0x0a,
	0x16, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x69,
	0x6e, 0x50, 0x61, 0x74, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x65,
	0x61, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x12, 0x69, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x54, 0x65, 0x61, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x41, 0x0a,
	0x1d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x37,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x38, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x61, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x39, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x69, 0x6e,
	0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x69, 0x6e, 0x5f, 0x73, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x69, 0x6e, 0x53,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x69, 0x6e, 0x41, 0x63, 0x6b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x75,
	0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6f, 0x75, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x54, 0x65, 0x61, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x38, 0x0a, 0x18, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x3f, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x16, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x6f, 0x75, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x40, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x1b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x41,
	0x0a, 0x1d, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x41, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x61, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x42, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6f,
	0x75, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x43, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13,
	0x6f, 0x75, 0x74, 0x53, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x44, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6f,
	0x75, 0x74, 0x41, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x86, 0x04,
	0x0a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x61, 0x64, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x62, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x61, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x62,
	0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2f, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x64, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x61, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x61, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x62, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x33, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x18, 0x38, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x13, 0x72, 0x65, 0x63, 0x76, 0x50, 0x6b, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x49, 0x6e, 0x74, 0x66, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4f, 0x75, 0x74, 0x4f, 0x66, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6e, 0x61, 0x63, 0x6b, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4e, 0x61, 0x63, 0x6b, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x63, 0x6b, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4e,
	0x61, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x1a, 0xa3, 0x02, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xbc, 0x01,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xa4,
	0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x4e, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xd2, 0x06, 0x0a,
	0x1b, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0xf4, 0x01, 0x0a,
	0x15, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0xbd, 0x01,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x14, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0xbb, 0x04, 0x0a, 0x1a, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0xe0, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xc8, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x70,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x96, 0x02, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x11, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x19, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x37, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x68, 0x69, 0x67, 0x68, 0x77, 0x61, 0x74,
	0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x1a, 0xa7, 0x02, 0x0a, 0x0b, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0xb5, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x9d, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c,
	0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x60, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2b,
	0x0a, 0x11, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xfb, 0x01, 0x0a, 0x13,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0xbd, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0xa5, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0x24, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x83, 0x02, 0x0a, 0x11, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0xbb, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0xa3, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x30, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0xdd, 0x02, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0xb9, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0xa1, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0x8d, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x45,
	0x0a, 0x1f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x4f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x3a,
	0x76, 0x0a, 0x1f, 0x6a, 0x6e, 0x70, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x65,
	0x78, 0x74, 0x12, 0x17, 0x2e, 0x4a, 0x75, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x44, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x52, 0x1b, 0x6a, 0x6e, 0x70, 0x72,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x73, 0x76, 0x70, 0x45, 0x78, 0x74, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x6a, 0x75, 0x6e,
	0x6f, 0x73, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
})

var (
	file_rpd_rsvp_oc_proto_rawDescOnce sync.Once
	file_rpd_rsvp_oc_proto_rawDescData []byte
)

func file_rpd_rsvp_oc_proto_rawDescGZIP() []byte {
	file_rpd_rsvp_oc_proto_rawDescOnce.Do(func() {
		file_rpd_rsvp_oc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_rpd_rsvp_oc_proto_rawDesc), len(file_rpd_rsvp_oc_proto_rawDesc)))
	})
	return file_rpd_rsvp_oc_proto_rawDescData
}

var file_rpd_rsvp_oc_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_rpd_rsvp_oc_proto_goTypes = []any{
	(*NetworkInstancesRsvp)(nil),                                                                                                                                                          // 0: network_instances_rsvp
	(*NetworkInstancesRsvpNetworkInstanceList)(nil),                                                                                                                                       // 1: network_instances_rsvp.network_instance_list
	(*NetworkInstancesRsvpNetworkInstanceListMplsType)(nil),                                                                                                                               // 2: network_instances_rsvp.network_instance_list.mpls_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsType)(nil),                                                                                                         // 3: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeType)(nil),                                                                                               // 4: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsType)(nil),                                                                                   // 5: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.sessions_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsType)(nil),                                                                                  // 6: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.neighbors_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalType)(nil),                                                                                     // 7: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.global_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesType)(nil),                                                                        // 8: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionList)(nil),                                                                        // 9: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.sessions_type.session_list
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsType)(nil),                                                  // 10: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.sessions_type.session_list.record_route_objects_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateType)(nil),                                                               // 11: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.sessions_type.session_list.state_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsType)(nil),                                                // 12: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.sessions_type.session_list.explicit_route_objects_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsTypeRecordRouteObjectList)(nil),                             // 13: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.sessions_type.session_list.record_route_objects_type.record_route_object_list
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListRecordRouteObjectsTypeRecordRouteObjectListStateType)(nil),                    // 14: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.sessions_type.session_list.record_route_objects_type.record_route_object_list.state_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListStateTypeSenderTspecType)(nil),                                                // 15: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.sessions_type.session_list.state_type.sender_tspec_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsTypeExplicitRouteObjectList)(nil),                         // 16: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.sessions_type.session_list.explicit_route_objects_type.explicit_route_object_list
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeSessionsTypeSessionListExplicitRouteObjectsTypeExplicitRouteObjectListStateType)(nil),                // 17: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.sessions_type.session_list.explicit_route_objects_type.explicit_route_object_list.state_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsTypeNeighborList)(nil),                                                                      // 18: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.neighbors_type.neighbor_list
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeNeighborsTypeNeighborListStateType)(nil),                                                             // 19: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.neighbors_type.neighbor_list.state_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeGracefulRestartType)(nil),                                                                  // 20: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.global_type.graceful_restart_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeSoftPreemptionType)(nil),                                                                   // 21: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.global_type.soft_preemption_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeHellosType)(nil),                                                                           // 22: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.global_type.hellos_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateType)(nil),                                                                            // 23: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.global_type.state_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeGracefulRestartTypeStateType)(nil),                                                         // 24: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.global_type.graceful_restart_type.state_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeSoftPreemptionTypeStateType)(nil),                                                          // 25: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.global_type.soft_preemption_type.state_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeHellosTypeStateType)(nil),                                                                  // 26: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.global_type.hellos_type.state_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeCountersType)(nil),                                                                // 27: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.global_type.state_type.counters_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeGlobalTypeStateTypeErrorCountersType)(nil),                                                           // 28: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.global_type.state_type.error_counters_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceList)(nil),                                                           // 29: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateType)(nil),                                                  // 30: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.state_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListInterfaceRefType)(nil),                                           // 31: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.interface_ref_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsType)(nil),                                  // 32: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.bandwidth_reservations_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListHellosType)(nil),                                                 // 33: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.hellos_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListAuthenticationType)(nil),                                         // 34: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.authentication_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListSubscriptionType)(nil),                                           // 35: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.subscription_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListProtectionType)(nil),                                             // 36: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.protection_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeCountersType)(nil),                                      // 37: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.state_type.counters_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListStateTypeErrorCountersType)(nil),                                 // 38: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.state_type.error_counters_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListInterfaceRefTypeStateType)(nil),                                  // 39: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.interface_ref_type.state_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsTypeBandwidthReservationList)(nil),          // 40: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.bandwidth_reservations_type.bandwidth_reservation_list
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListBandwidthReservationsTypeBandwidthReservationListStateType)(nil), // 41: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.bandwidth_reservations_type.bandwidth_reservation_list.state_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListHellosTypeStateType)(nil),                                        // 42: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.hellos_type.state_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListAuthenticationTypeStateType)(nil),                                // 43: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.authentication_type.state_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListSubscriptionTypeStateType)(nil),                                  // 44: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.subscription_type.state_type
	(*NetworkInstancesRsvpNetworkInstanceListMplsTypeSignalingProtocolsTypeRsvpTeTypeInterfaceAttributesTypeInterfaceListProtectionTypeStateType)(nil),                                    // 45: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.protection_type.state_type
	(*JuniperNetworksSensors)(nil), // 46: JuniperNetworksSensors
}
var file_rpd_rsvp_oc_proto_depIdxs = []int32{
	1,  // 0: network_instances_rsvp.network_instance:type_name -> network_instances_rsvp.network_instance_list
	2,  // 1: network_instances_rsvp.network_instance_list.mpls:type_name -> network_instances_rsvp.network_instance_list.mpls_type
	3,  // 2: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type
	4,  // 3: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type
	5,  // 4: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.sessions:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.sessions_type
	6,  // 5: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.neighbors:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.neighbors_type
	7,  // 6: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.global:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.global_type
	8,  // 7: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type
	9,  // 8: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.sessions_type.session:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.sessions_type.session_list
	18, // 9: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.neighbors_type.neighbor:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.neighbors_type.neighbor_list
	20, // 10: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.global_type.graceful_restart:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.global_type.graceful_restart_type
	21, // 11: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.global_type.soft_preemption:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.global_type.soft_preemption_type
	22, // 12: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.global_type.hellos:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.global_type.hellos_type
	23, // 13: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.global_type.state:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.global_type.state_type
	29, // 14: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list
	10, // 15: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.sessions_type.session_list.record_route_objects:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.sessions_type.session_list.record_route_objects_type
	11, // 16: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.sessions_type.session_list.state:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.sessions_type.session_list.state_type
	12, // 17: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.sessions_type.session_list.explicit_route_objects:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.sessions_type.session_list.explicit_route_objects_type
	13, // 18: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.sessions_type.session_list.record_route_objects_type.record_route_object:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.sessions_type.session_list.record_route_objects_type.record_route_object_list
	15, // 19: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.sessions_type.session_list.state_type.sender_tspec:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.sessions_type.session_list.state_type.sender_tspec_type
	16, // 20: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.sessions_type.session_list.explicit_route_objects_type.explicit_route_object:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.sessions_type.session_list.explicit_route_objects_type.explicit_route_object_list
	14, // 21: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.sessions_type.session_list.record_route_objects_type.record_route_object_list.state:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.sessions_type.session_list.record_route_objects_type.record_route_object_list.state_type
	17, // 22: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.sessions_type.session_list.explicit_route_objects_type.explicit_route_object_list.state:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.sessions_type.session_list.explicit_route_objects_type.explicit_route_object_list.state_type
	19, // 23: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.neighbors_type.neighbor_list.state:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.neighbors_type.neighbor_list.state_type
	24, // 24: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.global_type.graceful_restart_type.state:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.global_type.graceful_restart_type.state_type
	25, // 25: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.global_type.soft_preemption_type.state:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.global_type.soft_preemption_type.state_type
	26, // 26: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.global_type.hellos_type.state:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.global_type.hellos_type.state_type
	27, // 27: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.global_type.state_type.counters:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.global_type.state_type.counters_type
	28, // 28: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.global_type.state_type.error_counters:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.global_type.state_type.error_counters_type
	30, // 29: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.state:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.state_type
	31, // 30: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.interface_ref:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.interface_ref_type
	32, // 31: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.bandwidth_reservations:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.bandwidth_reservations_type
	33, // 32: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.hellos:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.hellos_type
	34, // 33: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.authentication:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.authentication_type
	35, // 34: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.subscription:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.subscription_type
	36, // 35: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.protection:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.protection_type
	37, // 36: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.state_type.counters:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.state_type.counters_type
	38, // 37: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.state_type.error_counters:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.state_type.error_counters_type
	39, // 38: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.interface_ref_type.state:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.interface_ref_type.state_type
	40, // 39: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.bandwidth_reservations_type.bandwidth_reservation:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.bandwidth_reservations_type.bandwidth_reservation_list
	42, // 40: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.hellos_type.state:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.hellos_type.state_type
	43, // 41: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.authentication_type.state:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.authentication_type.state_type
	44, // 42: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.subscription_type.state:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.subscription_type.state_type
	45, // 43: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.protection_type.state:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.protection_type.state_type
	41, // 44: network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.bandwidth_reservations_type.bandwidth_reservation_list.state:type_name -> network_instances_rsvp.network_instance_list.mpls_type.signaling_protocols_type.rsvp_te_type.interface_attributes_type.interface_list.bandwidth_reservations_type.bandwidth_reservation_list.state_type
	46, // 45: jnpr_network_instances_rsvp_ext:extendee -> JuniperNetworksSensors
	0,  // 46: jnpr_network_instances_rsvp_ext:type_name -> network_instances_rsvp
	47, // [47:47] is the sub-list for method output_type
	47, // [47:47] is the sub-list for method input_type
	46, // [46:47] is the sub-list for extension type_name
	45, // [45:46] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_rpd_rsvp_oc_proto_init() }
func file_rpd_rsvp_oc_proto_init() {
	if File_rpd_rsvp_oc_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_rpd_rsvp_oc_proto_rawDesc), len(file_rpd_rsvp_oc_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   46,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_rpd_rsvp_oc_proto_goTypes,
		DependencyIndexes: file_rpd_rsvp_oc_proto_depIdxs,
		MessageInfos:      file_rpd_rsvp_oc_proto_msgTypes,
		ExtensionInfos:    file_rpd_rsvp_oc_proto_extTypes,
	}.Build()
	File_rpd_rsvp_oc_proto = out.File
	file_rpd_rsvp_oc_proto_goTypes = nil
	file_rpd_rsvp_oc_proto_depIdxs = nil
}
