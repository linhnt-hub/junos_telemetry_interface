// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: mib2d_oc.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InterfacesMib struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Interface     []*InterfacesMibInterfaceList `protobuf:"bytes,151,rep,name=interface" json:"interface,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesMib) Reset() {
	*x = InterfacesMib{}
	mi := &file_mib2d_oc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMib) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMib) ProtoMessage() {}

func (x *InterfacesMib) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMib.ProtoReflect.Descriptor instead.
func (*InterfacesMib) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0}
}

func (x *InterfacesMib) GetInterface() []*InterfacesMibInterfaceList {
	if x != nil {
		return x.Interface
	}
	return nil
}

type InterfacesMibInterfaceList struct {
	state         protoimpl.MessageState                       `protogen:"open.v1"`
	Name          *string                                      `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	State         *InterfacesMibInterfaceListStateType         `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	Subinterfaces *InterfacesMibInterfaceListSubinterfacesType `protobuf:"bytes,152,opt,name=subinterfaces" json:"subinterfaces,omitempty"`
	HoldTime      *InterfacesMibInterfaceListHoldTimeType      `protobuf:"bytes,155,opt,name=hold_time,json=holdTime" json:"hold_time,omitempty"`
	Ethernet      *InterfacesMibInterfaceListEthernetType      `protobuf:"bytes,153,opt,name=ethernet" json:"ethernet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceList) Reset() {
	*x = InterfacesMibInterfaceList{}
	mi := &file_mib2d_oc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceList) ProtoMessage() {}

func (x *InterfacesMibInterfaceList) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceList.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceList) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0}
}

func (x *InterfacesMibInterfaceList) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *InterfacesMibInterfaceList) GetState() *InterfacesMibInterfaceListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *InterfacesMibInterfaceList) GetSubinterfaces() *InterfacesMibInterfaceListSubinterfacesType {
	if x != nil {
		return x.Subinterfaces
	}
	return nil
}

func (x *InterfacesMibInterfaceList) GetHoldTime() *InterfacesMibInterfaceListHoldTimeType {
	if x != nil {
		return x.HoldTime
	}
	return nil
}

func (x *InterfacesMibInterfaceList) GetEthernet() *InterfacesMibInterfaceListEthernetType {
	if x != nil {
		return x.Ethernet
	}
	return nil
}

type InterfacesMibInterfaceListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	Type          *string                `protobuf:"bytes,52,opt,name=type" json:"type,omitempty"`
	Mtu           *uint32                `protobuf:"varint,53,opt,name=mtu" json:"mtu,omitempty"`
	LoopbackMode  *bool                  `protobuf:"varint,56,opt,name=loopback_mode,json=loopbackMode" json:"loopback_mode,omitempty"`
	Description   *string                `protobuf:"bytes,54,opt,name=description" json:"description,omitempty"`
	Enabled       *bool                  `protobuf:"varint,55,opt,name=enabled" json:"enabled,omitempty"`
	Ifindex       *uint32                `protobuf:"varint,61,opt,name=ifindex" json:"ifindex,omitempty"`
	AdminStatus   *string                `protobuf:"bytes,62,opt,name=admin_status,json=adminStatus" json:"admin_status,omitempty"`
	OperStatus    *string                `protobuf:"bytes,63,opt,name=oper_status,json=operStatus" json:"oper_status,omitempty"`
	LastChange    *uint64                `protobuf:"varint,64,opt,name=last_change,json=lastChange" json:"last_change,omitempty"`
	Logical       *bool                  `protobuf:"varint,65,opt,name=logical" json:"logical,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListStateType) Reset() {
	*x = InterfacesMibInterfaceListStateType{}
	mi := &file_mib2d_oc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListStateType) ProtoMessage() {}

func (x *InterfacesMibInterfaceListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListStateType.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListStateType) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *InterfacesMibInterfaceListStateType) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *InterfacesMibInterfaceListStateType) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *InterfacesMibInterfaceListStateType) GetMtu() uint32 {
	if x != nil && x.Mtu != nil {
		return *x.Mtu
	}
	return 0
}

func (x *InterfacesMibInterfaceListStateType) GetLoopbackMode() bool {
	if x != nil && x.LoopbackMode != nil {
		return *x.LoopbackMode
	}
	return false
}

func (x *InterfacesMibInterfaceListStateType) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *InterfacesMibInterfaceListStateType) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *InterfacesMibInterfaceListStateType) GetIfindex() uint32 {
	if x != nil && x.Ifindex != nil {
		return *x.Ifindex
	}
	return 0
}

func (x *InterfacesMibInterfaceListStateType) GetAdminStatus() string {
	if x != nil && x.AdminStatus != nil {
		return *x.AdminStatus
	}
	return ""
}

func (x *InterfacesMibInterfaceListStateType) GetOperStatus() string {
	if x != nil && x.OperStatus != nil {
		return *x.OperStatus
	}
	return ""
}

func (x *InterfacesMibInterfaceListStateType) GetLastChange() uint64 {
	if x != nil && x.LastChange != nil {
		return *x.LastChange
	}
	return 0
}

func (x *InterfacesMibInterfaceListStateType) GetLogical() bool {
	if x != nil && x.Logical != nil {
		return *x.Logical
	}
	return false
}

type InterfacesMibInterfaceListSubinterfacesType struct {
	state         protoimpl.MessageState                                         `protogen:"open.v1"`
	Subinterface  []*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceList `protobuf:"bytes,151,rep,name=subinterface" json:"subinterface,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListSubinterfacesType) Reset() {
	*x = InterfacesMibInterfaceListSubinterfacesType{}
	mi := &file_mib2d_oc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListSubinterfacesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListSubinterfacesType) ProtoMessage() {}

func (x *InterfacesMibInterfaceListSubinterfacesType) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListSubinterfacesType.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListSubinterfacesType) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *InterfacesMibInterfaceListSubinterfacesType) GetSubinterface() []*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceList {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type InterfacesMibInterfaceListHoldTimeType struct {
	state         protoimpl.MessageState                           `protogen:"open.v1"`
	State         *InterfacesMibInterfaceListHoldTimeTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListHoldTimeType) Reset() {
	*x = InterfacesMibInterfaceListHoldTimeType{}
	mi := &file_mib2d_oc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListHoldTimeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListHoldTimeType) ProtoMessage() {}

func (x *InterfacesMibInterfaceListHoldTimeType) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListHoldTimeType.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListHoldTimeType) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *InterfacesMibInterfaceListHoldTimeType) GetState() *InterfacesMibInterfaceListHoldTimeTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type InterfacesMibInterfaceListEthernetType struct {
	state         protoimpl.MessageState                           `protogen:"open.v1"`
	State         *InterfacesMibInterfaceListEthernetTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListEthernetType) Reset() {
	*x = InterfacesMibInterfaceListEthernetType{}
	mi := &file_mib2d_oc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListEthernetType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListEthernetType) ProtoMessage() {}

func (x *InterfacesMibInterfaceListEthernetType) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListEthernetType.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListEthernetType) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (x *InterfacesMibInterfaceListEthernetType) GetState() *InterfacesMibInterfaceListEthernetTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceList struct {
	state         protoimpl.MessageState                                                `protogen:"open.v1"`
	Index         *uint32                                                               `protobuf:"varint,51,opt,name=index" json:"index,omitempty"`
	State         *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	Ipv4          *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type  `protobuf:"bytes,152,opt,name=ipv4" json:"ipv4,omitempty"`
	Ipv6          *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type  `protobuf:"bytes,153,opt,name=ipv6" json:"ipv6,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceList) Reset() {
	*x = InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceList{}
	mi := &file_mib2d_oc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceList) ProtoMessage() {}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceList) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceList.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceList) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceList) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceList) GetState() *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceList) GetIpv4() *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type {
	if x != nil {
		return x.Ipv4
	}
	return nil
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceList) GetIpv6() *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type {
	if x != nil {
		return x.Ipv6
	}
	return nil
}

type InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         *uint32                `protobuf:"varint,51,opt,name=index" json:"index,omitempty"`
	Description   *string                `protobuf:"bytes,53,opt,name=description" json:"description,omitempty"`
	Enabled       *bool                  `protobuf:"varint,54,opt,name=enabled" json:"enabled,omitempty"`
	Name          *string                `protobuf:"bytes,52,opt,name=name" json:"name,omitempty"`
	Ifindex       *uint32                `protobuf:"varint,55,opt,name=ifindex" json:"ifindex,omitempty"`
	AdminStatus   *string                `protobuf:"bytes,56,opt,name=admin_status,json=adminStatus" json:"admin_status,omitempty"`
	OperStatus    *string                `protobuf:"bytes,57,opt,name=oper_status,json=operStatus" json:"oper_status,omitempty"`
	LastChange    *uint64                `protobuf:"varint,58,opt,name=last_change,json=lastChange" json:"last_change,omitempty"`
	Logical       *bool                  `protobuf:"varint,65,opt,name=logical" json:"logical,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListStateType) Reset() {
	*x = InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListStateType{}
	mi := &file_mib2d_oc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListStateType) ProtoMessage() {}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListStateType.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListStateType) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0}
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListStateType) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListStateType) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListStateType) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListStateType) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListStateType) GetIfindex() uint32 {
	if x != nil && x.Ifindex != nil {
		return *x.Ifindex
	}
	return 0
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListStateType) GetAdminStatus() string {
	if x != nil && x.AdminStatus != nil {
		return *x.AdminStatus
	}
	return ""
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListStateType) GetOperStatus() string {
	if x != nil && x.OperStatus != nil {
		return *x.OperStatus
	}
	return ""
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListStateType) GetLastChange() uint64 {
	if x != nil && x.LastChange != nil {
		return *x.LastChange
	}
	return 0
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListStateType) GetLogical() bool {
	if x != nil && x.Logical != nil {
		return *x.Logical
	}
	return false
}

type InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type struct {
	state         protoimpl.MessageState                                                             `protogen:"open.v1"`
	Addresses     *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType  `protobuf:"bytes,151,opt,name=addresses" json:"addresses,omitempty"`
	Neighbors     *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsType  `protobuf:"bytes,152,opt,name=neighbors" json:"neighbors,omitempty"`
	Unnumbered    *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedType `protobuf:"bytes,153,opt,name=unnumbered" json:"unnumbered,omitempty"`
	State         *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeStateType      `protobuf:"bytes,154,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type) Reset() {
	*x = InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type{}
	mi := &file_mib2d_oc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type) ProtoMessage() {}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 1}
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type) GetAddresses() *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type) GetNeighbors() *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsType {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type) GetUnnumbered() *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedType {
	if x != nil {
		return x.Unnumbered
	}
	return nil
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type) GetState() *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type struct {
	state         protoimpl.MessageState                                                             `protogen:"open.v1"`
	Addresses     *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType  `protobuf:"bytes,151,opt,name=addresses" json:"addresses,omitempty"`
	Neighbors     *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsType  `protobuf:"bytes,152,opt,name=neighbors" json:"neighbors,omitempty"`
	Unnumbered    *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedType `protobuf:"bytes,153,opt,name=unnumbered" json:"unnumbered,omitempty"`
	State         *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeStateType      `protobuf:"bytes,154,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type) Reset() {
	*x = InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type{}
	mi := &file_mib2d_oc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type) ProtoMessage() {}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 2}
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type) GetAddresses() *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type) GetNeighbors() *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsType {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type) GetUnnumbered() *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedType {
	if x != nil {
		return x.Unnumbered
	}
	return nil
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type) GetState() *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType struct {
	state         protoimpl.MessageState                                                                         `protogen:"open.v1"`
	Address       []*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList `protobuf:"bytes,151,rep,name=address" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType) Reset() {
	*x = InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType{}
	mi := &file_mib2d_oc_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType) ProtoMessage() {
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 1, 0}
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType) GetAddress() []*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList {
	if x != nil {
		return x.Address
	}
	return nil
}

type InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsType struct {
	state         protoimpl.MessageState                                                                          `protogen:"open.v1"`
	Neighbor      []*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborList `protobuf:"bytes,151,rep,name=neighbor" json:"neighbor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsType) Reset() {
	*x = InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsType{}
	mi := &file_mib2d_oc_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsType) ProtoMessage() {
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsType) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsType.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsType) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 1, 1}
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsType) GetNeighbor() []*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborList {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedType struct {
	state         protoimpl.MessageState                                                                             `protogen:"open.v1"`
	State         *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeStateType        `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	InterfaceRef  *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeInterfaceRefType `protobuf:"bytes,152,opt,name=interface_ref,json=interfaceRef" json:"interface_ref,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedType) Reset() {
	*x = InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedType{}
	mi := &file_mib2d_oc_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedType) ProtoMessage() {
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedType) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedType.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedType) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 1, 2}
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedType) GetState() *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedType) GetInterfaceRef() *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeInterfaceRefType {
	if x != nil {
		return x.InterfaceRef
	}
	return nil
}

type InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       *bool                  `protobuf:"varint,51,opt,name=enabled" json:"enabled,omitempty"`
	Mtu           *uint32                `protobuf:"varint,52,opt,name=mtu" json:"mtu,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeStateType) Reset() {
	*x = InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeStateType{}
	mi := &file_mib2d_oc_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeStateType) ProtoMessage() {}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeStateType.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeStateType) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 1, 3}
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeStateType) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeStateType) GetMtu() uint32 {
	if x != nil && x.Mtu != nil {
		return *x.Mtu
	}
	return 0
}

type InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList struct {
	state         protoimpl.MessageState                                                                                `protogen:"open.v1"`
	Ip            *string                                                                                               `protobuf:"bytes,51,opt,name=ip" json:"ip,omitempty"`
	State         *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList) Reset() {
	*x = InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList{}
	mi := &file_mib2d_oc_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList) ProtoMessage() {
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 1, 0, 0}
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList) GetState() *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ip            *string                `protobuf:"bytes,51,opt,name=ip" json:"ip,omitempty"`
	PrefixLength  *uint32                `protobuf:"varint,52,opt,name=prefix_length,json=prefixLength" json:"prefix_length,omitempty"`
	Origin        *string                `protobuf:"bytes,53,opt,name=origin" json:"origin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListStateType) Reset() {
	*x = InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListStateType{}
	mi := &file_mib2d_oc_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListStateType) ProtoMessage() {
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListStateType.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListStateType) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 1, 0, 0, 0}
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListStateType) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListStateType) GetPrefixLength() uint32 {
	if x != nil && x.PrefixLength != nil {
		return *x.PrefixLength
	}
	return 0
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListStateType) GetOrigin() string {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return ""
}

type InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborList struct {
	state         protoimpl.MessageState                                                                                 `protogen:"open.v1"`
	Ip            *string                                                                                                `protobuf:"bytes,51,opt,name=ip" json:"ip,omitempty"`
	State         *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborList) Reset() {
	*x = InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborList{}
	mi := &file_mib2d_oc_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborList) ProtoMessage() {
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborList) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborList.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborList) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 1, 1, 0}
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborList) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborList) GetState() *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborListStateType struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Ip               *string                `protobuf:"bytes,51,opt,name=ip" json:"ip,omitempty"`
	LinkLayerAddress *string                `protobuf:"bytes,52,opt,name=link_layer_address,json=linkLayerAddress" json:"link_layer_address,omitempty"`
	Origin           *string                `protobuf:"bytes,53,opt,name=origin" json:"origin,omitempty"`
	HostName         *string                `protobuf:"bytes,54,opt,name=host_name,json=hostName" json:"host_name,omitempty"`
	TableId          *uint32                `protobuf:"varint,55,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	NeighborState    *string                `protobuf:"bytes,56,opt,name=neighbor_state,json=neighborState" json:"neighbor_state,omitempty"`
	Expiry           *uint32                `protobuf:"varint,57,opt,name=expiry" json:"expiry,omitempty"`
	IsPublish        *bool                  `protobuf:"varint,58,opt,name=is_publish,json=isPublish" json:"is_publish,omitempty"`
	InterfaceName    *string                `protobuf:"bytes,59,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
	LogicalRouterId  *uint32                `protobuf:"varint,60,opt,name=logical_router_id,json=logicalRouterId" json:"logical_router_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborListStateType) Reset() {
	*x = InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborListStateType{}
	mi := &file_mib2d_oc_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborListStateType) ProtoMessage() {
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborListStateType.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborListStateType) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 1, 1, 0, 0}
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborListStateType) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborListStateType) GetLinkLayerAddress() string {
	if x != nil && x.LinkLayerAddress != nil {
		return *x.LinkLayerAddress
	}
	return ""
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborListStateType) GetOrigin() string {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return ""
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborListStateType) GetHostName() string {
	if x != nil && x.HostName != nil {
		return *x.HostName
	}
	return ""
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborListStateType) GetTableId() uint32 {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return 0
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborListStateType) GetNeighborState() string {
	if x != nil && x.NeighborState != nil {
		return *x.NeighborState
	}
	return ""
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborListStateType) GetExpiry() uint32 {
	if x != nil && x.Expiry != nil {
		return *x.Expiry
	}
	return 0
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborListStateType) GetIsPublish() bool {
	if x != nil && x.IsPublish != nil {
		return *x.IsPublish
	}
	return false
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborListStateType) GetInterfaceName() string {
	if x != nil && x.InterfaceName != nil {
		return *x.InterfaceName
	}
	return ""
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborListStateType) GetLogicalRouterId() uint32 {
	if x != nil && x.LogicalRouterId != nil {
		return *x.LogicalRouterId
	}
	return 0
}

type InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       *bool                  `protobuf:"varint,51,opt,name=enabled" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeStateType) Reset() {
	*x = InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeStateType{}
	mi := &file_mib2d_oc_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeStateType) ProtoMessage() {
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeStateType.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeStateType) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 1, 2, 0}
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeStateType) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeInterfaceRefType struct {
	state         protoimpl.MessageState                                                                                      `protogen:"open.v1"`
	State         *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeInterfaceRefTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeInterfaceRefType) Reset() {
	*x = InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeInterfaceRefType{}
	mi := &file_mib2d_oc_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeInterfaceRefType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeInterfaceRefType) ProtoMessage() {
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeInterfaceRefType) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeInterfaceRefType.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeInterfaceRefType) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 1, 2, 1}
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeInterfaceRefType) GetState() *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeInterfaceRefTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeInterfaceRefTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Interface     *string                `protobuf:"bytes,51,opt,name=interface" json:"interface,omitempty"`
	Subinterface  *uint32                `protobuf:"varint,52,opt,name=subinterface" json:"subinterface,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeInterfaceRefTypeStateType) Reset() {
	*x = InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeInterfaceRefTypeStateType{}
	mi := &file_mib2d_oc_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeInterfaceRefTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeInterfaceRefTypeStateType) ProtoMessage() {
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeInterfaceRefTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeInterfaceRefTypeStateType.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeInterfaceRefTypeStateType) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 1, 2, 1, 0}
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeInterfaceRefTypeStateType) GetInterface() string {
	if x != nil && x.Interface != nil {
		return *x.Interface
	}
	return ""
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeInterfaceRefTypeStateType) GetSubinterface() uint32 {
	if x != nil && x.Subinterface != nil {
		return *x.Subinterface
	}
	return 0
}

type InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType struct {
	state         protoimpl.MessageState                                                                         `protogen:"open.v1"`
	Address       []*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList `protobuf:"bytes,151,rep,name=address" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType) Reset() {
	*x = InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType{}
	mi := &file_mib2d_oc_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType) ProtoMessage() {
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 2, 0}
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType) GetAddress() []*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList {
	if x != nil {
		return x.Address
	}
	return nil
}

type InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsType struct {
	state         protoimpl.MessageState                                                                          `protogen:"open.v1"`
	Neighbor      []*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborList `protobuf:"bytes,151,rep,name=neighbor" json:"neighbor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsType) Reset() {
	*x = InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsType{}
	mi := &file_mib2d_oc_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsType) ProtoMessage() {
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsType) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsType.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsType) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 2, 1}
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsType) GetNeighbor() []*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborList {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedType struct {
	state         protoimpl.MessageState                                                                             `protogen:"open.v1"`
	State         *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeStateType        `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	InterfaceRef  *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeInterfaceRefType `protobuf:"bytes,152,opt,name=interface_ref,json=interfaceRef" json:"interface_ref,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedType) Reset() {
	*x = InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedType{}
	mi := &file_mib2d_oc_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedType) ProtoMessage() {
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedType) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedType.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedType) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 2, 2}
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedType) GetState() *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedType) GetInterfaceRef() *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeInterfaceRefType {
	if x != nil {
		return x.InterfaceRef
	}
	return nil
}

type InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       *bool                  `protobuf:"varint,51,opt,name=enabled" json:"enabled,omitempty"`
	Mtu           *uint32                `protobuf:"varint,52,opt,name=mtu" json:"mtu,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeStateType) Reset() {
	*x = InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeStateType{}
	mi := &file_mib2d_oc_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeStateType) ProtoMessage() {}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeStateType.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeStateType) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 2, 3}
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeStateType) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeStateType) GetMtu() uint32 {
	if x != nil && x.Mtu != nil {
		return *x.Mtu
	}
	return 0
}

type InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList struct {
	state         protoimpl.MessageState                                                                                `protogen:"open.v1"`
	Ip            *string                                                                                               `protobuf:"bytes,51,opt,name=ip" json:"ip,omitempty"`
	State         *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList) Reset() {
	*x = InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList{}
	mi := &file_mib2d_oc_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList) ProtoMessage() {
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 2, 0, 0}
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList) GetState() *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ip            *string                `protobuf:"bytes,51,opt,name=ip" json:"ip,omitempty"`
	PrefixLength  *uint32                `protobuf:"varint,52,opt,name=prefix_length,json=prefixLength" json:"prefix_length,omitempty"`
	Origin        *string                `protobuf:"bytes,53,opt,name=origin" json:"origin,omitempty"`
	Status        *string                `protobuf:"bytes,54,opt,name=status" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListStateType) Reset() {
	*x = InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListStateType{}
	mi := &file_mib2d_oc_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListStateType) ProtoMessage() {
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListStateType.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListStateType) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 2, 0, 0, 0}
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListStateType) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListStateType) GetPrefixLength() uint32 {
	if x != nil && x.PrefixLength != nil {
		return *x.PrefixLength
	}
	return 0
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListStateType) GetOrigin() string {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return ""
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListStateType) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

type InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborList struct {
	state         protoimpl.MessageState                                                                                 `protogen:"open.v1"`
	Ip            *string                                                                                                `protobuf:"bytes,51,opt,name=ip" json:"ip,omitempty"`
	State         *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborList) Reset() {
	*x = InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborList{}
	mi := &file_mib2d_oc_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborList) ProtoMessage() {
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborList) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborList.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborList) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 2, 1, 0}
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborList) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborList) GetState() *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborListStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborListStateType struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Ip               *string                `protobuf:"bytes,51,opt,name=ip" json:"ip,omitempty"`
	LinkLayerAddress *string                `protobuf:"bytes,52,opt,name=link_layer_address,json=linkLayerAddress" json:"link_layer_address,omitempty"`
	Origin           *string                `protobuf:"bytes,53,opt,name=origin" json:"origin,omitempty"`
	IsRouter         *bool                  `protobuf:"varint,54,opt,name=is_router,json=isRouter" json:"is_router,omitempty"`
	NeighborState    *string                `protobuf:"bytes,55,opt,name=neighbor_state,json=neighborState" json:"neighbor_state,omitempty"`
	TableId          *uint32                `protobuf:"varint,56,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	IsSecure         *bool                  `protobuf:"varint,57,opt,name=is_secure,json=isSecure" json:"is_secure,omitempty"`
	Expiry           *uint32                `protobuf:"varint,59,opt,name=expiry" json:"expiry,omitempty"`
	IsPublish        *bool                  `protobuf:"varint,58,opt,name=is_publish,json=isPublish" json:"is_publish,omitempty"`
	InterfaceName    *string                `protobuf:"bytes,60,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
	LogicalRouterId  *uint32                `protobuf:"varint,61,opt,name=logical_router_id,json=logicalRouterId" json:"logical_router_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborListStateType) Reset() {
	*x = InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborListStateType{}
	mi := &file_mib2d_oc_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborListStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborListStateType) ProtoMessage() {
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborListStateType) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborListStateType.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborListStateType) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 2, 1, 0, 0}
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborListStateType) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborListStateType) GetLinkLayerAddress() string {
	if x != nil && x.LinkLayerAddress != nil {
		return *x.LinkLayerAddress
	}
	return ""
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborListStateType) GetOrigin() string {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return ""
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborListStateType) GetIsRouter() bool {
	if x != nil && x.IsRouter != nil {
		return *x.IsRouter
	}
	return false
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborListStateType) GetNeighborState() string {
	if x != nil && x.NeighborState != nil {
		return *x.NeighborState
	}
	return ""
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborListStateType) GetTableId() uint32 {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return 0
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborListStateType) GetIsSecure() bool {
	if x != nil && x.IsSecure != nil {
		return *x.IsSecure
	}
	return false
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborListStateType) GetExpiry() uint32 {
	if x != nil && x.Expiry != nil {
		return *x.Expiry
	}
	return 0
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborListStateType) GetIsPublish() bool {
	if x != nil && x.IsPublish != nil {
		return *x.IsPublish
	}
	return false
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborListStateType) GetInterfaceName() string {
	if x != nil && x.InterfaceName != nil {
		return *x.InterfaceName
	}
	return ""
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborListStateType) GetLogicalRouterId() uint32 {
	if x != nil && x.LogicalRouterId != nil {
		return *x.LogicalRouterId
	}
	return 0
}

type InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       *bool                  `protobuf:"varint,51,opt,name=enabled" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeStateType) Reset() {
	*x = InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeStateType{}
	mi := &file_mib2d_oc_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeStateType) ProtoMessage() {
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeStateType.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeStateType) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 2, 2, 0}
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeStateType) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeInterfaceRefType struct {
	state         protoimpl.MessageState                                                                                      `protogen:"open.v1"`
	State         *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeInterfaceRefTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeInterfaceRefType) Reset() {
	*x = InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeInterfaceRefType{}
	mi := &file_mib2d_oc_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeInterfaceRefType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeInterfaceRefType) ProtoMessage() {
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeInterfaceRefType) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeInterfaceRefType.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeInterfaceRefType) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 2, 2, 1}
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeInterfaceRefType) GetState() *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeInterfaceRefTypeStateType {
	if x != nil {
		return x.State
	}
	return nil
}

type InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeInterfaceRefTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Interface     *string                `protobuf:"bytes,51,opt,name=interface" json:"interface,omitempty"`
	Subinterface  *uint32                `protobuf:"varint,52,opt,name=subinterface" json:"subinterface,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeInterfaceRefTypeStateType) Reset() {
	*x = InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeInterfaceRefTypeStateType{}
	mi := &file_mib2d_oc_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeInterfaceRefTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeInterfaceRefTypeStateType) ProtoMessage() {
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeInterfaceRefTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeInterfaceRefTypeStateType.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeInterfaceRefTypeStateType) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 1, 0, 2, 2, 1, 0}
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeInterfaceRefTypeStateType) GetInterface() string {
	if x != nil && x.Interface != nil {
		return *x.Interface
	}
	return ""
}

func (x *InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeInterfaceRefTypeStateType) GetSubinterface() uint32 {
	if x != nil && x.Subinterface != nil {
		return *x.Subinterface
	}
	return 0
}

type InterfacesMibInterfaceListHoldTimeTypeStateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Up            *uint32                `protobuf:"varint,51,opt,name=up" json:"up,omitempty"`
	Down          *uint32                `protobuf:"varint,52,opt,name=down" json:"down,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListHoldTimeTypeStateType) Reset() {
	*x = InterfacesMibInterfaceListHoldTimeTypeStateType{}
	mi := &file_mib2d_oc_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListHoldTimeTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListHoldTimeTypeStateType) ProtoMessage() {}

func (x *InterfacesMibInterfaceListHoldTimeTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListHoldTimeTypeStateType.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListHoldTimeTypeStateType) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 2, 0}
}

func (x *InterfacesMibInterfaceListHoldTimeTypeStateType) GetUp() uint32 {
	if x != nil && x.Up != nil {
		return *x.Up
	}
	return 0
}

func (x *InterfacesMibInterfaceListHoldTimeTypeStateType) GetDown() uint32 {
	if x != nil && x.Down != nil {
		return *x.Down
	}
	return 0
}

type InterfacesMibInterfaceListEthernetTypeStateType struct {
	state                protoimpl.MessageState                                       `protogen:"open.v1"`
	MacAddress           *string                                                      `protobuf:"bytes,51,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
	AutoNegotiate        *bool                                                        `protobuf:"varint,52,opt,name=auto_negotiate,json=autoNegotiate" json:"auto_negotiate,omitempty"`
	DuplexMode           *string                                                      `protobuf:"bytes,53,opt,name=duplex_mode,json=duplexMode" json:"duplex_mode,omitempty"`
	PortSpeed            *string                                                      `protobuf:"bytes,54,opt,name=port_speed,json=portSpeed" json:"port_speed,omitempty"`
	EnableFlowControl    *bool                                                        `protobuf:"varint,55,opt,name=enable_flow_control,json=enableFlowControl" json:"enable_flow_control,omitempty"`
	HwMacAddress         *string                                                      `protobuf:"bytes,56,opt,name=hw_mac_address,json=hwMacAddress" json:"hw_mac_address,omitempty"`
	NegotiatedDuplexMode *string                                                      `protobuf:"bytes,57,opt,name=negotiated_duplex_mode,json=negotiatedDuplexMode" json:"negotiated_duplex_mode,omitempty"`
	NegotiatedPortSpeed  *string                                                      `protobuf:"bytes,58,opt,name=negotiated_port_speed,json=negotiatedPortSpeed" json:"negotiated_port_speed,omitempty"`
	Counters             *InterfacesMibInterfaceListEthernetTypeStateTypeCountersType `protobuf:"bytes,151,opt,name=counters" json:"counters,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListEthernetTypeStateType) Reset() {
	*x = InterfacesMibInterfaceListEthernetTypeStateType{}
	mi := &file_mib2d_oc_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListEthernetTypeStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListEthernetTypeStateType) ProtoMessage() {}

func (x *InterfacesMibInterfaceListEthernetTypeStateType) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListEthernetTypeStateType.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListEthernetTypeStateType) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 3, 0}
}

func (x *InterfacesMibInterfaceListEthernetTypeStateType) GetMacAddress() string {
	if x != nil && x.MacAddress != nil {
		return *x.MacAddress
	}
	return ""
}

func (x *InterfacesMibInterfaceListEthernetTypeStateType) GetAutoNegotiate() bool {
	if x != nil && x.AutoNegotiate != nil {
		return *x.AutoNegotiate
	}
	return false
}

func (x *InterfacesMibInterfaceListEthernetTypeStateType) GetDuplexMode() string {
	if x != nil && x.DuplexMode != nil {
		return *x.DuplexMode
	}
	return ""
}

func (x *InterfacesMibInterfaceListEthernetTypeStateType) GetPortSpeed() string {
	if x != nil && x.PortSpeed != nil {
		return *x.PortSpeed
	}
	return ""
}

func (x *InterfacesMibInterfaceListEthernetTypeStateType) GetEnableFlowControl() bool {
	if x != nil && x.EnableFlowControl != nil {
		return *x.EnableFlowControl
	}
	return false
}

func (x *InterfacesMibInterfaceListEthernetTypeStateType) GetHwMacAddress() string {
	if x != nil && x.HwMacAddress != nil {
		return *x.HwMacAddress
	}
	return ""
}

func (x *InterfacesMibInterfaceListEthernetTypeStateType) GetNegotiatedDuplexMode() string {
	if x != nil && x.NegotiatedDuplexMode != nil {
		return *x.NegotiatedDuplexMode
	}
	return ""
}

func (x *InterfacesMibInterfaceListEthernetTypeStateType) GetNegotiatedPortSpeed() string {
	if x != nil && x.NegotiatedPortSpeed != nil {
		return *x.NegotiatedPortSpeed
	}
	return ""
}

func (x *InterfacesMibInterfaceListEthernetTypeStateType) GetCounters() *InterfacesMibInterfaceListEthernetTypeStateTypeCountersType {
	if x != nil {
		return x.Counters
	}
	return nil
}

type InterfacesMibInterfaceListEthernetTypeStateTypeCountersType struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	InMacControlFrames  *uint64                `protobuf:"varint,51,opt,name=in_mac_control_frames,json=inMacControlFrames" json:"in_mac_control_frames,omitempty"`
	InMacPauseFrames    *uint64                `protobuf:"varint,52,opt,name=in_mac_pause_frames,json=inMacPauseFrames" json:"in_mac_pause_frames,omitempty"`
	InOversizeFrames    *uint64                `protobuf:"varint,53,opt,name=in_oversize_frames,json=inOversizeFrames" json:"in_oversize_frames,omitempty"`
	InJabberFrames      *uint64                `protobuf:"varint,54,opt,name=in_jabber_frames,json=inJabberFrames" json:"in_jabber_frames,omitempty"`
	InFragmentFrames    *uint64                `protobuf:"varint,55,opt,name=in_fragment_frames,json=inFragmentFrames" json:"in_fragment_frames,omitempty"`
	In_8021QFrames      *uint64                `protobuf:"varint,56,opt,name=in_8021q_frames,json=in8021qFrames" json:"in_8021q_frames,omitempty"`
	InCrcErrors         *uint64                `protobuf:"varint,57,opt,name=in_crc_errors,json=inCrcErrors" json:"in_crc_errors,omitempty"`
	InBlockErrors       *uint64                `protobuf:"varint,58,opt,name=in_block_errors,json=inBlockErrors" json:"in_block_errors,omitempty"`
	OutMacControlFrames *uint64                `protobuf:"varint,60,opt,name=out_mac_control_frames,json=outMacControlFrames" json:"out_mac_control_frames,omitempty"`
	OutMacPauseFrames   *uint64                `protobuf:"varint,59,opt,name=out_mac_pause_frames,json=outMacPauseFrames" json:"out_mac_pause_frames,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *InterfacesMibInterfaceListEthernetTypeStateTypeCountersType) Reset() {
	*x = InterfacesMibInterfaceListEthernetTypeStateTypeCountersType{}
	mi := &file_mib2d_oc_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfacesMibInterfaceListEthernetTypeStateTypeCountersType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMibInterfaceListEthernetTypeStateTypeCountersType) ProtoMessage() {}

func (x *InterfacesMibInterfaceListEthernetTypeStateTypeCountersType) ProtoReflect() protoreflect.Message {
	mi := &file_mib2d_oc_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMibInterfaceListEthernetTypeStateTypeCountersType.ProtoReflect.Descriptor instead.
func (*InterfacesMibInterfaceListEthernetTypeStateTypeCountersType) Descriptor() ([]byte, []int) {
	return file_mib2d_oc_proto_rawDescGZIP(), []int{0, 0, 3, 0, 0}
}

func (x *InterfacesMibInterfaceListEthernetTypeStateTypeCountersType) GetInMacControlFrames() uint64 {
	if x != nil && x.InMacControlFrames != nil {
		return *x.InMacControlFrames
	}
	return 0
}

func (x *InterfacesMibInterfaceListEthernetTypeStateTypeCountersType) GetInMacPauseFrames() uint64 {
	if x != nil && x.InMacPauseFrames != nil {
		return *x.InMacPauseFrames
	}
	return 0
}

func (x *InterfacesMibInterfaceListEthernetTypeStateTypeCountersType) GetInOversizeFrames() uint64 {
	if x != nil && x.InOversizeFrames != nil {
		return *x.InOversizeFrames
	}
	return 0
}

func (x *InterfacesMibInterfaceListEthernetTypeStateTypeCountersType) GetInJabberFrames() uint64 {
	if x != nil && x.InJabberFrames != nil {
		return *x.InJabberFrames
	}
	return 0
}

func (x *InterfacesMibInterfaceListEthernetTypeStateTypeCountersType) GetInFragmentFrames() uint64 {
	if x != nil && x.InFragmentFrames != nil {
		return *x.InFragmentFrames
	}
	return 0
}

func (x *InterfacesMibInterfaceListEthernetTypeStateTypeCountersType) GetIn_8021QFrames() uint64 {
	if x != nil && x.In_8021QFrames != nil {
		return *x.In_8021QFrames
	}
	return 0
}

func (x *InterfacesMibInterfaceListEthernetTypeStateTypeCountersType) GetInCrcErrors() uint64 {
	if x != nil && x.InCrcErrors != nil {
		return *x.InCrcErrors
	}
	return 0
}

func (x *InterfacesMibInterfaceListEthernetTypeStateTypeCountersType) GetInBlockErrors() uint64 {
	if x != nil && x.InBlockErrors != nil {
		return *x.InBlockErrors
	}
	return 0
}

func (x *InterfacesMibInterfaceListEthernetTypeStateTypeCountersType) GetOutMacControlFrames() uint64 {
	if x != nil && x.OutMacControlFrames != nil {
		return *x.OutMacControlFrames
	}
	return 0
}

func (x *InterfacesMibInterfaceListEthernetTypeStateTypeCountersType) GetOutMacPauseFrames() uint64 {
	if x != nil && x.OutMacPauseFrames != nil {
		return *x.OutMacPauseFrames
	}
	return 0
}

var file_mib2d_oc_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*InterfacesMib)(nil),
		Field:         55,
		Name:          "jnpr_interfaces_mib_ext",
		Tag:           "bytes,55,opt,name=jnpr_interfaces_mib_ext",
		Filename:      "mib2d_oc.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional interfaces_mib jnpr_interfaces_mib_ext = 55;
	E_JnprInterfacesMibExt = &file_mib2d_oc_proto_extTypes[0]
)

var File_mib2d_oc_proto protoreflect.FileDescriptor

var file_mib2d_oc_proto_rawDesc = string([]byte{
	0x0a, 0x0e, 0x6d, 0x69, 0x62, 0x32, 0x64, 0x5f, 0x6f, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x13, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x38, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x69, 0x62, 0x12, 0x3d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x69, 0x62, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xf5, 0x37, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x5f, 0x6d, 0x69, 0x62, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x69, 0x62,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x12, 0x4b, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x9b,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x5f, 0x6d, 0x69, 0x62, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49,
	0x0a, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6d,
	0x69, 0x62, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x1a, 0xc0, 0x02, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d,
	0x74, 0x75, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6c, 0x6f, 0x6f, 0x70, 0x62,
	0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x3e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x41, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x1a, 0xc9, 0x29, 0x0a,
	0x12, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x68, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x69, 0x62, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xc8, 0x28,
	0x0a, 0x11, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x65, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x69,
	0x62, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x62, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x18,
	0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x5f, 0x6d, 0x69, 0x62, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34, 0x12, 0x62, 0x0a, 0x04, 0x69,
	0x70, 0x76, 0x36, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x69, 0x62, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x1a,
	0x8b, 0x02, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x41,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x1a, 0xd0, 0x11,
	0x0a, 0x09, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x7b, 0x0a, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x5c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x69, 0x62,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x7b, 0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x69, 0x62, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x7e, 0x0a, 0x0a, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x65, 0x64, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x69, 0x62, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x75, 0x6e, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x65, 0x64, 0x12, 0x6f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x9a,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x5f, 0x6d, 0x69, 0x62, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xa8, 0x03, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x69, 0x62, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x1a, 0x8e, 0x02, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x15, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82,
	0x40, 0x02, 0x08, 0x01, 0x52, 0x02, 0x69, 0x70, 0x12, 0x8b, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x69, 0x62, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x59, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x1a, 0xa0, 0x05, 0x0a, 0x0e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x69, 0x62, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x1a, 0x83,
	0x04, 0x0a, 0x0d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40,
	0x02, 0x08, 0x01, 0x52, 0x02, 0x69, 0x70, 0x12, 0x8c, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x75, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x69, 0x62, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xcb, 0x02, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x18, 0x3a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x1a, 0xcf, 0x04, 0x0a, 0x0f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x7f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x68, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x69, 0x62, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x98, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f,
	0x6d, 0x69, 0x62, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x66, 0x1a, 0x26, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xf9, 0x01, 0x0a, 0x12, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x92, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f,
	0x6d, 0x69, 0x62, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x4e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x74, 0x75,
	0x1a, 0x85, 0x12, 0x0a, 0x09, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x7b,
	0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f,
	0x6d, 0x69, 0x62, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x7b, 0x0a, 0x09, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x5c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x69, 0x62,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x7e, 0x0a, 0x0a, 0x75, 0x6e, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x69, 0x62, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x6e, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x75, 0x6e,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x12, 0x6f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x69, 0x62, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xc0, 0x03, 0x0a, 0x0e, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x84, 0x01, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x69, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x69, 0x62,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x1a, 0xa6, 0x02, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x02, 0x69, 0x70, 0x12, 0x8b, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x74, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x69, 0x62, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x71, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xbd, 0x05, 0x0a,
	0x0e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x87, 0x01, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x97, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x5f, 0x6d, 0x69, 0x62, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x1a, 0xa0, 0x04, 0x0a, 0x0d, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x8c, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x75, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x5f, 0x6d, 0x69, 0x62, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0xe8, 0x02, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x69,
	0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x1a, 0xcf, 0x04, 0x0a,
	0x0f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x7f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x68, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x69,
	0x62, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x96, 0x01, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x70, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x69, 0x62, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x1a, 0x26, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x1a, 0xf9, 0x01, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x69, 0x62, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x4e,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0x38,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x1a, 0x93, 0x01, 0x0a, 0x0e, 0x68, 0x6f, 0x6c,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x69, 0x62, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x68, 0x6f, 0x6c, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x30, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x70,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x1a, 0xee,
	0x07, 0x0a, 0x0d, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x4e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x69,
	0x62, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0x8c, 0x07, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x4e, 0x65,
	0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x70, 0x6c, 0x65,
	0x78, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x75,
	0x70, 0x6c, 0x65, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x37,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x77,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x77, 0x5f, 0x6d, 0x61,
	0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x68, 0x77, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a,
	0x16, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x70, 0x6c,
	0x65, 0x78, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6e,
	0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f,
	0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x62, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x69, 0x62, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x1a, 0xd1, 0x03, 0x0a, 0x0d,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a,
	0x15, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x69, 0x6e,
	0x4d, 0x61, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x2d, 0x0a, 0x13, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x69,
	0x6e, 0x4d, 0x61, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x69, 0x6e, 0x4f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x69, 0x6e, 0x5f, 0x6a, 0x61, 0x62, 0x62, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x69, 0x6e, 0x4a, 0x61, 0x62, 0x62, 0x65,
	0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x5f, 0x66, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x38, 0x30, 0x32, 0x31,
	0x71, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x69, 0x6e, 0x38, 0x30, 0x32, 0x31, 0x71, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0d, 0x69, 0x6e, 0x5f, 0x63, 0x72, 0x63, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x6e, 0x43, 0x72, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x69, 0x6e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x75, 0x74,
	0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6f, 0x75, 0x74, 0x4d, 0x61,
	0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2f,
	0x0a, 0x14, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6f, 0x75,
	0x74, 0x4d, 0x61, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x3a,
	0x5f, 0x0a, 0x17, 0x6a, 0x6e, 0x70, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x5f, 0x6d, 0x69, 0x62, 0x5f, 0x65, 0x78, 0x74, 0x12, 0x17, 0x2e, 0x4a, 0x75, 0x6e,
	0x69, 0x70, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x69, 0x62, 0x52, 0x14, 0x6a, 0x6e, 0x70, 0x72,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x4d, 0x69, 0x62, 0x45, 0x78, 0x74,
	0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
})

var (
	file_mib2d_oc_proto_rawDescOnce sync.Once
	file_mib2d_oc_proto_rawDescData []byte
)

func file_mib2d_oc_proto_rawDescGZIP() []byte {
	file_mib2d_oc_proto_rawDescOnce.Do(func() {
		file_mib2d_oc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_mib2d_oc_proto_rawDesc), len(file_mib2d_oc_proto_rawDesc)))
	})
	return file_mib2d_oc_proto_rawDescData
}

var file_mib2d_oc_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_mib2d_oc_proto_goTypes = []any{
	(*InterfacesMib)(nil),                                                                                              // 0: interfaces_mib
	(*InterfacesMibInterfaceList)(nil),                                                                                 // 1: interfaces_mib.interface_list
	(*InterfacesMibInterfaceListStateType)(nil),                                                                        // 2: interfaces_mib.interface_list.state_type
	(*InterfacesMibInterfaceListSubinterfacesType)(nil),                                                                // 3: interfaces_mib.interface_list.subinterfaces_type
	(*InterfacesMibInterfaceListHoldTimeType)(nil),                                                                     // 4: interfaces_mib.interface_list.hold_time_type
	(*InterfacesMibInterfaceListEthernetType)(nil),                                                                     // 5: interfaces_mib.interface_list.ethernet_type
	(*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceList)(nil),                                                // 6: interfaces_mib.interface_list.subinterfaces_type.subinterface_list
	(*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListStateType)(nil),                                       // 7: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.state_type
	(*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type)(nil),                                        // 8: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type
	(*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type)(nil),                                        // 9: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type
	(*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType)(nil),                           // 10: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type
	(*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsType)(nil),                           // 11: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.neighbors_type
	(*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedType)(nil),                          // 12: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.unnumbered_type
	(*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeStateType)(nil),                               // 13: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.state_type
	(*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList)(nil),                // 14: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type.address_list
	(*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListStateType)(nil),       // 15: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type.address_list.state_type
	(*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborList)(nil),               // 16: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.neighbors_type.neighbor_list
	(*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeNeighborsTypeNeighborListStateType)(nil),      // 17: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.neighbors_type.neighbor_list.state_type
	(*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeStateType)(nil),                 // 18: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.unnumbered_type.state_type
	(*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeInterfaceRefType)(nil),          // 19: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.unnumbered_type.interface_ref_type
	(*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeUnnumberedTypeInterfaceRefTypeStateType)(nil), // 20: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.unnumbered_type.interface_ref_type.state_type
	(*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType)(nil),                           // 21: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type
	(*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsType)(nil),                           // 22: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.neighbors_type
	(*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedType)(nil),                          // 23: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.unnumbered_type
	(*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeStateType)(nil),                               // 24: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.state_type
	(*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList)(nil),                // 25: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type.address_list
	(*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListStateType)(nil),       // 26: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type.address_list.state_type
	(*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborList)(nil),               // 27: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.neighbors_type.neighbor_list
	(*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeNeighborsTypeNeighborListStateType)(nil),      // 28: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.neighbors_type.neighbor_list.state_type
	(*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeStateType)(nil),                 // 29: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.unnumbered_type.state_type
	(*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeInterfaceRefType)(nil),          // 30: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.unnumbered_type.interface_ref_type
	(*InterfacesMibInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeUnnumberedTypeInterfaceRefTypeStateType)(nil), // 31: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.unnumbered_type.interface_ref_type.state_type
	(*InterfacesMibInterfaceListHoldTimeTypeStateType)(nil),                                                            // 32: interfaces_mib.interface_list.hold_time_type.state_type
	(*InterfacesMibInterfaceListEthernetTypeStateType)(nil),                                                            // 33: interfaces_mib.interface_list.ethernet_type.state_type
	(*InterfacesMibInterfaceListEthernetTypeStateTypeCountersType)(nil),                                                // 34: interfaces_mib.interface_list.ethernet_type.state_type.counters_type
	(*JuniperNetworksSensors)(nil), // 35: JuniperNetworksSensors
}
var file_mib2d_oc_proto_depIdxs = []int32{
	1,  // 0: interfaces_mib.interface:type_name -> interfaces_mib.interface_list
	2,  // 1: interfaces_mib.interface_list.state:type_name -> interfaces_mib.interface_list.state_type
	3,  // 2: interfaces_mib.interface_list.subinterfaces:type_name -> interfaces_mib.interface_list.subinterfaces_type
	4,  // 3: interfaces_mib.interface_list.hold_time:type_name -> interfaces_mib.interface_list.hold_time_type
	5,  // 4: interfaces_mib.interface_list.ethernet:type_name -> interfaces_mib.interface_list.ethernet_type
	6,  // 5: interfaces_mib.interface_list.subinterfaces_type.subinterface:type_name -> interfaces_mib.interface_list.subinterfaces_type.subinterface_list
	32, // 6: interfaces_mib.interface_list.hold_time_type.state:type_name -> interfaces_mib.interface_list.hold_time_type.state_type
	33, // 7: interfaces_mib.interface_list.ethernet_type.state:type_name -> interfaces_mib.interface_list.ethernet_type.state_type
	7,  // 8: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.state:type_name -> interfaces_mib.interface_list.subinterfaces_type.subinterface_list.state_type
	8,  // 9: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4:type_name -> interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type
	9,  // 10: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6:type_name -> interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type
	10, // 11: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses:type_name -> interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type
	11, // 12: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.neighbors:type_name -> interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.neighbors_type
	12, // 13: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.unnumbered:type_name -> interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.unnumbered_type
	13, // 14: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.state:type_name -> interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.state_type
	21, // 15: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses:type_name -> interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type
	22, // 16: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.neighbors:type_name -> interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.neighbors_type
	23, // 17: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.unnumbered:type_name -> interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.unnumbered_type
	24, // 18: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.state:type_name -> interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.state_type
	14, // 19: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type.address:type_name -> interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type.address_list
	16, // 20: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.neighbors_type.neighbor:type_name -> interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.neighbors_type.neighbor_list
	18, // 21: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.unnumbered_type.state:type_name -> interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.unnumbered_type.state_type
	19, // 22: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.unnumbered_type.interface_ref:type_name -> interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.unnumbered_type.interface_ref_type
	15, // 23: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type.address_list.state:type_name -> interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type.address_list.state_type
	17, // 24: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.neighbors_type.neighbor_list.state:type_name -> interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.neighbors_type.neighbor_list.state_type
	20, // 25: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.unnumbered_type.interface_ref_type.state:type_name -> interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv4_type.unnumbered_type.interface_ref_type.state_type
	25, // 26: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type.address:type_name -> interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type.address_list
	27, // 27: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.neighbors_type.neighbor:type_name -> interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.neighbors_type.neighbor_list
	29, // 28: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.unnumbered_type.state:type_name -> interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.unnumbered_type.state_type
	30, // 29: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.unnumbered_type.interface_ref:type_name -> interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.unnumbered_type.interface_ref_type
	26, // 30: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type.address_list.state:type_name -> interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type.address_list.state_type
	28, // 31: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.neighbors_type.neighbor_list.state:type_name -> interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.neighbors_type.neighbor_list.state_type
	31, // 32: interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.unnumbered_type.interface_ref_type.state:type_name -> interfaces_mib.interface_list.subinterfaces_type.subinterface_list.ipv6_type.unnumbered_type.interface_ref_type.state_type
	34, // 33: interfaces_mib.interface_list.ethernet_type.state_type.counters:type_name -> interfaces_mib.interface_list.ethernet_type.state_type.counters_type
	35, // 34: jnpr_interfaces_mib_ext:extendee -> JuniperNetworksSensors
	0,  // 35: jnpr_interfaces_mib_ext:type_name -> interfaces_mib
	36, // [36:36] is the sub-list for method output_type
	36, // [36:36] is the sub-list for method input_type
	35, // [35:36] is the sub-list for extension type_name
	34, // [34:35] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_mib2d_oc_proto_init() }
func file_mib2d_oc_proto_init() {
	if File_mib2d_oc_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_mib2d_oc_proto_rawDesc), len(file_mib2d_oc_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   35,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_mib2d_oc_proto_goTypes,
		DependencyIndexes: file_mib2d_oc_proto_depIdxs,
		MessageInfos:      file_mib2d_oc_proto_msgTypes,
		ExtensionInfos:    file_mib2d_oc_proto_extTypes,
	}.Build()
	File_mib2d_oc_proto = out.File
	file_mib2d_oc_proto_goTypes = nil
	file_mib2d_oc_proto_depIdxs = nil
}
