//
// Copyrights (c) 2015, 2016, Juniper Networks, Inc.
// All rights reserved.
//

//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

//
// Nitin Kumar, 2015
//
// This file defines the messages in Protocol Buffers used by
// the LSP statistics sensor. The top-level message is LspStats.
//
// Version 1.0
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: lsp_stats.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Top-level message
type LspStats struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of LSP statistics records
	LspStatsRecords []*LspStatsRecord `protobuf:"bytes,1,rep,name=lsp_stats_records,json=lspStatsRecords" json:"lsp_stats_records,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *LspStats) Reset() {
	*x = LspStats{}
	mi := &file_lsp_stats_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LspStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LspStats) ProtoMessage() {}

func (x *LspStats) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_stats_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LspStats.ProtoReflect.Descriptor instead.
func (*LspStats) Descriptor() ([]byte, []int) {
	return file_lsp_stats_proto_rawDescGZIP(), []int{0}
}

func (x *LspStats) GetLspStatsRecords() []*LspStatsRecord {
	if x != nil {
		return x.LspStatsRecords
	}
	return nil
}

// LSP statistics record
type LspStatsRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the LSP
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// Instance Identifier for cases when RPD creates multiple instances
	InstanceIdentifier *uint32 `protobuf:"varint,2,req,name=instance_identifier,json=instanceIdentifier" json:"instance_identifier,omitempty"`
	// Name of the counter. This is useful when an LSP has multiple counters.
	// When an LSP is resignalled, it is possible that a new counter is
	// created in the hardware.
	CounterName *string `protobuf:"bytes,3,req,name=counter_name,json=counterName" json:"counter_name,omitempty"`
	// The total number of packets
	Packets *uint64 `protobuf:"varint,4,opt,name=packets" json:"packets,omitempty"`
	// The total number of bytes
	Bytes *uint64 `protobuf:"varint,5,opt,name=bytes" json:"bytes,omitempty"`
	// Packet rate computed over the most recent 3 second interval
	PacketRate *uint64 `protobuf:"varint,6,opt,name=packet_rate,json=packetRate" json:"packet_rate,omitempty"`
	// Byte rate computed over the most recent 3 second interval
	ByteRate      *uint64 `protobuf:"varint,7,opt,name=byte_rate,json=byteRate" json:"byte_rate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LspStatsRecord) Reset() {
	*x = LspStatsRecord{}
	mi := &file_lsp_stats_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LspStatsRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LspStatsRecord) ProtoMessage() {}

func (x *LspStatsRecord) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_stats_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LspStatsRecord.ProtoReflect.Descriptor instead.
func (*LspStatsRecord) Descriptor() ([]byte, []int) {
	return file_lsp_stats_proto_rawDescGZIP(), []int{1}
}

func (x *LspStatsRecord) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *LspStatsRecord) GetInstanceIdentifier() uint32 {
	if x != nil && x.InstanceIdentifier != nil {
		return *x.InstanceIdentifier
	}
	return 0
}

func (x *LspStatsRecord) GetCounterName() string {
	if x != nil && x.CounterName != nil {
		return *x.CounterName
	}
	return ""
}

func (x *LspStatsRecord) GetPackets() uint64 {
	if x != nil && x.Packets != nil {
		return *x.Packets
	}
	return 0
}

func (x *LspStatsRecord) GetBytes() uint64 {
	if x != nil && x.Bytes != nil {
		return *x.Bytes
	}
	return 0
}

func (x *LspStatsRecord) GetPacketRate() uint64 {
	if x != nil && x.PacketRate != nil {
		return *x.PacketRate
	}
	return 0
}

func (x *LspStatsRecord) GetByteRate() uint64 {
	if x != nil && x.ByteRate != nil {
		return *x.ByteRate
	}
	return 0
}

var file_lsp_stats_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*LspStats)(nil),
		Field:         5,
		Name:          "jnpr_lsp_statistics_ext",
		Tag:           "bytes,5,opt,name=jnpr_lsp_statistics_ext",
		Filename:      "lsp_stats.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional LspStats jnpr_lsp_statistics_ext = 5;
	E_JnprLspStatisticsExt = &file_lsp_stats_proto_extTypes[0]
)

var File_lsp_stats_proto protoreflect.FileDescriptor

var file_lsp_stats_proto_rawDesc = string([]byte{
	0x0a, 0x0f, 0x6c, 0x73, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x47, 0x0a, 0x08, 0x4c, 0x73, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x3b, 0x0a, 0x11, 0x6c, 0x73, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x4c, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0f,
	0x6c, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22,
	0x89, 0x02, 0x0a, 0x0e, 0x4c, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x19, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x13, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08,
	0x01, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02,
	0x08, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x1b, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x3a, 0x59, 0x0a, 0x17, 0x6a,
	0x6e, 0x70, 0x72, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x12, 0x17, 0x2e, 0x4a, 0x75, 0x6e, 0x69, 0x70, 0x65, 0x72,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x14, 0x6a, 0x6e, 0x70, 0x72, 0x4c, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x45, 0x78, 0x74, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x6a, 0x75, 0x6e, 0x6f,
	0x73, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65,
})

var (
	file_lsp_stats_proto_rawDescOnce sync.Once
	file_lsp_stats_proto_rawDescData []byte
)

func file_lsp_stats_proto_rawDescGZIP() []byte {
	file_lsp_stats_proto_rawDescOnce.Do(func() {
		file_lsp_stats_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_lsp_stats_proto_rawDesc), len(file_lsp_stats_proto_rawDesc)))
	})
	return file_lsp_stats_proto_rawDescData
}

var file_lsp_stats_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_lsp_stats_proto_goTypes = []any{
	(*LspStats)(nil),               // 0: LspStats
	(*LspStatsRecord)(nil),         // 1: LspStatsRecord
	(*JuniperNetworksSensors)(nil), // 2: JuniperNetworksSensors
}
var file_lsp_stats_proto_depIdxs = []int32{
	1, // 0: LspStats.lsp_stats_records:type_name -> LspStatsRecord
	2, // 1: jnpr_lsp_statistics_ext:extendee -> JuniperNetworksSensors
	0, // 2: jnpr_lsp_statistics_ext:type_name -> LspStats
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	2, // [2:3] is the sub-list for extension type_name
	1, // [1:2] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_lsp_stats_proto_init() }
func file_lsp_stats_proto_init() {
	if File_lsp_stats_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_lsp_stats_proto_rawDesc), len(file_lsp_stats_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_lsp_stats_proto_goTypes,
		DependencyIndexes: file_lsp_stats_proto_depIdxs,
		MessageInfos:      file_lsp_stats_proto_msgTypes,
		ExtensionInfos:    file_lsp_stats_proto_extTypes,
	}.Build()
	File_lsp_stats_proto = out.File
	file_lsp_stats_proto_goTypes = nil
	file_lsp_stats_proto_depIdxs = nil
}
