// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: spu_flow_stats.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JunosPfeSpuFlow struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Security      *JunosPfeSpuFlowSecurityType `protobuf:"bytes,151,opt,name=security" json:"security,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosPfeSpuFlow) Reset() {
	*x = JunosPfeSpuFlow{}
	mi := &file_spu_flow_stats_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosPfeSpuFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosPfeSpuFlow) ProtoMessage() {}

func (x *JunosPfeSpuFlow) ProtoReflect() protoreflect.Message {
	mi := &file_spu_flow_stats_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosPfeSpuFlow.ProtoReflect.Descriptor instead.
func (*JunosPfeSpuFlow) Descriptor() ([]byte, []int) {
	return file_spu_flow_stats_proto_rawDescGZIP(), []int{0}
}

func (x *JunosPfeSpuFlow) GetSecurity() *JunosPfeSpuFlowSecurityType {
	if x != nil {
		return x.Security
	}
	return nil
}

type JunosPfeSpuFlowSecurityType struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Spu           *JunosPfeSpuFlowSecurityTypeSpuType `protobuf:"bytes,151,opt,name=spu" json:"spu,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosPfeSpuFlowSecurityType) Reset() {
	*x = JunosPfeSpuFlowSecurityType{}
	mi := &file_spu_flow_stats_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosPfeSpuFlowSecurityType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosPfeSpuFlowSecurityType) ProtoMessage() {}

func (x *JunosPfeSpuFlowSecurityType) ProtoReflect() protoreflect.Message {
	mi := &file_spu_flow_stats_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosPfeSpuFlowSecurityType.ProtoReflect.Descriptor instead.
func (*JunosPfeSpuFlowSecurityType) Descriptor() ([]byte, []int) {
	return file_spu_flow_stats_proto_rawDescGZIP(), []int{0, 0}
}

func (x *JunosPfeSpuFlowSecurityType) GetSpu() *JunosPfeSpuFlowSecurityTypeSpuType {
	if x != nil {
		return x.Spu
	}
	return nil
}

type JunosPfeSpuFlowSecurityTypeSpuType struct {
	state         protoimpl.MessageState                      `protogen:"open.v1"`
	SpuName       *string                                     `protobuf:"bytes,51,opt,name=spu_name,json=spuName" json:"spu_name,omitempty"`
	Flow          *JunosPfeSpuFlowSecurityTypeSpuTypeFlowType `protobuf:"bytes,151,opt,name=flow" json:"flow,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosPfeSpuFlowSecurityTypeSpuType) Reset() {
	*x = JunosPfeSpuFlowSecurityTypeSpuType{}
	mi := &file_spu_flow_stats_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosPfeSpuFlowSecurityTypeSpuType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosPfeSpuFlowSecurityTypeSpuType) ProtoMessage() {}

func (x *JunosPfeSpuFlowSecurityTypeSpuType) ProtoReflect() protoreflect.Message {
	mi := &file_spu_flow_stats_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosPfeSpuFlowSecurityTypeSpuType.ProtoReflect.Descriptor instead.
func (*JunosPfeSpuFlowSecurityTypeSpuType) Descriptor() ([]byte, []int) {
	return file_spu_flow_stats_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *JunosPfeSpuFlowSecurityTypeSpuType) GetSpuName() string {
	if x != nil && x.SpuName != nil {
		return *x.SpuName
	}
	return ""
}

func (x *JunosPfeSpuFlowSecurityTypeSpuType) GetFlow() *JunosPfeSpuFlowSecurityTypeSpuTypeFlowType {
	if x != nil {
		return x.Flow
	}
	return nil
}

type JunosPfeSpuFlowSecurityTypeSpuTypeFlowType struct {
	state         protoimpl.MessageState                                    `protogen:"open.v1"`
	StatsScope    *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType `protobuf:"bytes,151,opt,name=stats_scope,json=statsScope" json:"stats_scope,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowType) Reset() {
	*x = JunosPfeSpuFlowSecurityTypeSpuTypeFlowType{}
	mi := &file_spu_flow_stats_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowType) ProtoMessage() {}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowType) ProtoReflect() protoreflect.Message {
	mi := &file_spu_flow_stats_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosPfeSpuFlowSecurityTypeSpuTypeFlowType.ProtoReflect.Descriptor instead.
func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowType) Descriptor() ([]byte, []int) {
	return file_spu_flow_stats_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowType) GetStatsScope() *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType {
	if x != nil {
		return x.StatsScope
	}
	return nil
}

type JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType struct {
	state         protoimpl.MessageState                                                 `protogen:"open.v1"`
	System        *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType    `protobuf:"bytes,151,opt,name=system" json:"system,omitempty"`
	LsysScope     *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType `protobuf:"bytes,152,opt,name=lsys_scope,json=lsysScope" json:"lsys_scope,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType) Reset() {
	*x = JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType{}
	mi := &file_spu_flow_stats_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType) ProtoMessage() {}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType) ProtoReflect() protoreflect.Message {
	mi := &file_spu_flow_stats_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType.ProtoReflect.Descriptor instead.
func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType) Descriptor() ([]byte, []int) {
	return file_spu_flow_stats_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType) GetSystem() *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType) GetLsysScope() *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType {
	if x != nil {
		return x.LsysScope
	}
	return nil
}

type JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType struct {
	state         protoimpl.MessageState                                                         `protogen:"open.v1"`
	Session       *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType `protobuf:"bytes,151,opt,name=session" json:"session,omitempty"`
	Packet        *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType  `protobuf:"bytes,152,opt,name=packet" json:"packet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType) Reset() {
	*x = JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType{}
	mi := &file_spu_flow_stats_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType) ProtoMessage() {}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType) ProtoReflect() protoreflect.Message {
	mi := &file_spu_flow_stats_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType.ProtoReflect.Descriptor instead.
func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType) Descriptor() ([]byte, []int) {
	return file_spu_flow_stats_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0}
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType) GetSession() *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType) GetPacket() *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType {
	if x != nil {
		return x.Packet
	}
	return nil
}

type JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType struct {
	state         protoimpl.MessageState                                                           `protogen:"open.v1"`
	Lsys          []*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList `protobuf:"bytes,152,rep,name=lsys" json:"lsys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType) Reset() {
	*x = JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType{}
	mi := &file_spu_flow_stats_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType) ProtoMessage() {}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType) ProtoReflect() protoreflect.Message {
	mi := &file_spu_flow_stats_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType.ProtoReflect.Descriptor instead.
func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType) Descriptor() ([]byte, []int) {
	return file_spu_flow_stats_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1}
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType) GetLsys() []*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList {
	if x != nil {
		return x.Lsys
	}
	return nil
}

type JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NoV4          *uint32                `protobuf:"varint,51,opt,name=no_v4,json=noV4" json:"no_v4,omitempty"`
	NoV6          *uint32                `protobuf:"varint,52,opt,name=no_v6,json=noV6" json:"no_v6,omitempty"`
	NoUnicast     *uint32                `protobuf:"varint,53,opt,name=no_unicast,json=noUnicast" json:"no_unicast,omitempty"`
	NoMulticast   *uint32                `protobuf:"varint,54,opt,name=no_multicast,json=noMulticast" json:"no_multicast,omitempty"`
	NoSof         *uint32                `protobuf:"varint,55,opt,name=no_sof,json=noSof" json:"no_sof,omitempty"`
	NoNat         *uint32                `protobuf:"varint,56,opt,name=no_nat,json=noNat" json:"no_nat,omitempty"`
	NoSsl         *uint32                `protobuf:"varint,57,opt,name=no_ssl,json=noSsl" json:"no_ssl,omitempty"`
	NoTunnel      *uint32                `protobuf:"varint,58,opt,name=no_tunnel,json=noTunnel" json:"no_tunnel,omitempty"`
	NoFailed      *uint32                `protobuf:"varint,59,opt,name=no_failed,json=noFailed" json:"no_failed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) Reset() {
	*x = JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType{}
	mi := &file_spu_flow_stats_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) ProtoMessage() {
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) ProtoReflect() protoreflect.Message {
	mi := &file_spu_flow_stats_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType.ProtoReflect.Descriptor instead.
func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) Descriptor() ([]byte, []int) {
	return file_spu_flow_stats_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0}
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) GetNoV4() uint32 {
	if x != nil && x.NoV4 != nil {
		return *x.NoV4
	}
	return 0
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) GetNoV6() uint32 {
	if x != nil && x.NoV6 != nil {
		return *x.NoV6
	}
	return 0
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) GetNoUnicast() uint32 {
	if x != nil && x.NoUnicast != nil {
		return *x.NoUnicast
	}
	return 0
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) GetNoMulticast() uint32 {
	if x != nil && x.NoMulticast != nil {
		return *x.NoMulticast
	}
	return 0
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) GetNoSof() uint32 {
	if x != nil && x.NoSof != nil {
		return *x.NoSof
	}
	return 0
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) GetNoNat() uint32 {
	if x != nil && x.NoNat != nil {
		return *x.NoNat
	}
	return 0
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) GetNoSsl() uint32 {
	if x != nil && x.NoSsl != nil {
		return *x.NoSsl
	}
	return 0
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) GetNoTunnel() uint32 {
	if x != nil && x.NoTunnel != nil {
		return *x.NoTunnel
	}
	return 0
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) GetNoFailed() uint32 {
	if x != nil && x.NoFailed != nil {
		return *x.NoFailed
	}
	return 0
}

type JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	PktReceived       *uint64                `protobuf:"varint,51,opt,name=pkt_received,json=pktReceived" json:"pkt_received,omitempty"`
	PktTransmitted    *uint64                `protobuf:"varint,52,opt,name=pkt_transmitted,json=pktTransmitted" json:"pkt_transmitted,omitempty"`
	PktDropped        *uint64                `protobuf:"varint,53,opt,name=pkt_dropped,json=pktDropped" json:"pkt_dropped,omitempty"`
	FragmentsReceived *uint64                `protobuf:"varint,54,opt,name=fragments_received,json=fragmentsReceived" json:"fragments_received,omitempty"`
	PreFragments      *uint64                `protobuf:"varint,55,opt,name=pre_fragments,json=preFragments" json:"pre_fragments,omitempty"`
	PostFragments     *uint64                `protobuf:"varint,56,opt,name=post_fragments,json=postFragments" json:"post_fragments,omitempty"`
	PmiReceived       *uint64                `protobuf:"varint,57,opt,name=pmi_received,json=pmiReceived" json:"pmi_received,omitempty"`
	PmiTransmitted    *uint64                `protobuf:"varint,58,opt,name=pmi_transmitted,json=pmiTransmitted" json:"pmi_transmitted,omitempty"`
	PmiDropped        *uint64                `protobuf:"varint,59,opt,name=pmi_dropped,json=pmiDropped" json:"pmi_dropped,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) Reset() {
	*x = JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType{}
	mi := &file_spu_flow_stats_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) ProtoMessage() {}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) ProtoReflect() protoreflect.Message {
	mi := &file_spu_flow_stats_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType.ProtoReflect.Descriptor instead.
func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) Descriptor() ([]byte, []int) {
	return file_spu_flow_stats_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 1}
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) GetPktReceived() uint64 {
	if x != nil && x.PktReceived != nil {
		return *x.PktReceived
	}
	return 0
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) GetPktTransmitted() uint64 {
	if x != nil && x.PktTransmitted != nil {
		return *x.PktTransmitted
	}
	return 0
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) GetPktDropped() uint64 {
	if x != nil && x.PktDropped != nil {
		return *x.PktDropped
	}
	return 0
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) GetFragmentsReceived() uint64 {
	if x != nil && x.FragmentsReceived != nil {
		return *x.FragmentsReceived
	}
	return 0
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) GetPreFragments() uint64 {
	if x != nil && x.PreFragments != nil {
		return *x.PreFragments
	}
	return 0
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) GetPostFragments() uint64 {
	if x != nil && x.PostFragments != nil {
		return *x.PostFragments
	}
	return 0
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) GetPmiReceived() uint64 {
	if x != nil && x.PmiReceived != nil {
		return *x.PmiReceived
	}
	return 0
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) GetPmiTransmitted() uint64 {
	if x != nil && x.PmiTransmitted != nil {
		return *x.PmiTransmitted
	}
	return 0
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) GetPmiDropped() uint64 {
	if x != nil && x.PmiDropped != nil {
		return *x.PmiDropped
	}
	return 0
}

type JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList struct {
	state         protoimpl.MessageState                                                                    `protogen:"open.v1"`
	LsysName      *string                                                                                   `protobuf:"bytes,151,opt,name=lsys_name,json=lsysName" json:"lsys_name,omitempty"`
	Session       *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType `protobuf:"bytes,152,opt,name=session" json:"session,omitempty"`
	Packet        *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType  `protobuf:"bytes,153,opt,name=packet" json:"packet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList) Reset() {
	*x = JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList{}
	mi := &file_spu_flow_stats_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList) ProtoMessage() {
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList) ProtoReflect() protoreflect.Message {
	mi := &file_spu_flow_stats_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList.ProtoReflect.Descriptor instead.
func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList) Descriptor() ([]byte, []int) {
	return file_spu_flow_stats_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0}
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList) GetLsysName() string {
	if x != nil && x.LsysName != nil {
		return *x.LsysName
	}
	return ""
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList) GetSession() *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList) GetPacket() *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType {
	if x != nil {
		return x.Packet
	}
	return nil
}

type JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NoV4          *uint32                `protobuf:"varint,51,opt,name=no_v4,json=noV4" json:"no_v4,omitempty"`
	NoV6          *uint32                `protobuf:"varint,52,opt,name=no_v6,json=noV6" json:"no_v6,omitempty"`
	NoUnicast     *uint32                `protobuf:"varint,53,opt,name=no_unicast,json=noUnicast" json:"no_unicast,omitempty"`
	NoMulticast   *uint32                `protobuf:"varint,54,opt,name=no_multicast,json=noMulticast" json:"no_multicast,omitempty"`
	NoSof         *uint32                `protobuf:"varint,55,opt,name=no_sof,json=noSof" json:"no_sof,omitempty"`
	NoNat         *uint32                `protobuf:"varint,56,opt,name=no_nat,json=noNat" json:"no_nat,omitempty"`
	NoSsl         *uint32                `protobuf:"varint,57,opt,name=no_ssl,json=noSsl" json:"no_ssl,omitempty"`
	NoTunnel      *uint32                `protobuf:"varint,58,opt,name=no_tunnel,json=noTunnel" json:"no_tunnel,omitempty"`
	NoFailed      *uint32                `protobuf:"varint,59,opt,name=no_failed,json=noFailed" json:"no_failed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) Reset() {
	*x = JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType{}
	mi := &file_spu_flow_stats_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) ProtoMessage() {
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) ProtoReflect() protoreflect.Message {
	mi := &file_spu_flow_stats_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType.ProtoReflect.Descriptor instead.
func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) Descriptor() ([]byte, []int) {
	return file_spu_flow_stats_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 0}
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) GetNoV4() uint32 {
	if x != nil && x.NoV4 != nil {
		return *x.NoV4
	}
	return 0
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) GetNoV6() uint32 {
	if x != nil && x.NoV6 != nil {
		return *x.NoV6
	}
	return 0
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) GetNoUnicast() uint32 {
	if x != nil && x.NoUnicast != nil {
		return *x.NoUnicast
	}
	return 0
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) GetNoMulticast() uint32 {
	if x != nil && x.NoMulticast != nil {
		return *x.NoMulticast
	}
	return 0
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) GetNoSof() uint32 {
	if x != nil && x.NoSof != nil {
		return *x.NoSof
	}
	return 0
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) GetNoNat() uint32 {
	if x != nil && x.NoNat != nil {
		return *x.NoNat
	}
	return 0
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) GetNoSsl() uint32 {
	if x != nil && x.NoSsl != nil {
		return *x.NoSsl
	}
	return 0
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) GetNoTunnel() uint32 {
	if x != nil && x.NoTunnel != nil {
		return *x.NoTunnel
	}
	return 0
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) GetNoFailed() uint32 {
	if x != nil && x.NoFailed != nil {
		return *x.NoFailed
	}
	return 0
}

type JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	PktReceived       *uint64                `protobuf:"varint,51,opt,name=pkt_received,json=pktReceived" json:"pkt_received,omitempty"`
	PktTransmitted    *uint64                `protobuf:"varint,52,opt,name=pkt_transmitted,json=pktTransmitted" json:"pkt_transmitted,omitempty"`
	PktDropped        *uint64                `protobuf:"varint,53,opt,name=pkt_dropped,json=pktDropped" json:"pkt_dropped,omitempty"`
	FragmentsReceived *uint64                `protobuf:"varint,54,opt,name=fragments_received,json=fragmentsReceived" json:"fragments_received,omitempty"`
	PreFragments      *uint64                `protobuf:"varint,55,opt,name=pre_fragments,json=preFragments" json:"pre_fragments,omitempty"`
	PostFragments     *uint64                `protobuf:"varint,56,opt,name=post_fragments,json=postFragments" json:"post_fragments,omitempty"`
	PmiReceived       *uint64                `protobuf:"varint,57,opt,name=pmi_received,json=pmiReceived" json:"pmi_received,omitempty"`
	PmiTransmitted    *uint64                `protobuf:"varint,58,opt,name=pmi_transmitted,json=pmiTransmitted" json:"pmi_transmitted,omitempty"`
	PmiDropped        *uint64                `protobuf:"varint,59,opt,name=pmi_dropped,json=pmiDropped" json:"pmi_dropped,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) Reset() {
	*x = JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType{}
	mi := &file_spu_flow_stats_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) ProtoMessage() {
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) ProtoReflect() protoreflect.Message {
	mi := &file_spu_flow_stats_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType.ProtoReflect.Descriptor instead.
func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) Descriptor() ([]byte, []int) {
	return file_spu_flow_stats_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1, 0, 1}
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) GetPktReceived() uint64 {
	if x != nil && x.PktReceived != nil {
		return *x.PktReceived
	}
	return 0
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) GetPktTransmitted() uint64 {
	if x != nil && x.PktTransmitted != nil {
		return *x.PktTransmitted
	}
	return 0
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) GetPktDropped() uint64 {
	if x != nil && x.PktDropped != nil {
		return *x.PktDropped
	}
	return 0
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) GetFragmentsReceived() uint64 {
	if x != nil && x.FragmentsReceived != nil {
		return *x.FragmentsReceived
	}
	return 0
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) GetPreFragments() uint64 {
	if x != nil && x.PreFragments != nil {
		return *x.PreFragments
	}
	return 0
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) GetPostFragments() uint64 {
	if x != nil && x.PostFragments != nil {
		return *x.PostFragments
	}
	return 0
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) GetPmiReceived() uint64 {
	if x != nil && x.PmiReceived != nil {
		return *x.PmiReceived
	}
	return 0
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) GetPmiTransmitted() uint64 {
	if x != nil && x.PmiTransmitted != nil {
		return *x.PmiTransmitted
	}
	return 0
}

func (x *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) GetPmiDropped() uint64 {
	if x != nil && x.PmiDropped != nil {
		return *x.PmiDropped
	}
	return 0
}

var file_spu_flow_stats_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*JunosPfeSpuFlow)(nil),
		Field:         131,
		Name:          "jnpr_junos_pfe_spu_flow_ext",
		Tag:           "bytes,131,opt,name=jnpr_junos_pfe_spu_flow_ext",
		Filename:      "spu_flow_stats.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional junos_pfe_spu_flow jnpr_junos_pfe_spu_flow_ext = 131;
	E_JnprJunosPfeSpuFlowExt = &file_spu_flow_stats_proto_extTypes[0]
)

var File_spu_flow_stats_proto protoreflect.FileDescriptor

var file_spu_flow_stats_proto_rawDesc = string([]byte{
	0x0a, 0x14, 0x73, 0x70, 0x75, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x74, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9a, 0x14, 0x0a, 0x12,
	0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x70, 0x66, 0x65, 0x5f, 0x73, 0x70, 0x75, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x97,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x70, 0x66,
	0x65, 0x5f, 0x73, 0x70, 0x75, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x1a, 0xc3, 0x13, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x03, 0x73, 0x70, 0x75, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x70, 0x66, 0x65, 0x5f, 0x73,
	0x70, 0x75, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x70, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x03,
	0x73, 0x70, 0x75, 0x1a, 0xf2, 0x12, 0x0a, 0x08, 0x73, 0x70, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x66,
	0x6c, 0x6f, 0x77, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6a, 0x75, 0x6e,
	0x6f, 0x73, 0x5f, 0x70, 0x66, 0x65, 0x5f, 0x73, 0x70, 0x75, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x70,
	0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x1a, 0xff, 0x11, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x67, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6a, 0x75, 0x6e,
	0x6f, 0x73, 0x5f, 0x70, 0x66, 0x65, 0x5f, 0x73, 0x70, 0x75, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x70,
	0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x1a, 0x88, 0x11,
	0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x6a, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x97, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x70, 0x66, 0x65, 0x5f,
	0x73, 0x70, 0x75, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x70, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x75,
	0x0a, 0x0a, 0x6c, 0x73, 0x79, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x98, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x70, 0x66, 0x65, 0x5f,
	0x73, 0x70, 0x75, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x70, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x79, 0x73, 0x5f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6c, 0x73, 0x79, 0x73,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x1a, 0xe1, 0x06, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x79, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f,
	0x70, 0x66, 0x65, 0x5f, 0x73, 0x70, 0x75, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x70, 0x75, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x76, 0x0a, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x5d, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x70, 0x66, 0x65, 0x5f, 0x73, 0x70,
	0x75, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x70, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0xf9, 0x01, 0x0a, 0x0c, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x6e, 0x6f, 0x5f,
	0x76, 0x34, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6e, 0x6f, 0x56, 0x34, 0x12, 0x13,
	0x0a, 0x05, 0x6e, 0x6f, 0x5f, 0x76, 0x36, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6e,
	0x6f, 0x56, 0x36, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x6f, 0x55, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x5f, 0x73, 0x6f, 0x66, 0x18,
	0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x6f, 0x53, 0x6f, 0x66, 0x12, 0x15, 0x0a, 0x06,
	0x6e, 0x6f, 0x5f, 0x6e, 0x61, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x6f,
	0x4e, 0x61, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x5f, 0x73, 0x73, 0x6c, 0x18, 0x39, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x6f, 0x53, 0x73, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f,
	0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e,
	0x6f, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x6f, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x1a, 0xe2, 0x02, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6b, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x6b, 0x74, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6b, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x70, 0x6b, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6b, 0x74, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x6b, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x12, 0x2d, 0x0a, 0x12, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x66,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x46, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70,
	0x6f, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x6d, 0x69, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x70, 0x6d, 0x69, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x70, 0x6d, 0x69, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x6d, 0x69, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6d, 0x69, 0x5f,
	0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70,
	0x6d, 0x69, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x1a, 0xac, 0x08, 0x0a, 0x0f, 0x6c, 0x73,
	0x79, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x74, 0x0a,
	0x04, 0x6c, 0x73, 0x79, 0x73, 0x18, 0x98, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x6a,
	0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x70, 0x66, 0x65, 0x5f, 0x73, 0x70, 0x75, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x73, 0x70, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x79, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x79, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c,
	0x73, 0x79, 0x73, 0x1a, 0xa2, 0x07, 0x0a, 0x09, 0x6c, 0x73, 0x79, 0x73, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x09, 0x6c, 0x73, 0x79, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x97,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x08, 0x6c, 0x73,
	0x79, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6c, 0x2e, 0x6a, 0x75, 0x6e, 0x6f,
	0x73, 0x5f, 0x70, 0x66, 0x65, 0x5f, 0x73, 0x70, 0x75, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x70, 0x75,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6c, 0x73, 0x79, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6c, 0x73, 0x79, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x84, 0x01, 0x0a, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x99, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x70, 0x66, 0x65, 0x5f, 0x73,
	0x70, 0x75, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x70, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x79, 0x73, 0x5f, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x73, 0x79, 0x73, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0xf9, 0x01, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x6e, 0x6f, 0x5f, 0x76,
	0x34, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6e, 0x6f, 0x56, 0x34, 0x12, 0x13, 0x0a,
	0x05, 0x6e, 0x6f, 0x5f, 0x76, 0x36, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6e, 0x6f,
	0x56, 0x36, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x6f, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x5f, 0x73, 0x6f, 0x66, 0x18, 0x37,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x6f, 0x53, 0x6f, 0x66, 0x12, 0x15, 0x0a, 0x06, 0x6e,
	0x6f, 0x5f, 0x6e, 0x61, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x6f, 0x4e,
	0x61, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x5f, 0x73, 0x73, 0x6c, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6e, 0x6f, 0x53, 0x73, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x5f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x6f,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x6f, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x1a, 0xe2, 0x02, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6b, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x6b, 0x74, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6b, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x70, 0x6b, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x6b, 0x74, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x6b, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x12, 0x2d, 0x0a, 0x12, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x66, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x37, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x6f,
	0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x6d, 0x69, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x70, 0x6d, 0x69, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x70, 0x6d, 0x69, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x6d, 0x69, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6d, 0x69, 0x5f, 0x64,
	0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x6d,
	0x69, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x3a, 0x6a, 0x0a, 0x1b, 0x6a, 0x6e, 0x70, 0x72,
	0x5f, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x70, 0x66, 0x65, 0x5f, 0x73, 0x70, 0x75, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x74, 0x12, 0x17, 0x2e, 0x4a, 0x75, 0x6e, 0x69, 0x70, 0x65,
	0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73,
	0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f,
	0x70, 0x66, 0x65, 0x5f, 0x73, 0x70, 0x75, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x16, 0x6a, 0x6e,
	0x70, 0x72, 0x4a, 0x75, 0x6e, 0x6f, 0x73, 0x50, 0x66, 0x65, 0x53, 0x70, 0x75, 0x46, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x74, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65,
})

var (
	file_spu_flow_stats_proto_rawDescOnce sync.Once
	file_spu_flow_stats_proto_rawDescData []byte
)

func file_spu_flow_stats_proto_rawDescGZIP() []byte {
	file_spu_flow_stats_proto_rawDescOnce.Do(func() {
		file_spu_flow_stats_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_spu_flow_stats_proto_rawDesc), len(file_spu_flow_stats_proto_rawDesc)))
	})
	return file_spu_flow_stats_proto_rawDescData
}

var file_spu_flow_stats_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_spu_flow_stats_proto_goTypes = []any{
	(*JunosPfeSpuFlow)(nil),                                                                          // 0: junos_pfe_spu_flow
	(*JunosPfeSpuFlowSecurityType)(nil),                                                              // 1: junos_pfe_spu_flow.security_type
	(*JunosPfeSpuFlowSecurityTypeSpuType)(nil),                                                       // 2: junos_pfe_spu_flow.security_type.spu_type
	(*JunosPfeSpuFlowSecurityTypeSpuTypeFlowType)(nil),                                               // 3: junos_pfe_spu_flow.security_type.spu_type.flow_type
	(*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType)(nil),                                 // 4: junos_pfe_spu_flow.security_type.spu_type.flow_type.stats_scope_type
	(*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType)(nil),                       // 5: junos_pfe_spu_flow.security_type.spu_type.flow_type.stats_scope_type.system_type
	(*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType)(nil),                    // 6: junos_pfe_spu_flow.security_type.spu_type.flow_type.stats_scope_type.lsys_scope_type
	(*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType)(nil),            // 7: junos_pfe_spu_flow.security_type.spu_type.flow_type.stats_scope_type.system_type.session_type
	(*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType)(nil),             // 8: junos_pfe_spu_flow.security_type.spu_type.flow_type.stats_scope_type.system_type.packet_type
	(*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList)(nil),            // 9: junos_pfe_spu_flow.security_type.spu_type.flow_type.stats_scope_type.lsys_scope_type.lsys_list
	(*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType)(nil), // 10: junos_pfe_spu_flow.security_type.spu_type.flow_type.stats_scope_type.lsys_scope_type.lsys_list.session_type
	(*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType)(nil),  // 11: junos_pfe_spu_flow.security_type.spu_type.flow_type.stats_scope_type.lsys_scope_type.lsys_list.packet_type
	(*JuniperNetworksSensors)(nil),                                                                   // 12: JuniperNetworksSensors
}
var file_spu_flow_stats_proto_depIdxs = []int32{
	1,  // 0: junos_pfe_spu_flow.security:type_name -> junos_pfe_spu_flow.security_type
	2,  // 1: junos_pfe_spu_flow.security_type.spu:type_name -> junos_pfe_spu_flow.security_type.spu_type
	3,  // 2: junos_pfe_spu_flow.security_type.spu_type.flow:type_name -> junos_pfe_spu_flow.security_type.spu_type.flow_type
	4,  // 3: junos_pfe_spu_flow.security_type.spu_type.flow_type.stats_scope:type_name -> junos_pfe_spu_flow.security_type.spu_type.flow_type.stats_scope_type
	5,  // 4: junos_pfe_spu_flow.security_type.spu_type.flow_type.stats_scope_type.system:type_name -> junos_pfe_spu_flow.security_type.spu_type.flow_type.stats_scope_type.system_type
	6,  // 5: junos_pfe_spu_flow.security_type.spu_type.flow_type.stats_scope_type.lsys_scope:type_name -> junos_pfe_spu_flow.security_type.spu_type.flow_type.stats_scope_type.lsys_scope_type
	7,  // 6: junos_pfe_spu_flow.security_type.spu_type.flow_type.stats_scope_type.system_type.session:type_name -> junos_pfe_spu_flow.security_type.spu_type.flow_type.stats_scope_type.system_type.session_type
	8,  // 7: junos_pfe_spu_flow.security_type.spu_type.flow_type.stats_scope_type.system_type.packet:type_name -> junos_pfe_spu_flow.security_type.spu_type.flow_type.stats_scope_type.system_type.packet_type
	9,  // 8: junos_pfe_spu_flow.security_type.spu_type.flow_type.stats_scope_type.lsys_scope_type.lsys:type_name -> junos_pfe_spu_flow.security_type.spu_type.flow_type.stats_scope_type.lsys_scope_type.lsys_list
	10, // 9: junos_pfe_spu_flow.security_type.spu_type.flow_type.stats_scope_type.lsys_scope_type.lsys_list.session:type_name -> junos_pfe_spu_flow.security_type.spu_type.flow_type.stats_scope_type.lsys_scope_type.lsys_list.session_type
	11, // 10: junos_pfe_spu_flow.security_type.spu_type.flow_type.stats_scope_type.lsys_scope_type.lsys_list.packet:type_name -> junos_pfe_spu_flow.security_type.spu_type.flow_type.stats_scope_type.lsys_scope_type.lsys_list.packet_type
	12, // 11: jnpr_junos_pfe_spu_flow_ext:extendee -> JuniperNetworksSensors
	0,  // 12: jnpr_junos_pfe_spu_flow_ext:type_name -> junos_pfe_spu_flow
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	12, // [12:13] is the sub-list for extension type_name
	11, // [11:12] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_spu_flow_stats_proto_init() }
func file_spu_flow_stats_proto_init() {
	if File_spu_flow_stats_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_spu_flow_stats_proto_rawDesc), len(file_spu_flow_stats_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_spu_flow_stats_proto_goTypes,
		DependencyIndexes: file_spu_flow_stats_proto_depIdxs,
		MessageInfos:      file_spu_flow_stats_proto_msgTypes,
		ExtensionInfos:    file_spu_flow_stats_proto_extTypes,
	}.Build()
	File_spu_flow_stats_proto = out.File
	file_spu_flow_stats_proto_goTypes = nil
	file_spu_flow_stats_proto_depIdxs = nil
}
