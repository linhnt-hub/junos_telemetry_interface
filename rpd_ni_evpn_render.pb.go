// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: rpd_ni_evpn_render.proto

package junos_telemetry_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NetworkInstancesEvpn struct {
	state           protoimpl.MessageState                     `protogen:"open.v1"`
	NetworkInstance []*NetworkInstancesEvpnNetworkInstanceList `protobuf:"bytes,151,rep,name=network_instance,json=networkInstance" json:"network_instance,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkInstancesEvpn) Reset() {
	*x = NetworkInstancesEvpn{}
	mi := &file_rpd_ni_evpn_render_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesEvpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesEvpn) ProtoMessage() {}

func (x *NetworkInstancesEvpn) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_evpn_render_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesEvpn.ProtoReflect.Descriptor instead.
func (*NetworkInstancesEvpn) Descriptor() ([]byte, []int) {
	return file_rpd_ni_evpn_render_proto_rawDescGZIP(), []int{0}
}

func (x *NetworkInstancesEvpn) GetNetworkInstance() []*NetworkInstancesEvpnNetworkInstanceList {
	if x != nil {
		return x.NetworkInstance
	}
	return nil
}

type NetworkInstancesEvpnNetworkInstanceList struct {
	state         protoimpl.MessageState                                `protogen:"open.v1"`
	Name          *string                                               `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	Protocols     *NetworkInstancesEvpnNetworkInstanceListProtocolsType `protobuf:"bytes,151,opt,name=protocols" json:"protocols,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesEvpnNetworkInstanceList) Reset() {
	*x = NetworkInstancesEvpnNetworkInstanceList{}
	mi := &file_rpd_ni_evpn_render_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesEvpnNetworkInstanceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesEvpnNetworkInstanceList) ProtoMessage() {}

func (x *NetworkInstancesEvpnNetworkInstanceList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_evpn_render_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesEvpnNetworkInstanceList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesEvpnNetworkInstanceList) Descriptor() ([]byte, []int) {
	return file_rpd_ni_evpn_render_proto_rawDescGZIP(), []int{0, 0}
}

func (x *NetworkInstancesEvpnNetworkInstanceList) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NetworkInstancesEvpnNetworkInstanceList) GetProtocols() *NetworkInstancesEvpnNetworkInstanceListProtocolsType {
	if x != nil {
		return x.Protocols
	}
	return nil
}

type NetworkInstancesEvpnNetworkInstanceListProtocolsType struct {
	state         protoimpl.MessageState                                            `protogen:"open.v1"`
	Protocol      *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType `protobuf:"bytes,151,opt,name=protocol" json:"protocol,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsType) Reset() {
	*x = NetworkInstancesEvpnNetworkInstanceListProtocolsType{}
	mi := &file_rpd_ni_evpn_render_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesEvpnNetworkInstanceListProtocolsType) ProtoMessage() {}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_evpn_render_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesEvpnNetworkInstanceListProtocolsType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_evpn_render_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsType) GetProtocol() *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType {
	if x != nil {
		return x.Protocol
	}
	return nil
}

type NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType struct {
	state         protoimpl.MessageState                                                    `protogen:"open.v1"`
	Evpn          *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType `protobuf:"bytes,151,opt,name=evpn" json:"evpn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType) Reset() {
	*x = NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType{}
	mi := &file_rpd_ni_evpn_render_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType) ProtoMessage() {}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_evpn_render_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_evpn_render_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType) GetEvpn() *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType {
	if x != nil {
		return x.Evpn
	}
	return nil
}

type NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType struct {
	state               protoimpl.MessageState                                                                           `protogen:"open.v1"`
	NumPeers            *uint32                                                                                          `protobuf:"varint,51,opt,name=num_peers,json=numPeers" json:"num_peers,omitempty"`
	NumInterfaces       *uint32                                                                                          `protobuf:"varint,52,opt,name=num_interfaces,json=numInterfaces" json:"num_interfaces,omitempty"`
	NumInterfacesUp     *uint32                                                                                          `protobuf:"varint,53,opt,name=num_interfaces_up,json=numInterfacesUp" json:"num_interfaces_up,omitempty"`
	NumIrbInterfaces    *uint32                                                                                          `protobuf:"varint,54,opt,name=num_irb_interfaces,json=numIrbInterfaces" json:"num_irb_interfaces,omitempty"`
	NumIrbInterfacesUp  *uint32                                                                                          `protobuf:"varint,55,opt,name=num_irb_interfaces_up,json=numIrbInterfacesUp" json:"num_irb_interfaces_up,omitempty"`
	NumRemoteMacs       *uint32                                                                                          `protobuf:"varint,59,opt,name=num_remote_macs,json=numRemoteMacs" json:"num_remote_macs,omitempty"`
	NumRemoteMacIpV4    *uint32                                                                                          `protobuf:"varint,60,opt,name=num_remote_mac_ip_v4,json=numRemoteMacIpV4" json:"num_remote_mac_ip_v4,omitempty"`
	NumRemoteMacIpV6    *uint32                                                                                          `protobuf:"varint,61,opt,name=num_remote_mac_ip_v6,json=numRemoteMacIpV6" json:"num_remote_mac_ip_v6,omitempty"`
	NumRemoteIrbMacs    *uint32                                                                                          `protobuf:"varint,62,opt,name=num_remote_irb_macs,json=numRemoteIrbMacs" json:"num_remote_irb_macs,omitempty"`
	NumEthernetSegments *uint32                                                                                          `protobuf:"varint,63,opt,name=num_ethernet_segments,json=numEthernetSegments" json:"num_ethernet_segments,omitempty"`
	LabelAllocationMode *string                                                                                          `protobuf:"bytes,70,opt,name=label_allocation_mode,json=labelAllocationMode" json:"label_allocation_mode,omitempty"`
	Interfaces          []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList        `protobuf:"bytes,152,rep,name=interfaces" json:"interfaces,omitempty"`
	IrbInterfaces       []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList     `protobuf:"bytes,153,rep,name=irb_interfaces,json=irbInterfaces" json:"irb_interfaces,omitempty"`
	Peer                []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList              `protobuf:"bytes,154,rep,name=peer" json:"peer,omitempty"`
	SgDb                []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList              `protobuf:"bytes,156,rep,name=sg_db,json=sgDb" json:"sg_db,omitempty"`
	EthernetSegment     []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList   `protobuf:"bytes,155,rep,name=ethernet_segment,json=ethernetSegment" json:"ethernet_segment,omitempty"`
	AssistedReplication *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType `protobuf:"bytes,157,opt,name=assisted_replication,json=assistedReplication" json:"assisted_replication,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) Reset() {
	*x = NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType{}
	mi := &file_rpd_ni_evpn_render_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) ProtoMessage() {}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_evpn_render_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_evpn_render_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetNumPeers() uint32 {
	if x != nil && x.NumPeers != nil {
		return *x.NumPeers
	}
	return 0
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetNumInterfaces() uint32 {
	if x != nil && x.NumInterfaces != nil {
		return *x.NumInterfaces
	}
	return 0
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetNumInterfacesUp() uint32 {
	if x != nil && x.NumInterfacesUp != nil {
		return *x.NumInterfacesUp
	}
	return 0
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetNumIrbInterfaces() uint32 {
	if x != nil && x.NumIrbInterfaces != nil {
		return *x.NumIrbInterfaces
	}
	return 0
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetNumIrbInterfacesUp() uint32 {
	if x != nil && x.NumIrbInterfacesUp != nil {
		return *x.NumIrbInterfacesUp
	}
	return 0
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetNumRemoteMacs() uint32 {
	if x != nil && x.NumRemoteMacs != nil {
		return *x.NumRemoteMacs
	}
	return 0
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetNumRemoteMacIpV4() uint32 {
	if x != nil && x.NumRemoteMacIpV4 != nil {
		return *x.NumRemoteMacIpV4
	}
	return 0
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetNumRemoteMacIpV6() uint32 {
	if x != nil && x.NumRemoteMacIpV6 != nil {
		return *x.NumRemoteMacIpV6
	}
	return 0
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetNumRemoteIrbMacs() uint32 {
	if x != nil && x.NumRemoteIrbMacs != nil {
		return *x.NumRemoteIrbMacs
	}
	return 0
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetNumEthernetSegments() uint32 {
	if x != nil && x.NumEthernetSegments != nil {
		return *x.NumEthernetSegments
	}
	return 0
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetLabelAllocationMode() string {
	if x != nil && x.LabelAllocationMode != nil {
		return *x.LabelAllocationMode
	}
	return ""
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetInterfaces() []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetIrbInterfaces() []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList {
	if x != nil {
		return x.IrbInterfaces
	}
	return nil
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetPeer() []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetSgDb() []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList {
	if x != nil {
		return x.SgDb
	}
	return nil
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetEthernetSegment() []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList {
	if x != nil {
		return x.EthernetSegment
	}
	return nil
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetAssistedReplication() *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType {
	if x != nil {
		return x.AssistedReplication
	}
	return nil
}

type NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,61,opt,name=name" json:"name,omitempty"`
	Esi           *string                `protobuf:"bytes,62,opt,name=esi" json:"esi,omitempty"`
	Mode          *string                `protobuf:"bytes,63,opt,name=mode" json:"mode,omitempty"`
	Status        *string                `protobuf:"bytes,64,opt,name=status" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList) Reset() {
	*x = NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList{}
	mi := &file_rpd_ni_evpn_render_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList) ProtoMessage() {
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_evpn_render_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList) Descriptor() ([]byte, []int) {
	return file_rpd_ni_evpn_render_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0}
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList) GetEsi() string {
	if x != nil && x.Esi != nil {
		return *x.Esi
	}
	return ""
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList) GetMode() string {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return ""
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

type NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Name              *string                `protobuf:"bytes,61,opt,name=name" json:"name,omitempty"`
	VirtualGatewayEsi *string                `protobuf:"bytes,62,opt,name=virtual_gateway_esi,json=virtualGatewayEsi" json:"virtual_gateway_esi,omitempty"`
	Status            *string                `protobuf:"bytes,63,opt,name=status" json:"status,omitempty"`
	L3Context         *string                `protobuf:"bytes,64,opt,name=l3_context,json=l3Context" json:"l3_context,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList) Reset() {
	*x = NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList{}
	mi := &file_rpd_ni_evpn_render_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList) ProtoMessage() {
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_evpn_render_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList) Descriptor() ([]byte, []int) {
	return file_rpd_ni_evpn_render_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1}
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList) GetVirtualGatewayEsi() string {
	if x != nil && x.VirtualGatewayEsi != nil {
		return *x.VirtualGatewayEsi
	}
	return ""
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList) GetL3Context() string {
	if x != nil && x.L3Context != nil {
		return *x.L3Context
	}
	return ""
}

type NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	PeerAddress                 *string                `protobuf:"bytes,71,opt,name=peer_address,json=peerAddress" json:"peer_address,omitempty"`
	NumAutoDiscoveryRoutes      *uint32                `protobuf:"varint,73,opt,name=num_auto_discovery_routes,json=numAutoDiscoveryRoutes" json:"num_auto_discovery_routes,omitempty"`
	NumMulticastRoutes          *uint32                `protobuf:"varint,74,opt,name=num_multicast_routes,json=numMulticastRoutes" json:"num_multicast_routes,omitempty"`
	NumEthernetSegmentRoutes    *uint32                `protobuf:"varint,75,opt,name=num_ethernet_segment_routes,json=numEthernetSegmentRoutes" json:"num_ethernet_segment_routes,omitempty"`
	NumMacRoutes                *uint32                `protobuf:"varint,76,opt,name=num_mac_routes,json=numMacRoutes" json:"num_mac_routes,omitempty"`
	NumMacIpRoutes              *uint32                `protobuf:"varint,77,opt,name=num_mac_ip_routes,json=numMacIpRoutes" json:"num_mac_ip_routes,omitempty"`
	NumSelectiveMulticastRoutes *uint32                `protobuf:"varint,78,opt,name=num_selective_multicast_routes,json=numSelectiveMulticastRoutes" json:"num_selective_multicast_routes,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) Reset() {
	*x = NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList{}
	mi := &file_rpd_ni_evpn_render_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) ProtoMessage() {
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_evpn_render_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) Descriptor() ([]byte, []int) {
	return file_rpd_ni_evpn_render_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2}
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) GetPeerAddress() string {
	if x != nil && x.PeerAddress != nil {
		return *x.PeerAddress
	}
	return ""
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) GetNumAutoDiscoveryRoutes() uint32 {
	if x != nil && x.NumAutoDiscoveryRoutes != nil {
		return *x.NumAutoDiscoveryRoutes
	}
	return 0
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) GetNumMulticastRoutes() uint32 {
	if x != nil && x.NumMulticastRoutes != nil {
		return *x.NumMulticastRoutes
	}
	return 0
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) GetNumEthernetSegmentRoutes() uint32 {
	if x != nil && x.NumEthernetSegmentRoutes != nil {
		return *x.NumEthernetSegmentRoutes
	}
	return 0
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) GetNumMacRoutes() uint32 {
	if x != nil && x.NumMacRoutes != nil {
		return *x.NumMacRoutes
	}
	return 0
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) GetNumMacIpRoutes() uint32 {
	if x != nil && x.NumMacIpRoutes != nil {
		return *x.NumMacIpRoutes
	}
	return 0
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) GetNumSelectiveMulticastRoutes() uint32 {
	if x != nil && x.NumSelectiveMulticastRoutes != nil {
		return *x.NumSelectiveMulticastRoutes
	}
	return 0
}

type NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList struct {
	state             protoimpl.MessageState                                                                         `protogen:"open.v1"`
	EthernetTagId     *uint32                                                                                        `protobuf:"varint,71,opt,name=ethernet_tag_id,json=ethernetTagId" json:"ethernet_tag_id,omitempty"`
	Group             *string                                                                                        `protobuf:"bytes,72,opt,name=group" json:"group,omitempty"`
	Source            *string                                                                                        `protobuf:"bytes,73,opt,name=source" json:"source,omitempty"`
	TotalEsiFanout    *uint32                                                                                        `protobuf:"varint,74,opt,name=total_esi_fanout,json=totalEsiFanout" json:"total_esi_fanout,omitempty"`
	TotalLocalFanout  *uint32                                                                                        `protobuf:"varint,75,opt,name=total_local_fanout,json=totalLocalFanout" json:"total_local_fanout,omitempty"`
	TotalRemoteFanout *uint32                                                                                        `protobuf:"varint,76,opt,name=total_remote_fanout,json=totalRemoteFanout" json:"total_remote_fanout,omitempty"`
	SgdbEsi           []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList `protobuf:"bytes,151,rep,name=sgdb_esi,json=sgdbEsi" json:"sgdb_esi,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) Reset() {
	*x = NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList{}
	mi := &file_rpd_ni_evpn_render_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) ProtoMessage() {
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_evpn_render_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) Descriptor() ([]byte, []int) {
	return file_rpd_ni_evpn_render_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 3}
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) GetEthernetTagId() uint32 {
	if x != nil && x.EthernetTagId != nil {
		return *x.EthernetTagId
	}
	return 0
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) GetGroup() string {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return ""
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) GetTotalEsiFanout() uint32 {
	if x != nil && x.TotalEsiFanout != nil {
		return *x.TotalEsiFanout
	}
	return 0
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) GetTotalLocalFanout() uint32 {
	if x != nil && x.TotalLocalFanout != nil {
		return *x.TotalLocalFanout
	}
	return 0
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) GetTotalRemoteFanout() uint32 {
	if x != nil && x.TotalRemoteFanout != nil {
		return *x.TotalRemoteFanout
	}
	return 0
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) GetSgdbEsi() []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList {
	if x != nil {
		return x.SgdbEsi
	}
	return nil
}

type NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList struct {
	state               protoimpl.MessageState                                                                                     `protogen:"open.v1"`
	Esi                 *string                                                                                                    `protobuf:"bytes,71,opt,name=esi" json:"esi,omitempty"`
	Status              *string                                                                                                    `protobuf:"bytes,72,opt,name=status" json:"status,omitempty"`
	LocalIntfName       *string                                                                                                    `protobuf:"bytes,73,opt,name=local_intf_name,json=localIntfName" json:"local_intf_name,omitempty"`
	LocalIntfStatus     *string                                                                                                    `protobuf:"bytes,74,opt,name=local_intf_status,json=localIntfStatus" json:"local_intf_status,omitempty"`
	DfElectionAlgorithm *string                                                                                                    `protobuf:"bytes,75,opt,name=df_election_algorithm,json=dfElectionAlgorithm" json:"df_election_algorithm,omitempty"`
	DesignatedForwarder *string                                                                                                    `protobuf:"bytes,76,opt,name=designated_forwarder,json=designatedForwarder" json:"designated_forwarder,omitempty"`
	RemotePe            []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList `protobuf:"bytes,151,rep,name=remote_pe,json=remotePe" json:"remote_pe,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) Reset() {
	*x = NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList{}
	mi := &file_rpd_ni_evpn_render_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) ProtoMessage() {
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_evpn_render_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) Descriptor() ([]byte, []int) {
	return file_rpd_ni_evpn_render_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 4}
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) GetEsi() string {
	if x != nil && x.Esi != nil {
		return *x.Esi
	}
	return ""
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) GetLocalIntfName() string {
	if x != nil && x.LocalIntfName != nil {
		return *x.LocalIntfName
	}
	return ""
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) GetLocalIntfStatus() string {
	if x != nil && x.LocalIntfStatus != nil {
		return *x.LocalIntfStatus
	}
	return ""
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) GetDfElectionAlgorithm() string {
	if x != nil && x.DfElectionAlgorithm != nil {
		return *x.DfElectionAlgorithm
	}
	return ""
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) GetDesignatedForwarder() string {
	if x != nil && x.DesignatedForwarder != nil {
		return *x.DesignatedForwarder
	}
	return ""
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) GetRemotePe() []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList {
	if x != nil {
		return x.RemotePe
	}
	return nil
}

type NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType struct {
	state         protoimpl.MessageState                                                                                         `protogen:"open.v1"`
	Role          *string                                                                                                        `protobuf:"bytes,51,opt,name=role" json:"role,omitempty"`
	L2Domain      []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList `protobuf:"bytes,171,rep,name=l2_domain,json=l2Domain" json:"l2_domain,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType) Reset() {
	*x = NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType{}
	mi := &file_rpd_ni_evpn_render_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType) ProtoMessage() {
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_evpn_render_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType.ProtoReflect.Descriptor instead.
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType) Descriptor() ([]byte, []int) {
	return file_rpd_ni_evpn_render_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 5}
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType) GetRole() string {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return ""
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType) GetL2Domain() []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList {
	if x != nil {
		return x.L2Domain
	}
	return nil
}

type NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Esi                  *string                `protobuf:"bytes,152,opt,name=esi" json:"esi,omitempty"`
	LocalIntfName        *string                `protobuf:"bytes,151,opt,name=local_intf_name,json=localIntfName" json:"local_intf_name,omitempty"`
	JoinSyncStatus       *string                `protobuf:"bytes,153,opt,name=join_sync_status,json=joinSyncStatus" json:"join_sync_status,omitempty"`
	JoinSyncLastUpdated  *string                `protobuf:"bytes,154,opt,name=join_sync_last_updated,json=joinSyncLastUpdated" json:"join_sync_last_updated,omitempty"`
	LeaveSyncStatus      *string                `protobuf:"bytes,155,opt,name=leave_sync_status,json=leaveSyncStatus" json:"leave_sync_status,omitempty"`
	LeaveSyncLastUpdated *string                `protobuf:"bytes,156,opt,name=leave_sync_last_updated,json=leaveSyncLastUpdated" json:"leave_sync_last_updated,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList) Reset() {
	*x = NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList{}
	mi := &file_rpd_ni_evpn_render_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList) ProtoMessage() {
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_evpn_render_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList) Descriptor() ([]byte, []int) {
	return file_rpd_ni_evpn_render_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 3, 0}
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList) GetEsi() string {
	if x != nil && x.Esi != nil {
		return *x.Esi
	}
	return ""
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList) GetLocalIntfName() string {
	if x != nil && x.LocalIntfName != nil {
		return *x.LocalIntfName
	}
	return ""
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList) GetJoinSyncStatus() string {
	if x != nil && x.JoinSyncStatus != nil {
		return *x.JoinSyncStatus
	}
	return ""
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList) GetJoinSyncLastUpdated() string {
	if x != nil && x.JoinSyncLastUpdated != nil {
		return *x.JoinSyncLastUpdated
	}
	return ""
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList) GetLeaveSyncStatus() string {
	if x != nil && x.LeaveSyncStatus != nil {
		return *x.LeaveSyncStatus
	}
	return ""
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList) GetLeaveSyncLastUpdated() string {
	if x != nil && x.LeaveSyncLastUpdated != nil {
		return *x.LeaveSyncLastUpdated
	}
	return ""
}

type NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IpAddress     *string                `protobuf:"bytes,71,opt,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
	Mode          *string                `protobuf:"bytes,72,opt,name=mode" json:"mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList) Reset() {
	*x = NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList{}
	mi := &file_rpd_ni_evpn_render_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList) ProtoMessage() {
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_evpn_render_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList) Descriptor() ([]byte, []int) {
	return file_rpd_ni_evpn_render_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 4, 0}
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList) GetIpAddress() string {
	if x != nil && x.IpAddress != nil {
		return *x.IpAddress
	}
	return ""
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList) GetMode() string {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return ""
}

type NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList struct {
	state         protoimpl.MessageState                                                                                                     `protogen:"open.v1"`
	VniId         *uint32                                                                                                                    `protobuf:"varint,51,opt,name=vni_id,json=vniId" json:"vni_id,omitempty"`
	Nexthops      []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList `protobuf:"bytes,171,rep,name=nexthops" json:"nexthops,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList) Reset() {
	*x = NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList{}
	mi := &file_rpd_ni_evpn_render_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList) ProtoMessage() {
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_evpn_render_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList) Descriptor() ([]byte, []int) {
	return file_rpd_ni_evpn_render_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 5, 0}
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList) GetVniId() uint32 {
	if x != nil && x.VniId != nil {
		return *x.VniId
	}
	return 0
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList) GetNexthops() []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList {
	if x != nil {
		return x.Nexthops
	}
	return nil
}

type NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	NexthopIndex     *uint32                `protobuf:"varint,72,opt,name=nexthop_index,json=nexthopIndex" json:"nexthop_index,omitempty"`
	VniId            *uint32                `protobuf:"varint,71,opt,name=vni_id,json=vniId" json:"vni_id,omitempty"`
	Interface        *string                `protobuf:"bytes,73,opt,name=interface" json:"interface,omitempty"`
	ReplicatorIp     *string                `protobuf:"bytes,74,opt,name=replicator_ip,json=replicatorIp" json:"replicator_ip,omitempty"`
	IsDesignatedNode *bool                  `protobuf:"varint,75,opt,name=is_designated_node,json=isDesignatedNode" json:"is_designated_node,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList) Reset() {
	*x = NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList{}
	mi := &file_rpd_ni_evpn_render_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList) ProtoMessage() {
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList) ProtoReflect() protoreflect.Message {
	mi := &file_rpd_ni_evpn_render_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList.ProtoReflect.Descriptor instead.
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList) Descriptor() ([]byte, []int) {
	return file_rpd_ni_evpn_render_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 5, 0, 0}
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList) GetNexthopIndex() uint32 {
	if x != nil && x.NexthopIndex != nil {
		return *x.NexthopIndex
	}
	return 0
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList) GetVniId() uint32 {
	if x != nil && x.VniId != nil {
		return *x.VniId
	}
	return 0
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList) GetInterface() string {
	if x != nil && x.Interface != nil {
		return *x.Interface
	}
	return ""
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList) GetReplicatorIp() string {
	if x != nil && x.ReplicatorIp != nil {
		return *x.ReplicatorIp
	}
	return ""
}

func (x *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList) GetIsDesignatedNode() bool {
	if x != nil && x.IsDesignatedNode != nil {
		return *x.IsDesignatedNode
	}
	return false
}

var file_rpd_ni_evpn_render_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*NetworkInstancesEvpn)(nil),
		Field:         112,
		Name:          "jnpr_network_instances_evpn_ext",
		Tag:           "bytes,112,opt,name=jnpr_network_instances_evpn_ext",
		Filename:      "rpd_ni_evpn_render.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional network_instances_evpn jnpr_network_instances_evpn_ext = 112;
	E_JnprNetworkInstancesEvpnExt = &file_rpd_ni_evpn_render_proto_extTypes[0]
)

var File_rpd_ni_evpn_render_proto protoreflect.FileDescriptor

var file_rpd_ni_evpn_render_proto_rawDesc = string([]byte{
	0x0a, 0x18, 0x72, 0x70, 0x64, 0x5f, 0x6e, 0x69, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x72, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xb4, 0x21, 0x0a, 0x16, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x12, 0x59, 0x0a, 0x10, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x97,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0xbe, 0x20, 0x0a, 0x15, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82,
	0x40, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x1a, 0xac, 0x1f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x67, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x1a, 0xb0, 0x1e, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x69, 0x0a, 0x04, 0x65, 0x76, 0x70, 0x6e, 0x18, 0x97, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x65, 0x76, 0x70, 0x6e,
	0x1a, 0xb3, 0x1d, 0x0a, 0x09, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6e,
	0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x5f, 0x75, 0x70, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e,
	0x75, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x55, 0x70, 0x12, 0x2c,
	0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x72, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x49,
	0x72, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x15,
	0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x72, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x5f, 0x75, 0x70, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6e, 0x75, 0x6d,
	0x49, 0x72, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x55, 0x70, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x63, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x12, 0x2e, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x76, 0x34, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x4d, 0x61, 0x63, 0x49, 0x70, 0x56, 0x34, 0x12, 0x2e, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x76, 0x36, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x4d, 0x61, 0x63, 0x49, 0x70, 0x56, 0x36, 0x12, 0x2d, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x72, 0x62, 0x5f, 0x6d, 0x61, 0x63, 0x73, 0x18, 0x3e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49,
	0x72, 0x62, 0x4d, 0x61, 0x63, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x85,
	0x01, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x98, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x0e, 0x69, 0x72, 0x62, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x99, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x68, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x65, 0x76, 0x70,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x69, 0x72, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x69, 0x72, 0x62, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x73, 0x0a, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x9a, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x65, 0x76, 0x70,
	0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x75,
	0x0a, 0x05, 0x73, 0x67, 0x5f, 0x64, 0x62, 0x18, 0x9c, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5f,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x67, 0x5f, 0x64, 0x62, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x04, 0x73, 0x67, 0x44, 0x62, 0x12, 0x96, 0x01, 0x0a, 0x10, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x9b, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x6a, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x65, 0x76,
	0x70, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xa2,
	0x01, 0x0a, 0x14, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6e,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x13,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x6a, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x73, 0x69, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x65, 0x73, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a,
	0x97, 0x01, 0x0a, 0x13, 0x69, 0x72, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x65, 0x73, 0x69, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x45,
	0x73, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x3f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x33,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6c, 0x33, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0xf7, 0x02, 0x0a, 0x09, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82,
	0x40, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x70, 0x65, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x39, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x49,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14,
	0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3d,
	0x0a, 0x1b, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x4b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x18, 0x6e, 0x75, 0x6d, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x4c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x4d, 0x61, 0x63, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x69,
	0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x6e, 0x75, 0x6d, 0x4d, 0x61, 0x63, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x43,
	0x0a, 0x1e, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x4e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6e, 0x75, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x1a, 0x91, 0x05, 0x0a, 0x0a, 0x73, 0x67, 0x5f, 0x64, 0x62, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x74,
	0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x54, 0x61, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x65, 0x73, 0x69, 0x5f, 0x66, 0x61, 0x6e, 0x6f, 0x75, 0x74, 0x18, 0x4a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x73, 0x69, 0x46, 0x61, 0x6e, 0x6f,
	0x75, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x66, 0x61, 0x6e, 0x6f, 0x75, 0x74, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x61, 0x6e, 0x6f, 0x75, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x66, 0x61, 0x6e, 0x6f, 0x75, 0x74, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x61, 0x6e, 0x6f, 0x75, 0x74,
	0x12, 0x89, 0x01, 0x0a, 0x08, 0x73, 0x67, 0x64, 0x62, 0x5f, 0x65, 0x73, 0x69, 0x18, 0x97, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x67, 0x5f, 0x64, 0x62,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x73, 0x67, 0x64, 0x62, 0x5f, 0x65, 0x73, 0x69, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x07, 0x73, 0x67, 0x64, 0x62, 0x45, 0x73, 0x69, 0x1a, 0x98, 0x02, 0x0a,
	0x0d, 0x73, 0x67, 0x64, 0x62, 0x5f, 0x65, 0x73, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x03, 0x65, 0x73, 0x69, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40,
	0x02, 0x08, 0x01, 0x52, 0x03, 0x65, 0x73, 0x69, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x66, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6a, 0x6f,
	0x69, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x16,
	0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6a,
	0x6f, 0x69, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6c, 0x65, 0x61, 0x76, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x36, 0x0a, 0x17, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x9c, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x4c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x1a, 0xe9, 0x03, 0x0a, 0x15, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x03, 0x65, 0x73, 0x69, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05,
	0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x03, 0x65, 0x73, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x66,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x49, 0x6e, 0x74, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x4a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x66,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x66, 0x5f, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18,
	0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x66, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x65,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x12, 0x97, 0x01,
	0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x18, 0x97, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x79, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x65,
	0x76, 0x70, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x65, 0x1a, 0x4a, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x70, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0a, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82,
	0x40, 0x02, 0x08, 0x01, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x1a, 0xf0, 0x04, 0x0a, 0x19, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x09, 0x6c, 0x32, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0xab, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x7d, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x65,
	0x76, 0x70, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x32, 0x5f, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x6c, 0x32, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x1a, 0xa0, 0x03, 0x0a, 0x0e, 0x6c, 0x32, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x06, 0x76, 0x6e, 0x69, 0x5f, 0x69, 0x64,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x05, 0x76,
	0x6e, 0x69, 0x49, 0x64, 0x12, 0xa9, 0x01, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70,
	0x73, 0x18, 0xab, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x8b, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x65, 0x76,
	0x70, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6c, 0x32, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70,
	0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x73,
	0x1a, 0xc3, 0x01, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01,
	0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x15,
	0x0a, 0x06, 0x76, 0x6e, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x6e, 0x69, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x70, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x64,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x4b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x3a, 0x76, 0x0a, 0x1f, 0x6a, 0x6e, 0x70, 0x72, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x65, 0x78, 0x74, 0x12, 0x17, 0x2e, 0x4a, 0x75, 0x6e, 0x69,
	0x70, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x73, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x65, 0x76, 0x70,
	0x6e, 0x52, 0x1b, 0x6a, 0x6e, 0x70, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x76, 0x70, 0x6e, 0x45, 0x78, 0x74, 0x42, 0x1d,
	0x5a, 0x1b, 0x2e, 0x2f, 0x6a, 0x75, 0x6e, 0x6f, 0x73, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
})

var (
	file_rpd_ni_evpn_render_proto_rawDescOnce sync.Once
	file_rpd_ni_evpn_render_proto_rawDescData []byte
)

func file_rpd_ni_evpn_render_proto_rawDescGZIP() []byte {
	file_rpd_ni_evpn_render_proto_rawDescOnce.Do(func() {
		file_rpd_ni_evpn_render_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_rpd_ni_evpn_render_proto_rawDesc), len(file_rpd_ni_evpn_render_proto_rawDesc)))
	})
	return file_rpd_ni_evpn_render_proto_rawDescData
}

var file_rpd_ni_evpn_render_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_rpd_ni_evpn_render_proto_goTypes = []any{
	(*NetworkInstancesEvpn)(nil),                                                                                                    // 0: network_instances_evpn
	(*NetworkInstancesEvpnNetworkInstanceList)(nil),                                                                                 // 1: network_instances_evpn.network_instance_list
	(*NetworkInstancesEvpnNetworkInstanceListProtocolsType)(nil),                                                                    // 2: network_instances_evpn.network_instance_list.protocols_type
	(*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType)(nil),                                                        // 3: network_instances_evpn.network_instance_list.protocols_type.protocol_type
	(*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType)(nil),                                                // 4: network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type
	(*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList)(nil),                                  // 5: network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.interfaces_list
	(*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList)(nil),                               // 6: network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.irb_interfaces_list
	(*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList)(nil),                                        // 7: network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.peer_list
	(*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList)(nil),                                        // 8: network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.sg_db_list
	(*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList)(nil),                             // 9: network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.ethernet_segment_list
	(*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType)(nil),                         // 10: network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.assisted_replication_type
	(*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList)(nil),                             // 11: network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.sg_db_list.sgdb_esi_list
	(*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList)(nil),                 // 12: network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.ethernet_segment_list.remote_pe_list
	(*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList)(nil),             // 13: network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.assisted_replication_type.l2_domain_list
	(*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList)(nil), // 14: network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.assisted_replication_type.l2_domain_list.nexthops_list
	(*JuniperNetworksSensors)(nil), // 15: JuniperNetworksSensors
}
var file_rpd_ni_evpn_render_proto_depIdxs = []int32{
	1,  // 0: network_instances_evpn.network_instance:type_name -> network_instances_evpn.network_instance_list
	2,  // 1: network_instances_evpn.network_instance_list.protocols:type_name -> network_instances_evpn.network_instance_list.protocols_type
	3,  // 2: network_instances_evpn.network_instance_list.protocols_type.protocol:type_name -> network_instances_evpn.network_instance_list.protocols_type.protocol_type
	4,  // 3: network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn:type_name -> network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type
	5,  // 4: network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.interfaces:type_name -> network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.interfaces_list
	6,  // 5: network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.irb_interfaces:type_name -> network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.irb_interfaces_list
	7,  // 6: network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.peer:type_name -> network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.peer_list
	8,  // 7: network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.sg_db:type_name -> network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.sg_db_list
	9,  // 8: network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.ethernet_segment:type_name -> network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.ethernet_segment_list
	10, // 9: network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.assisted_replication:type_name -> network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.assisted_replication_type
	11, // 10: network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.sg_db_list.sgdb_esi:type_name -> network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.sg_db_list.sgdb_esi_list
	12, // 11: network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.ethernet_segment_list.remote_pe:type_name -> network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.ethernet_segment_list.remote_pe_list
	13, // 12: network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.assisted_replication_type.l2_domain:type_name -> network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.assisted_replication_type.l2_domain_list
	14, // 13: network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.assisted_replication_type.l2_domain_list.nexthops:type_name -> network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.assisted_replication_type.l2_domain_list.nexthops_list
	15, // 14: jnpr_network_instances_evpn_ext:extendee -> JuniperNetworksSensors
	0,  // 15: jnpr_network_instances_evpn_ext:type_name -> network_instances_evpn
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	15, // [15:16] is the sub-list for extension type_name
	14, // [14:15] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_rpd_ni_evpn_render_proto_init() }
func file_rpd_ni_evpn_render_proto_init() {
	if File_rpd_ni_evpn_render_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_rpd_ni_evpn_render_proto_rawDesc), len(file_rpd_ni_evpn_render_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_rpd_ni_evpn_render_proto_goTypes,
		DependencyIndexes: file_rpd_ni_evpn_render_proto_depIdxs,
		MessageInfos:      file_rpd_ni_evpn_render_proto_msgTypes,
		ExtensionInfos:    file_rpd_ni_evpn_render_proto_extTypes,
	}.Build()
	File_rpd_ni_evpn_render_proto = out.File
	file_rpd_ni_evpn_render_proto_goTypes = nil
	file_rpd_ni_evpn_render_proto_depIdxs = nil
}
